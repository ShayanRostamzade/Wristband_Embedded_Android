
Medical_Wrist_Band.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ad3c  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001a24  0800ae50  0800ae50  0001ae50  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c874  0800c874  000201ec  2**0
                  CONTENTS
  4 .ARM          00000000  0800c874  0800c874  000201ec  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800c874  0800c874  000201ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c874  0800c874  0001c874  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c878  0800c878  0001c878  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  20000000  0800c87c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001b2c  200001ec  0800ca68  000201ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001d18  0800ca68  00021d18  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014a6e  00000000  00000000  00020215  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002e1c  00000000  00000000  00034c83  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012e0  00000000  00000000  00037aa0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000011e0  00000000  00000000  00038d80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a556  00000000  00000000  00039f60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015b93  00000000  00000000  000544b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00094a5c  00000000  00000000  0006a049  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000feaa5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006254  00000000  00000000  000feaf8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001ec 	.word	0x200001ec
 800012c:	00000000 	.word	0x00000000
 8000130:	0800ae34 	.word	0x0800ae34

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001f0 	.word	0x200001f0
 800014c:	0800ae34 	.word	0x0800ae34

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <__aeabi_frsub>:
 8000b28:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b2c:	e002      	b.n	8000b34 <__addsf3>
 8000b2e:	bf00      	nop

08000b30 <__aeabi_fsub>:
 8000b30:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b34 <__addsf3>:
 8000b34:	0042      	lsls	r2, r0, #1
 8000b36:	bf1f      	itttt	ne
 8000b38:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b3c:	ea92 0f03 	teqne	r2, r3
 8000b40:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b44:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b48:	d06a      	beq.n	8000c20 <__addsf3+0xec>
 8000b4a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b4e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b52:	bfc1      	itttt	gt
 8000b54:	18d2      	addgt	r2, r2, r3
 8000b56:	4041      	eorgt	r1, r0
 8000b58:	4048      	eorgt	r0, r1
 8000b5a:	4041      	eorgt	r1, r0
 8000b5c:	bfb8      	it	lt
 8000b5e:	425b      	neglt	r3, r3
 8000b60:	2b19      	cmp	r3, #25
 8000b62:	bf88      	it	hi
 8000b64:	4770      	bxhi	lr
 8000b66:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b6a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b6e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b7e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b82:	bf18      	it	ne
 8000b84:	4249      	negne	r1, r1
 8000b86:	ea92 0f03 	teq	r2, r3
 8000b8a:	d03f      	beq.n	8000c0c <__addsf3+0xd8>
 8000b8c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b90:	fa41 fc03 	asr.w	ip, r1, r3
 8000b94:	eb10 000c 	adds.w	r0, r0, ip
 8000b98:	f1c3 0320 	rsb	r3, r3, #32
 8000b9c:	fa01 f103 	lsl.w	r1, r1, r3
 8000ba0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ba4:	d502      	bpl.n	8000bac <__addsf3+0x78>
 8000ba6:	4249      	negs	r1, r1
 8000ba8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bac:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bb0:	d313      	bcc.n	8000bda <__addsf3+0xa6>
 8000bb2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bb6:	d306      	bcc.n	8000bc6 <__addsf3+0x92>
 8000bb8:	0840      	lsrs	r0, r0, #1
 8000bba:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bbe:	f102 0201 	add.w	r2, r2, #1
 8000bc2:	2afe      	cmp	r2, #254	; 0xfe
 8000bc4:	d251      	bcs.n	8000c6a <__addsf3+0x136>
 8000bc6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bce:	bf08      	it	eq
 8000bd0:	f020 0001 	biceq.w	r0, r0, #1
 8000bd4:	ea40 0003 	orr.w	r0, r0, r3
 8000bd8:	4770      	bx	lr
 8000bda:	0049      	lsls	r1, r1, #1
 8000bdc:	eb40 0000 	adc.w	r0, r0, r0
 8000be0:	3a01      	subs	r2, #1
 8000be2:	bf28      	it	cs
 8000be4:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000be8:	d2ed      	bcs.n	8000bc6 <__addsf3+0x92>
 8000bea:	fab0 fc80 	clz	ip, r0
 8000bee:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bf2:	ebb2 020c 	subs.w	r2, r2, ip
 8000bf6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bfa:	bfaa      	itet	ge
 8000bfc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c00:	4252      	neglt	r2, r2
 8000c02:	4318      	orrge	r0, r3
 8000c04:	bfbc      	itt	lt
 8000c06:	40d0      	lsrlt	r0, r2
 8000c08:	4318      	orrlt	r0, r3
 8000c0a:	4770      	bx	lr
 8000c0c:	f092 0f00 	teq	r2, #0
 8000c10:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c14:	bf06      	itte	eq
 8000c16:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c1a:	3201      	addeq	r2, #1
 8000c1c:	3b01      	subne	r3, #1
 8000c1e:	e7b5      	b.n	8000b8c <__addsf3+0x58>
 8000c20:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c24:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c28:	bf18      	it	ne
 8000c2a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c2e:	d021      	beq.n	8000c74 <__addsf3+0x140>
 8000c30:	ea92 0f03 	teq	r2, r3
 8000c34:	d004      	beq.n	8000c40 <__addsf3+0x10c>
 8000c36:	f092 0f00 	teq	r2, #0
 8000c3a:	bf08      	it	eq
 8000c3c:	4608      	moveq	r0, r1
 8000c3e:	4770      	bx	lr
 8000c40:	ea90 0f01 	teq	r0, r1
 8000c44:	bf1c      	itt	ne
 8000c46:	2000      	movne	r0, #0
 8000c48:	4770      	bxne	lr
 8000c4a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c4e:	d104      	bne.n	8000c5a <__addsf3+0x126>
 8000c50:	0040      	lsls	r0, r0, #1
 8000c52:	bf28      	it	cs
 8000c54:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c58:	4770      	bx	lr
 8000c5a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c5e:	bf3c      	itt	cc
 8000c60:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c64:	4770      	bxcc	lr
 8000c66:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c6a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c6e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c72:	4770      	bx	lr
 8000c74:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c78:	bf16      	itet	ne
 8000c7a:	4608      	movne	r0, r1
 8000c7c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c80:	4601      	movne	r1, r0
 8000c82:	0242      	lsls	r2, r0, #9
 8000c84:	bf06      	itte	eq
 8000c86:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c8a:	ea90 0f01 	teqeq	r0, r1
 8000c8e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c92:	4770      	bx	lr

08000c94 <__aeabi_ui2f>:
 8000c94:	f04f 0300 	mov.w	r3, #0
 8000c98:	e004      	b.n	8000ca4 <__aeabi_i2f+0x8>
 8000c9a:	bf00      	nop

08000c9c <__aeabi_i2f>:
 8000c9c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ca0:	bf48      	it	mi
 8000ca2:	4240      	negmi	r0, r0
 8000ca4:	ea5f 0c00 	movs.w	ip, r0
 8000ca8:	bf08      	it	eq
 8000caa:	4770      	bxeq	lr
 8000cac:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cb0:	4601      	mov	r1, r0
 8000cb2:	f04f 0000 	mov.w	r0, #0
 8000cb6:	e01c      	b.n	8000cf2 <__aeabi_l2f+0x2a>

08000cb8 <__aeabi_ul2f>:
 8000cb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f04f 0300 	mov.w	r3, #0
 8000cc4:	e00a      	b.n	8000cdc <__aeabi_l2f+0x14>
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_l2f>:
 8000cc8:	ea50 0201 	orrs.w	r2, r0, r1
 8000ccc:	bf08      	it	eq
 8000cce:	4770      	bxeq	lr
 8000cd0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cd4:	d502      	bpl.n	8000cdc <__aeabi_l2f+0x14>
 8000cd6:	4240      	negs	r0, r0
 8000cd8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cdc:	ea5f 0c01 	movs.w	ip, r1
 8000ce0:	bf02      	ittt	eq
 8000ce2:	4684      	moveq	ip, r0
 8000ce4:	4601      	moveq	r1, r0
 8000ce6:	2000      	moveq	r0, #0
 8000ce8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cec:	bf08      	it	eq
 8000cee:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cf2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cf6:	fabc f28c 	clz	r2, ip
 8000cfa:	3a08      	subs	r2, #8
 8000cfc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d00:	db10      	blt.n	8000d24 <__aeabi_l2f+0x5c>
 8000d02:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d06:	4463      	add	r3, ip
 8000d08:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d0c:	f1c2 0220 	rsb	r2, r2, #32
 8000d10:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d14:	fa20 f202 	lsr.w	r2, r0, r2
 8000d18:	eb43 0002 	adc.w	r0, r3, r2
 8000d1c:	bf08      	it	eq
 8000d1e:	f020 0001 	biceq.w	r0, r0, #1
 8000d22:	4770      	bx	lr
 8000d24:	f102 0220 	add.w	r2, r2, #32
 8000d28:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d2c:	f1c2 0220 	rsb	r2, r2, #32
 8000d30:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d34:	fa21 f202 	lsr.w	r2, r1, r2
 8000d38:	eb43 0002 	adc.w	r0, r3, r2
 8000d3c:	bf08      	it	eq
 8000d3e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d42:	4770      	bx	lr

08000d44 <__aeabi_fmul>:
 8000d44:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d48:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d4c:	bf1e      	ittt	ne
 8000d4e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d52:	ea92 0f0c 	teqne	r2, ip
 8000d56:	ea93 0f0c 	teqne	r3, ip
 8000d5a:	d06f      	beq.n	8000e3c <__aeabi_fmul+0xf8>
 8000d5c:	441a      	add	r2, r3
 8000d5e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d62:	0240      	lsls	r0, r0, #9
 8000d64:	bf18      	it	ne
 8000d66:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d6a:	d01e      	beq.n	8000daa <__aeabi_fmul+0x66>
 8000d6c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d70:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d74:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d78:	fba0 3101 	umull	r3, r1, r0, r1
 8000d7c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d80:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d84:	bf3e      	ittt	cc
 8000d86:	0049      	lslcc	r1, r1, #1
 8000d88:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d8c:	005b      	lslcc	r3, r3, #1
 8000d8e:	ea40 0001 	orr.w	r0, r0, r1
 8000d92:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d96:	2afd      	cmp	r2, #253	; 0xfd
 8000d98:	d81d      	bhi.n	8000dd6 <__aeabi_fmul+0x92>
 8000d9a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d9e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000da2:	bf08      	it	eq
 8000da4:	f020 0001 	biceq.w	r0, r0, #1
 8000da8:	4770      	bx	lr
 8000daa:	f090 0f00 	teq	r0, #0
 8000dae:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000db2:	bf08      	it	eq
 8000db4:	0249      	lsleq	r1, r1, #9
 8000db6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dba:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dbe:	3a7f      	subs	r2, #127	; 0x7f
 8000dc0:	bfc2      	ittt	gt
 8000dc2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000dc6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dca:	4770      	bxgt	lr
 8000dcc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dd0:	f04f 0300 	mov.w	r3, #0
 8000dd4:	3a01      	subs	r2, #1
 8000dd6:	dc5d      	bgt.n	8000e94 <__aeabi_fmul+0x150>
 8000dd8:	f112 0f19 	cmn.w	r2, #25
 8000ddc:	bfdc      	itt	le
 8000dde:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000de2:	4770      	bxle	lr
 8000de4:	f1c2 0200 	rsb	r2, r2, #0
 8000de8:	0041      	lsls	r1, r0, #1
 8000dea:	fa21 f102 	lsr.w	r1, r1, r2
 8000dee:	f1c2 0220 	rsb	r2, r2, #32
 8000df2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000df6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dfa:	f140 0000 	adc.w	r0, r0, #0
 8000dfe:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e02:	bf08      	it	eq
 8000e04:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e08:	4770      	bx	lr
 8000e0a:	f092 0f00 	teq	r2, #0
 8000e0e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e12:	bf02      	ittt	eq
 8000e14:	0040      	lsleq	r0, r0, #1
 8000e16:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e1a:	3a01      	subeq	r2, #1
 8000e1c:	d0f9      	beq.n	8000e12 <__aeabi_fmul+0xce>
 8000e1e:	ea40 000c 	orr.w	r0, r0, ip
 8000e22:	f093 0f00 	teq	r3, #0
 8000e26:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e2a:	bf02      	ittt	eq
 8000e2c:	0049      	lsleq	r1, r1, #1
 8000e2e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e32:	3b01      	subeq	r3, #1
 8000e34:	d0f9      	beq.n	8000e2a <__aeabi_fmul+0xe6>
 8000e36:	ea41 010c 	orr.w	r1, r1, ip
 8000e3a:	e78f      	b.n	8000d5c <__aeabi_fmul+0x18>
 8000e3c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e40:	ea92 0f0c 	teq	r2, ip
 8000e44:	bf18      	it	ne
 8000e46:	ea93 0f0c 	teqne	r3, ip
 8000e4a:	d00a      	beq.n	8000e62 <__aeabi_fmul+0x11e>
 8000e4c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e50:	bf18      	it	ne
 8000e52:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e56:	d1d8      	bne.n	8000e0a <__aeabi_fmul+0xc6>
 8000e58:	ea80 0001 	eor.w	r0, r0, r1
 8000e5c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e60:	4770      	bx	lr
 8000e62:	f090 0f00 	teq	r0, #0
 8000e66:	bf17      	itett	ne
 8000e68:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e6c:	4608      	moveq	r0, r1
 8000e6e:	f091 0f00 	teqne	r1, #0
 8000e72:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e76:	d014      	beq.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e78:	ea92 0f0c 	teq	r2, ip
 8000e7c:	d101      	bne.n	8000e82 <__aeabi_fmul+0x13e>
 8000e7e:	0242      	lsls	r2, r0, #9
 8000e80:	d10f      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e82:	ea93 0f0c 	teq	r3, ip
 8000e86:	d103      	bne.n	8000e90 <__aeabi_fmul+0x14c>
 8000e88:	024b      	lsls	r3, r1, #9
 8000e8a:	bf18      	it	ne
 8000e8c:	4608      	movne	r0, r1
 8000e8e:	d108      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e90:	ea80 0001 	eor.w	r0, r0, r1
 8000e94:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e98:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e9c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ea0:	4770      	bx	lr
 8000ea2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ea6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eaa:	4770      	bx	lr

08000eac <__aeabi_fdiv>:
 8000eac:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000eb0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000eb4:	bf1e      	ittt	ne
 8000eb6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eba:	ea92 0f0c 	teqne	r2, ip
 8000ebe:	ea93 0f0c 	teqne	r3, ip
 8000ec2:	d069      	beq.n	8000f98 <__aeabi_fdiv+0xec>
 8000ec4:	eba2 0203 	sub.w	r2, r2, r3
 8000ec8:	ea80 0c01 	eor.w	ip, r0, r1
 8000ecc:	0249      	lsls	r1, r1, #9
 8000ece:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ed2:	d037      	beq.n	8000f44 <__aeabi_fdiv+0x98>
 8000ed4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ed8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000edc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ee0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ee4:	428b      	cmp	r3, r1
 8000ee6:	bf38      	it	cc
 8000ee8:	005b      	lslcc	r3, r3, #1
 8000eea:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000eee:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000ef2:	428b      	cmp	r3, r1
 8000ef4:	bf24      	itt	cs
 8000ef6:	1a5b      	subcs	r3, r3, r1
 8000ef8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000efc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f00:	bf24      	itt	cs
 8000f02:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f06:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f0a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f0e:	bf24      	itt	cs
 8000f10:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f14:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f18:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f1c:	bf24      	itt	cs
 8000f1e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f22:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f26:	011b      	lsls	r3, r3, #4
 8000f28:	bf18      	it	ne
 8000f2a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f2e:	d1e0      	bne.n	8000ef2 <__aeabi_fdiv+0x46>
 8000f30:	2afd      	cmp	r2, #253	; 0xfd
 8000f32:	f63f af50 	bhi.w	8000dd6 <__aeabi_fmul+0x92>
 8000f36:	428b      	cmp	r3, r1
 8000f38:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f3c:	bf08      	it	eq
 8000f3e:	f020 0001 	biceq.w	r0, r0, #1
 8000f42:	4770      	bx	lr
 8000f44:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f48:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f4c:	327f      	adds	r2, #127	; 0x7f
 8000f4e:	bfc2      	ittt	gt
 8000f50:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f54:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f58:	4770      	bxgt	lr
 8000f5a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f5e:	f04f 0300 	mov.w	r3, #0
 8000f62:	3a01      	subs	r2, #1
 8000f64:	e737      	b.n	8000dd6 <__aeabi_fmul+0x92>
 8000f66:	f092 0f00 	teq	r2, #0
 8000f6a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f6e:	bf02      	ittt	eq
 8000f70:	0040      	lsleq	r0, r0, #1
 8000f72:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f76:	3a01      	subeq	r2, #1
 8000f78:	d0f9      	beq.n	8000f6e <__aeabi_fdiv+0xc2>
 8000f7a:	ea40 000c 	orr.w	r0, r0, ip
 8000f7e:	f093 0f00 	teq	r3, #0
 8000f82:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f86:	bf02      	ittt	eq
 8000f88:	0049      	lsleq	r1, r1, #1
 8000f8a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f8e:	3b01      	subeq	r3, #1
 8000f90:	d0f9      	beq.n	8000f86 <__aeabi_fdiv+0xda>
 8000f92:	ea41 010c 	orr.w	r1, r1, ip
 8000f96:	e795      	b.n	8000ec4 <__aeabi_fdiv+0x18>
 8000f98:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f9c:	ea92 0f0c 	teq	r2, ip
 8000fa0:	d108      	bne.n	8000fb4 <__aeabi_fdiv+0x108>
 8000fa2:	0242      	lsls	r2, r0, #9
 8000fa4:	f47f af7d 	bne.w	8000ea2 <__aeabi_fmul+0x15e>
 8000fa8:	ea93 0f0c 	teq	r3, ip
 8000fac:	f47f af70 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fb0:	4608      	mov	r0, r1
 8000fb2:	e776      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fb4:	ea93 0f0c 	teq	r3, ip
 8000fb8:	d104      	bne.n	8000fc4 <__aeabi_fdiv+0x118>
 8000fba:	024b      	lsls	r3, r1, #9
 8000fbc:	f43f af4c 	beq.w	8000e58 <__aeabi_fmul+0x114>
 8000fc0:	4608      	mov	r0, r1
 8000fc2:	e76e      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fc4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000fc8:	bf18      	it	ne
 8000fca:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000fce:	d1ca      	bne.n	8000f66 <__aeabi_fdiv+0xba>
 8000fd0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000fd4:	f47f af5c 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fd8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000fdc:	f47f af3c 	bne.w	8000e58 <__aeabi_fmul+0x114>
 8000fe0:	e75f      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fe2:	bf00      	nop

08000fe4 <__gesf2>:
 8000fe4:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000fe8:	e006      	b.n	8000ff8 <__cmpsf2+0x4>
 8000fea:	bf00      	nop

08000fec <__lesf2>:
 8000fec:	f04f 0c01 	mov.w	ip, #1
 8000ff0:	e002      	b.n	8000ff8 <__cmpsf2+0x4>
 8000ff2:	bf00      	nop

08000ff4 <__cmpsf2>:
 8000ff4:	f04f 0c01 	mov.w	ip, #1
 8000ff8:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000ffc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001000:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001004:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001008:	bf18      	it	ne
 800100a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800100e:	d011      	beq.n	8001034 <__cmpsf2+0x40>
 8001010:	b001      	add	sp, #4
 8001012:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001016:	bf18      	it	ne
 8001018:	ea90 0f01 	teqne	r0, r1
 800101c:	bf58      	it	pl
 800101e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001022:	bf88      	it	hi
 8001024:	17c8      	asrhi	r0, r1, #31
 8001026:	bf38      	it	cc
 8001028:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800102c:	bf18      	it	ne
 800102e:	f040 0001 	orrne.w	r0, r0, #1
 8001032:	4770      	bx	lr
 8001034:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001038:	d102      	bne.n	8001040 <__cmpsf2+0x4c>
 800103a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800103e:	d105      	bne.n	800104c <__cmpsf2+0x58>
 8001040:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001044:	d1e4      	bne.n	8001010 <__cmpsf2+0x1c>
 8001046:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800104a:	d0e1      	beq.n	8001010 <__cmpsf2+0x1c>
 800104c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop

08001054 <__aeabi_cfrcmple>:
 8001054:	4684      	mov	ip, r0
 8001056:	4608      	mov	r0, r1
 8001058:	4661      	mov	r1, ip
 800105a:	e7ff      	b.n	800105c <__aeabi_cfcmpeq>

0800105c <__aeabi_cfcmpeq>:
 800105c:	b50f      	push	{r0, r1, r2, r3, lr}
 800105e:	f7ff ffc9 	bl	8000ff4 <__cmpsf2>
 8001062:	2800      	cmp	r0, #0
 8001064:	bf48      	it	mi
 8001066:	f110 0f00 	cmnmi.w	r0, #0
 800106a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800106c <__aeabi_fcmpeq>:
 800106c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001070:	f7ff fff4 	bl	800105c <__aeabi_cfcmpeq>
 8001074:	bf0c      	ite	eq
 8001076:	2001      	moveq	r0, #1
 8001078:	2000      	movne	r0, #0
 800107a:	f85d fb08 	ldr.w	pc, [sp], #8
 800107e:	bf00      	nop

08001080 <__aeabi_fcmplt>:
 8001080:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001084:	f7ff ffea 	bl	800105c <__aeabi_cfcmpeq>
 8001088:	bf34      	ite	cc
 800108a:	2001      	movcc	r0, #1
 800108c:	2000      	movcs	r0, #0
 800108e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001092:	bf00      	nop

08001094 <__aeabi_fcmple>:
 8001094:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001098:	f7ff ffe0 	bl	800105c <__aeabi_cfcmpeq>
 800109c:	bf94      	ite	ls
 800109e:	2001      	movls	r0, #1
 80010a0:	2000      	movhi	r0, #0
 80010a2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010a6:	bf00      	nop

080010a8 <__aeabi_fcmpge>:
 80010a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ac:	f7ff ffd2 	bl	8001054 <__aeabi_cfrcmple>
 80010b0:	bf94      	ite	ls
 80010b2:	2001      	movls	r0, #1
 80010b4:	2000      	movhi	r0, #0
 80010b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ba:	bf00      	nop

080010bc <__aeabi_fcmpgt>:
 80010bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c0:	f7ff ffc8 	bl	8001054 <__aeabi_cfrcmple>
 80010c4:	bf34      	ite	cc
 80010c6:	2001      	movcc	r0, #1
 80010c8:	2000      	movcs	r0, #0
 80010ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ce:	bf00      	nop

080010d0 <__aeabi_f2iz>:
 80010d0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80010d4:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80010d8:	d30f      	bcc.n	80010fa <__aeabi_f2iz+0x2a>
 80010da:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80010de:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80010e2:	d90d      	bls.n	8001100 <__aeabi_f2iz+0x30>
 80010e4:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80010e8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80010ec:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80010f0:	fa23 f002 	lsr.w	r0, r3, r2
 80010f4:	bf18      	it	ne
 80010f6:	4240      	negne	r0, r0
 80010f8:	4770      	bx	lr
 80010fa:	f04f 0000 	mov.w	r0, #0
 80010fe:	4770      	bx	lr
 8001100:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001104:	d101      	bne.n	800110a <__aeabi_f2iz+0x3a>
 8001106:	0242      	lsls	r2, r0, #9
 8001108:	d105      	bne.n	8001116 <__aeabi_f2iz+0x46>
 800110a:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 800110e:	bf08      	it	eq
 8001110:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001114:	4770      	bx	lr
 8001116:	f04f 0000 	mov.w	r0, #0
 800111a:	4770      	bx	lr

0800111c <Max30102_WriteReg>:
}MAX30102_STATE;

MAX30102_STATE StateMachine;

MAX30102_STATUS Max30102_WriteReg(uint8_t uch_addr, uint8_t uch_data)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b086      	sub	sp, #24
 8001120:	af04      	add	r7, sp, #16
 8001122:	4603      	mov	r3, r0
 8001124:	460a      	mov	r2, r1
 8001126:	71fb      	strb	r3, [r7, #7]
 8001128:	4613      	mov	r3, r2
 800112a:	71bb      	strb	r3, [r7, #6]
	if(HAL_I2C_Mem_Write(i2c_max30102, MAX30102_ADDRESS, uch_addr, 1, &uch_data, 1, I2C_TIMEOUT) == HAL_OK)
 800112c:	4b0b      	ldr	r3, [pc, #44]	; (800115c <Max30102_WriteReg+0x40>)
 800112e:	6818      	ldr	r0, [r3, #0]
 8001130:	79fb      	ldrb	r3, [r7, #7]
 8001132:	b29a      	uxth	r2, r3
 8001134:	2301      	movs	r3, #1
 8001136:	9302      	str	r3, [sp, #8]
 8001138:	2301      	movs	r3, #1
 800113a:	9301      	str	r3, [sp, #4]
 800113c:	1dbb      	adds	r3, r7, #6
 800113e:	9300      	str	r3, [sp, #0]
 8001140:	2301      	movs	r3, #1
 8001142:	21ae      	movs	r1, #174	; 0xae
 8001144:	f004 f836 	bl	80051b4 <HAL_I2C_Mem_Write>
 8001148:	4603      	mov	r3, r0
 800114a:	2b00      	cmp	r3, #0
 800114c:	d101      	bne.n	8001152 <Max30102_WriteReg+0x36>
		return MAX30102_OK;
 800114e:	2301      	movs	r3, #1
 8001150:	e000      	b.n	8001154 <Max30102_WriteReg+0x38>
	return MAX30102_ERROR;
 8001152:	2300      	movs	r3, #0
}
 8001154:	4618      	mov	r0, r3
 8001156:	3708      	adds	r7, #8
 8001158:	46bd      	mov	sp, r7
 800115a:	bd80      	pop	{r7, pc}
 800115c:	200011d4 	.word	0x200011d4

08001160 <Max30102_ReadReg>:

MAX30102_STATUS Max30102_ReadReg(uint8_t uch_addr, uint8_t *puch_data)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b086      	sub	sp, #24
 8001164:	af04      	add	r7, sp, #16
 8001166:	4603      	mov	r3, r0
 8001168:	6039      	str	r1, [r7, #0]
 800116a:	71fb      	strb	r3, [r7, #7]
	if(HAL_I2C_Mem_Read(i2c_max30102, MAX30102_ADDRESS, uch_addr, 1, puch_data, 1, I2C_TIMEOUT) == HAL_OK)
 800116c:	4b0b      	ldr	r3, [pc, #44]	; (800119c <Max30102_ReadReg+0x3c>)
 800116e:	6818      	ldr	r0, [r3, #0]
 8001170:	79fb      	ldrb	r3, [r7, #7]
 8001172:	b29a      	uxth	r2, r3
 8001174:	2301      	movs	r3, #1
 8001176:	9302      	str	r3, [sp, #8]
 8001178:	2301      	movs	r3, #1
 800117a:	9301      	str	r3, [sp, #4]
 800117c:	683b      	ldr	r3, [r7, #0]
 800117e:	9300      	str	r3, [sp, #0]
 8001180:	2301      	movs	r3, #1
 8001182:	21ae      	movs	r1, #174	; 0xae
 8001184:	f004 f910 	bl	80053a8 <HAL_I2C_Mem_Read>
 8001188:	4603      	mov	r3, r0
 800118a:	2b00      	cmp	r3, #0
 800118c:	d101      	bne.n	8001192 <Max30102_ReadReg+0x32>
		return MAX30102_OK;
 800118e:	2301      	movs	r3, #1
 8001190:	e000      	b.n	8001194 <Max30102_ReadReg+0x34>
	return MAX30102_ERROR;
 8001192:	2300      	movs	r3, #0
}
 8001194:	4618      	mov	r0, r3
 8001196:	3708      	adds	r7, #8
 8001198:	46bd      	mov	sp, r7
 800119a:	bd80      	pop	{r7, pc}
 800119c:	200011d4 	.word	0x200011d4

080011a0 <Max30102_WriteRegisterBit>:

MAX30102_STATUS Max30102_WriteRegisterBit(uint8_t Register, uint8_t Bit, uint8_t Value)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b084      	sub	sp, #16
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	4603      	mov	r3, r0
 80011a8:	71fb      	strb	r3, [r7, #7]
 80011aa:	460b      	mov	r3, r1
 80011ac:	71bb      	strb	r3, [r7, #6]
 80011ae:	4613      	mov	r3, r2
 80011b0:	717b      	strb	r3, [r7, #5]
	uint8_t tmp;
	if(MAX30102_OK != Max30102_ReadReg(Register, &tmp))
 80011b2:	f107 020f 	add.w	r2, r7, #15
 80011b6:	79fb      	ldrb	r3, [r7, #7]
 80011b8:	4611      	mov	r1, r2
 80011ba:	4618      	mov	r0, r3
 80011bc:	f7ff ffd0 	bl	8001160 <Max30102_ReadReg>
 80011c0:	4603      	mov	r3, r0
 80011c2:	2b01      	cmp	r3, #1
 80011c4:	d001      	beq.n	80011ca <Max30102_WriteRegisterBit+0x2a>
		return MAX30102_ERROR;
 80011c6:	2300      	movs	r3, #0
 80011c8:	e025      	b.n	8001216 <Max30102_WriteRegisterBit+0x76>
	tmp &= ~(1<<Bit);
 80011ca:	79bb      	ldrb	r3, [r7, #6]
 80011cc:	2201      	movs	r2, #1
 80011ce:	fa02 f303 	lsl.w	r3, r2, r3
 80011d2:	b25b      	sxtb	r3, r3
 80011d4:	43db      	mvns	r3, r3
 80011d6:	b25a      	sxtb	r2, r3
 80011d8:	7bfb      	ldrb	r3, [r7, #15]
 80011da:	b25b      	sxtb	r3, r3
 80011dc:	4013      	ands	r3, r2
 80011de:	b25b      	sxtb	r3, r3
 80011e0:	b2db      	uxtb	r3, r3
 80011e2:	73fb      	strb	r3, [r7, #15]
	tmp |= (Value&0x01)<<Bit;
 80011e4:	797b      	ldrb	r3, [r7, #5]
 80011e6:	f003 0201 	and.w	r2, r3, #1
 80011ea:	79bb      	ldrb	r3, [r7, #6]
 80011ec:	fa02 f303 	lsl.w	r3, r2, r3
 80011f0:	b25a      	sxtb	r2, r3
 80011f2:	7bfb      	ldrb	r3, [r7, #15]
 80011f4:	b25b      	sxtb	r3, r3
 80011f6:	4313      	orrs	r3, r2
 80011f8:	b25b      	sxtb	r3, r3
 80011fa:	b2db      	uxtb	r3, r3
 80011fc:	73fb      	strb	r3, [r7, #15]
	if(MAX30102_OK != Max30102_WriteReg(Register, tmp))
 80011fe:	7bfa      	ldrb	r2, [r7, #15]
 8001200:	79fb      	ldrb	r3, [r7, #7]
 8001202:	4611      	mov	r1, r2
 8001204:	4618      	mov	r0, r3
 8001206:	f7ff ff89 	bl	800111c <Max30102_WriteReg>
 800120a:	4603      	mov	r3, r0
 800120c:	2b01      	cmp	r3, #1
 800120e:	d001      	beq.n	8001214 <Max30102_WriteRegisterBit+0x74>
		return MAX30102_ERROR;
 8001210:	2300      	movs	r3, #0
 8001212:	e000      	b.n	8001216 <Max30102_WriteRegisterBit+0x76>

	return MAX30102_OK;
 8001214:	2301      	movs	r3, #1
}
 8001216:	4618      	mov	r0, r3
 8001218:	3710      	adds	r7, #16
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}
	...

08001220 <Max30102_ReadFifo>:

MAX30102_STATUS Max30102_ReadFifo(volatile uint32_t *pun_red_led, volatile uint32_t *pun_ir_led)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b08a      	sub	sp, #40	; 0x28
 8001224:	af04      	add	r7, sp, #16
 8001226:	6078      	str	r0, [r7, #4]
 8001228:	6039      	str	r1, [r7, #0]
	uint32_t un_temp;
	*pun_red_led=0;
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	2200      	movs	r2, #0
 800122e:	601a      	str	r2, [r3, #0]
	*pun_ir_led=0;
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	2200      	movs	r2, #0
 8001234:	601a      	str	r2, [r3, #0]
	uint8_t ach_i2c_data[6];

	if(HAL_I2C_Mem_Read(i2c_max30102, MAX30102_ADDRESS, REG_FIFO_DATA, 1, ach_i2c_data, 6, I2C_TIMEOUT) != HAL_OK)
 8001236:	4b30      	ldr	r3, [pc, #192]	; (80012f8 <Max30102_ReadFifo+0xd8>)
 8001238:	6818      	ldr	r0, [r3, #0]
 800123a:	2301      	movs	r3, #1
 800123c:	9302      	str	r3, [sp, #8]
 800123e:	2306      	movs	r3, #6
 8001240:	9301      	str	r3, [sp, #4]
 8001242:	f107 030c 	add.w	r3, r7, #12
 8001246:	9300      	str	r3, [sp, #0]
 8001248:	2301      	movs	r3, #1
 800124a:	2207      	movs	r2, #7
 800124c:	21ae      	movs	r1, #174	; 0xae
 800124e:	f004 f8ab 	bl	80053a8 <HAL_I2C_Mem_Read>
 8001252:	4603      	mov	r3, r0
 8001254:	2b00      	cmp	r3, #0
 8001256:	d001      	beq.n	800125c <Max30102_ReadFifo+0x3c>
	{
		return MAX30102_ERROR;
 8001258:	2300      	movs	r3, #0
 800125a:	e048      	b.n	80012ee <Max30102_ReadFifo+0xce>
	}
	un_temp=(unsigned char) ach_i2c_data[0];
 800125c:	7b3b      	ldrb	r3, [r7, #12]
 800125e:	617b      	str	r3, [r7, #20]
	un_temp<<=16;
 8001260:	697b      	ldr	r3, [r7, #20]
 8001262:	041b      	lsls	r3, r3, #16
 8001264:	617b      	str	r3, [r7, #20]
	*pun_red_led+=un_temp;
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681a      	ldr	r2, [r3, #0]
 800126a:	697b      	ldr	r3, [r7, #20]
 800126c:	441a      	add	r2, r3
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	601a      	str	r2, [r3, #0]
	un_temp=(unsigned char) ach_i2c_data[1];
 8001272:	7b7b      	ldrb	r3, [r7, #13]
 8001274:	617b      	str	r3, [r7, #20]
	un_temp<<=8;
 8001276:	697b      	ldr	r3, [r7, #20]
 8001278:	021b      	lsls	r3, r3, #8
 800127a:	617b      	str	r3, [r7, #20]
	*pun_red_led+=un_temp;
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681a      	ldr	r2, [r3, #0]
 8001280:	697b      	ldr	r3, [r7, #20]
 8001282:	441a      	add	r2, r3
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	601a      	str	r2, [r3, #0]
	un_temp=(unsigned char) ach_i2c_data[2];
 8001288:	7bbb      	ldrb	r3, [r7, #14]
 800128a:	617b      	str	r3, [r7, #20]
	*pun_red_led+=un_temp;
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681a      	ldr	r2, [r3, #0]
 8001290:	697b      	ldr	r3, [r7, #20]
 8001292:	441a      	add	r2, r3
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	601a      	str	r2, [r3, #0]

	un_temp=(unsigned char) ach_i2c_data[3];
 8001298:	7bfb      	ldrb	r3, [r7, #15]
 800129a:	617b      	str	r3, [r7, #20]
	un_temp<<=16;
 800129c:	697b      	ldr	r3, [r7, #20]
 800129e:	041b      	lsls	r3, r3, #16
 80012a0:	617b      	str	r3, [r7, #20]
	*pun_ir_led+=un_temp;
 80012a2:	683b      	ldr	r3, [r7, #0]
 80012a4:	681a      	ldr	r2, [r3, #0]
 80012a6:	697b      	ldr	r3, [r7, #20]
 80012a8:	441a      	add	r2, r3
 80012aa:	683b      	ldr	r3, [r7, #0]
 80012ac:	601a      	str	r2, [r3, #0]
	un_temp=(unsigned char) ach_i2c_data[4];
 80012ae:	7c3b      	ldrb	r3, [r7, #16]
 80012b0:	617b      	str	r3, [r7, #20]
	un_temp<<=8;
 80012b2:	697b      	ldr	r3, [r7, #20]
 80012b4:	021b      	lsls	r3, r3, #8
 80012b6:	617b      	str	r3, [r7, #20]
	*pun_ir_led+=un_temp;
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	681a      	ldr	r2, [r3, #0]
 80012bc:	697b      	ldr	r3, [r7, #20]
 80012be:	441a      	add	r2, r3
 80012c0:	683b      	ldr	r3, [r7, #0]
 80012c2:	601a      	str	r2, [r3, #0]
	un_temp=(unsigned char) ach_i2c_data[5];
 80012c4:	7c7b      	ldrb	r3, [r7, #17]
 80012c6:	617b      	str	r3, [r7, #20]
	*pun_ir_led+=un_temp;
 80012c8:	683b      	ldr	r3, [r7, #0]
 80012ca:	681a      	ldr	r2, [r3, #0]
 80012cc:	697b      	ldr	r3, [r7, #20]
 80012ce:	441a      	add	r2, r3
 80012d0:	683b      	ldr	r3, [r7, #0]
 80012d2:	601a      	str	r2, [r3, #0]
	*pun_red_led&=0x03FFFF;  //Mask MSB [23:18]
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	f3c3 0211 	ubfx	r2, r3, #0, #18
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	601a      	str	r2, [r3, #0]
	*pun_ir_led&=0x03FFFF;  //Mask MSB [23:18]
 80012e0:	683b      	ldr	r3, [r7, #0]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	f3c3 0211 	ubfx	r2, r3, #0, #18
 80012e8:	683b      	ldr	r3, [r7, #0]
 80012ea:	601a      	str	r2, [r3, #0]

	return MAX30102_OK;
 80012ec:	2301      	movs	r3, #1
}
 80012ee:	4618      	mov	r0, r3
 80012f0:	3718      	adds	r7, #24
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	bf00      	nop
 80012f8:	200011d4 	.word	0x200011d4

080012fc <Max30102_SetIntAlmostFullEnabled>:

//
//	Interrupts
//
MAX30102_STATUS Max30102_SetIntAlmostFullEnabled(uint8_t Enable)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b082      	sub	sp, #8
 8001300:	af00      	add	r7, sp, #0
 8001302:	4603      	mov	r3, r0
 8001304:	71fb      	strb	r3, [r7, #7]
	return Max30102_WriteRegisterBit(REG_INTR_ENABLE_1, INT_A_FULL_BIT, Enable);
 8001306:	79fb      	ldrb	r3, [r7, #7]
 8001308:	461a      	mov	r2, r3
 800130a:	2107      	movs	r1, #7
 800130c:	2002      	movs	r0, #2
 800130e:	f7ff ff47 	bl	80011a0 <Max30102_WriteRegisterBit>
 8001312:	4603      	mov	r3, r0
}
 8001314:	4618      	mov	r0, r3
 8001316:	3708      	adds	r7, #8
 8001318:	46bd      	mov	sp, r7
 800131a:	bd80      	pop	{r7, pc}

0800131c <Max30102_SetIntFifoDataReadyEnabled>:

MAX30102_STATUS Max30102_SetIntFifoDataReadyEnabled(uint8_t Enable)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b082      	sub	sp, #8
 8001320:	af00      	add	r7, sp, #0
 8001322:	4603      	mov	r3, r0
 8001324:	71fb      	strb	r3, [r7, #7]

	return Max30102_WriteRegisterBit(REG_INTR_ENABLE_1, INT_PPG_RDY_BIT, Enable);
 8001326:	79fb      	ldrb	r3, [r7, #7]
 8001328:	461a      	mov	r2, r3
 800132a:	2106      	movs	r1, #6
 800132c:	2002      	movs	r0, #2
 800132e:	f7ff ff37 	bl	80011a0 <Max30102_WriteRegisterBit>
 8001332:	4603      	mov	r3, r0
}
 8001334:	4618      	mov	r0, r3
 8001336:	3708      	adds	r7, #8
 8001338:	46bd      	mov	sp, r7
 800133a:	bd80      	pop	{r7, pc}

0800133c <Max30102_ReadInterruptStatus>:

	return Max30102_WriteRegisterBit(REG_INTR_ENABLE_2, INT_DIE_TEMP_RDY_BIT, Enable);
}
#endif
MAX30102_STATUS Max30102_ReadInterruptStatus(uint8_t *Status)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b084      	sub	sp, #16
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	*Status = 0;
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	2200      	movs	r2, #0
 8001348:	701a      	strb	r2, [r3, #0]

	if(MAX30102_OK != Max30102_ReadReg(REG_INTR_STATUS_1, &tmp))
 800134a:	f107 030f 	add.w	r3, r7, #15
 800134e:	4619      	mov	r1, r3
 8001350:	2000      	movs	r0, #0
 8001352:	f7ff ff05 	bl	8001160 <Max30102_ReadReg>
 8001356:	4603      	mov	r3, r0
 8001358:	2b01      	cmp	r3, #1
 800135a:	d001      	beq.n	8001360 <Max30102_ReadInterruptStatus+0x24>
		return MAX30102_ERROR;
 800135c:	2300      	movs	r3, #0
 800135e:	e00d      	b.n	800137c <Max30102_ReadInterruptStatus+0x40>
	*Status |= tmp & 0xE1; // 3 highest bits
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	781b      	ldrb	r3, [r3, #0]
 8001364:	b25a      	sxtb	r2, r3
 8001366:	7bfb      	ldrb	r3, [r7, #15]
 8001368:	b25b      	sxtb	r3, r3
 800136a:	f023 031e 	bic.w	r3, r3, #30
 800136e:	b25b      	sxtb	r3, r3
 8001370:	4313      	orrs	r3, r2
 8001372:	b25b      	sxtb	r3, r3
 8001374:	b2da      	uxtb	r2, r3
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	701a      	strb	r2, [r3, #0]
#ifdef MAX30102_USE_INTERNAL_TEMPERATURE
	if(MAX30102_OK != Max30102_ReadReg(REG_INTR_STATUS_2, &tmp))
		return MAX30102_ERROR;
	*Status |= tmp & 0x02;
#endif
	return MAX30102_OK;
 800137a:	2301      	movs	r3, #1
}
 800137c:	4618      	mov	r0, r3
 800137e:	3710      	adds	r7, #16
 8001380:	46bd      	mov	sp, r7
 8001382:	bd80      	pop	{r7, pc}

08001384 <Max30102_InterruptCallback>:

void Max30102_InterruptCallback(void)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b082      	sub	sp, #8
 8001388:	af00      	add	r7, sp, #0
	uint8_t Status;
	while(MAX30102_OK != Max30102_ReadInterruptStatus(&Status));
 800138a:	bf00      	nop
 800138c:	1dbb      	adds	r3, r7, #6
 800138e:	4618      	mov	r0, r3
 8001390:	f7ff ffd4 	bl	800133c <Max30102_ReadInterruptStatus>
 8001394:	4603      	mov	r3, r0
 8001396:	2b01      	cmp	r3, #1
 8001398:	d1f8      	bne.n	800138c <Max30102_InterruptCallback+0x8>

	// Almost Full FIFO Interrupt handle
	if(Status & (1<<INT_A_FULL_BIT))
 800139a:	79bb      	ldrb	r3, [r7, #6]
 800139c:	b25b      	sxtb	r3, r3
 800139e:	2b00      	cmp	r3, #0
 80013a0:	da4a      	bge.n	8001438 <Max30102_InterruptCallback+0xb4>
	{
		for(uint8_t i = 0; i < MAX30102_FIFO_ALMOST_FULL_SAMPLES; i++)
 80013a2:	2300      	movs	r3, #0
 80013a4:	71fb      	strb	r3, [r7, #7]
 80013a6:	e044      	b.n	8001432 <Max30102_InterruptCallback+0xae>
		{
			while(MAX30102_OK != Max30102_ReadFifo((RedBuffer+BufferHead), (IrBuffer+BufferHead)));
 80013a8:	bf00      	nop
 80013aa:	4b49      	ldr	r3, [pc, #292]	; (80014d0 <Max30102_InterruptCallback+0x14c>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	009b      	lsls	r3, r3, #2
 80013b0:	4a48      	ldr	r2, [pc, #288]	; (80014d4 <Max30102_InterruptCallback+0x150>)
 80013b2:	441a      	add	r2, r3
 80013b4:	4b46      	ldr	r3, [pc, #280]	; (80014d0 <Max30102_InterruptCallback+0x14c>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	009b      	lsls	r3, r3, #2
 80013ba:	4947      	ldr	r1, [pc, #284]	; (80014d8 <Max30102_InterruptCallback+0x154>)
 80013bc:	440b      	add	r3, r1
 80013be:	4619      	mov	r1, r3
 80013c0:	4610      	mov	r0, r2
 80013c2:	f7ff ff2d 	bl	8001220 <Max30102_ReadFifo>
 80013c6:	4603      	mov	r3, r0
 80013c8:	2b01      	cmp	r3, #1
 80013ca:	d1ee      	bne.n	80013aa <Max30102_InterruptCallback+0x26>
			if(IsFingerOnScreen)
 80013cc:	4b43      	ldr	r3, [pc, #268]	; (80014dc <Max30102_InterruptCallback+0x158>)
 80013ce:	781b      	ldrb	r3, [r3, #0]
 80013d0:	b2db      	uxtb	r3, r3
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d00c      	beq.n	80013f0 <Max30102_InterruptCallback+0x6c>
			{
				if(IrBuffer[BufferHead] < MAX30102_IR_VALUE_FINGER_OUT_SENSOR) IsFingerOnScreen = 0;
 80013d6:	4b3e      	ldr	r3, [pc, #248]	; (80014d0 <Max30102_InterruptCallback+0x14c>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	4a3f      	ldr	r2, [pc, #252]	; (80014d8 <Max30102_InterruptCallback+0x154>)
 80013dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013e0:	f24c 324f 	movw	r2, #49999	; 0xc34f
 80013e4:	4293      	cmp	r3, r2
 80013e6:	d80e      	bhi.n	8001406 <Max30102_InterruptCallback+0x82>
 80013e8:	4b3c      	ldr	r3, [pc, #240]	; (80014dc <Max30102_InterruptCallback+0x158>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	701a      	strb	r2, [r3, #0]
 80013ee:	e00a      	b.n	8001406 <Max30102_InterruptCallback+0x82>
			}
			else
			{
				if(IrBuffer[BufferHead] > MAX30102_IR_VALUE_FINGER_ON_SENSOR) IsFingerOnScreen = 1;
 80013f0:	4b37      	ldr	r3, [pc, #220]	; (80014d0 <Max30102_InterruptCallback+0x14c>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	4a38      	ldr	r2, [pc, #224]	; (80014d8 <Max30102_InterruptCallback+0x154>)
 80013f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013fa:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80013fe:	d902      	bls.n	8001406 <Max30102_InterruptCallback+0x82>
 8001400:	4b36      	ldr	r3, [pc, #216]	; (80014dc <Max30102_InterruptCallback+0x158>)
 8001402:	2201      	movs	r2, #1
 8001404:	701a      	strb	r2, [r3, #0]
			}
			BufferHead = (BufferHead + 1) % MAX30102_BUFFER_LENGTH;
 8001406:	4b32      	ldr	r3, [pc, #200]	; (80014d0 <Max30102_InterruptCallback+0x14c>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	1c5a      	adds	r2, r3, #1
 800140c:	4b34      	ldr	r3, [pc, #208]	; (80014e0 <Max30102_InterruptCallback+0x15c>)
 800140e:	fba3 1302 	umull	r1, r3, r3, r2
 8001412:	095b      	lsrs	r3, r3, #5
 8001414:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8001418:	fb01 f303 	mul.w	r3, r1, r3
 800141c:	1ad3      	subs	r3, r2, r3
 800141e:	4a2c      	ldr	r2, [pc, #176]	; (80014d0 <Max30102_InterruptCallback+0x14c>)
 8001420:	6013      	str	r3, [r2, #0]
			CollectedSamples++;
 8001422:	4b30      	ldr	r3, [pc, #192]	; (80014e4 <Max30102_InterruptCallback+0x160>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	3301      	adds	r3, #1
 8001428:	4a2e      	ldr	r2, [pc, #184]	; (80014e4 <Max30102_InterruptCallback+0x160>)
 800142a:	6013      	str	r3, [r2, #0]
		for(uint8_t i = 0; i < MAX30102_FIFO_ALMOST_FULL_SAMPLES; i++)
 800142c:	79fb      	ldrb	r3, [r7, #7]
 800142e:	3301      	adds	r3, #1
 8001430:	71fb      	strb	r3, [r7, #7]
 8001432:	79fb      	ldrb	r3, [r7, #7]
 8001434:	2b10      	cmp	r3, #16
 8001436:	d9b7      	bls.n	80013a8 <Max30102_InterruptCallback+0x24>
		}
	}

	// New FIFO Data Ready Interrupt handle
	if(Status & (1<<INT_PPG_RDY_BIT))
 8001438:	79bb      	ldrb	r3, [r7, #6]
 800143a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800143e:	2b00      	cmp	r3, #0
 8001440:	d041      	beq.n	80014c6 <Max30102_InterruptCallback+0x142>
	{
		while(MAX30102_OK != Max30102_ReadFifo((RedBuffer+BufferHead), (IrBuffer+BufferHead)));
 8001442:	bf00      	nop
 8001444:	4b22      	ldr	r3, [pc, #136]	; (80014d0 <Max30102_InterruptCallback+0x14c>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	009b      	lsls	r3, r3, #2
 800144a:	4a22      	ldr	r2, [pc, #136]	; (80014d4 <Max30102_InterruptCallback+0x150>)
 800144c:	441a      	add	r2, r3
 800144e:	4b20      	ldr	r3, [pc, #128]	; (80014d0 <Max30102_InterruptCallback+0x14c>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	009b      	lsls	r3, r3, #2
 8001454:	4920      	ldr	r1, [pc, #128]	; (80014d8 <Max30102_InterruptCallback+0x154>)
 8001456:	440b      	add	r3, r1
 8001458:	4619      	mov	r1, r3
 800145a:	4610      	mov	r0, r2
 800145c:	f7ff fee0 	bl	8001220 <Max30102_ReadFifo>
 8001460:	4603      	mov	r3, r0
 8001462:	2b01      	cmp	r3, #1
 8001464:	d1ee      	bne.n	8001444 <Max30102_InterruptCallback+0xc0>
		if(IsFingerOnScreen)
 8001466:	4b1d      	ldr	r3, [pc, #116]	; (80014dc <Max30102_InterruptCallback+0x158>)
 8001468:	781b      	ldrb	r3, [r3, #0]
 800146a:	b2db      	uxtb	r3, r3
 800146c:	2b00      	cmp	r3, #0
 800146e:	d00c      	beq.n	800148a <Max30102_InterruptCallback+0x106>
		{
			if(IrBuffer[BufferHead] < MAX30102_IR_VALUE_FINGER_OUT_SENSOR) IsFingerOnScreen = 0;
 8001470:	4b17      	ldr	r3, [pc, #92]	; (80014d0 <Max30102_InterruptCallback+0x14c>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	4a18      	ldr	r2, [pc, #96]	; (80014d8 <Max30102_InterruptCallback+0x154>)
 8001476:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800147a:	f24c 324f 	movw	r2, #49999	; 0xc34f
 800147e:	4293      	cmp	r3, r2
 8001480:	d80e      	bhi.n	80014a0 <Max30102_InterruptCallback+0x11c>
 8001482:	4b16      	ldr	r3, [pc, #88]	; (80014dc <Max30102_InterruptCallback+0x158>)
 8001484:	2200      	movs	r2, #0
 8001486:	701a      	strb	r2, [r3, #0]
 8001488:	e00a      	b.n	80014a0 <Max30102_InterruptCallback+0x11c>
		}
		else
		{
			if(IrBuffer[BufferHead] > MAX30102_IR_VALUE_FINGER_ON_SENSOR) IsFingerOnScreen = 1;
 800148a:	4b11      	ldr	r3, [pc, #68]	; (80014d0 <Max30102_InterruptCallback+0x14c>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	4a12      	ldr	r2, [pc, #72]	; (80014d8 <Max30102_InterruptCallback+0x154>)
 8001490:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001494:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8001498:	d902      	bls.n	80014a0 <Max30102_InterruptCallback+0x11c>
 800149a:	4b10      	ldr	r3, [pc, #64]	; (80014dc <Max30102_InterruptCallback+0x158>)
 800149c:	2201      	movs	r2, #1
 800149e:	701a      	strb	r2, [r3, #0]
		}
		BufferHead = (BufferHead + 1) % MAX30102_BUFFER_LENGTH;
 80014a0:	4b0b      	ldr	r3, [pc, #44]	; (80014d0 <Max30102_InterruptCallback+0x14c>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	1c5a      	adds	r2, r3, #1
 80014a6:	4b0e      	ldr	r3, [pc, #56]	; (80014e0 <Max30102_InterruptCallback+0x15c>)
 80014a8:	fba3 1302 	umull	r1, r3, r3, r2
 80014ac:	095b      	lsrs	r3, r3, #5
 80014ae:	f44f 7196 	mov.w	r1, #300	; 0x12c
 80014b2:	fb01 f303 	mul.w	r3, r1, r3
 80014b6:	1ad3      	subs	r3, r2, r3
 80014b8:	4a05      	ldr	r2, [pc, #20]	; (80014d0 <Max30102_InterruptCallback+0x14c>)
 80014ba:	6013      	str	r3, [r2, #0]
		CollectedSamples++;
 80014bc:	4b09      	ldr	r3, [pc, #36]	; (80014e4 <Max30102_InterruptCallback+0x160>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	3301      	adds	r3, #1
 80014c2:	4a08      	ldr	r2, [pc, #32]	; (80014e4 <Max30102_InterruptCallback+0x160>)
 80014c4:	6013      	str	r3, [r2, #0]
	if(Status & (1<<INT_DIE_TEMP_RDY_BIT))
	{

	}
#endif
}
 80014c6:	bf00      	nop
 80014c8:	3708      	adds	r7, #8
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}
 80014ce:	bf00      	nop
 80014d0:	200011dc 	.word	0x200011dc
 80014d4:	2000169c 	.word	0x2000169c
 80014d8:	200011e4 	.word	0x200011e4
 80014dc:	200011d9 	.word	0x200011d9
 80014e0:	1b4e81b5 	.word	0x1b4e81b5
 80014e4:	200011d0 	.word	0x200011d0

080014e8 <Max30102_FifoWritePointer>:

//
//	FIFO Configuration
//
MAX30102_STATUS Max30102_FifoWritePointer(uint8_t Address)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b082      	sub	sp, #8
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	4603      	mov	r3, r0
 80014f0:	71fb      	strb	r3, [r7, #7]
	if(MAX30102_OK != Max30102_WriteReg(REG_FIFO_WR_PTR,(Address & 0x1F)))  //FIFO_WR_PTR[4:0]
 80014f2:	79fb      	ldrb	r3, [r7, #7]
 80014f4:	f003 031f 	and.w	r3, r3, #31
 80014f8:	b2db      	uxtb	r3, r3
 80014fa:	4619      	mov	r1, r3
 80014fc:	2004      	movs	r0, #4
 80014fe:	f7ff fe0d 	bl	800111c <Max30102_WriteReg>
 8001502:	4603      	mov	r3, r0
 8001504:	2b01      	cmp	r3, #1
 8001506:	d001      	beq.n	800150c <Max30102_FifoWritePointer+0x24>
			return MAX30102_ERROR;
 8001508:	2300      	movs	r3, #0
 800150a:	e000      	b.n	800150e <Max30102_FifoWritePointer+0x26>
	return MAX30102_OK;
 800150c:	2301      	movs	r3, #1
}
 800150e:	4618      	mov	r0, r3
 8001510:	3708      	adds	r7, #8
 8001512:	46bd      	mov	sp, r7
 8001514:	bd80      	pop	{r7, pc}

08001516 <Max30102_FifoOverflowCounter>:

MAX30102_STATUS Max30102_FifoOverflowCounter(uint8_t Address)
{
 8001516:	b580      	push	{r7, lr}
 8001518:	b082      	sub	sp, #8
 800151a:	af00      	add	r7, sp, #0
 800151c:	4603      	mov	r3, r0
 800151e:	71fb      	strb	r3, [r7, #7]
	if(MAX30102_OK != Max30102_WriteReg(REG_OVF_COUNTER,(Address & 0x1F)))  //OVF_COUNTER[4:0]
 8001520:	79fb      	ldrb	r3, [r7, #7]
 8001522:	f003 031f 	and.w	r3, r3, #31
 8001526:	b2db      	uxtb	r3, r3
 8001528:	4619      	mov	r1, r3
 800152a:	2005      	movs	r0, #5
 800152c:	f7ff fdf6 	bl	800111c <Max30102_WriteReg>
 8001530:	4603      	mov	r3, r0
 8001532:	2b01      	cmp	r3, #1
 8001534:	d001      	beq.n	800153a <Max30102_FifoOverflowCounter+0x24>
			return MAX30102_ERROR;
 8001536:	2300      	movs	r3, #0
 8001538:	e000      	b.n	800153c <Max30102_FifoOverflowCounter+0x26>
	return MAX30102_OK;
 800153a:	2301      	movs	r3, #1
}
 800153c:	4618      	mov	r0, r3
 800153e:	3708      	adds	r7, #8
 8001540:	46bd      	mov	sp, r7
 8001542:	bd80      	pop	{r7, pc}

08001544 <Max30102_FifoReadPointer>:

MAX30102_STATUS Max30102_FifoReadPointer(uint8_t Address)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b082      	sub	sp, #8
 8001548:	af00      	add	r7, sp, #0
 800154a:	4603      	mov	r3, r0
 800154c:	71fb      	strb	r3, [r7, #7]
	if(MAX30102_OK != Max30102_WriteReg(REG_FIFO_RD_PTR,(Address & 0x1F)))  //FIFO_RD_PTR[4:0]
 800154e:	79fb      	ldrb	r3, [r7, #7]
 8001550:	f003 031f 	and.w	r3, r3, #31
 8001554:	b2db      	uxtb	r3, r3
 8001556:	4619      	mov	r1, r3
 8001558:	2006      	movs	r0, #6
 800155a:	f7ff fddf 	bl	800111c <Max30102_WriteReg>
 800155e:	4603      	mov	r3, r0
 8001560:	2b01      	cmp	r3, #1
 8001562:	d001      	beq.n	8001568 <Max30102_FifoReadPointer+0x24>
			return MAX30102_ERROR;
 8001564:	2300      	movs	r3, #0
 8001566:	e000      	b.n	800156a <Max30102_FifoReadPointer+0x26>
	return MAX30102_OK;
 8001568:	2301      	movs	r3, #1
}
 800156a:	4618      	mov	r0, r3
 800156c:	3708      	adds	r7, #8
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}

08001572 <Max30102_FifoSampleAveraging>:

MAX30102_STATUS Max30102_FifoSampleAveraging(uint8_t Value)
{
 8001572:	b580      	push	{r7, lr}
 8001574:	b084      	sub	sp, #16
 8001576:	af00      	add	r7, sp, #0
 8001578:	4603      	mov	r3, r0
 800157a:	71fb      	strb	r3, [r7, #7]
	uint8_t tmp;
	if(MAX30102_OK != Max30102_ReadReg(REG_FIFO_CONFIG, &tmp))
 800157c:	f107 030f 	add.w	r3, r7, #15
 8001580:	4619      	mov	r1, r3
 8001582:	2008      	movs	r0, #8
 8001584:	f7ff fdec 	bl	8001160 <Max30102_ReadReg>
 8001588:	4603      	mov	r3, r0
 800158a:	2b01      	cmp	r3, #1
 800158c:	d001      	beq.n	8001592 <Max30102_FifoSampleAveraging+0x20>
		return MAX30102_ERROR;
 800158e:	2300      	movs	r3, #0
 8001590:	e018      	b.n	80015c4 <Max30102_FifoSampleAveraging+0x52>
	tmp &= ~(0x07);
 8001592:	7bfb      	ldrb	r3, [r7, #15]
 8001594:	f023 0307 	bic.w	r3, r3, #7
 8001598:	b2db      	uxtb	r3, r3
 800159a:	73fb      	strb	r3, [r7, #15]
	tmp |= (Value&0x07)<<5;
 800159c:	79fb      	ldrb	r3, [r7, #7]
 800159e:	015b      	lsls	r3, r3, #5
 80015a0:	b25a      	sxtb	r2, r3
 80015a2:	7bfb      	ldrb	r3, [r7, #15]
 80015a4:	b25b      	sxtb	r3, r3
 80015a6:	4313      	orrs	r3, r2
 80015a8:	b25b      	sxtb	r3, r3
 80015aa:	b2db      	uxtb	r3, r3
 80015ac:	73fb      	strb	r3, [r7, #15]
	if(MAX30102_OK != Max30102_WriteReg(REG_FIFO_CONFIG, tmp))
 80015ae:	7bfb      	ldrb	r3, [r7, #15]
 80015b0:	4619      	mov	r1, r3
 80015b2:	2008      	movs	r0, #8
 80015b4:	f7ff fdb2 	bl	800111c <Max30102_WriteReg>
 80015b8:	4603      	mov	r3, r0
 80015ba:	2b01      	cmp	r3, #1
 80015bc:	d001      	beq.n	80015c2 <Max30102_FifoSampleAveraging+0x50>
		return MAX30102_ERROR;
 80015be:	2300      	movs	r3, #0
 80015c0:	e000      	b.n	80015c4 <Max30102_FifoSampleAveraging+0x52>

	return MAX30102_OK;
 80015c2:	2301      	movs	r3, #1
}
 80015c4:	4618      	mov	r0, r3
 80015c6:	3710      	adds	r7, #16
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bd80      	pop	{r7, pc}

080015cc <Max30102_FifoRolloverEnable>:

MAX30102_STATUS Max30102_FifoRolloverEnable(uint8_t Enable)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b082      	sub	sp, #8
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	4603      	mov	r3, r0
 80015d4:	71fb      	strb	r3, [r7, #7]
	return Max30102_WriteRegisterBit(REG_FIFO_CONFIG, FIFO_CONF_FIFO_ROLLOVER_EN_BIT, (Enable & 0x01));
 80015d6:	79fb      	ldrb	r3, [r7, #7]
 80015d8:	f003 0301 	and.w	r3, r3, #1
 80015dc:	b2db      	uxtb	r3, r3
 80015de:	461a      	mov	r2, r3
 80015e0:	2104      	movs	r1, #4
 80015e2:	2008      	movs	r0, #8
 80015e4:	f7ff fddc 	bl	80011a0 <Max30102_WriteRegisterBit>
 80015e8:	4603      	mov	r3, r0
}
 80015ea:	4618      	mov	r0, r3
 80015ec:	3708      	adds	r7, #8
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bd80      	pop	{r7, pc}

080015f2 <Max30102_FifoAlmostFullValue>:

MAX30102_STATUS Max30102_FifoAlmostFullValue(uint8_t Value)
{
 80015f2:	b580      	push	{r7, lr}
 80015f4:	b084      	sub	sp, #16
 80015f6:	af00      	add	r7, sp, #0
 80015f8:	4603      	mov	r3, r0
 80015fa:	71fb      	strb	r3, [r7, #7]
	if(Value < 17) Value = 17;
 80015fc:	79fb      	ldrb	r3, [r7, #7]
 80015fe:	2b10      	cmp	r3, #16
 8001600:	d801      	bhi.n	8001606 <Max30102_FifoAlmostFullValue+0x14>
 8001602:	2311      	movs	r3, #17
 8001604:	71fb      	strb	r3, [r7, #7]
	if(Value > 32) Value = 32;
 8001606:	79fb      	ldrb	r3, [r7, #7]
 8001608:	2b20      	cmp	r3, #32
 800160a:	d901      	bls.n	8001610 <Max30102_FifoAlmostFullValue+0x1e>
 800160c:	2320      	movs	r3, #32
 800160e:	71fb      	strb	r3, [r7, #7]
	Value = 32 - Value;
 8001610:	79fb      	ldrb	r3, [r7, #7]
 8001612:	f1c3 0320 	rsb	r3, r3, #32
 8001616:	71fb      	strb	r3, [r7, #7]
	uint8_t tmp;
	if(MAX30102_OK != Max30102_ReadReg(REG_FIFO_CONFIG, &tmp))
 8001618:	f107 030f 	add.w	r3, r7, #15
 800161c:	4619      	mov	r1, r3
 800161e:	2008      	movs	r0, #8
 8001620:	f7ff fd9e 	bl	8001160 <Max30102_ReadReg>
 8001624:	4603      	mov	r3, r0
 8001626:	2b01      	cmp	r3, #1
 8001628:	d001      	beq.n	800162e <Max30102_FifoAlmostFullValue+0x3c>
		return MAX30102_ERROR;
 800162a:	2300      	movs	r3, #0
 800162c:	e01a      	b.n	8001664 <Max30102_FifoAlmostFullValue+0x72>
	tmp &= ~(0x0F);
 800162e:	7bfb      	ldrb	r3, [r7, #15]
 8001630:	f023 030f 	bic.w	r3, r3, #15
 8001634:	b2db      	uxtb	r3, r3
 8001636:	73fb      	strb	r3, [r7, #15]
	tmp |= (Value & 0x0F);
 8001638:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800163c:	f003 030f 	and.w	r3, r3, #15
 8001640:	b25a      	sxtb	r2, r3
 8001642:	7bfb      	ldrb	r3, [r7, #15]
 8001644:	b25b      	sxtb	r3, r3
 8001646:	4313      	orrs	r3, r2
 8001648:	b25b      	sxtb	r3, r3
 800164a:	b2db      	uxtb	r3, r3
 800164c:	73fb      	strb	r3, [r7, #15]
	if(MAX30102_OK != Max30102_WriteReg(REG_FIFO_CONFIG, tmp))
 800164e:	7bfb      	ldrb	r3, [r7, #15]
 8001650:	4619      	mov	r1, r3
 8001652:	2008      	movs	r0, #8
 8001654:	f7ff fd62 	bl	800111c <Max30102_WriteReg>
 8001658:	4603      	mov	r3, r0
 800165a:	2b01      	cmp	r3, #1
 800165c:	d001      	beq.n	8001662 <Max30102_FifoAlmostFullValue+0x70>
		return MAX30102_ERROR;
 800165e:	2300      	movs	r3, #0
 8001660:	e000      	b.n	8001664 <Max30102_FifoAlmostFullValue+0x72>

	return MAX30102_OK;
 8001662:	2301      	movs	r3, #1
}
 8001664:	4618      	mov	r0, r3
 8001666:	3710      	adds	r7, #16
 8001668:	46bd      	mov	sp, r7
 800166a:	bd80      	pop	{r7, pc}

0800166c <Max30102_Reset>:
{
	return Max30102_WriteRegisterBit(REG_MODE_CONFIG, MODE_SHDN_BIT, (Enable & 0x01));
}

MAX30102_STATUS Max30102_Reset(void)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b082      	sub	sp, #8
 8001670:	af00      	add	r7, sp, #0
	uint8_t tmp = 0xFF;
 8001672:	23ff      	movs	r3, #255	; 0xff
 8001674:	71fb      	strb	r3, [r7, #7]
    if(MAX30102_OK != Max30102_WriteReg(REG_MODE_CONFIG,0x40))
 8001676:	2140      	movs	r1, #64	; 0x40
 8001678:	2009      	movs	r0, #9
 800167a:	f7ff fd4f 	bl	800111c <Max30102_WriteReg>
 800167e:	4603      	mov	r3, r0
 8001680:	2b01      	cmp	r3, #1
 8001682:	d001      	beq.n	8001688 <Max30102_Reset+0x1c>
        return MAX30102_ERROR;
 8001684:	2300      	movs	r3, #0
 8001686:	e00f      	b.n	80016a8 <Max30102_Reset+0x3c>
    do
    {
    	if(MAX30102_OK != Max30102_ReadReg(REG_MODE_CONFIG, &tmp))
 8001688:	1dfb      	adds	r3, r7, #7
 800168a:	4619      	mov	r1, r3
 800168c:	2009      	movs	r0, #9
 800168e:	f7ff fd67 	bl	8001160 <Max30102_ReadReg>
 8001692:	4603      	mov	r3, r0
 8001694:	2b01      	cmp	r3, #1
 8001696:	d001      	beq.n	800169c <Max30102_Reset+0x30>
    		return MAX30102_ERROR;
 8001698:	2300      	movs	r3, #0
 800169a:	e005      	b.n	80016a8 <Max30102_Reset+0x3c>
    } while(tmp & (1<<6));
 800169c:	79fb      	ldrb	r3, [r7, #7]
 800169e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d1f0      	bne.n	8001688 <Max30102_Reset+0x1c>

    return MAX30102_OK;
 80016a6:	2301      	movs	r3, #1
}
 80016a8:	4618      	mov	r0, r3
 80016aa:	3708      	adds	r7, #8
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bd80      	pop	{r7, pc}

080016b0 <Max30102_SetMode>:

MAX30102_STATUS Max30102_SetMode(uint8_t Mode)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b084      	sub	sp, #16
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	4603      	mov	r3, r0
 80016b8:	71fb      	strb	r3, [r7, #7]
	uint8_t tmp;
	if(MAX30102_OK != Max30102_ReadReg(REG_MODE_CONFIG, &tmp))
 80016ba:	f107 030f 	add.w	r3, r7, #15
 80016be:	4619      	mov	r1, r3
 80016c0:	2009      	movs	r0, #9
 80016c2:	f7ff fd4d 	bl	8001160 <Max30102_ReadReg>
 80016c6:	4603      	mov	r3, r0
 80016c8:	2b01      	cmp	r3, #1
 80016ca:	d001      	beq.n	80016d0 <Max30102_SetMode+0x20>
		return MAX30102_ERROR;
 80016cc:	2300      	movs	r3, #0
 80016ce:	e01a      	b.n	8001706 <Max30102_SetMode+0x56>
	tmp &= ~(0x07);
 80016d0:	7bfb      	ldrb	r3, [r7, #15]
 80016d2:	f023 0307 	bic.w	r3, r3, #7
 80016d6:	b2db      	uxtb	r3, r3
 80016d8:	73fb      	strb	r3, [r7, #15]
	tmp |= (Mode & 0x07);
 80016da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016de:	f003 0307 	and.w	r3, r3, #7
 80016e2:	b25a      	sxtb	r2, r3
 80016e4:	7bfb      	ldrb	r3, [r7, #15]
 80016e6:	b25b      	sxtb	r3, r3
 80016e8:	4313      	orrs	r3, r2
 80016ea:	b25b      	sxtb	r3, r3
 80016ec:	b2db      	uxtb	r3, r3
 80016ee:	73fb      	strb	r3, [r7, #15]
	if(MAX30102_OK != Max30102_WriteReg(REG_MODE_CONFIG, tmp))
 80016f0:	7bfb      	ldrb	r3, [r7, #15]
 80016f2:	4619      	mov	r1, r3
 80016f4:	2009      	movs	r0, #9
 80016f6:	f7ff fd11 	bl	800111c <Max30102_WriteReg>
 80016fa:	4603      	mov	r3, r0
 80016fc:	2b01      	cmp	r3, #1
 80016fe:	d001      	beq.n	8001704 <Max30102_SetMode+0x54>
		return MAX30102_ERROR;
 8001700:	2300      	movs	r3, #0
 8001702:	e000      	b.n	8001706 <Max30102_SetMode+0x56>

	return MAX30102_OK;
 8001704:	2301      	movs	r3, #1
}
 8001706:	4618      	mov	r0, r3
 8001708:	3710      	adds	r7, #16
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}

0800170e <Max30102_SpO2AdcRange>:
//
//	SpO2 Configuration
//
MAX30102_STATUS Max30102_SpO2AdcRange(uint8_t Value)
{
 800170e:	b580      	push	{r7, lr}
 8001710:	b084      	sub	sp, #16
 8001712:	af00      	add	r7, sp, #0
 8001714:	4603      	mov	r3, r0
 8001716:	71fb      	strb	r3, [r7, #7]
	uint8_t tmp;
	if(MAX30102_OK != Max30102_ReadReg(REG_SPO2_CONFIG, &tmp))
 8001718:	f107 030f 	add.w	r3, r7, #15
 800171c:	4619      	mov	r1, r3
 800171e:	200a      	movs	r0, #10
 8001720:	f7ff fd1e 	bl	8001160 <Max30102_ReadReg>
 8001724:	4603      	mov	r3, r0
 8001726:	2b01      	cmp	r3, #1
 8001728:	d001      	beq.n	800172e <Max30102_SpO2AdcRange+0x20>
		return MAX30102_ERROR;
 800172a:	2300      	movs	r3, #0
 800172c:	e01b      	b.n	8001766 <Max30102_SpO2AdcRange+0x58>
	tmp &= ~(0x03);
 800172e:	7bfb      	ldrb	r3, [r7, #15]
 8001730:	f023 0303 	bic.w	r3, r3, #3
 8001734:	b2db      	uxtb	r3, r3
 8001736:	73fb      	strb	r3, [r7, #15]
	tmp |= ((Value & 0x03) << 5);
 8001738:	79fb      	ldrb	r3, [r7, #7]
 800173a:	015b      	lsls	r3, r3, #5
 800173c:	b25b      	sxtb	r3, r3
 800173e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8001742:	b25a      	sxtb	r2, r3
 8001744:	7bfb      	ldrb	r3, [r7, #15]
 8001746:	b25b      	sxtb	r3, r3
 8001748:	4313      	orrs	r3, r2
 800174a:	b25b      	sxtb	r3, r3
 800174c:	b2db      	uxtb	r3, r3
 800174e:	73fb      	strb	r3, [r7, #15]
	if(MAX30102_OK != Max30102_WriteReg(REG_SPO2_CONFIG, tmp))
 8001750:	7bfb      	ldrb	r3, [r7, #15]
 8001752:	4619      	mov	r1, r3
 8001754:	200a      	movs	r0, #10
 8001756:	f7ff fce1 	bl	800111c <Max30102_WriteReg>
 800175a:	4603      	mov	r3, r0
 800175c:	2b01      	cmp	r3, #1
 800175e:	d001      	beq.n	8001764 <Max30102_SpO2AdcRange+0x56>
		return MAX30102_ERROR;
 8001760:	2300      	movs	r3, #0
 8001762:	e000      	b.n	8001766 <Max30102_SpO2AdcRange+0x58>

	return MAX30102_OK;
 8001764:	2301      	movs	r3, #1
}
 8001766:	4618      	mov	r0, r3
 8001768:	3710      	adds	r7, #16
 800176a:	46bd      	mov	sp, r7
 800176c:	bd80      	pop	{r7, pc}

0800176e <Max30102_SpO2SampleRate>:

MAX30102_STATUS Max30102_SpO2SampleRate(uint8_t Value)
{
 800176e:	b580      	push	{r7, lr}
 8001770:	b084      	sub	sp, #16
 8001772:	af00      	add	r7, sp, #0
 8001774:	4603      	mov	r3, r0
 8001776:	71fb      	strb	r3, [r7, #7]
	uint8_t tmp;
	if(MAX30102_OK != Max30102_ReadReg(REG_SPO2_CONFIG, &tmp))
 8001778:	f107 030f 	add.w	r3, r7, #15
 800177c:	4619      	mov	r1, r3
 800177e:	200a      	movs	r0, #10
 8001780:	f7ff fcee 	bl	8001160 <Max30102_ReadReg>
 8001784:	4603      	mov	r3, r0
 8001786:	2b01      	cmp	r3, #1
 8001788:	d001      	beq.n	800178e <Max30102_SpO2SampleRate+0x20>
		return MAX30102_ERROR;
 800178a:	2300      	movs	r3, #0
 800178c:	e01b      	b.n	80017c6 <Max30102_SpO2SampleRate+0x58>
	tmp &= ~(0x07);
 800178e:	7bfb      	ldrb	r3, [r7, #15]
 8001790:	f023 0307 	bic.w	r3, r3, #7
 8001794:	b2db      	uxtb	r3, r3
 8001796:	73fb      	strb	r3, [r7, #15]
	tmp |= ((Value & 0x07) << 2);
 8001798:	79fb      	ldrb	r3, [r7, #7]
 800179a:	009b      	lsls	r3, r3, #2
 800179c:	b25b      	sxtb	r3, r3
 800179e:	f003 031c 	and.w	r3, r3, #28
 80017a2:	b25a      	sxtb	r2, r3
 80017a4:	7bfb      	ldrb	r3, [r7, #15]
 80017a6:	b25b      	sxtb	r3, r3
 80017a8:	4313      	orrs	r3, r2
 80017aa:	b25b      	sxtb	r3, r3
 80017ac:	b2db      	uxtb	r3, r3
 80017ae:	73fb      	strb	r3, [r7, #15]
	if(MAX30102_OK != Max30102_WriteReg(REG_SPO2_CONFIG, tmp))
 80017b0:	7bfb      	ldrb	r3, [r7, #15]
 80017b2:	4619      	mov	r1, r3
 80017b4:	200a      	movs	r0, #10
 80017b6:	f7ff fcb1 	bl	800111c <Max30102_WriteReg>
 80017ba:	4603      	mov	r3, r0
 80017bc:	2b01      	cmp	r3, #1
 80017be:	d001      	beq.n	80017c4 <Max30102_SpO2SampleRate+0x56>
		return MAX30102_ERROR;
 80017c0:	2300      	movs	r3, #0
 80017c2:	e000      	b.n	80017c6 <Max30102_SpO2SampleRate+0x58>

	return MAX30102_OK;
 80017c4:	2301      	movs	r3, #1
}
 80017c6:	4618      	mov	r0, r3
 80017c8:	3710      	adds	r7, #16
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd80      	pop	{r7, pc}

080017ce <Max30102_SpO2LedPulseWidth>:

MAX30102_STATUS Max30102_SpO2LedPulseWidth(uint8_t Value)
{
 80017ce:	b580      	push	{r7, lr}
 80017d0:	b084      	sub	sp, #16
 80017d2:	af00      	add	r7, sp, #0
 80017d4:	4603      	mov	r3, r0
 80017d6:	71fb      	strb	r3, [r7, #7]
	uint8_t tmp;
	if(MAX30102_OK != Max30102_ReadReg(REG_SPO2_CONFIG, &tmp))
 80017d8:	f107 030f 	add.w	r3, r7, #15
 80017dc:	4619      	mov	r1, r3
 80017de:	200a      	movs	r0, #10
 80017e0:	f7ff fcbe 	bl	8001160 <Max30102_ReadReg>
 80017e4:	4603      	mov	r3, r0
 80017e6:	2b01      	cmp	r3, #1
 80017e8:	d001      	beq.n	80017ee <Max30102_SpO2LedPulseWidth+0x20>
		return MAX30102_ERROR;
 80017ea:	2300      	movs	r3, #0
 80017ec:	e01a      	b.n	8001824 <Max30102_SpO2LedPulseWidth+0x56>
	tmp &= ~(0x03);
 80017ee:	7bfb      	ldrb	r3, [r7, #15]
 80017f0:	f023 0303 	bic.w	r3, r3, #3
 80017f4:	b2db      	uxtb	r3, r3
 80017f6:	73fb      	strb	r3, [r7, #15]
	tmp |= (Value & 0x03);
 80017f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017fc:	f003 0303 	and.w	r3, r3, #3
 8001800:	b25a      	sxtb	r2, r3
 8001802:	7bfb      	ldrb	r3, [r7, #15]
 8001804:	b25b      	sxtb	r3, r3
 8001806:	4313      	orrs	r3, r2
 8001808:	b25b      	sxtb	r3, r3
 800180a:	b2db      	uxtb	r3, r3
 800180c:	73fb      	strb	r3, [r7, #15]
	if(MAX30102_OK != Max30102_WriteReg(REG_SPO2_CONFIG, tmp))
 800180e:	7bfb      	ldrb	r3, [r7, #15]
 8001810:	4619      	mov	r1, r3
 8001812:	200a      	movs	r0, #10
 8001814:	f7ff fc82 	bl	800111c <Max30102_WriteReg>
 8001818:	4603      	mov	r3, r0
 800181a:	2b01      	cmp	r3, #1
 800181c:	d001      	beq.n	8001822 <Max30102_SpO2LedPulseWidth+0x54>
		return MAX30102_ERROR;
 800181e:	2300      	movs	r3, #0
 8001820:	e000      	b.n	8001824 <Max30102_SpO2LedPulseWidth+0x56>

	return MAX30102_OK;
 8001822:	2301      	movs	r3, #1
}
 8001824:	4618      	mov	r0, r3
 8001826:	3710      	adds	r7, #16
 8001828:	46bd      	mov	sp, r7
 800182a:	bd80      	pop	{r7, pc}

0800182c <Max30102_Led1PulseAmplitude>:
//
//	LEDs Pulse Amplitute Configuration
//	LED Current = Value * 0.2 mA
//
MAX30102_STATUS Max30102_Led1PulseAmplitude(uint8_t Value)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b082      	sub	sp, #8
 8001830:	af00      	add	r7, sp, #0
 8001832:	4603      	mov	r3, r0
 8001834:	71fb      	strb	r3, [r7, #7]
	if(MAX30102_OK != Max30102_WriteReg(REG_LED1_PA, Value))
 8001836:	79fb      	ldrb	r3, [r7, #7]
 8001838:	4619      	mov	r1, r3
 800183a:	200c      	movs	r0, #12
 800183c:	f7ff fc6e 	bl	800111c <Max30102_WriteReg>
 8001840:	4603      	mov	r3, r0
 8001842:	2b01      	cmp	r3, #1
 8001844:	d001      	beq.n	800184a <Max30102_Led1PulseAmplitude+0x1e>
		return MAX30102_ERROR;
 8001846:	2300      	movs	r3, #0
 8001848:	e000      	b.n	800184c <Max30102_Led1PulseAmplitude+0x20>
	return MAX30102_OK;
 800184a:	2301      	movs	r3, #1
}
 800184c:	4618      	mov	r0, r3
 800184e:	3708      	adds	r7, #8
 8001850:	46bd      	mov	sp, r7
 8001852:	bd80      	pop	{r7, pc}

08001854 <Max30102_Led2PulseAmplitude>:

MAX30102_STATUS Max30102_Led2PulseAmplitude(uint8_t Value)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b082      	sub	sp, #8
 8001858:	af00      	add	r7, sp, #0
 800185a:	4603      	mov	r3, r0
 800185c:	71fb      	strb	r3, [r7, #7]
	if(MAX30102_OK != Max30102_WriteReg(REG_LED2_PA, Value))
 800185e:	79fb      	ldrb	r3, [r7, #7]
 8001860:	4619      	mov	r1, r3
 8001862:	200d      	movs	r0, #13
 8001864:	f7ff fc5a 	bl	800111c <Max30102_WriteReg>
 8001868:	4603      	mov	r3, r0
 800186a:	2b01      	cmp	r3, #1
 800186c:	d001      	beq.n	8001872 <Max30102_Led2PulseAmplitude+0x1e>
		return MAX30102_ERROR;
 800186e:	2300      	movs	r3, #0
 8001870:	e000      	b.n	8001874 <Max30102_Led2PulseAmplitude+0x20>
	return MAX30102_OK;
 8001872:	2301      	movs	r3, #1
}
 8001874:	4618      	mov	r0, r3
 8001876:	3708      	adds	r7, #8
 8001878:	46bd      	mov	sp, r7
 800187a:	bd80      	pop	{r7, pc}

0800187c <Max30102_GetHeartRate>:
{
	return IsFingerOnScreen;
}

int32_t Max30102_GetHeartRate(void)
{
 800187c:	b480      	push	{r7}
 800187e:	af00      	add	r7, sp, #0
	return HeartRate;
 8001880:	4b02      	ldr	r3, [pc, #8]	; (800188c <Max30102_GetHeartRate+0x10>)
 8001882:	681b      	ldr	r3, [r3, #0]
}
 8001884:	4618      	mov	r0, r3
 8001886:	46bd      	mov	sp, r7
 8001888:	bc80      	pop	{r7}
 800188a:	4770      	bx	lr
 800188c:	200011e0 	.word	0x200011e0

08001890 <Max30102_GetSpO2Value>:

int32_t Max30102_GetSpO2Value(void)
{
 8001890:	b480      	push	{r7}
 8001892:	af00      	add	r7, sp, #0
	return Sp02Value;
 8001894:	4b02      	ldr	r3, [pc, #8]	; (80018a0 <Max30102_GetSpO2Value+0x10>)
 8001896:	681b      	ldr	r3, [r3, #0]
}
 8001898:	4618      	mov	r0, r3
 800189a:	46bd      	mov	sp, r7
 800189c:	bc80      	pop	{r7}
 800189e:	4770      	bx	lr
 80018a0:	20001b50 	.word	0x20001b50

080018a4 <Max30102_Task>:

void Max30102_Task(void)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b084      	sub	sp, #16
 80018a8:	af04      	add	r7, sp, #16
	switch(StateMachine)
 80018aa:	4b4c      	ldr	r3, [pc, #304]	; (80019dc <Max30102_Task+0x138>)
 80018ac:	781b      	ldrb	r3, [r3, #0]
 80018ae:	2b03      	cmp	r3, #3
 80018b0:	f200 8090 	bhi.w	80019d4 <Max30102_Task+0x130>
 80018b4:	a201      	add	r2, pc, #4	; (adr r2, 80018bc <Max30102_Task+0x18>)
 80018b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018ba:	bf00      	nop
 80018bc:	080018cd 	.word	0x080018cd
 80018c0:	08001905 	.word	0x08001905
 80018c4:	08001933 	.word	0x08001933
 80018c8:	0800199d 	.word	0x0800199d
	{
		case MAX30102_STATE_BEGIN:
			HeartRate = 0;
 80018cc:	4b44      	ldr	r3, [pc, #272]	; (80019e0 <Max30102_Task+0x13c>)
 80018ce:	2200      	movs	r2, #0
 80018d0:	601a      	str	r2, [r3, #0]
			Sp02Value = 0;
 80018d2:	4b44      	ldr	r3, [pc, #272]	; (80019e4 <Max30102_Task+0x140>)
 80018d4:	2200      	movs	r2, #0
 80018d6:	601a      	str	r2, [r3, #0]
			if(IsFingerOnScreen)
 80018d8:	4b43      	ldr	r3, [pc, #268]	; (80019e8 <Max30102_Task+0x144>)
 80018da:	781b      	ldrb	r3, [r3, #0]
 80018dc:	b2db      	uxtb	r3, r3
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d073      	beq.n	80019ca <Max30102_Task+0x126>
			{
				CollectedSamples = 0;
 80018e2:	4b42      	ldr	r3, [pc, #264]	; (80019ec <Max30102_Task+0x148>)
 80018e4:	2200      	movs	r2, #0
 80018e6:	601a      	str	r2, [r3, #0]
				BufferTail = BufferHead;
 80018e8:	4b41      	ldr	r3, [pc, #260]	; (80019f0 <Max30102_Task+0x14c>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	4a41      	ldr	r2, [pc, #260]	; (80019f4 <Max30102_Task+0x150>)
 80018ee:	6013      	str	r3, [r2, #0]
				Max30102_Led1PulseAmplitude(MAX30102_RED_LED_CURRENT_HIGH);
 80018f0:	2024      	movs	r0, #36	; 0x24
 80018f2:	f7ff ff9b 	bl	800182c <Max30102_Led1PulseAmplitude>
				Max30102_Led2PulseAmplitude(MAX30102_IR_LED_CURRENT_HIGH);
 80018f6:	2024      	movs	r0, #36	; 0x24
 80018f8:	f7ff ffac 	bl	8001854 <Max30102_Led2PulseAmplitude>
				StateMachine = MAX30102_STATE_CALIBRATE;
 80018fc:	4b37      	ldr	r3, [pc, #220]	; (80019dc <Max30102_Task+0x138>)
 80018fe:	2201      	movs	r2, #1
 8001900:	701a      	strb	r2, [r3, #0]
			}
			break;
 8001902:	e062      	b.n	80019ca <Max30102_Task+0x126>

		case MAX30102_STATE_CALIBRATE:
				if(IsFingerOnScreen)
 8001904:	4b38      	ldr	r3, [pc, #224]	; (80019e8 <Max30102_Task+0x144>)
 8001906:	781b      	ldrb	r3, [r3, #0]
 8001908:	b2db      	uxtb	r3, r3
 800190a:	2b00      	cmp	r3, #0
 800190c:	d007      	beq.n	800191e <Max30102_Task+0x7a>
				{
					if(CollectedSamples > (MAX30102_BUFFER_LENGTH-MAX30102_SAMPLES_PER_SECOND))
 800190e:	4b37      	ldr	r3, [pc, #220]	; (80019ec <Max30102_Task+0x148>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	2bfa      	cmp	r3, #250	; 0xfa
 8001914:	d95b      	bls.n	80019ce <Max30102_Task+0x12a>
					{
						StateMachine = MAX30102_STATE_CALCULATE_HR;
 8001916:	4b31      	ldr	r3, [pc, #196]	; (80019dc <Max30102_Task+0x138>)
 8001918:	2202      	movs	r2, #2
 800191a:	701a      	strb	r2, [r3, #0]
				{
					Max30102_Led1PulseAmplitude(MAX30102_RED_LED_CURRENT_LOW);
					Max30102_Led2PulseAmplitude(MAX30102_IR_LED_CURRENT_LOW);
					StateMachine = MAX30102_STATE_BEGIN;
				}
			break;
 800191c:	e057      	b.n	80019ce <Max30102_Task+0x12a>
					Max30102_Led1PulseAmplitude(MAX30102_RED_LED_CURRENT_LOW);
 800191e:	2000      	movs	r0, #0
 8001920:	f7ff ff84 	bl	800182c <Max30102_Led1PulseAmplitude>
					Max30102_Led2PulseAmplitude(MAX30102_IR_LED_CURRENT_LOW);
 8001924:	2001      	movs	r0, #1
 8001926:	f7ff ff95 	bl	8001854 <Max30102_Led2PulseAmplitude>
					StateMachine = MAX30102_STATE_BEGIN;
 800192a:	4b2c      	ldr	r3, [pc, #176]	; (80019dc <Max30102_Task+0x138>)
 800192c:	2200      	movs	r2, #0
 800192e:	701a      	strb	r2, [r3, #0]
			break;
 8001930:	e04d      	b.n	80019ce <Max30102_Task+0x12a>

		case MAX30102_STATE_CALCULATE_HR:
			if(IsFingerOnScreen)
 8001932:	4b2d      	ldr	r3, [pc, #180]	; (80019e8 <Max30102_Task+0x144>)
 8001934:	781b      	ldrb	r3, [r3, #0]
 8001936:	b2db      	uxtb	r3, r3
 8001938:	2b00      	cmp	r3, #0
 800193a:	d025      	beq.n	8001988 <Max30102_Task+0xe4>
			{
				maxim_heart_rate_and_oxygen_saturation(IrBuffer, RedBuffer, MAX30102_BUFFER_LENGTH-MAX30102_SAMPLES_PER_SECOND, BufferTail, &Sp02Value, &Sp02IsValid, &HeartRate, &IsHrValid);
 800193c:	4b2d      	ldr	r3, [pc, #180]	; (80019f4 <Max30102_Task+0x150>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	b29b      	uxth	r3, r3
 8001942:	4a2d      	ldr	r2, [pc, #180]	; (80019f8 <Max30102_Task+0x154>)
 8001944:	9203      	str	r2, [sp, #12]
 8001946:	4a26      	ldr	r2, [pc, #152]	; (80019e0 <Max30102_Task+0x13c>)
 8001948:	9202      	str	r2, [sp, #8]
 800194a:	4a2c      	ldr	r2, [pc, #176]	; (80019fc <Max30102_Task+0x158>)
 800194c:	9201      	str	r2, [sp, #4]
 800194e:	4a25      	ldr	r2, [pc, #148]	; (80019e4 <Max30102_Task+0x140>)
 8001950:	9200      	str	r2, [sp, #0]
 8001952:	22fa      	movs	r2, #250	; 0xfa
 8001954:	492a      	ldr	r1, [pc, #168]	; (8001a00 <Max30102_Task+0x15c>)
 8001956:	482b      	ldr	r0, [pc, #172]	; (8001a04 <Max30102_Task+0x160>)
 8001958:	f000 f8ee 	bl	8001b38 <maxim_heart_rate_and_oxygen_saturation>
				BufferTail = (BufferTail + MAX30102_SAMPLES_PER_SECOND) % MAX30102_BUFFER_LENGTH;
 800195c:	4b25      	ldr	r3, [pc, #148]	; (80019f4 <Max30102_Task+0x150>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8001964:	4b28      	ldr	r3, [pc, #160]	; (8001a08 <Max30102_Task+0x164>)
 8001966:	fba3 1302 	umull	r1, r3, r3, r2
 800196a:	095b      	lsrs	r3, r3, #5
 800196c:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8001970:	fb01 f303 	mul.w	r3, r1, r3
 8001974:	1ad3      	subs	r3, r2, r3
 8001976:	4a1f      	ldr	r2, [pc, #124]	; (80019f4 <Max30102_Task+0x150>)
 8001978:	6013      	str	r3, [r2, #0]
				CollectedSamples = 0;
 800197a:	4b1c      	ldr	r3, [pc, #112]	; (80019ec <Max30102_Task+0x148>)
 800197c:	2200      	movs	r2, #0
 800197e:	601a      	str	r2, [r3, #0]
				StateMachine = MAX30102_STATE_COLLECT_NEXT_PORTION;
 8001980:	4b16      	ldr	r3, [pc, #88]	; (80019dc <Max30102_Task+0x138>)
 8001982:	2203      	movs	r2, #3
 8001984:	701a      	strb	r2, [r3, #0]
			{
				Max30102_Led1PulseAmplitude(MAX30102_RED_LED_CURRENT_LOW);
				Max30102_Led2PulseAmplitude(MAX30102_IR_LED_CURRENT_LOW);
				StateMachine = MAX30102_STATE_BEGIN;
			}
			break;
 8001986:	e025      	b.n	80019d4 <Max30102_Task+0x130>
				Max30102_Led1PulseAmplitude(MAX30102_RED_LED_CURRENT_LOW);
 8001988:	2000      	movs	r0, #0
 800198a:	f7ff ff4f 	bl	800182c <Max30102_Led1PulseAmplitude>
				Max30102_Led2PulseAmplitude(MAX30102_IR_LED_CURRENT_LOW);
 800198e:	2001      	movs	r0, #1
 8001990:	f7ff ff60 	bl	8001854 <Max30102_Led2PulseAmplitude>
				StateMachine = MAX30102_STATE_BEGIN;
 8001994:	4b11      	ldr	r3, [pc, #68]	; (80019dc <Max30102_Task+0x138>)
 8001996:	2200      	movs	r2, #0
 8001998:	701a      	strb	r2, [r3, #0]
			break;
 800199a:	e01b      	b.n	80019d4 <Max30102_Task+0x130>

		case MAX30102_STATE_COLLECT_NEXT_PORTION:
			if(IsFingerOnScreen)
 800199c:	4b12      	ldr	r3, [pc, #72]	; (80019e8 <Max30102_Task+0x144>)
 800199e:	781b      	ldrb	r3, [r3, #0]
 80019a0:	b2db      	uxtb	r3, r3
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d007      	beq.n	80019b6 <Max30102_Task+0x112>
			{
				if(CollectedSamples > MAX30102_SAMPLES_PER_SECOND)
 80019a6:	4b11      	ldr	r3, [pc, #68]	; (80019ec <Max30102_Task+0x148>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	2b32      	cmp	r3, #50	; 0x32
 80019ac:	d911      	bls.n	80019d2 <Max30102_Task+0x12e>
				{
					StateMachine = MAX30102_STATE_CALCULATE_HR;
 80019ae:	4b0b      	ldr	r3, [pc, #44]	; (80019dc <Max30102_Task+0x138>)
 80019b0:	2202      	movs	r2, #2
 80019b2:	701a      	strb	r2, [r3, #0]
			{
				Max30102_Led1PulseAmplitude(MAX30102_RED_LED_CURRENT_LOW);
				Max30102_Led2PulseAmplitude(MAX30102_IR_LED_CURRENT_LOW);
				StateMachine = MAX30102_STATE_BEGIN;
			}
			break;
 80019b4:	e00d      	b.n	80019d2 <Max30102_Task+0x12e>
				Max30102_Led1PulseAmplitude(MAX30102_RED_LED_CURRENT_LOW);
 80019b6:	2000      	movs	r0, #0
 80019b8:	f7ff ff38 	bl	800182c <Max30102_Led1PulseAmplitude>
				Max30102_Led2PulseAmplitude(MAX30102_IR_LED_CURRENT_LOW);
 80019bc:	2001      	movs	r0, #1
 80019be:	f7ff ff49 	bl	8001854 <Max30102_Led2PulseAmplitude>
				StateMachine = MAX30102_STATE_BEGIN;
 80019c2:	4b06      	ldr	r3, [pc, #24]	; (80019dc <Max30102_Task+0x138>)
 80019c4:	2200      	movs	r2, #0
 80019c6:	701a      	strb	r2, [r3, #0]
			break;
 80019c8:	e003      	b.n	80019d2 <Max30102_Task+0x12e>
			break;
 80019ca:	bf00      	nop
 80019cc:	e002      	b.n	80019d4 <Max30102_Task+0x130>
			break;
 80019ce:	bf00      	nop
 80019d0:	e000      	b.n	80019d4 <Max30102_Task+0x130>
			break;
 80019d2:	bf00      	nop
	}
}
 80019d4:	bf00      	nop
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bd80      	pop	{r7, pc}
 80019da:	bf00      	nop
 80019dc:	200011d8 	.word	0x200011d8
 80019e0:	200011e0 	.word	0x200011e0
 80019e4:	20001b50 	.word	0x20001b50
 80019e8:	200011d9 	.word	0x200011d9
 80019ec:	200011d0 	.word	0x200011d0
 80019f0:	200011dc 	.word	0x200011dc
 80019f4:	20001698 	.word	0x20001698
 80019f8:	20001b4c 	.word	0x20001b4c
 80019fc:	20001694 	.word	0x20001694
 8001a00:	2000169c 	.word	0x2000169c
 8001a04:	200011e4 	.word	0x200011e4
 8001a08:	1b4e81b5 	.word	0x1b4e81b5

08001a0c <Max30102_Init>:

//
//	Initialization
//
MAX30102_STATUS Max30102_Init(I2C_HandleTypeDef *i2c)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b084      	sub	sp, #16
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
	uint8_t uch_dummy;
	i2c_max30102 = i2c;
 8001a14:	4a46      	ldr	r2, [pc, #280]	; (8001b30 <Max30102_Init+0x124>)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	6013      	str	r3, [r2, #0]
	if(MAX30102_OK != Max30102_Reset()) //resets the MAX30102
 8001a1a:	f7ff fe27 	bl	800166c <Max30102_Reset>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	2b01      	cmp	r3, #1
 8001a22:	d001      	beq.n	8001a28 <Max30102_Init+0x1c>
		return MAX30102_ERROR;
 8001a24:	2300      	movs	r3, #0
 8001a26:	e07e      	b.n	8001b26 <Max30102_Init+0x11a>
	if(MAX30102_OK != Max30102_ReadReg(0,&uch_dummy))
 8001a28:	f107 030f 	add.w	r3, r7, #15
 8001a2c:	4619      	mov	r1, r3
 8001a2e:	2000      	movs	r0, #0
 8001a30:	f7ff fb96 	bl	8001160 <Max30102_ReadReg>
 8001a34:	4603      	mov	r3, r0
 8001a36:	2b01      	cmp	r3, #1
 8001a38:	d001      	beq.n	8001a3e <Max30102_Init+0x32>
		return MAX30102_ERROR;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	e073      	b.n	8001b26 <Max30102_Init+0x11a>
	if(MAX30102_OK != Max30102_FifoWritePointer(0x00))
 8001a3e:	2000      	movs	r0, #0
 8001a40:	f7ff fd52 	bl	80014e8 <Max30102_FifoWritePointer>
 8001a44:	4603      	mov	r3, r0
 8001a46:	2b01      	cmp	r3, #1
 8001a48:	d001      	beq.n	8001a4e <Max30102_Init+0x42>
		return MAX30102_ERROR;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	e06b      	b.n	8001b26 <Max30102_Init+0x11a>
	if(MAX30102_OK != Max30102_FifoOverflowCounter(0x00))
 8001a4e:	2000      	movs	r0, #0
 8001a50:	f7ff fd61 	bl	8001516 <Max30102_FifoOverflowCounter>
 8001a54:	4603      	mov	r3, r0
 8001a56:	2b01      	cmp	r3, #1
 8001a58:	d001      	beq.n	8001a5e <Max30102_Init+0x52>
		return MAX30102_ERROR;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	e063      	b.n	8001b26 <Max30102_Init+0x11a>
	if(MAX30102_OK != Max30102_FifoReadPointer(0x00))
 8001a5e:	2000      	movs	r0, #0
 8001a60:	f7ff fd70 	bl	8001544 <Max30102_FifoReadPointer>
 8001a64:	4603      	mov	r3, r0
 8001a66:	2b01      	cmp	r3, #1
 8001a68:	d001      	beq.n	8001a6e <Max30102_Init+0x62>
		return MAX30102_ERROR;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	e05b      	b.n	8001b26 <Max30102_Init+0x11a>
	if(MAX30102_OK != Max30102_FifoSampleAveraging(FIFO_SMP_AVE_1))
 8001a6e:	2000      	movs	r0, #0
 8001a70:	f7ff fd7f 	bl	8001572 <Max30102_FifoSampleAveraging>
 8001a74:	4603      	mov	r3, r0
 8001a76:	2b01      	cmp	r3, #1
 8001a78:	d001      	beq.n	8001a7e <Max30102_Init+0x72>
		return MAX30102_ERROR;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	e053      	b.n	8001b26 <Max30102_Init+0x11a>
	if(MAX30102_OK != Max30102_FifoRolloverEnable(0))
 8001a7e:	2000      	movs	r0, #0
 8001a80:	f7ff fda4 	bl	80015cc <Max30102_FifoRolloverEnable>
 8001a84:	4603      	mov	r3, r0
 8001a86:	2b01      	cmp	r3, #1
 8001a88:	d001      	beq.n	8001a8e <Max30102_Init+0x82>
		return MAX30102_ERROR;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	e04b      	b.n	8001b26 <Max30102_Init+0x11a>
	if(MAX30102_OK != Max30102_FifoAlmostFullValue(MAX30102_FIFO_ALMOST_FULL_SAMPLES))
 8001a8e:	2011      	movs	r0, #17
 8001a90:	f7ff fdaf 	bl	80015f2 <Max30102_FifoAlmostFullValue>
 8001a94:	4603      	mov	r3, r0
 8001a96:	2b01      	cmp	r3, #1
 8001a98:	d001      	beq.n	8001a9e <Max30102_Init+0x92>
		return MAX30102_ERROR;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	e043      	b.n	8001b26 <Max30102_Init+0x11a>
	if(MAX30102_OK != Max30102_SetMode(MODE_SPO2_MODE))
 8001a9e:	2003      	movs	r0, #3
 8001aa0:	f7ff fe06 	bl	80016b0 <Max30102_SetMode>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	2b01      	cmp	r3, #1
 8001aa8:	d001      	beq.n	8001aae <Max30102_Init+0xa2>
		return MAX30102_ERROR;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	e03b      	b.n	8001b26 <Max30102_Init+0x11a>
	if(MAX30102_OK != Max30102_SpO2AdcRange(SPO2_ADC_RGE_4096))
 8001aae:	2001      	movs	r0, #1
 8001ab0:	f7ff fe2d 	bl	800170e <Max30102_SpO2AdcRange>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	2b01      	cmp	r3, #1
 8001ab8:	d001      	beq.n	8001abe <Max30102_Init+0xb2>
		return MAX30102_ERROR;
 8001aba:	2300      	movs	r3, #0
 8001abc:	e033      	b.n	8001b26 <Max30102_Init+0x11a>
	if(MAX30102_OK != Max30102_SpO2SampleRate(SPO2_SAMPLE_RATE))
 8001abe:	2000      	movs	r0, #0
 8001ac0:	f7ff fe55 	bl	800176e <Max30102_SpO2SampleRate>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	2b01      	cmp	r3, #1
 8001ac8:	d001      	beq.n	8001ace <Max30102_Init+0xc2>
		return MAX30102_ERROR;
 8001aca:	2300      	movs	r3, #0
 8001acc:	e02b      	b.n	8001b26 <Max30102_Init+0x11a>
	if(MAX30102_OK != Max30102_SpO2LedPulseWidth(SPO2_PULSE_WIDTH_411))
 8001ace:	2003      	movs	r0, #3
 8001ad0:	f7ff fe7d 	bl	80017ce <Max30102_SpO2LedPulseWidth>
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	2b01      	cmp	r3, #1
 8001ad8:	d001      	beq.n	8001ade <Max30102_Init+0xd2>
		return MAX30102_ERROR;
 8001ada:	2300      	movs	r3, #0
 8001adc:	e023      	b.n	8001b26 <Max30102_Init+0x11a>
	if(MAX30102_OK != Max30102_Led1PulseAmplitude(MAX30102_RED_LED_CURRENT_LOW))
 8001ade:	2000      	movs	r0, #0
 8001ae0:	f7ff fea4 	bl	800182c <Max30102_Led1PulseAmplitude>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	2b01      	cmp	r3, #1
 8001ae8:	d001      	beq.n	8001aee <Max30102_Init+0xe2>
		return MAX30102_ERROR;
 8001aea:	2300      	movs	r3, #0
 8001aec:	e01b      	b.n	8001b26 <Max30102_Init+0x11a>
	if(MAX30102_OK != Max30102_Led2PulseAmplitude(MAX30102_IR_LED_CURRENT_LOW))
 8001aee:	2001      	movs	r0, #1
 8001af0:	f7ff feb0 	bl	8001854 <Max30102_Led2PulseAmplitude>
 8001af4:	4603      	mov	r3, r0
 8001af6:	2b01      	cmp	r3, #1
 8001af8:	d001      	beq.n	8001afe <Max30102_Init+0xf2>
		return MAX30102_ERROR;
 8001afa:	2300      	movs	r3, #0
 8001afc:	e013      	b.n	8001b26 <Max30102_Init+0x11a>
	if(MAX30102_OK != Max30102_SetIntAlmostFullEnabled(1))
 8001afe:	2001      	movs	r0, #1
 8001b00:	f7ff fbfc 	bl	80012fc <Max30102_SetIntAlmostFullEnabled>
 8001b04:	4603      	mov	r3, r0
 8001b06:	2b01      	cmp	r3, #1
 8001b08:	d001      	beq.n	8001b0e <Max30102_Init+0x102>
		return MAX30102_ERROR;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	e00b      	b.n	8001b26 <Max30102_Init+0x11a>
	if(MAX30102_OK != Max30102_SetIntFifoDataReadyEnabled(1))
 8001b0e:	2001      	movs	r0, #1
 8001b10:	f7ff fc04 	bl	800131c <Max30102_SetIntFifoDataReadyEnabled>
 8001b14:	4603      	mov	r3, r0
 8001b16:	2b01      	cmp	r3, #1
 8001b18:	d001      	beq.n	8001b1e <Max30102_Init+0x112>
		return MAX30102_ERROR;
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	e003      	b.n	8001b26 <Max30102_Init+0x11a>
//	if(MAX30102_OK != Max30102_WriteReg(REG_PILOT_PA,0x7f))   // Choose value for ~ 25mA for Pilot LED
//		return MAX30102_ERROR;
	StateMachine = MAX30102_STATE_BEGIN;
 8001b1e:	4b05      	ldr	r3, [pc, #20]	; (8001b34 <Max30102_Init+0x128>)
 8001b20:	2200      	movs	r2, #0
 8001b22:	701a      	strb	r2, [r3, #0]
	return MAX30102_OK;
 8001b24:	2301      	movs	r3, #1
}
 8001b26:	4618      	mov	r0, r3
 8001b28:	3710      	adds	r7, #16
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bd80      	pop	{r7, pc}
 8001b2e:	bf00      	nop
 8001b30:	200011d4 	.word	0x200011d4
 8001b34:	200011d8 	.word	0x200011d8

08001b38 <maxim_heart_rate_and_oxygen_saturation>:
* \param[out]    *pn_heart_rate          - Calculated heart rate value
* \param[out]    *pch_hr_valid           - 1 if the calculated heart rate value is valid
*
* \retval       None
*/
{
 8001b38:	b590      	push	{r4, r7, lr}
 8001b3a:	b0d3      	sub	sp, #332	; 0x14c
 8001b3c:	af04      	add	r7, sp, #16
 8001b3e:	f107 040c 	add.w	r4, r7, #12
 8001b42:	6020      	str	r0, [r4, #0]
 8001b44:	f107 0008 	add.w	r0, r7, #8
 8001b48:	6001      	str	r1, [r0, #0]
 8001b4a:	1d39      	adds	r1, r7, #4
 8001b4c:	600a      	str	r2, [r1, #0]
 8001b4e:	461a      	mov	r2, r3
 8001b50:	1cbb      	adds	r3, r7, #2
 8001b52:	801a      	strh	r2, [r3, #0]
    int32_t n_spo2_calc; 
    int32_t n_y_dc_max, n_x_dc_max; 
    int32_t n_y_dc_max_idx, n_x_dc_max_idx; 
    int32_t an_ratio[5],n_ratio_average; 
    int32_t n_nume,  n_denom ;
    uint32_t un_offset_tmp = un_offset;
 8001b54:	1cbb      	adds	r3, r7, #2
 8001b56:	881b      	ldrh	r3, [r3, #0]
 8001b58:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    // remove DC of ir signal    
    un_ir_mean =0; 
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
    for (k=0 ; k<n_buffer_length ; k++ )
 8001b62:	2300      	movs	r3, #0
 8001b64:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8001b68:	e01f      	b.n	8001baa <maxim_heart_rate_and_oxygen_saturation+0x72>
	{
    	un_ir_mean += pun_ir_buffer[un_offset_tmp];
 8001b6a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8001b6e:	009b      	lsls	r3, r3, #2
 8001b70:	f107 020c 	add.w	r2, r7, #12
 8001b74:	6812      	ldr	r2, [r2, #0]
 8001b76:	4413      	add	r3, r2
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 8001b7e:	4413      	add	r3, r2
 8001b80:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
    	un_offset_tmp = (un_offset_tmp + 1) % MAX30102_BUFFER_LENGTH;
 8001b84:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8001b88:	3301      	adds	r3, #1
 8001b8a:	4adc      	ldr	r2, [pc, #880]	; (8001efc <maxim_heart_rate_and_oxygen_saturation+0x3c4>)
 8001b8c:	fba2 1203 	umull	r1, r2, r2, r3
 8001b90:	0952      	lsrs	r2, r2, #5
 8001b92:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8001b96:	fb01 f202 	mul.w	r2, r1, r2
 8001b9a:	1a9b      	subs	r3, r3, r2
 8001b9c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    for (k=0 ; k<n_buffer_length ; k++ )
 8001ba0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001ba4:	3301      	adds	r3, #1
 8001ba6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8001baa:	1d3b      	adds	r3, r7, #4
 8001bac:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	429a      	cmp	r2, r3
 8001bb4:	dbd9      	blt.n	8001b6a <maxim_heart_rate_and_oxygen_saturation+0x32>
	}

    un_ir_mean =un_ir_mean/n_buffer_length ;
 8001bb6:	1d3b      	adds	r3, r7, #4
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 8001bbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bc2:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
    un_offset_tmp = un_offset;
 8001bc6:	1cbb      	adds	r3, r7, #2
 8001bc8:	881b      	ldrh	r3, [r3, #0]
 8001bca:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    for (k=0 ; k<n_buffer_length ; k++ )
 8001bce:	2300      	movs	r3, #0
 8001bd0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8001bd4:	e023      	b.n	8001c1e <maxim_heart_rate_and_oxygen_saturation+0xe6>
	{
    	an_x[k] =  pun_ir_buffer[un_offset_tmp] - un_ir_mean;
 8001bd6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8001bda:	009b      	lsls	r3, r3, #2
 8001bdc:	f107 020c 	add.w	r2, r7, #12
 8001be0:	6812      	ldr	r2, [r2, #0]
 8001be2:	4413      	add	r3, r2
 8001be4:	681a      	ldr	r2, [r3, #0]
 8001be6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8001bea:	1ad3      	subs	r3, r2, r3
 8001bec:	4619      	mov	r1, r3
 8001bee:	4ac4      	ldr	r2, [pc, #784]	; (8001f00 <maxim_heart_rate_and_oxygen_saturation+0x3c8>)
 8001bf0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001bf4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    	un_offset_tmp = (un_offset_tmp + 1) % MAX30102_BUFFER_LENGTH;
 8001bf8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8001bfc:	3301      	adds	r3, #1
 8001bfe:	4abf      	ldr	r2, [pc, #764]	; (8001efc <maxim_heart_rate_and_oxygen_saturation+0x3c4>)
 8001c00:	fba2 1203 	umull	r1, r2, r2, r3
 8001c04:	0952      	lsrs	r2, r2, #5
 8001c06:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8001c0a:	fb01 f202 	mul.w	r2, r1, r2
 8001c0e:	1a9b      	subs	r3, r3, r2
 8001c10:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    for (k=0 ; k<n_buffer_length ; k++ )
 8001c14:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001c18:	3301      	adds	r3, #1
 8001c1a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8001c1e:	1d3b      	adds	r3, r7, #4
 8001c20:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	429a      	cmp	r2, r3
 8001c28:	dbd5      	blt.n	8001bd6 <maxim_heart_rate_and_oxygen_saturation+0x9e>
	}
    
    // 4 pt Moving Average
    for(k=0; k< BUFFER_SIZE-MA4_SIZE; k++)
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8001c30:	e02c      	b.n	8001c8c <maxim_heart_rate_and_oxygen_saturation+0x154>
    {
        n_denom= ( an_x[k]+an_x[k+1]+ an_x[k+2]+ an_x[k+3]);
 8001c32:	4ab3      	ldr	r2, [pc, #716]	; (8001f00 <maxim_heart_rate_and_oxygen_saturation+0x3c8>)
 8001c34:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001c38:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001c3c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001c40:	3301      	adds	r3, #1
 8001c42:	49af      	ldr	r1, [pc, #700]	; (8001f00 <maxim_heart_rate_and_oxygen_saturation+0x3c8>)
 8001c44:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001c48:	441a      	add	r2, r3
 8001c4a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001c4e:	3302      	adds	r3, #2
 8001c50:	49ab      	ldr	r1, [pc, #684]	; (8001f00 <maxim_heart_rate_and_oxygen_saturation+0x3c8>)
 8001c52:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001c56:	441a      	add	r2, r3
 8001c58:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001c5c:	3303      	adds	r3, #3
 8001c5e:	49a8      	ldr	r1, [pc, #672]	; (8001f00 <maxim_heart_rate_and_oxygen_saturation+0x3c8>)
 8001c60:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001c64:	4413      	add	r3, r2
 8001c66:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
        an_x[k]=  n_denom/(int32_t)4; 
 8001c6a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	da00      	bge.n	8001c74 <maxim_heart_rate_and_oxygen_saturation+0x13c>
 8001c72:	3303      	adds	r3, #3
 8001c74:	109b      	asrs	r3, r3, #2
 8001c76:	4619      	mov	r1, r3
 8001c78:	4aa1      	ldr	r2, [pc, #644]	; (8001f00 <maxim_heart_rate_and_oxygen_saturation+0x3c8>)
 8001c7a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001c7e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for(k=0; k< BUFFER_SIZE-MA4_SIZE; k++)
 8001c82:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001c86:	3301      	adds	r3, #1
 8001c88:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8001c8c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001c90:	2bf5      	cmp	r3, #245	; 0xf5
 8001c92:	ddce      	ble.n	8001c32 <maxim_heart_rate_and_oxygen_saturation+0xfa>
    }

    // get difference of smoothed IR signal
    
    for( k=0; k<BUFFER_SIZE-MA4_SIZE-1;  k++)
 8001c94:	2300      	movs	r3, #0
 8001c96:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8001c9a:	e015      	b.n	8001cc8 <maxim_heart_rate_and_oxygen_saturation+0x190>
        an_dx[k]= (an_x[k+1]- an_x[k]);
 8001c9c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001ca0:	3301      	adds	r3, #1
 8001ca2:	4a97      	ldr	r2, [pc, #604]	; (8001f00 <maxim_heart_rate_and_oxygen_saturation+0x3c8>)
 8001ca4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001ca8:	4995      	ldr	r1, [pc, #596]	; (8001f00 <maxim_heart_rate_and_oxygen_saturation+0x3c8>)
 8001caa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001cae:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001cb2:	1ad2      	subs	r2, r2, r3
 8001cb4:	4993      	ldr	r1, [pc, #588]	; (8001f04 <maxim_heart_rate_and_oxygen_saturation+0x3cc>)
 8001cb6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001cba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    for( k=0; k<BUFFER_SIZE-MA4_SIZE-1;  k++)
 8001cbe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001cc2:	3301      	adds	r3, #1
 8001cc4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8001cc8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001ccc:	2bf4      	cmp	r3, #244	; 0xf4
 8001cce:	dde5      	ble.n	8001c9c <maxim_heart_rate_and_oxygen_saturation+0x164>

    // 2-pt Moving Average to an_dx
    for(k=0; k< BUFFER_SIZE-MA4_SIZE-2; k++){
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8001cd6:	e019      	b.n	8001d0c <maxim_heart_rate_and_oxygen_saturation+0x1d4>
        an_dx[k] =  ( an_dx[k]+an_dx[k+1])/2 ;
 8001cd8:	4a8a      	ldr	r2, [pc, #552]	; (8001f04 <maxim_heart_rate_and_oxygen_saturation+0x3cc>)
 8001cda:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001cde:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001ce2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001ce6:	3301      	adds	r3, #1
 8001ce8:	4986      	ldr	r1, [pc, #536]	; (8001f04 <maxim_heart_rate_and_oxygen_saturation+0x3cc>)
 8001cea:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001cee:	4413      	add	r3, r2
 8001cf0:	0fda      	lsrs	r2, r3, #31
 8001cf2:	4413      	add	r3, r2
 8001cf4:	105b      	asrs	r3, r3, #1
 8001cf6:	4619      	mov	r1, r3
 8001cf8:	4a82      	ldr	r2, [pc, #520]	; (8001f04 <maxim_heart_rate_and_oxygen_saturation+0x3cc>)
 8001cfa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001cfe:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for(k=0; k< BUFFER_SIZE-MA4_SIZE-2; k++){
 8001d02:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001d06:	3301      	adds	r3, #1
 8001d08:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8001d0c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001d10:	2bf3      	cmp	r3, #243	; 0xf3
 8001d12:	dde1      	ble.n	8001cd8 <maxim_heart_rate_and_oxygen_saturation+0x1a0>
    }
    
    // hamming window
    // flip wave form so that we can detect valley with peak detector
    for ( i=0 ; i<BUFFER_SIZE-HAMMING_SIZE-MA4_SIZE-2 ;i++){
 8001d14:	2300      	movs	r3, #0
 8001d16:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001d1a:	e039      	b.n	8001d90 <maxim_heart_rate_and_oxygen_saturation+0x258>
        s= 0;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
        for( k=i; k<i+ HAMMING_SIZE ;k++){
 8001d22:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001d26:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8001d2a:	e018      	b.n	8001d5e <maxim_heart_rate_and_oxygen_saturation+0x226>
            s -= an_dx[k] *auw_hamm[k-i] ; 
 8001d2c:	4a75      	ldr	r2, [pc, #468]	; (8001f04 <maxim_heart_rate_and_oxygen_saturation+0x3cc>)
 8001d2e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001d32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d36:	f8d7 112c 	ldr.w	r1, [r7, #300]	; 0x12c
 8001d3a:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8001d3e:	1a8a      	subs	r2, r1, r2
 8001d40:	4971      	ldr	r1, [pc, #452]	; (8001f08 <maxim_heart_rate_and_oxygen_saturation+0x3d0>)
 8001d42:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8001d46:	fb02 f303 	mul.w	r3, r2, r3
 8001d4a:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 8001d4e:	1ad3      	subs	r3, r2, r3
 8001d50:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
        for( k=i; k<i+ HAMMING_SIZE ;k++){
 8001d54:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001d58:	3301      	adds	r3, #1
 8001d5a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8001d5e:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001d62:	3304      	adds	r3, #4
 8001d64:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8001d68:	429a      	cmp	r2, r3
 8001d6a:	dddf      	ble.n	8001d2c <maxim_heart_rate_and_oxygen_saturation+0x1f4>
                     }
        an_dx[i]= s/ (int32_t)1146; // divide by sum of auw_hamm 
 8001d6c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001d70:	4a66      	ldr	r2, [pc, #408]	; (8001f0c <maxim_heart_rate_and_oxygen_saturation+0x3d4>)
 8001d72:	fb82 1203 	smull	r1, r2, r2, r3
 8001d76:	1252      	asrs	r2, r2, #9
 8001d78:	17db      	asrs	r3, r3, #31
 8001d7a:	1ad2      	subs	r2, r2, r3
 8001d7c:	4961      	ldr	r1, [pc, #388]	; (8001f04 <maxim_heart_rate_and_oxygen_saturation+0x3cc>)
 8001d7e:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001d82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    for ( i=0 ; i<BUFFER_SIZE-HAMMING_SIZE-MA4_SIZE-2 ;i++){
 8001d86:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001d8a:	3301      	adds	r3, #1
 8001d8c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001d90:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001d94:	2bee      	cmp	r3, #238	; 0xee
 8001d96:	ddc1      	ble.n	8001d1c <maxim_heart_rate_and_oxygen_saturation+0x1e4>
    }

 
    n_th1=0; // threshold calculation
 8001d98:	2300      	movs	r3, #0
 8001d9a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    for ( k=0 ; k<BUFFER_SIZE-HAMMING_SIZE ;k++){
 8001d9e:	2300      	movs	r3, #0
 8001da0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8001da4:	e011      	b.n	8001dca <maxim_heart_rate_and_oxygen_saturation+0x292>
        n_th1 += ((an_dx[k]>0)? an_dx[k] : ((int32_t)0-an_dx[k])) ;
 8001da6:	4a57      	ldr	r2, [pc, #348]	; (8001f04 <maxim_heart_rate_and_oxygen_saturation+0x3cc>)
 8001da8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001dac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	bfb8      	it	lt
 8001db4:	425b      	neglt	r3, r3
 8001db6:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001dba:	4413      	add	r3, r2
 8001dbc:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    for ( k=0 ; k<BUFFER_SIZE-HAMMING_SIZE ;k++){
 8001dc0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001dc4:	3301      	adds	r3, #1
 8001dc6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8001dca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001dce:	2bf4      	cmp	r3, #244	; 0xf4
 8001dd0:	dde9      	ble.n	8001da6 <maxim_heart_rate_and_oxygen_saturation+0x26e>
    }
    n_th1= n_th1/ ( BUFFER_SIZE-HAMMING_SIZE);
 8001dd2:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8001dd6:	4a4e      	ldr	r2, [pc, #312]	; (8001f10 <maxim_heart_rate_and_oxygen_saturation+0x3d8>)
 8001dd8:	fb82 1203 	smull	r1, r2, r2, r3
 8001ddc:	1192      	asrs	r2, r2, #6
 8001dde:	17db      	asrs	r3, r3, #31
 8001de0:	1ad3      	subs	r3, r2, r3
 8001de2:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    // peak location is acutally index for sharpest location of raw signal since we flipped the signal         
    maxim_find_peaks( an_dx_peak_locs, &n_npks, an_dx, BUFFER_SIZE-HAMMING_SIZE, n_th1, 8, 5 );//peak_height, peak_distance, max_num_peaks 
 8001de6:	f107 01d8 	add.w	r1, r7, #216	; 0xd8
 8001dea:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8001dee:	2305      	movs	r3, #5
 8001df0:	9302      	str	r3, [sp, #8]
 8001df2:	2308      	movs	r3, #8
 8001df4:	9301      	str	r3, [sp, #4]
 8001df6:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8001dfa:	9300      	str	r3, [sp, #0]
 8001dfc:	23f5      	movs	r3, #245	; 0xf5
 8001dfe:	4a41      	ldr	r2, [pc, #260]	; (8001f04 <maxim_heart_rate_and_oxygen_saturation+0x3cc>)
 8001e00:	f000 fb78 	bl	80024f4 <maxim_find_peaks>

    n_peak_interval_sum =0;
 8001e04:	2300      	movs	r3, #0
 8001e06:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    if (n_npks>=2){
 8001e0a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8001e0e:	2b01      	cmp	r3, #1
 8001e10:	dd46      	ble.n	8001ea0 <maxim_heart_rate_and_oxygen_saturation+0x368>
        for (k=1; k<n_npks; k++)
 8001e12:	2301      	movs	r3, #1
 8001e14:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8001e18:	e017      	b.n	8001e4a <maxim_heart_rate_and_oxygen_saturation+0x312>
            n_peak_interval_sum += (an_dx_peak_locs[k]-an_dx_peak_locs[k -1]);
 8001e1a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e1e:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8001e22:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001e26:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001e2a:	1e59      	subs	r1, r3, #1
 8001e2c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e30:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001e34:	1ad3      	subs	r3, r2, r3
 8001e36:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 8001e3a:	4413      	add	r3, r2
 8001e3c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
        for (k=1; k<n_npks; k++)
 8001e40:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001e44:	3301      	adds	r3, #1
 8001e46:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8001e4a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8001e4e:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8001e52:	429a      	cmp	r2, r3
 8001e54:	dbe1      	blt.n	8001e1a <maxim_heart_rate_and_oxygen_saturation+0x2e2>
        n_peak_interval_sum=n_peak_interval_sum/(n_npks-1);
 8001e56:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8001e5a:	3b01      	subs	r3, #1
 8001e5c:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 8001e60:	fb92 f3f3 	sdiv	r3, r2, r3
 8001e64:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
        *pn_heart_rate=(int32_t)(6000/(float)n_peak_interval_sum*(float)(FS/100.0));// beats per minutes
 8001e68:	f8d7 0110 	ldr.w	r0, [r7, #272]	; 0x110
 8001e6c:	f7fe ff16 	bl	8000c9c <__aeabi_i2f>
 8001e70:	4603      	mov	r3, r0
 8001e72:	4619      	mov	r1, r3
 8001e74:	4827      	ldr	r0, [pc, #156]	; (8001f14 <maxim_heart_rate_and_oxygen_saturation+0x3dc>)
 8001e76:	f7ff f819 	bl	8000eac <__aeabi_fdiv>
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8001e80:	4618      	mov	r0, r3
 8001e82:	f7fe ff5f 	bl	8000d44 <__aeabi_fmul>
 8001e86:	4603      	mov	r3, r0
 8001e88:	4618      	mov	r0, r3
 8001e8a:	f7ff f921 	bl	80010d0 <__aeabi_f2iz>
 8001e8e:	4602      	mov	r2, r0
 8001e90:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001e94:	601a      	str	r2, [r3, #0]
        *pch_hr_valid  = 1;
 8001e96:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8001e9a:	2201      	movs	r2, #1
 8001e9c:	701a      	strb	r2, [r3, #0]
 8001e9e:	e007      	b.n	8001eb0 <maxim_heart_rate_and_oxygen_saturation+0x378>
    }
    else  {
        *pn_heart_rate = -999;
 8001ea0:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001ea4:	4a1c      	ldr	r2, [pc, #112]	; (8001f18 <maxim_heart_rate_and_oxygen_saturation+0x3e0>)
 8001ea6:	601a      	str	r2, [r3, #0]
        *pch_hr_valid  = 0;
 8001ea8:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8001eac:	2200      	movs	r2, #0
 8001eae:	701a      	strb	r2, [r3, #0]
    }
            
    for ( k=0 ; k<n_npks ;k++)
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8001eb6:	e013      	b.n	8001ee0 <maxim_heart_rate_and_oxygen_saturation+0x3a8>
        an_ir_valley_locs[k]=an_dx_peak_locs[k]+HAMMING_SIZE/2; 
 8001eb8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ebc:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8001ec0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ec4:	1c9a      	adds	r2, r3, #2
 8001ec6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001eca:	009b      	lsls	r3, r3, #2
 8001ecc:	f507 719c 	add.w	r1, r7, #312	; 0x138
 8001ed0:	440b      	add	r3, r1
 8001ed2:	f843 2c9c 	str.w	r2, [r3, #-156]
    for ( k=0 ; k<n_npks ;k++)
 8001ed6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001eda:	3301      	adds	r3, #1
 8001edc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8001ee0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8001ee4:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8001ee8:	429a      	cmp	r2, r3
 8001eea:	dbe5      	blt.n	8001eb8 <maxim_heart_rate_and_oxygen_saturation+0x380>


    // raw value : RED(=y) and IR(=X)
    // we need to assess DC and AC value of ir and red PPG.
    un_offset_tmp = un_offset;
 8001eec:	1cbb      	adds	r3, r7, #2
 8001eee:	881b      	ldrh	r3, [r3, #0]
 8001ef0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    for (k=0 ; k<n_buffer_length ; k++ )  {
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8001efa:	e03e      	b.n	8001f7a <maxim_heart_rate_and_oxygen_saturation+0x442>
 8001efc:	1b4e81b5 	.word	0x1b4e81b5
 8001f00:	200005e0 	.word	0x200005e0
 8001f04:	20000208 	.word	0x20000208
 8001f08:	0800aebc 	.word	0x0800aebc
 8001f0c:	725f9bed 	.word	0x725f9bed
 8001f10:	42df9bb1 	.word	0x42df9bb1
 8001f14:	45bb8000 	.word	0x45bb8000
 8001f18:	fffffc19 	.word	0xfffffc19
        an_x[k] =  pun_ir_buffer[un_offset_tmp];
 8001f1c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8001f20:	009b      	lsls	r3, r3, #2
 8001f22:	f107 020c 	add.w	r2, r7, #12
 8001f26:	6812      	ldr	r2, [r2, #0]
 8001f28:	4413      	add	r3, r2
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	4619      	mov	r1, r3
 8001f2e:	4aae      	ldr	r2, [pc, #696]	; (80021e8 <maxim_heart_rate_and_oxygen_saturation+0x6b0>)
 8001f30:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001f34:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        an_y[k] =  pun_red_buffer[un_offset_tmp];
 8001f38:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8001f3c:	009b      	lsls	r3, r3, #2
 8001f3e:	f107 0208 	add.w	r2, r7, #8
 8001f42:	6812      	ldr	r2, [r2, #0]
 8001f44:	4413      	add	r3, r2
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	4619      	mov	r1, r3
 8001f4a:	4aa8      	ldr	r2, [pc, #672]	; (80021ec <maxim_heart_rate_and_oxygen_saturation+0x6b4>)
 8001f4c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001f50:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        un_offset_tmp = (un_offset_tmp + 1) % MAX30102_BUFFER_LENGTH;
 8001f54:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8001f58:	3301      	adds	r3, #1
 8001f5a:	4aa5      	ldr	r2, [pc, #660]	; (80021f0 <maxim_heart_rate_and_oxygen_saturation+0x6b8>)
 8001f5c:	fba2 1203 	umull	r1, r2, r2, r3
 8001f60:	0952      	lsrs	r2, r2, #5
 8001f62:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8001f66:	fb01 f202 	mul.w	r2, r1, r2
 8001f6a:	1a9b      	subs	r3, r3, r2
 8001f6c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    for (k=0 ; k<n_buffer_length ; k++ )  {
 8001f70:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001f74:	3301      	adds	r3, #1
 8001f76:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8001f7a:	1d3b      	adds	r3, r7, #4
 8001f7c:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	429a      	cmp	r2, r3
 8001f84:	dbca      	blt.n	8001f1c <maxim_heart_rate_and_oxygen_saturation+0x3e4>
    }

    // find precise min near an_ir_valley_locs
    n_exact_ir_valley_locs_count =0; 
 8001f86:	2300      	movs	r3, #0
 8001f88:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    for(k=0 ; k<n_npks ;k++){
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8001f92:	e059      	b.n	8002048 <maxim_heart_rate_and_oxygen_saturation+0x510>
        un_only_once =1;
 8001f94:	2301      	movs	r3, #1
 8001f96:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
        m=an_ir_valley_locs[k];
 8001f9a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001f9e:	009b      	lsls	r3, r3, #2
 8001fa0:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8001fa4:	4413      	add	r3, r2
 8001fa6:	f853 3c9c 	ldr.w	r3, [r3, #-156]
 8001faa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
        n_c_min= 16777216;//2^24;
 8001fae:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001fb2:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
        if (m+5 <  BUFFER_SIZE-HAMMING_SIZE  && m-5 >0){
 8001fb6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001fba:	2bef      	cmp	r3, #239	; 0xef
 8001fbc:	dc3f      	bgt.n	800203e <maxim_heart_rate_and_oxygen_saturation+0x506>
 8001fbe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001fc2:	2b05      	cmp	r3, #5
 8001fc4:	dd3b      	ble.n	800203e <maxim_heart_rate_and_oxygen_saturation+0x506>
            for(i= m-5;i<m+5; i++)
 8001fc6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001fca:	3b05      	subs	r3, #5
 8001fcc:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001fd0:	e025      	b.n	800201e <maxim_heart_rate_and_oxygen_saturation+0x4e6>
                if (an_x[i]<n_c_min){
 8001fd2:	4a85      	ldr	r2, [pc, #532]	; (80021e8 <maxim_heart_rate_and_oxygen_saturation+0x6b0>)
 8001fd4:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001fd8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fdc:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8001fe0:	429a      	cmp	r2, r3
 8001fe2:	dd17      	ble.n	8002014 <maxim_heart_rate_and_oxygen_saturation+0x4dc>
                    if (un_only_once >0){
 8001fe4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d002      	beq.n	8001ff2 <maxim_heart_rate_and_oxygen_saturation+0x4ba>
                       un_only_once =0;
 8001fec:	2300      	movs	r3, #0
 8001fee:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
                   } 
                   n_c_min= an_x[i] ;
 8001ff2:	4a7d      	ldr	r2, [pc, #500]	; (80021e8 <maxim_heart_rate_and_oxygen_saturation+0x6b0>)
 8001ff4:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001ff8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ffc:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
                   an_exact_ir_valley_locs[k]=i;
 8002000:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8002004:	009b      	lsls	r3, r3, #2
 8002006:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800200a:	4413      	add	r3, r2
 800200c:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8002010:	f843 2cd8 	str.w	r2, [r3, #-216]
            for(i= m-5;i<m+5; i++)
 8002014:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8002018:	3301      	adds	r3, #1
 800201a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800201e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002022:	3304      	adds	r3, #4
 8002024:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8002028:	429a      	cmp	r2, r3
 800202a:	ddd2      	ble.n	8001fd2 <maxim_heart_rate_and_oxygen_saturation+0x49a>
                }
            if (un_only_once ==0)
 800202c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8002030:	2b00      	cmp	r3, #0
 8002032:	d104      	bne.n	800203e <maxim_heart_rate_and_oxygen_saturation+0x506>
                n_exact_ir_valley_locs_count ++ ;
 8002034:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002038:	3301      	adds	r3, #1
 800203a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    for(k=0 ; k<n_npks ;k++){
 800203e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8002042:	3301      	adds	r3, #1
 8002044:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8002048:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800204c:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8002050:	429a      	cmp	r2, r3
 8002052:	db9f      	blt.n	8001f94 <maxim_heart_rate_and_oxygen_saturation+0x45c>
        }
    }
    if (n_exact_ir_valley_locs_count <2 ){
 8002054:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002058:	2b01      	cmp	r3, #1
 800205a:	dc08      	bgt.n	800206e <maxim_heart_rate_and_oxygen_saturation+0x536>
       *pn_spo2 =  -999 ; // do not use SPO2 since signal ratio is out of range
 800205c:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8002060:	4a64      	ldr	r2, [pc, #400]	; (80021f4 <maxim_heart_rate_and_oxygen_saturation+0x6bc>)
 8002062:	601a      	str	r2, [r3, #0]
       *pch_spo2_valid  = 0; 
 8002064:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002068:	2200      	movs	r2, #0
 800206a:	701a      	strb	r2, [r3, #0]
       return;
 800206c:	e236      	b.n	80024dc <maxim_heart_rate_and_oxygen_saturation+0x9a4>
    }
    // 4 pt MA
    for(k=0; k< BUFFER_SIZE-MA4_SIZE; k++){
 800206e:	2300      	movs	r3, #0
 8002070:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8002074:	e04c      	b.n	8002110 <maxim_heart_rate_and_oxygen_saturation+0x5d8>
        an_x[k]=( an_x[k]+an_x[k+1]+ an_x[k+2]+ an_x[k+3])/(int32_t)4;
 8002076:	4a5c      	ldr	r2, [pc, #368]	; (80021e8 <maxim_heart_rate_and_oxygen_saturation+0x6b0>)
 8002078:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800207c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002080:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8002084:	3301      	adds	r3, #1
 8002086:	4958      	ldr	r1, [pc, #352]	; (80021e8 <maxim_heart_rate_and_oxygen_saturation+0x6b0>)
 8002088:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800208c:	441a      	add	r2, r3
 800208e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8002092:	3302      	adds	r3, #2
 8002094:	4954      	ldr	r1, [pc, #336]	; (80021e8 <maxim_heart_rate_and_oxygen_saturation+0x6b0>)
 8002096:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800209a:	441a      	add	r2, r3
 800209c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80020a0:	3303      	adds	r3, #3
 80020a2:	4951      	ldr	r1, [pc, #324]	; (80021e8 <maxim_heart_rate_and_oxygen_saturation+0x6b0>)
 80020a4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80020a8:	4413      	add	r3, r2
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	da00      	bge.n	80020b0 <maxim_heart_rate_and_oxygen_saturation+0x578>
 80020ae:	3303      	adds	r3, #3
 80020b0:	109b      	asrs	r3, r3, #2
 80020b2:	4619      	mov	r1, r3
 80020b4:	4a4c      	ldr	r2, [pc, #304]	; (80021e8 <maxim_heart_rate_and_oxygen_saturation+0x6b0>)
 80020b6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80020ba:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        an_y[k]=( an_y[k]+an_y[k+1]+ an_y[k+2]+ an_y[k+3])/(int32_t)4;
 80020be:	4a4b      	ldr	r2, [pc, #300]	; (80021ec <maxim_heart_rate_and_oxygen_saturation+0x6b4>)
 80020c0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80020c4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80020c8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80020cc:	3301      	adds	r3, #1
 80020ce:	4947      	ldr	r1, [pc, #284]	; (80021ec <maxim_heart_rate_and_oxygen_saturation+0x6b4>)
 80020d0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80020d4:	441a      	add	r2, r3
 80020d6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80020da:	3302      	adds	r3, #2
 80020dc:	4943      	ldr	r1, [pc, #268]	; (80021ec <maxim_heart_rate_and_oxygen_saturation+0x6b4>)
 80020de:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80020e2:	441a      	add	r2, r3
 80020e4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80020e8:	3303      	adds	r3, #3
 80020ea:	4940      	ldr	r1, [pc, #256]	; (80021ec <maxim_heart_rate_and_oxygen_saturation+0x6b4>)
 80020ec:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80020f0:	4413      	add	r3, r2
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	da00      	bge.n	80020f8 <maxim_heart_rate_and_oxygen_saturation+0x5c0>
 80020f6:	3303      	adds	r3, #3
 80020f8:	109b      	asrs	r3, r3, #2
 80020fa:	4619      	mov	r1, r3
 80020fc:	4a3b      	ldr	r2, [pc, #236]	; (80021ec <maxim_heart_rate_and_oxygen_saturation+0x6b4>)
 80020fe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8002102:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for(k=0; k< BUFFER_SIZE-MA4_SIZE; k++){
 8002106:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800210a:	3301      	adds	r3, #1
 800210c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8002110:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8002114:	2bf5      	cmp	r3, #245	; 0xf5
 8002116:	ddae      	ble.n	8002076 <maxim_heart_rate_and_oxygen_saturation+0x53e>
    }

    //using an_exact_ir_valley_locs , find ir-red DC andir-red AC for SPO2 calibration ratio
    //finding AC/DC maximum of raw ir * red between two valley locations
    n_ratio_average =0; 
 8002118:	2300      	movs	r3, #0
 800211a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    n_i_ratio_count =0; 
 800211e:	2300      	movs	r3, #0
 8002120:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    
    for(k=0; k< 5; k++) an_ratio[k]=0;
 8002124:	2300      	movs	r3, #0
 8002126:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800212a:	e00b      	b.n	8002144 <maxim_heart_rate_and_oxygen_saturation+0x60c>
 800212c:	f107 0310 	add.w	r3, r7, #16
 8002130:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8002134:	2100      	movs	r1, #0
 8002136:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800213a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800213e:	3301      	adds	r3, #1
 8002140:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8002144:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8002148:	2b04      	cmp	r3, #4
 800214a:	ddef      	ble.n	800212c <maxim_heart_rate_and_oxygen_saturation+0x5f4>
    for (k=0; k< n_exact_ir_valley_locs_count; k++){
 800214c:	2300      	movs	r3, #0
 800214e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8002152:	e017      	b.n	8002184 <maxim_heart_rate_and_oxygen_saturation+0x64c>
        if (an_exact_ir_valley_locs[k] > BUFFER_SIZE ){             
 8002154:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8002158:	009b      	lsls	r3, r3, #2
 800215a:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800215e:	4413      	add	r3, r2
 8002160:	f853 3cd8 	ldr.w	r3, [r3, #-216]
 8002164:	2bfa      	cmp	r3, #250	; 0xfa
 8002166:	dd08      	ble.n	800217a <maxim_heart_rate_and_oxygen_saturation+0x642>
            *pn_spo2 =  -999 ; // do not use SPO2 since valley loc is out of range
 8002168:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800216c:	4a21      	ldr	r2, [pc, #132]	; (80021f4 <maxim_heart_rate_and_oxygen_saturation+0x6bc>)
 800216e:	601a      	str	r2, [r3, #0]
            *pch_spo2_valid  = 0; 
 8002170:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002174:	2200      	movs	r2, #0
 8002176:	701a      	strb	r2, [r3, #0]
            return;
 8002178:	e1b0      	b.n	80024dc <maxim_heart_rate_and_oxygen_saturation+0x9a4>
    for (k=0; k< n_exact_ir_valley_locs_count; k++){
 800217a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800217e:	3301      	adds	r3, #1
 8002180:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8002184:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8002188:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800218c:	429a      	cmp	r2, r3
 800218e:	dbe1      	blt.n	8002154 <maxim_heart_rate_and_oxygen_saturation+0x61c>
        }
    }
    // find max between two valley locations 
    // and use ratio betwen AC compoent of Ir & Red and DC compoent of Ir & Red for SPO2 

    for (k=0; k< n_exact_ir_valley_locs_count-1; k++){
 8002190:	2300      	movs	r3, #0
 8002192:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8002196:	e14a      	b.n	800242e <maxim_heart_rate_and_oxygen_saturation+0x8f6>
        n_y_dc_max= -16777216 ; 
 8002198:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 800219c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        n_x_dc_max= - 16777216; 
 80021a0:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 80021a4:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
        if (an_exact_ir_valley_locs[k+1]-an_exact_ir_valley_locs[k] >10){
 80021a8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80021ac:	3301      	adds	r3, #1
 80021ae:	009b      	lsls	r3, r3, #2
 80021b0:	f507 729c 	add.w	r2, r7, #312	; 0x138
 80021b4:	4413      	add	r3, r2
 80021b6:	f853 2cd8 	ldr.w	r2, [r3, #-216]
 80021ba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80021be:	009b      	lsls	r3, r3, #2
 80021c0:	f507 719c 	add.w	r1, r7, #312	; 0x138
 80021c4:	440b      	add	r3, r1
 80021c6:	f853 3cd8 	ldr.w	r3, [r3, #-216]
 80021ca:	1ad3      	subs	r3, r2, r3
 80021cc:	2b0a      	cmp	r3, #10
 80021ce:	f340 8129 	ble.w	8002424 <maxim_heart_rate_and_oxygen_saturation+0x8ec>
            for (i=an_exact_ir_valley_locs[k]; i< an_exact_ir_valley_locs[k+1]; i++){
 80021d2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80021d6:	009b      	lsls	r3, r3, #2
 80021d8:	f507 729c 	add.w	r2, r7, #312	; 0x138
 80021dc:	4413      	add	r3, r2
 80021de:	f853 3cd8 	ldr.w	r3, [r3, #-216]
 80021e2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80021e6:	e034      	b.n	8002252 <maxim_heart_rate_and_oxygen_saturation+0x71a>
 80021e8:	200005e0 	.word	0x200005e0
 80021ec:	200009c8 	.word	0x200009c8
 80021f0:	1b4e81b5 	.word	0x1b4e81b5
 80021f4:	fffffc19 	.word	0xfffffc19
                if (an_x[i]> n_x_dc_max) {n_x_dc_max =an_x[i];n_x_dc_max_idx =i; }
 80021f8:	4aba      	ldr	r2, [pc, #744]	; (80024e4 <maxim_heart_rate_and_oxygen_saturation+0x9ac>)
 80021fa:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80021fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002202:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 8002206:	429a      	cmp	r2, r3
 8002208:	da0a      	bge.n	8002220 <maxim_heart_rate_and_oxygen_saturation+0x6e8>
 800220a:	4ab6      	ldr	r2, [pc, #728]	; (80024e4 <maxim_heart_rate_and_oxygen_saturation+0x9ac>)
 800220c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8002210:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002214:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8002218:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800221c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
                if (an_y[i]> n_y_dc_max) {n_y_dc_max =an_y[i];n_y_dc_max_idx=i;}
 8002220:	4ab1      	ldr	r2, [pc, #708]	; (80024e8 <maxim_heart_rate_and_oxygen_saturation+0x9b0>)
 8002222:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8002226:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800222a:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 800222e:	429a      	cmp	r2, r3
 8002230:	da0a      	bge.n	8002248 <maxim_heart_rate_and_oxygen_saturation+0x710>
 8002232:	4aad      	ldr	r2, [pc, #692]	; (80024e8 <maxim_heart_rate_and_oxygen_saturation+0x9b0>)
 8002234:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8002238:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800223c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8002240:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8002244:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
            for (i=an_exact_ir_valley_locs[k]; i< an_exact_ir_valley_locs[k+1]; i++){
 8002248:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800224c:	3301      	adds	r3, #1
 800224e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002252:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8002256:	3301      	adds	r3, #1
 8002258:	009b      	lsls	r3, r3, #2
 800225a:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800225e:	4413      	add	r3, r2
 8002260:	f853 3cd8 	ldr.w	r3, [r3, #-216]
 8002264:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8002268:	429a      	cmp	r2, r3
 800226a:	dbc5      	blt.n	80021f8 <maxim_heart_rate_and_oxygen_saturation+0x6c0>
            }
            n_y_ac= (an_y[an_exact_ir_valley_locs[k+1]] - an_y[an_exact_ir_valley_locs[k] ] )*(n_y_dc_max_idx -an_exact_ir_valley_locs[k]); //red
 800226c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8002270:	3301      	adds	r3, #1
 8002272:	009b      	lsls	r3, r3, #2
 8002274:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8002278:	4413      	add	r3, r2
 800227a:	f853 3cd8 	ldr.w	r3, [r3, #-216]
 800227e:	4a9a      	ldr	r2, [pc, #616]	; (80024e8 <maxim_heart_rate_and_oxygen_saturation+0x9b0>)
 8002280:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002284:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8002288:	009b      	lsls	r3, r3, #2
 800228a:	f507 719c 	add.w	r1, r7, #312	; 0x138
 800228e:	440b      	add	r3, r1
 8002290:	f853 3cd8 	ldr.w	r3, [r3, #-216]
 8002294:	4994      	ldr	r1, [pc, #592]	; (80024e8 <maxim_heart_rate_and_oxygen_saturation+0x9b0>)
 8002296:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800229a:	1ad2      	subs	r2, r2, r3
 800229c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80022a0:	009b      	lsls	r3, r3, #2
 80022a2:	f507 719c 	add.w	r1, r7, #312	; 0x138
 80022a6:	440b      	add	r3, r1
 80022a8:	f853 3cd8 	ldr.w	r3, [r3, #-216]
 80022ac:	f8d7 1104 	ldr.w	r1, [r7, #260]	; 0x104
 80022b0:	1acb      	subs	r3, r1, r3
 80022b2:	fb03 f302 	mul.w	r3, r3, r2
 80022b6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
            n_y_ac=  an_y[an_exact_ir_valley_locs[k]] + n_y_ac/ (an_exact_ir_valley_locs[k+1] - an_exact_ir_valley_locs[k])  ; 
 80022ba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80022be:	009b      	lsls	r3, r3, #2
 80022c0:	f507 729c 	add.w	r2, r7, #312	; 0x138
 80022c4:	4413      	add	r3, r2
 80022c6:	f853 3cd8 	ldr.w	r3, [r3, #-216]
 80022ca:	4a87      	ldr	r2, [pc, #540]	; (80024e8 <maxim_heart_rate_and_oxygen_saturation+0x9b0>)
 80022cc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80022d0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80022d4:	3301      	adds	r3, #1
 80022d6:	009b      	lsls	r3, r3, #2
 80022d8:	f507 719c 	add.w	r1, r7, #312	; 0x138
 80022dc:	440b      	add	r3, r1
 80022de:	f853 1cd8 	ldr.w	r1, [r3, #-216]
 80022e2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80022e6:	009b      	lsls	r3, r3, #2
 80022e8:	f507 709c 	add.w	r0, r7, #312	; 0x138
 80022ec:	4403      	add	r3, r0
 80022ee:	f853 3cd8 	ldr.w	r3, [r3, #-216]
 80022f2:	1acb      	subs	r3, r1, r3
 80022f4:	f8d7 10ec 	ldr.w	r1, [r7, #236]	; 0xec
 80022f8:	fb91 f3f3 	sdiv	r3, r1, r3
 80022fc:	4413      	add	r3, r2
 80022fe:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
        
        
            n_y_ac=  an_y[n_y_dc_max_idx] - n_y_ac;    // subracting linear DC compoenents from raw 
 8002302:	4a79      	ldr	r2, [pc, #484]	; (80024e8 <maxim_heart_rate_and_oxygen_saturation+0x9b0>)
 8002304:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002308:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800230c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8002310:	1ad3      	subs	r3, r2, r3
 8002312:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
            n_x_ac= (an_x[an_exact_ir_valley_locs[k+1]] - an_x[an_exact_ir_valley_locs[k] ] )*(n_x_dc_max_idx -an_exact_ir_valley_locs[k]); // ir
 8002316:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800231a:	3301      	adds	r3, #1
 800231c:	009b      	lsls	r3, r3, #2
 800231e:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8002322:	4413      	add	r3, r2
 8002324:	f853 3cd8 	ldr.w	r3, [r3, #-216]
 8002328:	4a6e      	ldr	r2, [pc, #440]	; (80024e4 <maxim_heart_rate_and_oxygen_saturation+0x9ac>)
 800232a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800232e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8002332:	009b      	lsls	r3, r3, #2
 8002334:	f507 719c 	add.w	r1, r7, #312	; 0x138
 8002338:	440b      	add	r3, r1
 800233a:	f853 3cd8 	ldr.w	r3, [r3, #-216]
 800233e:	4969      	ldr	r1, [pc, #420]	; (80024e4 <maxim_heart_rate_and_oxygen_saturation+0x9ac>)
 8002340:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002344:	1ad2      	subs	r2, r2, r3
 8002346:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800234a:	009b      	lsls	r3, r3, #2
 800234c:	f507 719c 	add.w	r1, r7, #312	; 0x138
 8002350:	440b      	add	r3, r1
 8002352:	f853 3cd8 	ldr.w	r3, [r3, #-216]
 8002356:	f8d7 1100 	ldr.w	r1, [r7, #256]	; 0x100
 800235a:	1acb      	subs	r3, r1, r3
 800235c:	fb03 f302 	mul.w	r3, r3, r2
 8002360:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
            n_x_ac=  an_x[an_exact_ir_valley_locs[k]] + n_x_ac/ (an_exact_ir_valley_locs[k+1] - an_exact_ir_valley_locs[k]); 
 8002364:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8002368:	009b      	lsls	r3, r3, #2
 800236a:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800236e:	4413      	add	r3, r2
 8002370:	f853 3cd8 	ldr.w	r3, [r3, #-216]
 8002374:	4a5b      	ldr	r2, [pc, #364]	; (80024e4 <maxim_heart_rate_and_oxygen_saturation+0x9ac>)
 8002376:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800237a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800237e:	3301      	adds	r3, #1
 8002380:	009b      	lsls	r3, r3, #2
 8002382:	f507 719c 	add.w	r1, r7, #312	; 0x138
 8002386:	440b      	add	r3, r1
 8002388:	f853 1cd8 	ldr.w	r1, [r3, #-216]
 800238c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8002390:	009b      	lsls	r3, r3, #2
 8002392:	f507 709c 	add.w	r0, r7, #312	; 0x138
 8002396:	4403      	add	r3, r0
 8002398:	f853 3cd8 	ldr.w	r3, [r3, #-216]
 800239c:	1acb      	subs	r3, r1, r3
 800239e:	f8d7 10e8 	ldr.w	r1, [r7, #232]	; 0xe8
 80023a2:	fb91 f3f3 	sdiv	r3, r1, r3
 80023a6:	4413      	add	r3, r2
 80023a8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
            n_x_ac=  an_x[n_y_dc_max_idx] - n_x_ac;      // subracting linear DC compoenents from raw 
 80023ac:	4a4d      	ldr	r2, [pc, #308]	; (80024e4 <maxim_heart_rate_and_oxygen_saturation+0x9ac>)
 80023ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80023b2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80023b6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80023ba:	1ad3      	subs	r3, r2, r3
 80023bc:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
            n_nume=( n_y_ac *n_x_dc_max)>>7 ; //prepare X100 to preserve floating value
 80023c0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80023c4:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 80023c8:	fb02 f303 	mul.w	r3, r2, r3
 80023cc:	11db      	asrs	r3, r3, #7
 80023ce:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
            n_denom= ( n_x_ac *n_y_dc_max)>>7;
 80023d2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80023d6:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 80023da:	fb02 f303 	mul.w	r3, r2, r3
 80023de:	11db      	asrs	r3, r3, #7
 80023e0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
            if (n_denom>0  && n_i_ratio_count <5 &&  n_nume != 0)
 80023e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	dd1b      	ble.n	8002424 <maxim_heart_rate_and_oxygen_saturation+0x8ec>
 80023ec:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80023f0:	2b04      	cmp	r3, #4
 80023f2:	dc17      	bgt.n	8002424 <maxim_heart_rate_and_oxygen_saturation+0x8ec>
 80023f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d013      	beq.n	8002424 <maxim_heart_rate_and_oxygen_saturation+0x8ec>
            {   
                an_ratio[n_i_ratio_count]= (n_nume*100)/n_denom ; //formular is ( n_y_ac *n_x_dc_max) / ( n_x_ac *n_y_dc_max) ;
 80023fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002400:	2264      	movs	r2, #100	; 0x64
 8002402:	fb02 f203 	mul.w	r2, r2, r3
 8002406:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800240a:	fb92 f1f3 	sdiv	r1, r2, r3
 800240e:	f107 0310 	add.w	r3, r7, #16
 8002412:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8002416:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                n_i_ratio_count++;
 800241a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800241e:	3301      	adds	r3, #1
 8002420:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    for (k=0; k< n_exact_ir_valley_locs_count-1; k++){
 8002424:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8002428:	3301      	adds	r3, #1
 800242a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800242e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002432:	3b01      	subs	r3, #1
 8002434:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8002438:	429a      	cmp	r2, r3
 800243a:	f6ff aead 	blt.w	8002198 <maxim_heart_rate_and_oxygen_saturation+0x660>
            }
        }
    }

    maxim_sort_ascend(an_ratio, n_i_ratio_count);
 800243e:	f107 0310 	add.w	r3, r7, #16
 8002442:	f8d7 1128 	ldr.w	r1, [r7, #296]	; 0x128
 8002446:	4618      	mov	r0, r3
 8002448:	f000 f948 	bl	80026dc <maxim_sort_ascend>
    n_middle_idx= n_i_ratio_count/2;
 800244c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8002450:	0fda      	lsrs	r2, r3, #31
 8002452:	4413      	add	r3, r2
 8002454:	105b      	asrs	r3, r3, #1
 8002456:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4

    if (n_middle_idx >1)
 800245a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800245e:	2b01      	cmp	r3, #1
 8002460:	dd13      	ble.n	800248a <maxim_heart_rate_and_oxygen_saturation+0x952>
        n_ratio_average =( an_ratio[n_middle_idx-1] +an_ratio[n_middle_idx])/2; // use median
 8002462:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002466:	1e5a      	subs	r2, r3, #1
 8002468:	f107 0310 	add.w	r3, r7, #16
 800246c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002470:	f107 0310 	add.w	r3, r7, #16
 8002474:	f8d7 10f4 	ldr.w	r1, [r7, #244]	; 0xf4
 8002478:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800247c:	4413      	add	r3, r2
 800247e:	0fda      	lsrs	r2, r3, #31
 8002480:	4413      	add	r3, r2
 8002482:	105b      	asrs	r3, r3, #1
 8002484:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8002488:	e007      	b.n	800249a <maxim_heart_rate_and_oxygen_saturation+0x962>
    else
        n_ratio_average = an_ratio[n_middle_idx ];
 800248a:	f107 0310 	add.w	r3, r7, #16
 800248e:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 8002492:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002496:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc

    if( n_ratio_average>2 && n_ratio_average <184){
 800249a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800249e:	2b02      	cmp	r3, #2
 80024a0:	dd14      	ble.n	80024cc <maxim_heart_rate_and_oxygen_saturation+0x994>
 80024a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80024a6:	2bb7      	cmp	r3, #183	; 0xb7
 80024a8:	dc10      	bgt.n	80024cc <maxim_heart_rate_and_oxygen_saturation+0x994>
        n_spo2_calc= uch_spo2_table[n_ratio_average] ;
 80024aa:	4a10      	ldr	r2, [pc, #64]	; (80024ec <maxim_heart_rate_and_oxygen_saturation+0x9b4>)
 80024ac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80024b0:	4413      	add	r3, r2
 80024b2:	781b      	ldrb	r3, [r3, #0]
 80024b4:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
        *pn_spo2 = n_spo2_calc ;
 80024b8:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 80024bc:	f8d7 20f0 	ldr.w	r2, [r7, #240]	; 0xf0
 80024c0:	601a      	str	r2, [r3, #0]
        *pch_spo2_valid  = 1;//  float_SPO2 =  -45.060*n_ratio_average* n_ratio_average/10000 + 30.354 *n_ratio_average/100 + 94.845 ;  // for comparison with table
 80024c2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80024c6:	2201      	movs	r2, #1
 80024c8:	701a      	strb	r2, [r3, #0]
 80024ca:	e007      	b.n	80024dc <maxim_heart_rate_and_oxygen_saturation+0x9a4>
    }
    else{
        *pn_spo2 =  -999 ; // do not use SPO2 since signal ratio is out of range
 80024cc:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 80024d0:	4a07      	ldr	r2, [pc, #28]	; (80024f0 <maxim_heart_rate_and_oxygen_saturation+0x9b8>)
 80024d2:	601a      	str	r2, [r3, #0]
        *pch_spo2_valid  = 0; 
 80024d4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80024d8:	2200      	movs	r2, #0
 80024da:	701a      	strb	r2, [r3, #0]
    }
}
 80024dc:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 80024e0:	46bd      	mov	sp, r7
 80024e2:	bd90      	pop	{r4, r7, pc}
 80024e4:	200005e0 	.word	0x200005e0
 80024e8:	200009c8 	.word	0x200009c8
 80024ec:	0800aefc 	.word	0x0800aefc
 80024f0:	fffffc19 	.word	0xfffffc19

080024f4 <maxim_find_peaks>:
* \par          Details
*               Find at most MAX_NUM peaks above MIN_HEIGHT separated by at least MIN_DISTANCE
*
* \retval       None
*/
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b086      	sub	sp, #24
 80024f8:	af02      	add	r7, sp, #8
 80024fa:	60f8      	str	r0, [r7, #12]
 80024fc:	60b9      	str	r1, [r7, #8]
 80024fe:	607a      	str	r2, [r7, #4]
 8002500:	603b      	str	r3, [r7, #0]
    maxim_peaks_above_min_height( pn_locs, pn_npks, pn_x, n_size, n_min_height );
 8002502:	69bb      	ldr	r3, [r7, #24]
 8002504:	9300      	str	r3, [sp, #0]
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	687a      	ldr	r2, [r7, #4]
 800250a:	68b9      	ldr	r1, [r7, #8]
 800250c:	68f8      	ldr	r0, [r7, #12]
 800250e:	f000 f812 	bl	8002536 <maxim_peaks_above_min_height>
    maxim_remove_close_peaks( pn_locs, pn_npks, pn_x, n_min_distance );
 8002512:	69fb      	ldr	r3, [r7, #28]
 8002514:	687a      	ldr	r2, [r7, #4]
 8002516:	68b9      	ldr	r1, [r7, #8]
 8002518:	68f8      	ldr	r0, [r7, #12]
 800251a:	f000 f87f 	bl	800261c <maxim_remove_close_peaks>
    *pn_npks = min( *pn_npks, n_max_num );
 800251e:	68bb      	ldr	r3, [r7, #8]
 8002520:	681a      	ldr	r2, [r3, #0]
 8002522:	6a3b      	ldr	r3, [r7, #32]
 8002524:	429a      	cmp	r2, r3
 8002526:	bfa8      	it	ge
 8002528:	461a      	movge	r2, r3
 800252a:	68bb      	ldr	r3, [r7, #8]
 800252c:	601a      	str	r2, [r3, #0]
}
 800252e:	bf00      	nop
 8002530:	3710      	adds	r7, #16
 8002532:	46bd      	mov	sp, r7
 8002534:	bd80      	pop	{r7, pc}

08002536 <maxim_peaks_above_min_height>:
* \par          Details
*               Find all peaks above MIN_HEIGHT
*
* \retval       None
*/
{
 8002536:	b480      	push	{r7}
 8002538:	b087      	sub	sp, #28
 800253a:	af00      	add	r7, sp, #0
 800253c:	60f8      	str	r0, [r7, #12]
 800253e:	60b9      	str	r1, [r7, #8]
 8002540:	607a      	str	r2, [r7, #4]
 8002542:	603b      	str	r3, [r7, #0]
    int32_t i = 1, n_width;
 8002544:	2301      	movs	r3, #1
 8002546:	617b      	str	r3, [r7, #20]
    *pn_npks = 0;
 8002548:	68bb      	ldr	r3, [r7, #8]
 800254a:	2200      	movs	r2, #0
 800254c:	601a      	str	r2, [r3, #0]
    
    while (i < n_size-1){
 800254e:	e05a      	b.n	8002606 <maxim_peaks_above_min_height+0xd0>
        if (pn_x[i] > n_min_height && pn_x[i] > pn_x[i-1]){            // find left edge of potential peaks
 8002550:	697b      	ldr	r3, [r7, #20]
 8002552:	009b      	lsls	r3, r3, #2
 8002554:	687a      	ldr	r2, [r7, #4]
 8002556:	4413      	add	r3, r2
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	6a3a      	ldr	r2, [r7, #32]
 800255c:	429a      	cmp	r2, r3
 800255e:	da4f      	bge.n	8002600 <maxim_peaks_above_min_height+0xca>
 8002560:	697b      	ldr	r3, [r7, #20]
 8002562:	009b      	lsls	r3, r3, #2
 8002564:	687a      	ldr	r2, [r7, #4]
 8002566:	4413      	add	r3, r2
 8002568:	681a      	ldr	r2, [r3, #0]
 800256a:	697b      	ldr	r3, [r7, #20]
 800256c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002570:	3b01      	subs	r3, #1
 8002572:	009b      	lsls	r3, r3, #2
 8002574:	6879      	ldr	r1, [r7, #4]
 8002576:	440b      	add	r3, r1
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	429a      	cmp	r2, r3
 800257c:	dd40      	ble.n	8002600 <maxim_peaks_above_min_height+0xca>
            n_width = 1;
 800257e:	2301      	movs	r3, #1
 8002580:	613b      	str	r3, [r7, #16]
            while (i+n_width < n_size && pn_x[i] == pn_x[i+n_width])    // find flat peaks
 8002582:	e002      	b.n	800258a <maxim_peaks_above_min_height+0x54>
                n_width++;
 8002584:	693b      	ldr	r3, [r7, #16]
 8002586:	3301      	adds	r3, #1
 8002588:	613b      	str	r3, [r7, #16]
            while (i+n_width < n_size && pn_x[i] == pn_x[i+n_width])    // find flat peaks
 800258a:	697a      	ldr	r2, [r7, #20]
 800258c:	693b      	ldr	r3, [r7, #16]
 800258e:	4413      	add	r3, r2
 8002590:	683a      	ldr	r2, [r7, #0]
 8002592:	429a      	cmp	r2, r3
 8002594:	dd0d      	ble.n	80025b2 <maxim_peaks_above_min_height+0x7c>
 8002596:	697b      	ldr	r3, [r7, #20]
 8002598:	009b      	lsls	r3, r3, #2
 800259a:	687a      	ldr	r2, [r7, #4]
 800259c:	4413      	add	r3, r2
 800259e:	681a      	ldr	r2, [r3, #0]
 80025a0:	6979      	ldr	r1, [r7, #20]
 80025a2:	693b      	ldr	r3, [r7, #16]
 80025a4:	440b      	add	r3, r1
 80025a6:	009b      	lsls	r3, r3, #2
 80025a8:	6879      	ldr	r1, [r7, #4]
 80025aa:	440b      	add	r3, r1
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	429a      	cmp	r2, r3
 80025b0:	d0e8      	beq.n	8002584 <maxim_peaks_above_min_height+0x4e>
            if (pn_x[i] > pn_x[i+n_width] && (*pn_npks) < 15 ){                            // find right edge of peaks
 80025b2:	697b      	ldr	r3, [r7, #20]
 80025b4:	009b      	lsls	r3, r3, #2
 80025b6:	687a      	ldr	r2, [r7, #4]
 80025b8:	4413      	add	r3, r2
 80025ba:	681a      	ldr	r2, [r3, #0]
 80025bc:	6979      	ldr	r1, [r7, #20]
 80025be:	693b      	ldr	r3, [r7, #16]
 80025c0:	440b      	add	r3, r1
 80025c2:	009b      	lsls	r3, r3, #2
 80025c4:	6879      	ldr	r1, [r7, #4]
 80025c6:	440b      	add	r3, r1
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	429a      	cmp	r2, r3
 80025cc:	dd13      	ble.n	80025f6 <maxim_peaks_above_min_height+0xc0>
 80025ce:	68bb      	ldr	r3, [r7, #8]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	2b0e      	cmp	r3, #14
 80025d4:	dc0f      	bgt.n	80025f6 <maxim_peaks_above_min_height+0xc0>
                pn_locs[(*pn_npks)++] = i;        
 80025d6:	68bb      	ldr	r3, [r7, #8]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	1c59      	adds	r1, r3, #1
 80025dc:	68ba      	ldr	r2, [r7, #8]
 80025de:	6011      	str	r1, [r2, #0]
 80025e0:	009b      	lsls	r3, r3, #2
 80025e2:	68fa      	ldr	r2, [r7, #12]
 80025e4:	4413      	add	r3, r2
 80025e6:	697a      	ldr	r2, [r7, #20]
 80025e8:	601a      	str	r2, [r3, #0]
                // for flat peaks, peak location is left edge
                i += n_width+1;
 80025ea:	693b      	ldr	r3, [r7, #16]
 80025ec:	3301      	adds	r3, #1
 80025ee:	697a      	ldr	r2, [r7, #20]
 80025f0:	4413      	add	r3, r2
 80025f2:	617b      	str	r3, [r7, #20]
 80025f4:	e003      	b.n	80025fe <maxim_peaks_above_min_height+0xc8>
            }
            else
                i += n_width;
 80025f6:	697a      	ldr	r2, [r7, #20]
 80025f8:	693b      	ldr	r3, [r7, #16]
 80025fa:	4413      	add	r3, r2
 80025fc:	617b      	str	r3, [r7, #20]
            if (pn_x[i] > pn_x[i+n_width] && (*pn_npks) < 15 ){                            // find right edge of peaks
 80025fe:	e002      	b.n	8002606 <maxim_peaks_above_min_height+0xd0>
        }
        else
            i++;
 8002600:	697b      	ldr	r3, [r7, #20]
 8002602:	3301      	adds	r3, #1
 8002604:	617b      	str	r3, [r7, #20]
    while (i < n_size-1){
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	3b01      	subs	r3, #1
 800260a:	697a      	ldr	r2, [r7, #20]
 800260c:	429a      	cmp	r2, r3
 800260e:	db9f      	blt.n	8002550 <maxim_peaks_above_min_height+0x1a>
    }
}
 8002610:	bf00      	nop
 8002612:	bf00      	nop
 8002614:	371c      	adds	r7, #28
 8002616:	46bd      	mov	sp, r7
 8002618:	bc80      	pop	{r7}
 800261a:	4770      	bx	lr

0800261c <maxim_remove_close_peaks>:
* \par          Details
*               Remove peaks separated by less than MIN_DISTANCE
*
* \retval       None
*/
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b088      	sub	sp, #32
 8002620:	af00      	add	r7, sp, #0
 8002622:	60f8      	str	r0, [r7, #12]
 8002624:	60b9      	str	r1, [r7, #8]
 8002626:	607a      	str	r2, [r7, #4]
 8002628:	603b      	str	r3, [r7, #0]
    
    int32_t i, j, n_old_npks, n_dist;
    
    /* Order peaks from large to small */
    maxim_sort_indices_descend( pn_x, pn_locs, *pn_npks );
 800262a:	68bb      	ldr	r3, [r7, #8]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	461a      	mov	r2, r3
 8002630:	68f9      	ldr	r1, [r7, #12]
 8002632:	6878      	ldr	r0, [r7, #4]
 8002634:	f000 f894 	bl	8002760 <maxim_sort_indices_descend>

    for ( i = -1; i < *pn_npks; i++ ){
 8002638:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800263c:	61fb      	str	r3, [r7, #28]
 800263e:	e03e      	b.n	80026be <maxim_remove_close_peaks+0xa2>
        n_old_npks = *pn_npks;
 8002640:	68bb      	ldr	r3, [r7, #8]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	617b      	str	r3, [r7, #20]
        *pn_npks = i+1;
 8002646:	69fb      	ldr	r3, [r7, #28]
 8002648:	1c5a      	adds	r2, r3, #1
 800264a:	68bb      	ldr	r3, [r7, #8]
 800264c:	601a      	str	r2, [r3, #0]
        for ( j = i+1; j < n_old_npks; j++ ){
 800264e:	69fb      	ldr	r3, [r7, #28]
 8002650:	3301      	adds	r3, #1
 8002652:	61bb      	str	r3, [r7, #24]
 8002654:	e02c      	b.n	80026b0 <maxim_remove_close_peaks+0x94>
            n_dist =  pn_locs[j] - ( i == -1 ? -1 : pn_locs[i] ); // lag-zero peak of autocorr is at index -1
 8002656:	69bb      	ldr	r3, [r7, #24]
 8002658:	009b      	lsls	r3, r3, #2
 800265a:	68fa      	ldr	r2, [r7, #12]
 800265c:	4413      	add	r3, r2
 800265e:	681a      	ldr	r2, [r3, #0]
 8002660:	69fb      	ldr	r3, [r7, #28]
 8002662:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002666:	d005      	beq.n	8002674 <maxim_remove_close_peaks+0x58>
 8002668:	69fb      	ldr	r3, [r7, #28]
 800266a:	009b      	lsls	r3, r3, #2
 800266c:	68f9      	ldr	r1, [r7, #12]
 800266e:	440b      	add	r3, r1
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	e001      	b.n	8002678 <maxim_remove_close_peaks+0x5c>
 8002674:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002678:	1ad3      	subs	r3, r2, r3
 800267a:	613b      	str	r3, [r7, #16]
            if ( n_dist > n_min_distance || n_dist < -n_min_distance )
 800267c:	693a      	ldr	r2, [r7, #16]
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	429a      	cmp	r2, r3
 8002682:	dc04      	bgt.n	800268e <maxim_remove_close_peaks+0x72>
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	425b      	negs	r3, r3
 8002688:	693a      	ldr	r2, [r7, #16]
 800268a:	429a      	cmp	r2, r3
 800268c:	da0d      	bge.n	80026aa <maxim_remove_close_peaks+0x8e>
                pn_locs[(*pn_npks)++] = pn_locs[j];
 800268e:	69bb      	ldr	r3, [r7, #24]
 8002690:	009b      	lsls	r3, r3, #2
 8002692:	68fa      	ldr	r2, [r7, #12]
 8002694:	441a      	add	r2, r3
 8002696:	68bb      	ldr	r3, [r7, #8]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	1c58      	adds	r0, r3, #1
 800269c:	68b9      	ldr	r1, [r7, #8]
 800269e:	6008      	str	r0, [r1, #0]
 80026a0:	009b      	lsls	r3, r3, #2
 80026a2:	68f9      	ldr	r1, [r7, #12]
 80026a4:	440b      	add	r3, r1
 80026a6:	6812      	ldr	r2, [r2, #0]
 80026a8:	601a      	str	r2, [r3, #0]
        for ( j = i+1; j < n_old_npks; j++ ){
 80026aa:	69bb      	ldr	r3, [r7, #24]
 80026ac:	3301      	adds	r3, #1
 80026ae:	61bb      	str	r3, [r7, #24]
 80026b0:	69ba      	ldr	r2, [r7, #24]
 80026b2:	697b      	ldr	r3, [r7, #20]
 80026b4:	429a      	cmp	r2, r3
 80026b6:	dbce      	blt.n	8002656 <maxim_remove_close_peaks+0x3a>
    for ( i = -1; i < *pn_npks; i++ ){
 80026b8:	69fb      	ldr	r3, [r7, #28]
 80026ba:	3301      	adds	r3, #1
 80026bc:	61fb      	str	r3, [r7, #28]
 80026be:	68bb      	ldr	r3, [r7, #8]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	69fa      	ldr	r2, [r7, #28]
 80026c4:	429a      	cmp	r2, r3
 80026c6:	dbbb      	blt.n	8002640 <maxim_remove_close_peaks+0x24>
        }
    }

    // Resort indices longo ascending order
    maxim_sort_ascend( pn_locs, *pn_npks );
 80026c8:	68bb      	ldr	r3, [r7, #8]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	4619      	mov	r1, r3
 80026ce:	68f8      	ldr	r0, [r7, #12]
 80026d0:	f000 f804 	bl	80026dc <maxim_sort_ascend>
}
 80026d4:	bf00      	nop
 80026d6:	3720      	adds	r7, #32
 80026d8:	46bd      	mov	sp, r7
 80026da:	bd80      	pop	{r7, pc}

080026dc <maxim_sort_ascend>:
* \par          Details
*               Sort array in ascending order (insertion sort algorithm)
*
* \retval       None
*/
{
 80026dc:	b480      	push	{r7}
 80026de:	b087      	sub	sp, #28
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
 80026e4:	6039      	str	r1, [r7, #0]
    int32_t i, j, n_temp;
    for (i = 1; i < n_size; i++) {
 80026e6:	2301      	movs	r3, #1
 80026e8:	617b      	str	r3, [r7, #20]
 80026ea:	e02f      	b.n	800274c <maxim_sort_ascend+0x70>
        n_temp = pn_x[i];
 80026ec:	697b      	ldr	r3, [r7, #20]
 80026ee:	009b      	lsls	r3, r3, #2
 80026f0:	687a      	ldr	r2, [r7, #4]
 80026f2:	4413      	add	r3, r2
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	60fb      	str	r3, [r7, #12]
        for (j = i; j > 0 && n_temp < pn_x[j-1]; j--)
 80026f8:	697b      	ldr	r3, [r7, #20]
 80026fa:	613b      	str	r3, [r7, #16]
 80026fc:	e00f      	b.n	800271e <maxim_sort_ascend+0x42>
            pn_x[j] = pn_x[j-1];
 80026fe:	693b      	ldr	r3, [r7, #16]
 8002700:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002704:	3b01      	subs	r3, #1
 8002706:	009b      	lsls	r3, r3, #2
 8002708:	687a      	ldr	r2, [r7, #4]
 800270a:	441a      	add	r2, r3
 800270c:	693b      	ldr	r3, [r7, #16]
 800270e:	009b      	lsls	r3, r3, #2
 8002710:	6879      	ldr	r1, [r7, #4]
 8002712:	440b      	add	r3, r1
 8002714:	6812      	ldr	r2, [r2, #0]
 8002716:	601a      	str	r2, [r3, #0]
        for (j = i; j > 0 && n_temp < pn_x[j-1]; j--)
 8002718:	693b      	ldr	r3, [r7, #16]
 800271a:	3b01      	subs	r3, #1
 800271c:	613b      	str	r3, [r7, #16]
 800271e:	693b      	ldr	r3, [r7, #16]
 8002720:	2b00      	cmp	r3, #0
 8002722:	dd0a      	ble.n	800273a <maxim_sort_ascend+0x5e>
 8002724:	693b      	ldr	r3, [r7, #16]
 8002726:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800272a:	3b01      	subs	r3, #1
 800272c:	009b      	lsls	r3, r3, #2
 800272e:	687a      	ldr	r2, [r7, #4]
 8002730:	4413      	add	r3, r2
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	68fa      	ldr	r2, [r7, #12]
 8002736:	429a      	cmp	r2, r3
 8002738:	dbe1      	blt.n	80026fe <maxim_sort_ascend+0x22>
        pn_x[j] = n_temp;
 800273a:	693b      	ldr	r3, [r7, #16]
 800273c:	009b      	lsls	r3, r3, #2
 800273e:	687a      	ldr	r2, [r7, #4]
 8002740:	4413      	add	r3, r2
 8002742:	68fa      	ldr	r2, [r7, #12]
 8002744:	601a      	str	r2, [r3, #0]
    for (i = 1; i < n_size; i++) {
 8002746:	697b      	ldr	r3, [r7, #20]
 8002748:	3301      	adds	r3, #1
 800274a:	617b      	str	r3, [r7, #20]
 800274c:	697a      	ldr	r2, [r7, #20]
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	429a      	cmp	r2, r3
 8002752:	dbcb      	blt.n	80026ec <maxim_sort_ascend+0x10>
    }
}
 8002754:	bf00      	nop
 8002756:	bf00      	nop
 8002758:	371c      	adds	r7, #28
 800275a:	46bd      	mov	sp, r7
 800275c:	bc80      	pop	{r7}
 800275e:	4770      	bx	lr

08002760 <maxim_sort_indices_descend>:
* \par          Details
*               Sort indices according to descending order (insertion sort algorithm)
*
* \retval       None
*/ 
{
 8002760:	b480      	push	{r7}
 8002762:	b089      	sub	sp, #36	; 0x24
 8002764:	af00      	add	r7, sp, #0
 8002766:	60f8      	str	r0, [r7, #12]
 8002768:	60b9      	str	r1, [r7, #8]
 800276a:	607a      	str	r2, [r7, #4]
    int32_t i, j, n_temp;
    for (i = 1; i < n_size; i++) {
 800276c:	2301      	movs	r3, #1
 800276e:	61fb      	str	r3, [r7, #28]
 8002770:	e037      	b.n	80027e2 <maxim_sort_indices_descend+0x82>
        n_temp = pn_indx[i];
 8002772:	69fb      	ldr	r3, [r7, #28]
 8002774:	009b      	lsls	r3, r3, #2
 8002776:	68ba      	ldr	r2, [r7, #8]
 8002778:	4413      	add	r3, r2
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	617b      	str	r3, [r7, #20]
        for (j = i; j > 0 && pn_x[n_temp] > pn_x[pn_indx[j-1]]; j--)
 800277e:	69fb      	ldr	r3, [r7, #28]
 8002780:	61bb      	str	r3, [r7, #24]
 8002782:	e00f      	b.n	80027a4 <maxim_sort_indices_descend+0x44>
            pn_indx[j] = pn_indx[j-1];
 8002784:	69bb      	ldr	r3, [r7, #24]
 8002786:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800278a:	3b01      	subs	r3, #1
 800278c:	009b      	lsls	r3, r3, #2
 800278e:	68ba      	ldr	r2, [r7, #8]
 8002790:	441a      	add	r2, r3
 8002792:	69bb      	ldr	r3, [r7, #24]
 8002794:	009b      	lsls	r3, r3, #2
 8002796:	68b9      	ldr	r1, [r7, #8]
 8002798:	440b      	add	r3, r1
 800279a:	6812      	ldr	r2, [r2, #0]
 800279c:	601a      	str	r2, [r3, #0]
        for (j = i; j > 0 && pn_x[n_temp] > pn_x[pn_indx[j-1]]; j--)
 800279e:	69bb      	ldr	r3, [r7, #24]
 80027a0:	3b01      	subs	r3, #1
 80027a2:	61bb      	str	r3, [r7, #24]
 80027a4:	69bb      	ldr	r3, [r7, #24]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	dd12      	ble.n	80027d0 <maxim_sort_indices_descend+0x70>
 80027aa:	697b      	ldr	r3, [r7, #20]
 80027ac:	009b      	lsls	r3, r3, #2
 80027ae:	68fa      	ldr	r2, [r7, #12]
 80027b0:	4413      	add	r3, r2
 80027b2:	681a      	ldr	r2, [r3, #0]
 80027b4:	69bb      	ldr	r3, [r7, #24]
 80027b6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80027ba:	3b01      	subs	r3, #1
 80027bc:	009b      	lsls	r3, r3, #2
 80027be:	68b9      	ldr	r1, [r7, #8]
 80027c0:	440b      	add	r3, r1
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	009b      	lsls	r3, r3, #2
 80027c6:	68f9      	ldr	r1, [r7, #12]
 80027c8:	440b      	add	r3, r1
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	429a      	cmp	r2, r3
 80027ce:	dcd9      	bgt.n	8002784 <maxim_sort_indices_descend+0x24>
        pn_indx[j] = n_temp;
 80027d0:	69bb      	ldr	r3, [r7, #24]
 80027d2:	009b      	lsls	r3, r3, #2
 80027d4:	68ba      	ldr	r2, [r7, #8]
 80027d6:	4413      	add	r3, r2
 80027d8:	697a      	ldr	r2, [r7, #20]
 80027da:	601a      	str	r2, [r3, #0]
    for (i = 1; i < n_size; i++) {
 80027dc:	69fb      	ldr	r3, [r7, #28]
 80027de:	3301      	adds	r3, #1
 80027e0:	61fb      	str	r3, [r7, #28]
 80027e2:	69fa      	ldr	r2, [r7, #28]
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	429a      	cmp	r2, r3
 80027e8:	dbc3      	blt.n	8002772 <maxim_sort_indices_descend+0x12>
    }
}
 80027ea:	bf00      	nop
 80027ec:	bf00      	nop
 80027ee:	3724      	adds	r7, #36	; 0x24
 80027f0:	46bd      	mov	sp, r7
 80027f2:	bc80      	pop	{r7}
 80027f4:	4770      	bx	lr
	...

080027f8 <SSD1306_Init>:
  else SSD1306_WRITECOMMAND (SSD1306_NORMALDISPLAY);

}


uint8_t SSD1306_Init(void) {
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b082      	sub	sp, #8
 80027fc:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 80027fe:	f000 fa27 	bl	8002c50 <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8002802:	f644 6320 	movw	r3, #20000	; 0x4e20
 8002806:	2201      	movs	r2, #1
 8002808:	2178      	movs	r1, #120	; 0x78
 800280a:	485b      	ldr	r0, [pc, #364]	; (8002978 <SSD1306_Init+0x180>)
 800280c:	f003 f834 	bl	8005878 <HAL_I2C_IsDeviceReady>
 8002810:	4603      	mov	r3, r0
 8002812:	2b00      	cmp	r3, #0
 8002814:	d001      	beq.n	800281a <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 8002816:	2300      	movs	r3, #0
 8002818:	e0a9      	b.n	800296e <SSD1306_Init+0x176>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 800281a:	f640 13c4 	movw	r3, #2500	; 0x9c4
 800281e:	607b      	str	r3, [r7, #4]
	while(p>0)
 8002820:	e002      	b.n	8002828 <SSD1306_Init+0x30>
		p--;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	3b01      	subs	r3, #1
 8002826:	607b      	str	r3, [r7, #4]
	while(p>0)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2b00      	cmp	r3, #0
 800282c:	d1f9      	bne.n	8002822 <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 800282e:	22ae      	movs	r2, #174	; 0xae
 8002830:	2100      	movs	r1, #0
 8002832:	2078      	movs	r0, #120	; 0x78
 8002834:	f000 fa68 	bl	8002d08 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 8002838:	2220      	movs	r2, #32
 800283a:	2100      	movs	r1, #0
 800283c:	2078      	movs	r0, #120	; 0x78
 800283e:	f000 fa63 	bl	8002d08 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8002842:	2210      	movs	r2, #16
 8002844:	2100      	movs	r1, #0
 8002846:	2078      	movs	r0, #120	; 0x78
 8002848:	f000 fa5e 	bl	8002d08 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 800284c:	22b0      	movs	r2, #176	; 0xb0
 800284e:	2100      	movs	r1, #0
 8002850:	2078      	movs	r0, #120	; 0x78
 8002852:	f000 fa59 	bl	8002d08 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8002856:	22c8      	movs	r2, #200	; 0xc8
 8002858:	2100      	movs	r1, #0
 800285a:	2078      	movs	r0, #120	; 0x78
 800285c:	f000 fa54 	bl	8002d08 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8002860:	2200      	movs	r2, #0
 8002862:	2100      	movs	r1, #0
 8002864:	2078      	movs	r0, #120	; 0x78
 8002866:	f000 fa4f 	bl	8002d08 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 800286a:	2210      	movs	r2, #16
 800286c:	2100      	movs	r1, #0
 800286e:	2078      	movs	r0, #120	; 0x78
 8002870:	f000 fa4a 	bl	8002d08 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8002874:	2240      	movs	r2, #64	; 0x40
 8002876:	2100      	movs	r1, #0
 8002878:	2078      	movs	r0, #120	; 0x78
 800287a:	f000 fa45 	bl	8002d08 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 800287e:	2281      	movs	r2, #129	; 0x81
 8002880:	2100      	movs	r1, #0
 8002882:	2078      	movs	r0, #120	; 0x78
 8002884:	f000 fa40 	bl	8002d08 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8002888:	22ff      	movs	r2, #255	; 0xff
 800288a:	2100      	movs	r1, #0
 800288c:	2078      	movs	r0, #120	; 0x78
 800288e:	f000 fa3b 	bl	8002d08 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8002892:	22a1      	movs	r2, #161	; 0xa1
 8002894:	2100      	movs	r1, #0
 8002896:	2078      	movs	r0, #120	; 0x78
 8002898:	f000 fa36 	bl	8002d08 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 800289c:	22a6      	movs	r2, #166	; 0xa6
 800289e:	2100      	movs	r1, #0
 80028a0:	2078      	movs	r0, #120	; 0x78
 80028a2:	f000 fa31 	bl	8002d08 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 80028a6:	22a8      	movs	r2, #168	; 0xa8
 80028a8:	2100      	movs	r1, #0
 80028aa:	2078      	movs	r0, #120	; 0x78
 80028ac:	f000 fa2c 	bl	8002d08 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 80028b0:	223f      	movs	r2, #63	; 0x3f
 80028b2:	2100      	movs	r1, #0
 80028b4:	2078      	movs	r0, #120	; 0x78
 80028b6:	f000 fa27 	bl	8002d08 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80028ba:	22a4      	movs	r2, #164	; 0xa4
 80028bc:	2100      	movs	r1, #0
 80028be:	2078      	movs	r0, #120	; 0x78
 80028c0:	f000 fa22 	bl	8002d08 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 80028c4:	22d3      	movs	r2, #211	; 0xd3
 80028c6:	2100      	movs	r1, #0
 80028c8:	2078      	movs	r0, #120	; 0x78
 80028ca:	f000 fa1d 	bl	8002d08 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 80028ce:	2200      	movs	r2, #0
 80028d0:	2100      	movs	r1, #0
 80028d2:	2078      	movs	r0, #120	; 0x78
 80028d4:	f000 fa18 	bl	8002d08 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 80028d8:	22d5      	movs	r2, #213	; 0xd5
 80028da:	2100      	movs	r1, #0
 80028dc:	2078      	movs	r0, #120	; 0x78
 80028de:	f000 fa13 	bl	8002d08 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 80028e2:	22f0      	movs	r2, #240	; 0xf0
 80028e4:	2100      	movs	r1, #0
 80028e6:	2078      	movs	r0, #120	; 0x78
 80028e8:	f000 fa0e 	bl	8002d08 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 80028ec:	22d9      	movs	r2, #217	; 0xd9
 80028ee:	2100      	movs	r1, #0
 80028f0:	2078      	movs	r0, #120	; 0x78
 80028f2:	f000 fa09 	bl	8002d08 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 80028f6:	2222      	movs	r2, #34	; 0x22
 80028f8:	2100      	movs	r1, #0
 80028fa:	2078      	movs	r0, #120	; 0x78
 80028fc:	f000 fa04 	bl	8002d08 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8002900:	22da      	movs	r2, #218	; 0xda
 8002902:	2100      	movs	r1, #0
 8002904:	2078      	movs	r0, #120	; 0x78
 8002906:	f000 f9ff 	bl	8002d08 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 800290a:	2212      	movs	r2, #18
 800290c:	2100      	movs	r1, #0
 800290e:	2078      	movs	r0, #120	; 0x78
 8002910:	f000 f9fa 	bl	8002d08 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8002914:	22db      	movs	r2, #219	; 0xdb
 8002916:	2100      	movs	r1, #0
 8002918:	2078      	movs	r0, #120	; 0x78
 800291a:	f000 f9f5 	bl	8002d08 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 800291e:	2220      	movs	r2, #32
 8002920:	2100      	movs	r1, #0
 8002922:	2078      	movs	r0, #120	; 0x78
 8002924:	f000 f9f0 	bl	8002d08 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8002928:	228d      	movs	r2, #141	; 0x8d
 800292a:	2100      	movs	r1, #0
 800292c:	2078      	movs	r0, #120	; 0x78
 800292e:	f000 f9eb 	bl	8002d08 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8002932:	2214      	movs	r2, #20
 8002934:	2100      	movs	r1, #0
 8002936:	2078      	movs	r0, #120	; 0x78
 8002938:	f000 f9e6 	bl	8002d08 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 800293c:	22af      	movs	r2, #175	; 0xaf
 800293e:	2100      	movs	r1, #0
 8002940:	2078      	movs	r0, #120	; 0x78
 8002942:	f000 f9e1 	bl	8002d08 <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8002946:	222e      	movs	r2, #46	; 0x2e
 8002948:	2100      	movs	r1, #0
 800294a:	2078      	movs	r0, #120	; 0x78
 800294c:	f000 f9dc 	bl	8002d08 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8002950:	2000      	movs	r0, #0
 8002952:	f000 f843 	bl	80029dc <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 8002956:	f000 f813 	bl	8002980 <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 800295a:	4b08      	ldr	r3, [pc, #32]	; (800297c <SSD1306_Init+0x184>)
 800295c:	2200      	movs	r2, #0
 800295e:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8002960:	4b06      	ldr	r3, [pc, #24]	; (800297c <SSD1306_Init+0x184>)
 8002962:	2200      	movs	r2, #0
 8002964:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 8002966:	4b05      	ldr	r3, [pc, #20]	; (800297c <SSD1306_Init+0x184>)
 8002968:	2201      	movs	r2, #1
 800296a:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 800296c:	2301      	movs	r3, #1
}
 800296e:	4618      	mov	r0, r3
 8002970:	3708      	adds	r7, #8
 8002972:	46bd      	mov	sp, r7
 8002974:	bd80      	pop	{r7, pc}
 8002976:	bf00      	nop
 8002978:	20001b58 	.word	0x20001b58
 800297c:	200011b0 	.word	0x200011b0

08002980 <SSD1306_UpdateScreen>:


void SSD1306_UpdateScreen(void) {
 8002980:	b580      	push	{r7, lr}
 8002982:	b082      	sub	sp, #8
 8002984:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 8002986:	2300      	movs	r3, #0
 8002988:	71fb      	strb	r3, [r7, #7]
 800298a:	e01d      	b.n	80029c8 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 800298c:	79fb      	ldrb	r3, [r7, #7]
 800298e:	3b50      	subs	r3, #80	; 0x50
 8002990:	b2db      	uxtb	r3, r3
 8002992:	461a      	mov	r2, r3
 8002994:	2100      	movs	r1, #0
 8002996:	2078      	movs	r0, #120	; 0x78
 8002998:	f000 f9b6 	bl	8002d08 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 800299c:	2200      	movs	r2, #0
 800299e:	2100      	movs	r1, #0
 80029a0:	2078      	movs	r0, #120	; 0x78
 80029a2:	f000 f9b1 	bl	8002d08 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 80029a6:	2210      	movs	r2, #16
 80029a8:	2100      	movs	r1, #0
 80029aa:	2078      	movs	r0, #120	; 0x78
 80029ac:	f000 f9ac 	bl	8002d08 <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 80029b0:	79fb      	ldrb	r3, [r7, #7]
 80029b2:	01db      	lsls	r3, r3, #7
 80029b4:	4a08      	ldr	r2, [pc, #32]	; (80029d8 <SSD1306_UpdateScreen+0x58>)
 80029b6:	441a      	add	r2, r3
 80029b8:	2380      	movs	r3, #128	; 0x80
 80029ba:	2140      	movs	r1, #64	; 0x40
 80029bc:	2078      	movs	r0, #120	; 0x78
 80029be:	f000 f95b 	bl	8002c78 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 80029c2:	79fb      	ldrb	r3, [r7, #7]
 80029c4:	3301      	adds	r3, #1
 80029c6:	71fb      	strb	r3, [r7, #7]
 80029c8:	79fb      	ldrb	r3, [r7, #7]
 80029ca:	2b07      	cmp	r3, #7
 80029cc:	d9de      	bls.n	800298c <SSD1306_UpdateScreen+0xc>
	}
}
 80029ce:	bf00      	nop
 80029d0:	bf00      	nop
 80029d2:	3708      	adds	r7, #8
 80029d4:	46bd      	mov	sp, r7
 80029d6:	bd80      	pop	{r7, pc}
 80029d8:	20000db0 	.word	0x20000db0

080029dc <SSD1306_Fill>:
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}


void SSD1306_Fill(SSD1306_COLOR_t color) {
 80029dc:	b580      	push	{r7, lr}
 80029de:	b082      	sub	sp, #8
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	4603      	mov	r3, r0
 80029e4:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 80029e6:	79fb      	ldrb	r3, [r7, #7]
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d101      	bne.n	80029f0 <SSD1306_Fill+0x14>
 80029ec:	2300      	movs	r3, #0
 80029ee:	e000      	b.n	80029f2 <SSD1306_Fill+0x16>
 80029f0:	23ff      	movs	r3, #255	; 0xff
 80029f2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80029f6:	4619      	mov	r1, r3
 80029f8:	4803      	ldr	r0, [pc, #12]	; (8002a08 <SSD1306_Fill+0x2c>)
 80029fa:	f005 fb79 	bl	80080f0 <memset>
}
 80029fe:	bf00      	nop
 8002a00:	3708      	adds	r7, #8
 8002a02:	46bd      	mov	sp, r7
 8002a04:	bd80      	pop	{r7, pc}
 8002a06:	bf00      	nop
 8002a08:	20000db0 	.word	0x20000db0

08002a0c <SSD1306_DrawPixel>:


void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8002a0c:	b480      	push	{r7}
 8002a0e:	b083      	sub	sp, #12
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	4603      	mov	r3, r0
 8002a14:	80fb      	strh	r3, [r7, #6]
 8002a16:	460b      	mov	r3, r1
 8002a18:	80bb      	strh	r3, [r7, #4]
 8002a1a:	4613      	mov	r3, r2
 8002a1c:	70fb      	strb	r3, [r7, #3]
	if (
 8002a1e:	88fb      	ldrh	r3, [r7, #6]
 8002a20:	2b7f      	cmp	r3, #127	; 0x7f
 8002a22:	d848      	bhi.n	8002ab6 <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8002a24:	88bb      	ldrh	r3, [r7, #4]
 8002a26:	2b3f      	cmp	r3, #63	; 0x3f
 8002a28:	d845      	bhi.n	8002ab6 <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8002a2a:	4b25      	ldr	r3, [pc, #148]	; (8002ac0 <SSD1306_DrawPixel+0xb4>)
 8002a2c:	791b      	ldrb	r3, [r3, #4]
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d006      	beq.n	8002a40 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8002a32:	78fb      	ldrb	r3, [r7, #3]
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	bf0c      	ite	eq
 8002a38:	2301      	moveq	r3, #1
 8002a3a:	2300      	movne	r3, #0
 8002a3c:	b2db      	uxtb	r3, r3
 8002a3e:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8002a40:	78fb      	ldrb	r3, [r7, #3]
 8002a42:	2b01      	cmp	r3, #1
 8002a44:	d11a      	bne.n	8002a7c <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8002a46:	88fa      	ldrh	r2, [r7, #6]
 8002a48:	88bb      	ldrh	r3, [r7, #4]
 8002a4a:	08db      	lsrs	r3, r3, #3
 8002a4c:	b298      	uxth	r0, r3
 8002a4e:	4603      	mov	r3, r0
 8002a50:	01db      	lsls	r3, r3, #7
 8002a52:	4413      	add	r3, r2
 8002a54:	4a1b      	ldr	r2, [pc, #108]	; (8002ac4 <SSD1306_DrawPixel+0xb8>)
 8002a56:	5cd3      	ldrb	r3, [r2, r3]
 8002a58:	b25a      	sxtb	r2, r3
 8002a5a:	88bb      	ldrh	r3, [r7, #4]
 8002a5c:	f003 0307 	and.w	r3, r3, #7
 8002a60:	2101      	movs	r1, #1
 8002a62:	fa01 f303 	lsl.w	r3, r1, r3
 8002a66:	b25b      	sxtb	r3, r3
 8002a68:	4313      	orrs	r3, r2
 8002a6a:	b259      	sxtb	r1, r3
 8002a6c:	88fa      	ldrh	r2, [r7, #6]
 8002a6e:	4603      	mov	r3, r0
 8002a70:	01db      	lsls	r3, r3, #7
 8002a72:	4413      	add	r3, r2
 8002a74:	b2c9      	uxtb	r1, r1
 8002a76:	4a13      	ldr	r2, [pc, #76]	; (8002ac4 <SSD1306_DrawPixel+0xb8>)
 8002a78:	54d1      	strb	r1, [r2, r3]
 8002a7a:	e01d      	b.n	8002ab8 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8002a7c:	88fa      	ldrh	r2, [r7, #6]
 8002a7e:	88bb      	ldrh	r3, [r7, #4]
 8002a80:	08db      	lsrs	r3, r3, #3
 8002a82:	b298      	uxth	r0, r3
 8002a84:	4603      	mov	r3, r0
 8002a86:	01db      	lsls	r3, r3, #7
 8002a88:	4413      	add	r3, r2
 8002a8a:	4a0e      	ldr	r2, [pc, #56]	; (8002ac4 <SSD1306_DrawPixel+0xb8>)
 8002a8c:	5cd3      	ldrb	r3, [r2, r3]
 8002a8e:	b25a      	sxtb	r2, r3
 8002a90:	88bb      	ldrh	r3, [r7, #4]
 8002a92:	f003 0307 	and.w	r3, r3, #7
 8002a96:	2101      	movs	r1, #1
 8002a98:	fa01 f303 	lsl.w	r3, r1, r3
 8002a9c:	b25b      	sxtb	r3, r3
 8002a9e:	43db      	mvns	r3, r3
 8002aa0:	b25b      	sxtb	r3, r3
 8002aa2:	4013      	ands	r3, r2
 8002aa4:	b259      	sxtb	r1, r3
 8002aa6:	88fa      	ldrh	r2, [r7, #6]
 8002aa8:	4603      	mov	r3, r0
 8002aaa:	01db      	lsls	r3, r3, #7
 8002aac:	4413      	add	r3, r2
 8002aae:	b2c9      	uxtb	r1, r1
 8002ab0:	4a04      	ldr	r2, [pc, #16]	; (8002ac4 <SSD1306_DrawPixel+0xb8>)
 8002ab2:	54d1      	strb	r1, [r2, r3]
 8002ab4:	e000      	b.n	8002ab8 <SSD1306_DrawPixel+0xac>
		return;
 8002ab6:	bf00      	nop
	}
}
 8002ab8:	370c      	adds	r7, #12
 8002aba:	46bd      	mov	sp, r7
 8002abc:	bc80      	pop	{r7}
 8002abe:	4770      	bx	lr
 8002ac0:	200011b0 	.word	0x200011b0
 8002ac4:	20000db0 	.word	0x20000db0

08002ac8 <SSD1306_SetPosition>:


void SSD1306_SetPosition(uint16_t x, uint16_t y) {
 8002ac8:	b480      	push	{r7}
 8002aca:	b083      	sub	sp, #12
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	4603      	mov	r3, r0
 8002ad0:	460a      	mov	r2, r1
 8002ad2:	80fb      	strh	r3, [r7, #6]
 8002ad4:	4613      	mov	r3, r2
 8002ad6:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8002ad8:	4a05      	ldr	r2, [pc, #20]	; (8002af0 <SSD1306_SetPosition+0x28>)
 8002ada:	88fb      	ldrh	r3, [r7, #6]
 8002adc:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 8002ade:	4a04      	ldr	r2, [pc, #16]	; (8002af0 <SSD1306_SetPosition+0x28>)
 8002ae0:	88bb      	ldrh	r3, [r7, #4]
 8002ae2:	8053      	strh	r3, [r2, #2]
}
 8002ae4:	bf00      	nop
 8002ae6:	370c      	adds	r7, #12
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	bc80      	pop	{r7}
 8002aec:	4770      	bx	lr
 8002aee:	bf00      	nop
 8002af0:	200011b0 	.word	0x200011b0

08002af4 <SSD1306_PrintCharacter>:


char SSD1306_PrintCharacter(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b086      	sub	sp, #24
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	4603      	mov	r3, r0
 8002afc:	6039      	str	r1, [r7, #0]
 8002afe:	71fb      	strb	r3, [r7, #7]
 8002b00:	4613      	mov	r3, r2
 8002b02:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8002b04:	4b3a      	ldr	r3, [pc, #232]	; (8002bf0 <SSD1306_PrintCharacter+0xfc>)
 8002b06:	881b      	ldrh	r3, [r3, #0]
 8002b08:	461a      	mov	r2, r3
 8002b0a:	683b      	ldr	r3, [r7, #0]
 8002b0c:	781b      	ldrb	r3, [r3, #0]
 8002b0e:	4413      	add	r3, r2
	if (
 8002b10:	2b7f      	cmp	r3, #127	; 0x7f
 8002b12:	dc07      	bgt.n	8002b24 <SSD1306_PrintCharacter+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8002b14:	4b36      	ldr	r3, [pc, #216]	; (8002bf0 <SSD1306_PrintCharacter+0xfc>)
 8002b16:	885b      	ldrh	r3, [r3, #2]
 8002b18:	461a      	mov	r2, r3
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	785b      	ldrb	r3, [r3, #1]
 8002b1e:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8002b20:	2b3f      	cmp	r3, #63	; 0x3f
 8002b22:	dd01      	ble.n	8002b28 <SSD1306_PrintCharacter+0x34>
	) {
		/* Error */
		return 0;
 8002b24:	2300      	movs	r3, #0
 8002b26:	e05e      	b.n	8002be6 <SSD1306_PrintCharacter+0xf2>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8002b28:	2300      	movs	r3, #0
 8002b2a:	617b      	str	r3, [r7, #20]
 8002b2c:	e04b      	b.n	8002bc6 <SSD1306_PrintCharacter+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	685a      	ldr	r2, [r3, #4]
 8002b32:	79fb      	ldrb	r3, [r7, #7]
 8002b34:	3b20      	subs	r3, #32
 8002b36:	6839      	ldr	r1, [r7, #0]
 8002b38:	7849      	ldrb	r1, [r1, #1]
 8002b3a:	fb01 f303 	mul.w	r3, r1, r3
 8002b3e:	4619      	mov	r1, r3
 8002b40:	697b      	ldr	r3, [r7, #20]
 8002b42:	440b      	add	r3, r1
 8002b44:	005b      	lsls	r3, r3, #1
 8002b46:	4413      	add	r3, r2
 8002b48:	881b      	ldrh	r3, [r3, #0]
 8002b4a:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	613b      	str	r3, [r7, #16]
 8002b50:	e030      	b.n	8002bb4 <SSD1306_PrintCharacter+0xc0>
			if ((b << j) & 0x8000) {
 8002b52:	68fa      	ldr	r2, [r7, #12]
 8002b54:	693b      	ldr	r3, [r7, #16]
 8002b56:	fa02 f303 	lsl.w	r3, r2, r3
 8002b5a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d010      	beq.n	8002b84 <SSD1306_PrintCharacter+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8002b62:	4b23      	ldr	r3, [pc, #140]	; (8002bf0 <SSD1306_PrintCharacter+0xfc>)
 8002b64:	881a      	ldrh	r2, [r3, #0]
 8002b66:	693b      	ldr	r3, [r7, #16]
 8002b68:	b29b      	uxth	r3, r3
 8002b6a:	4413      	add	r3, r2
 8002b6c:	b298      	uxth	r0, r3
 8002b6e:	4b20      	ldr	r3, [pc, #128]	; (8002bf0 <SSD1306_PrintCharacter+0xfc>)
 8002b70:	885a      	ldrh	r2, [r3, #2]
 8002b72:	697b      	ldr	r3, [r7, #20]
 8002b74:	b29b      	uxth	r3, r3
 8002b76:	4413      	add	r3, r2
 8002b78:	b29b      	uxth	r3, r3
 8002b7a:	79ba      	ldrb	r2, [r7, #6]
 8002b7c:	4619      	mov	r1, r3
 8002b7e:	f7ff ff45 	bl	8002a0c <SSD1306_DrawPixel>
 8002b82:	e014      	b.n	8002bae <SSD1306_PrintCharacter+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8002b84:	4b1a      	ldr	r3, [pc, #104]	; (8002bf0 <SSD1306_PrintCharacter+0xfc>)
 8002b86:	881a      	ldrh	r2, [r3, #0]
 8002b88:	693b      	ldr	r3, [r7, #16]
 8002b8a:	b29b      	uxth	r3, r3
 8002b8c:	4413      	add	r3, r2
 8002b8e:	b298      	uxth	r0, r3
 8002b90:	4b17      	ldr	r3, [pc, #92]	; (8002bf0 <SSD1306_PrintCharacter+0xfc>)
 8002b92:	885a      	ldrh	r2, [r3, #2]
 8002b94:	697b      	ldr	r3, [r7, #20]
 8002b96:	b29b      	uxth	r3, r3
 8002b98:	4413      	add	r3, r2
 8002b9a:	b299      	uxth	r1, r3
 8002b9c:	79bb      	ldrb	r3, [r7, #6]
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	bf0c      	ite	eq
 8002ba2:	2301      	moveq	r3, #1
 8002ba4:	2300      	movne	r3, #0
 8002ba6:	b2db      	uxtb	r3, r3
 8002ba8:	461a      	mov	r2, r3
 8002baa:	f7ff ff2f 	bl	8002a0c <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8002bae:	693b      	ldr	r3, [r7, #16]
 8002bb0:	3301      	adds	r3, #1
 8002bb2:	613b      	str	r3, [r7, #16]
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	781b      	ldrb	r3, [r3, #0]
 8002bb8:	461a      	mov	r2, r3
 8002bba:	693b      	ldr	r3, [r7, #16]
 8002bbc:	4293      	cmp	r3, r2
 8002bbe:	d3c8      	bcc.n	8002b52 <SSD1306_PrintCharacter+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8002bc0:	697b      	ldr	r3, [r7, #20]
 8002bc2:	3301      	adds	r3, #1
 8002bc4:	617b      	str	r3, [r7, #20]
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	785b      	ldrb	r3, [r3, #1]
 8002bca:	461a      	mov	r2, r3
 8002bcc:	697b      	ldr	r3, [r7, #20]
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	d3ad      	bcc.n	8002b2e <SSD1306_PrintCharacter+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8002bd2:	4b07      	ldr	r3, [pc, #28]	; (8002bf0 <SSD1306_PrintCharacter+0xfc>)
 8002bd4:	881a      	ldrh	r2, [r3, #0]
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	781b      	ldrb	r3, [r3, #0]
 8002bda:	b29b      	uxth	r3, r3
 8002bdc:	4413      	add	r3, r2
 8002bde:	b29a      	uxth	r2, r3
 8002be0:	4b03      	ldr	r3, [pc, #12]	; (8002bf0 <SSD1306_PrintCharacter+0xfc>)
 8002be2:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 8002be4:	79fb      	ldrb	r3, [r7, #7]
}
 8002be6:	4618      	mov	r0, r3
 8002be8:	3718      	adds	r7, #24
 8002bea:	46bd      	mov	sp, r7
 8002bec:	bd80      	pop	{r7, pc}
 8002bee:	bf00      	nop
 8002bf0:	200011b0 	.word	0x200011b0

08002bf4 <SSD1306_PrintString>:


char SSD1306_PrintString(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b084      	sub	sp, #16
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	60f8      	str	r0, [r7, #12]
 8002bfc:	60b9      	str	r1, [r7, #8]
 8002bfe:	4613      	mov	r3, r2
 8002c00:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 8002c02:	e012      	b.n	8002c2a <SSD1306_PrintString+0x36>
		/* Write character by character */
		if (SSD1306_PrintCharacter(*str, Font, color) != *str) {
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	781b      	ldrb	r3, [r3, #0]
 8002c08:	79fa      	ldrb	r2, [r7, #7]
 8002c0a:	68b9      	ldr	r1, [r7, #8]
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	f7ff ff71 	bl	8002af4 <SSD1306_PrintCharacter>
 8002c12:	4603      	mov	r3, r0
 8002c14:	461a      	mov	r2, r3
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	781b      	ldrb	r3, [r3, #0]
 8002c1a:	429a      	cmp	r2, r3
 8002c1c:	d002      	beq.n	8002c24 <SSD1306_PrintString+0x30>
			/* Return error */
			return *str;
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	781b      	ldrb	r3, [r3, #0]
 8002c22:	e008      	b.n	8002c36 <SSD1306_PrintString+0x42>
		}
		
		/* Increase string pointer */
		str++;
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	3301      	adds	r3, #1
 8002c28:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	781b      	ldrb	r3, [r3, #0]
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d1e8      	bne.n	8002c04 <SSD1306_PrintString+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	781b      	ldrb	r3, [r3, #0]
}
 8002c36:	4618      	mov	r0, r3
 8002c38:	3710      	adds	r7, #16
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	bd80      	pop	{r7, pc}

08002c3e <SSD1306_Clear>:
 

void SSD1306_Clear (void)
{
 8002c3e:	b580      	push	{r7, lr}
 8002c40:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 8002c42:	2000      	movs	r0, #0
 8002c44:	f7ff feca 	bl	80029dc <SSD1306_Fill>
    SSD1306_UpdateScreen();
 8002c48:	f7ff fe9a 	bl	8002980 <SSD1306_UpdateScreen>
}
 8002c4c:	bf00      	nop
 8002c4e:	bd80      	pop	{r7, pc}

08002c50 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8002c50:	b480      	push	{r7}
 8002c52:	b083      	sub	sp, #12
 8002c54:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8002c56:	4b07      	ldr	r3, [pc, #28]	; (8002c74 <ssd1306_I2C_Init+0x24>)
 8002c58:	607b      	str	r3, [r7, #4]
	while(p>0)
 8002c5a:	e002      	b.n	8002c62 <ssd1306_I2C_Init+0x12>
		p--;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	3b01      	subs	r3, #1
 8002c60:	607b      	str	r3, [r7, #4]
	while(p>0)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d1f9      	bne.n	8002c5c <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8002c68:	bf00      	nop
 8002c6a:	bf00      	nop
 8002c6c:	370c      	adds	r7, #12
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	bc80      	pop	{r7}
 8002c72:	4770      	bx	lr
 8002c74:	0003d090 	.word	0x0003d090

08002c78 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8002c78:	b590      	push	{r4, r7, lr}
 8002c7a:	b0c7      	sub	sp, #284	; 0x11c
 8002c7c:	af02      	add	r7, sp, #8
 8002c7e:	4604      	mov	r4, r0
 8002c80:	4608      	mov	r0, r1
 8002c82:	4639      	mov	r1, r7
 8002c84:	600a      	str	r2, [r1, #0]
 8002c86:	4619      	mov	r1, r3
 8002c88:	1dfb      	adds	r3, r7, #7
 8002c8a:	4622      	mov	r2, r4
 8002c8c:	701a      	strb	r2, [r3, #0]
 8002c8e:	1dbb      	adds	r3, r7, #6
 8002c90:	4602      	mov	r2, r0
 8002c92:	701a      	strb	r2, [r3, #0]
 8002c94:	1d3b      	adds	r3, r7, #4
 8002c96:	460a      	mov	r2, r1
 8002c98:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8002c9a:	f107 030c 	add.w	r3, r7, #12
 8002c9e:	1dba      	adds	r2, r7, #6
 8002ca0:	7812      	ldrb	r2, [r2, #0]
 8002ca2:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8002caa:	e010      	b.n	8002cce <ssd1306_I2C_WriteMulti+0x56>
dt[i+1] = data[i];
 8002cac:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8002cb0:	463a      	mov	r2, r7
 8002cb2:	6812      	ldr	r2, [r2, #0]
 8002cb4:	441a      	add	r2, r3
 8002cb6:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8002cba:	3301      	adds	r3, #1
 8002cbc:	7811      	ldrb	r1, [r2, #0]
 8002cbe:	f107 020c 	add.w	r2, r7, #12
 8002cc2:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8002cc4:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8002cc8:	3301      	adds	r3, #1
 8002cca:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8002cce:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8002cd2:	b29b      	uxth	r3, r3
 8002cd4:	1d3a      	adds	r2, r7, #4
 8002cd6:	8812      	ldrh	r2, [r2, #0]
 8002cd8:	429a      	cmp	r2, r3
 8002cda:	d8e7      	bhi.n	8002cac <ssd1306_I2C_WriteMulti+0x34>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 8002cdc:	1dfb      	adds	r3, r7, #7
 8002cde:	781b      	ldrb	r3, [r3, #0]
 8002ce0:	b299      	uxth	r1, r3
 8002ce2:	1d3b      	adds	r3, r7, #4
 8002ce4:	881b      	ldrh	r3, [r3, #0]
 8002ce6:	3301      	adds	r3, #1
 8002ce8:	b29b      	uxth	r3, r3
 8002cea:	f107 020c 	add.w	r2, r7, #12
 8002cee:	200a      	movs	r0, #10
 8002cf0:	9000      	str	r0, [sp, #0]
 8002cf2:	4804      	ldr	r0, [pc, #16]	; (8002d04 <ssd1306_I2C_WriteMulti+0x8c>)
 8002cf4:	f002 f960 	bl	8004fb8 <HAL_I2C_Master_Transmit>
}
 8002cf8:	bf00      	nop
 8002cfa:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	bd90      	pop	{r4, r7, pc}
 8002d02:	bf00      	nop
 8002d04:	20001b58 	.word	0x20001b58

08002d08 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b086      	sub	sp, #24
 8002d0c:	af02      	add	r7, sp, #8
 8002d0e:	4603      	mov	r3, r0
 8002d10:	71fb      	strb	r3, [r7, #7]
 8002d12:	460b      	mov	r3, r1
 8002d14:	71bb      	strb	r3, [r7, #6]
 8002d16:	4613      	mov	r3, r2
 8002d18:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8002d1a:	79bb      	ldrb	r3, [r7, #6]
 8002d1c:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8002d1e:	797b      	ldrb	r3, [r7, #5]
 8002d20:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 8002d22:	79fb      	ldrb	r3, [r7, #7]
 8002d24:	b299      	uxth	r1, r3
 8002d26:	f107 020c 	add.w	r2, r7, #12
 8002d2a:	230a      	movs	r3, #10
 8002d2c:	9300      	str	r3, [sp, #0]
 8002d2e:	2302      	movs	r3, #2
 8002d30:	4803      	ldr	r0, [pc, #12]	; (8002d40 <ssd1306_I2C_Write+0x38>)
 8002d32:	f002 f941 	bl	8004fb8 <HAL_I2C_Master_Transmit>
}
 8002d36:	bf00      	nop
 8002d38:	3710      	adds	r7, #16
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	bd80      	pop	{r7, pc}
 8002d3e:	bf00      	nop
 8002d40:	20001b58 	.word	0x20001b58

08002d44 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002d44:	b590      	push	{r4, r7, lr}
 8002d46:	b085      	sub	sp, #20
 8002d48:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002d4a:	f000 ff87 	bl	8003c5c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002d4e:	f000 f8e7 	bl	8002f20 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002d52:	f000 faa1 	bl	8003298 <MX_GPIO_Init>
  MX_I2C1_Init();
 8002d56:	f000 f97d 	bl	8003054 <MX_I2C1_Init>
  MX_TIM2_Init();
 8002d5a:	f000 f9d7 	bl	800310c <MX_TIM2_Init>
  MX_ADC1_Init();
 8002d5e:	f000 f93b 	bl	8002fd8 <MX_ADC1_Init>
  MX_USART2_UART_Init();
 8002d62:	f000 fa6f 	bl	8003244 <MX_USART2_UART_Init>
  MX_I2C2_Init();
 8002d66:	f000 f9a3 	bl	80030b0 <MX_I2C2_Init>
  MX_TIM3_Init();
 8002d6a:	f000 fa1d 	bl	80031a8 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */


  SSD1306_Init();
 8002d6e:	f7ff fd43 	bl	80027f8 <SSD1306_Init>
  HAL_TIM_Base_Start_IT(&htim2);
 8002d72:	485b      	ldr	r0, [pc, #364]	; (8002ee0 <main+0x19c>)
 8002d74:	f004 f86e 	bl	8006e54 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim3);
 8002d78:	485a      	ldr	r0, [pc, #360]	; (8002ee4 <main+0x1a0>)
 8002d7a:	f004 f86b 	bl	8006e54 <HAL_TIM_Base_Start_IT>
  Max30102_Init(&hi2c2);
 8002d7e:	485a      	ldr	r0, [pc, #360]	; (8002ee8 <main+0x1a4>)
 8002d80:	f7fe fe44 	bl	8001a0c <Max30102_Init>

  // Boot up sequence
    _BootUpSequence();
 8002d84:	f000 fb0e 	bl	80033a4 <_BootUpSequence>

  // Refresh the OLED display
	SSD1306_Clear();
 8002d88:	f7ff ff59 	bl	8002c3e <SSD1306_Clear>
	SSD1306_UpdateScreen();
 8002d8c:	f7ff fdf8 	bl	8002980 <SSD1306_UpdateScreen>

  // Resetting the state of the vibrarion motor
	HAL_GPIO_WritePin(Motor_GPIO_Port, Motor_Pin, GPIO_PIN_RESET);
 8002d90:	2200      	movs	r2, #0
 8002d92:	2102      	movs	r1, #2
 8002d94:	4855      	ldr	r0, [pc, #340]	; (8002eec <main+0x1a8>)
 8002d96:	f001 ff81 	bl	8004c9c <HAL_GPIO_WritePin>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	 Max30102_Task();
 8002d9a:	f7fe fd83 	bl	80018a4 <Max30102_Task>

	 if(_timer_3_interrupt)
 8002d9e:	4b54      	ldr	r3, [pc, #336]	; (8002ef0 <main+0x1ac>)
 8002da0:	781b      	ldrb	r3, [r3, #0]
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d023      	beq.n	8002dee <main+0xaa>
	 {
		 if(blueToothInput == SPO2ORHR_HR){
 8002da6:	4b53      	ldr	r3, [pc, #332]	; (8002ef4 <main+0x1b0>)
 8002da8:	781b      	ldrb	r3, [r3, #0]
 8002daa:	2b68      	cmp	r3, #104	; 0x68
 8002dac:	d11c      	bne.n	8002de8 <main+0xa4>
			 _heartRate = (uint8_t)Max30102_GetHeartRate();
 8002dae:	f7fe fd65 	bl	800187c <Max30102_GetHeartRate>
 8002db2:	4603      	mov	r3, r0
 8002db4:	b2da      	uxtb	r2, r3
 8002db6:	4b50      	ldr	r3, [pc, #320]	; (8002ef8 <main+0x1b4>)
 8002db8:	701a      	strb	r2, [r3, #0]

			 // Sending the heart rate value with bluetooth
			 _BluetoothSend(_heartRate, SPO2ORHR_HR);
 8002dba:	4b4f      	ldr	r3, [pc, #316]	; (8002ef8 <main+0x1b4>)
 8002dbc:	781b      	ldrb	r3, [r3, #0]
 8002dbe:	2168      	movs	r1, #104	; 0x68
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	f000 fbab 	bl	800351c <_BluetoothSend>

			 // Showing heart rate on the display
			 _Show_HeartRate_SPO2(_heartRate, SPO2ORHR_HR);
 8002dc6:	4b4c      	ldr	r3, [pc, #304]	; (8002ef8 <main+0x1b4>)
 8002dc8:	781b      	ldrb	r3, [r3, #0]
 8002dca:	2168      	movs	r1, #104	; 0x68
 8002dcc:	4618      	mov	r0, r3
 8002dce:	f000 fb1f 	bl	8003410 <_Show_HeartRate_SPO2>

			 // Checking HR and SPO2
			 _Check_HR_SPO2(_heartRate, SPO2ORHR_HR);
 8002dd2:	4b49      	ldr	r3, [pc, #292]	; (8002ef8 <main+0x1b4>)
 8002dd4:	781b      	ldrb	r3, [r3, #0]
 8002dd6:	2168      	movs	r1, #104	; 0x68
 8002dd8:	4618      	mov	r0, r3
 8002dda:	f000 fc15 	bl	8003608 <_Check_HR_SPO2>


			 HAL_GPIO_TogglePin(User_Led_GPIO_Port, User_Led_Pin);
 8002dde:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002de2:	4846      	ldr	r0, [pc, #280]	; (8002efc <main+0x1b8>)
 8002de4:	f001 ff72 	bl	8004ccc <HAL_GPIO_TogglePin>
		 }

		 _timer_3_interrupt = 0;
 8002de8:	4b41      	ldr	r3, [pc, #260]	; (8002ef0 <main+0x1ac>)
 8002dea:	2200      	movs	r2, #0
 8002dec:	701a      	strb	r2, [r3, #0]
	 }

	 if(_timer_2_interrupt)
 8002dee:	4b44      	ldr	r3, [pc, #272]	; (8002f00 <main+0x1bc>)
 8002df0:	781b      	ldrb	r3, [r3, #0]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d0d1      	beq.n	8002d9a <main+0x56>
	  /*
	   * Battery voltage exhibition section
	   */
	  // Preparing to convert the float value into string to be shown on display
	  char voltageText[10];
	  float BAT_Voltage = _BatteryVoltage();
 8002df6:	f000 fb4f 	bl	8003498 <_BatteryVoltage>
 8002dfa:	60f8      	str	r0, [r7, #12]
	  _BAT_Voltage_AVG += BAT_Voltage;
 8002dfc:	4b41      	ldr	r3, [pc, #260]	; (8002f04 <main+0x1c0>)
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	68f9      	ldr	r1, [r7, #12]
 8002e02:	4618      	mov	r0, r3
 8002e04:	f7fd fe96 	bl	8000b34 <__addsf3>
 8002e08:	4603      	mov	r3, r0
 8002e0a:	461a      	mov	r2, r3
 8002e0c:	4b3d      	ldr	r3, [pc, #244]	; (8002f04 <main+0x1c0>)
 8002e0e:	601a      	str	r2, [r3, #0]
	  _counter++;
 8002e10:	4b3d      	ldr	r3, [pc, #244]	; (8002f08 <main+0x1c4>)
 8002e12:	781b      	ldrb	r3, [r3, #0]
 8002e14:	3301      	adds	r3, #1
 8002e16:	b2da      	uxtb	r2, r3
 8002e18:	4b3b      	ldr	r3, [pc, #236]	; (8002f08 <main+0x1c4>)
 8002e1a:	701a      	strb	r2, [r3, #0]

	  if(_counter == NUM_BAT_ADC_READ_AVG)
 8002e1c:	4b3a      	ldr	r3, [pc, #232]	; (8002f08 <main+0x1c4>)
 8002e1e:	781b      	ldrb	r3, [r3, #0]
 8002e20:	2b32      	cmp	r3, #50	; 0x32
 8002e22:	d13d      	bne.n	8002ea0 <main+0x15c>
	  {
		  _BAT_Voltage_AVG /= _counter;
 8002e24:	4b37      	ldr	r3, [pc, #220]	; (8002f04 <main+0x1c0>)
 8002e26:	681c      	ldr	r4, [r3, #0]
 8002e28:	4b37      	ldr	r3, [pc, #220]	; (8002f08 <main+0x1c4>)
 8002e2a:	781b      	ldrb	r3, [r3, #0]
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	f7fd ff35 	bl	8000c9c <__aeabi_i2f>
 8002e32:	4603      	mov	r3, r0
 8002e34:	4619      	mov	r1, r3
 8002e36:	4620      	mov	r0, r4
 8002e38:	f7fe f838 	bl	8000eac <__aeabi_fdiv>
 8002e3c:	4603      	mov	r3, r0
 8002e3e:	461a      	mov	r2, r3
 8002e40:	4b30      	ldr	r3, [pc, #192]	; (8002f04 <main+0x1c0>)
 8002e42:	601a      	str	r2, [r3, #0]
		  sprintf(voltageText, "Bat_Vol: %.2f", _BAT_Voltage_AVG);
 8002e44:	4b2f      	ldr	r3, [pc, #188]	; (8002f04 <main+0x1c0>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	4618      	mov	r0, r3
 8002e4a:	f7fd faed 	bl	8000428 <__aeabi_f2d>
 8002e4e:	4602      	mov	r2, r0
 8002e50:	460b      	mov	r3, r1
 8002e52:	4638      	mov	r0, r7
 8002e54:	492d      	ldr	r1, [pc, #180]	; (8002f0c <main+0x1c8>)
 8002e56:	f005 fdb3 	bl	80089c0 <siprintf>
		  // Printing the battery voltage value on display
		  SSD1306_SetPosition(0, 0);
 8002e5a:	2100      	movs	r1, #0
 8002e5c:	2000      	movs	r0, #0
 8002e5e:	f7ff fe33 	bl	8002ac8 <SSD1306_SetPosition>
		  SSD1306_PrintString(voltageText, &Font_7x10, SSD1306_COLOR_WHITE);
 8002e62:	463b      	mov	r3, r7
 8002e64:	2201      	movs	r2, #1
 8002e66:	492a      	ldr	r1, [pc, #168]	; (8002f10 <main+0x1cc>)
 8002e68:	4618      	mov	r0, r3
 8002e6a:	f7ff fec3 	bl	8002bf4 <SSD1306_PrintString>
		  SSD1306_UpdateScreen();
 8002e6e:	f7ff fd87 	bl	8002980 <SSD1306_UpdateScreen>

		  // Checking if the battery voltage is low
		  if(_BAT_Voltage_AVG <= MIN_ALLOWED_VOLTAGE_SUM){
 8002e72:	4b24      	ldr	r3, [pc, #144]	; (8002f04 <main+0x1c0>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	4927      	ldr	r1, [pc, #156]	; (8002f14 <main+0x1d0>)
 8002e78:	4618      	mov	r0, r3
 8002e7a:	f7fe f90b 	bl	8001094 <__aeabi_fcmple>
 8002e7e:	4603      	mov	r3, r0
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d00a      	beq.n	8002e9a <main+0x156>

			  // Printing the warning message
			  //SSD1306_Clear();
			  SSD1306_SetPosition(0, 90);
 8002e84:	215a      	movs	r1, #90	; 0x5a
 8002e86:	2000      	movs	r0, #0
 8002e88:	f7ff fe1e 	bl	8002ac8 <SSD1306_SetPosition>
			  SSD1306_PrintString("Low BAT.", &Font_7x10, SSD1306_COLOR_WHITE);
 8002e8c:	2201      	movs	r2, #1
 8002e8e:	4920      	ldr	r1, [pc, #128]	; (8002f10 <main+0x1cc>)
 8002e90:	4821      	ldr	r0, [pc, #132]	; (8002f18 <main+0x1d4>)
 8002e92:	f7ff feaf 	bl	8002bf4 <SSD1306_PrintString>
			  SSD1306_UpdateScreen();
 8002e96:	f7ff fd73 	bl	8002980 <SSD1306_UpdateScreen>
		  }


		  _counter = 0;
 8002e9a:	4b1b      	ldr	r3, [pc, #108]	; (8002f08 <main+0x1c4>)
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	701a      	strb	r2, [r3, #0]
	  }

	  if(blueToothInput == SPO2ORHR_SPO2){
 8002ea0:	4b14      	ldr	r3, [pc, #80]	; (8002ef4 <main+0x1b0>)
 8002ea2:	781b      	ldrb	r3, [r3, #0]
 8002ea4:	2b73      	cmp	r3, #115	; 0x73
 8002ea6:	d117      	bne.n	8002ed8 <main+0x194>

		 _SPO2 = (uint8_t) Max30102_GetSpO2Value();
 8002ea8:	f7fe fcf2 	bl	8001890 <Max30102_GetSpO2Value>
 8002eac:	4603      	mov	r3, r0
 8002eae:	b2da      	uxtb	r2, r3
 8002eb0:	4b1a      	ldr	r3, [pc, #104]	; (8002f1c <main+0x1d8>)
 8002eb2:	701a      	strb	r2, [r3, #0]

		 // Sending the heart rate value with bluetooth
		 _BluetoothSend(_SPO2, SPO2ORHR_SPO2);
 8002eb4:	4b19      	ldr	r3, [pc, #100]	; (8002f1c <main+0x1d8>)
 8002eb6:	781b      	ldrb	r3, [r3, #0]
 8002eb8:	2173      	movs	r1, #115	; 0x73
 8002eba:	4618      	mov	r0, r3
 8002ebc:	f000 fb2e 	bl	800351c <_BluetoothSend>

		 // Showing heart rate on the display
		 _Show_HeartRate_SPO2(_SPO2, SPO2ORHR_SPO2);
 8002ec0:	4b16      	ldr	r3, [pc, #88]	; (8002f1c <main+0x1d8>)
 8002ec2:	781b      	ldrb	r3, [r3, #0]
 8002ec4:	2173      	movs	r1, #115	; 0x73
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	f000 faa2 	bl	8003410 <_Show_HeartRate_SPO2>

		 // Checking HR and SPO2
		 _Check_HR_SPO2(_SPO2, SPO2ORHR_SPO2);
 8002ecc:	4b13      	ldr	r3, [pc, #76]	; (8002f1c <main+0x1d8>)
 8002ece:	781b      	ldrb	r3, [r3, #0]
 8002ed0:	2173      	movs	r1, #115	; 0x73
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	f000 fb98 	bl	8003608 <_Check_HR_SPO2>
	  }


	  _timer_2_interrupt = 0;
 8002ed8:	4b09      	ldr	r3, [pc, #36]	; (8002f00 <main+0x1bc>)
 8002eda:	2200      	movs	r2, #0
 8002edc:	701a      	strb	r2, [r3, #0]
	 Max30102_Task();
 8002ede:	e75c      	b.n	8002d9a <main+0x56>
 8002ee0:	20001c78 	.word	0x20001c78
 8002ee4:	20001c00 	.word	0x20001c00
 8002ee8:	20001bac 	.word	0x20001bac
 8002eec:	40010c00 	.word	0x40010c00
 8002ef0:	200011bc 	.word	0x200011bc
 8002ef4:	20001b54 	.word	0x20001b54
 8002ef8:	200011be 	.word	0x200011be
 8002efc:	40011000 	.word	0x40011000
 8002f00:	200011bd 	.word	0x200011bd
 8002f04:	200011b8 	.word	0x200011b8
 8002f08:	200011b6 	.word	0x200011b6
 8002f0c:	0800ae50 	.word	0x0800ae50
 8002f10:	20000000 	.word	0x20000000
 8002f14:	43340000 	.word	0x43340000
 8002f18:	0800ae60 	.word	0x0800ae60
 8002f1c:	200011bf 	.word	0x200011bf

08002f20 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b094      	sub	sp, #80	; 0x50
 8002f24:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002f26:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002f2a:	2228      	movs	r2, #40	; 0x28
 8002f2c:	2100      	movs	r1, #0
 8002f2e:	4618      	mov	r0, r3
 8002f30:	f005 f8de 	bl	80080f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002f34:	f107 0314 	add.w	r3, r7, #20
 8002f38:	2200      	movs	r2, #0
 8002f3a:	601a      	str	r2, [r3, #0]
 8002f3c:	605a      	str	r2, [r3, #4]
 8002f3e:	609a      	str	r2, [r3, #8]
 8002f40:	60da      	str	r2, [r3, #12]
 8002f42:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002f44:	1d3b      	adds	r3, r7, #4
 8002f46:	2200      	movs	r2, #0
 8002f48:	601a      	str	r2, [r3, #0]
 8002f4a:	605a      	str	r2, [r3, #4]
 8002f4c:	609a      	str	r2, [r3, #8]
 8002f4e:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002f50:	2301      	movs	r3, #1
 8002f52:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002f54:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002f58:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002f5e:	2301      	movs	r3, #1
 8002f60:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002f62:	2302      	movs	r3, #2
 8002f64:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002f66:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002f6a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002f6c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8002f70:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002f72:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002f76:	4618      	mov	r0, r3
 8002f78:	f003 f988 	bl	800628c <HAL_RCC_OscConfig>
 8002f7c:	4603      	mov	r3, r0
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d001      	beq.n	8002f86 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8002f82:	f000 fbbf 	bl	8003704 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002f86:	230f      	movs	r3, #15
 8002f88:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002f8a:	2302      	movs	r3, #2
 8002f8c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002f8e:	2300      	movs	r3, #0
 8002f90:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002f92:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002f96:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002f98:	2300      	movs	r3, #0
 8002f9a:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002f9c:	f107 0314 	add.w	r3, r7, #20
 8002fa0:	2102      	movs	r1, #2
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	f003 fbf2 	bl	800678c <HAL_RCC_ClockConfig>
 8002fa8:	4603      	mov	r3, r0
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d001      	beq.n	8002fb2 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8002fae:	f000 fba9 	bl	8003704 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8002fb2:	2302      	movs	r3, #2
 8002fb4:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8002fb6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002fba:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002fbc:	1d3b      	adds	r3, r7, #4
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	f003 fd7e 	bl	8006ac0 <HAL_RCCEx_PeriphCLKConfig>
 8002fc4:	4603      	mov	r3, r0
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d001      	beq.n	8002fce <SystemClock_Config+0xae>
  {
    Error_Handler();
 8002fca:	f000 fb9b 	bl	8003704 <Error_Handler>
  }
}
 8002fce:	bf00      	nop
 8002fd0:	3750      	adds	r7, #80	; 0x50
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	bd80      	pop	{r7, pc}
	...

08002fd8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b084      	sub	sp, #16
 8002fdc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002fde:	1d3b      	adds	r3, r7, #4
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	601a      	str	r2, [r3, #0]
 8002fe4:	605a      	str	r2, [r3, #4]
 8002fe6:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8002fe8:	4b18      	ldr	r3, [pc, #96]	; (800304c <MX_ADC1_Init+0x74>)
 8002fea:	4a19      	ldr	r2, [pc, #100]	; (8003050 <MX_ADC1_Init+0x78>)
 8002fec:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002fee:	4b17      	ldr	r3, [pc, #92]	; (800304c <MX_ADC1_Init+0x74>)
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002ff4:	4b15      	ldr	r3, [pc, #84]	; (800304c <MX_ADC1_Init+0x74>)
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002ffa:	4b14      	ldr	r3, [pc, #80]	; (800304c <MX_ADC1_Init+0x74>)
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003000:	4b12      	ldr	r3, [pc, #72]	; (800304c <MX_ADC1_Init+0x74>)
 8003002:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8003006:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003008:	4b10      	ldr	r3, [pc, #64]	; (800304c <MX_ADC1_Init+0x74>)
 800300a:	2200      	movs	r2, #0
 800300c:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 800300e:	4b0f      	ldr	r3, [pc, #60]	; (800304c <MX_ADC1_Init+0x74>)
 8003010:	2201      	movs	r2, #1
 8003012:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003014:	480d      	ldr	r0, [pc, #52]	; (800304c <MX_ADC1_Init+0x74>)
 8003016:	f000 fea7 	bl	8003d68 <HAL_ADC_Init>
 800301a:	4603      	mov	r3, r0
 800301c:	2b00      	cmp	r3, #0
 800301e:	d001      	beq.n	8003024 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8003020:	f000 fb70 	bl	8003704 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8003024:	2300      	movs	r3, #0
 8003026:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8003028:	2301      	movs	r3, #1
 800302a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_55CYCLES_5;
 800302c:	2305      	movs	r3, #5
 800302e:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003030:	1d3b      	adds	r3, r7, #4
 8003032:	4619      	mov	r1, r3
 8003034:	4805      	ldr	r0, [pc, #20]	; (800304c <MX_ADC1_Init+0x74>)
 8003036:	f001 f95b 	bl	80042f0 <HAL_ADC_ConfigChannel>
 800303a:	4603      	mov	r3, r0
 800303c:	2b00      	cmp	r3, #0
 800303e:	d001      	beq.n	8003044 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8003040:	f000 fb60 	bl	8003704 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8003044:	bf00      	nop
 8003046:	3710      	adds	r7, #16
 8003048:	46bd      	mov	sp, r7
 800304a:	bd80      	pop	{r7, pc}
 800304c:	20001c48 	.word	0x20001c48
 8003050:	40012400 	.word	0x40012400

08003054 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003058:	4b12      	ldr	r3, [pc, #72]	; (80030a4 <MX_I2C1_Init+0x50>)
 800305a:	4a13      	ldr	r2, [pc, #76]	; (80030a8 <MX_I2C1_Init+0x54>)
 800305c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800305e:	4b11      	ldr	r3, [pc, #68]	; (80030a4 <MX_I2C1_Init+0x50>)
 8003060:	4a12      	ldr	r2, [pc, #72]	; (80030ac <MX_I2C1_Init+0x58>)
 8003062:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003064:	4b0f      	ldr	r3, [pc, #60]	; (80030a4 <MX_I2C1_Init+0x50>)
 8003066:	2200      	movs	r2, #0
 8003068:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800306a:	4b0e      	ldr	r3, [pc, #56]	; (80030a4 <MX_I2C1_Init+0x50>)
 800306c:	2200      	movs	r2, #0
 800306e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003070:	4b0c      	ldr	r3, [pc, #48]	; (80030a4 <MX_I2C1_Init+0x50>)
 8003072:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003076:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003078:	4b0a      	ldr	r3, [pc, #40]	; (80030a4 <MX_I2C1_Init+0x50>)
 800307a:	2200      	movs	r2, #0
 800307c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800307e:	4b09      	ldr	r3, [pc, #36]	; (80030a4 <MX_I2C1_Init+0x50>)
 8003080:	2200      	movs	r2, #0
 8003082:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003084:	4b07      	ldr	r3, [pc, #28]	; (80030a4 <MX_I2C1_Init+0x50>)
 8003086:	2200      	movs	r2, #0
 8003088:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800308a:	4b06      	ldr	r3, [pc, #24]	; (80030a4 <MX_I2C1_Init+0x50>)
 800308c:	2200      	movs	r2, #0
 800308e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003090:	4804      	ldr	r0, [pc, #16]	; (80030a4 <MX_I2C1_Init+0x50>)
 8003092:	f001 fe4d 	bl	8004d30 <HAL_I2C_Init>
 8003096:	4603      	mov	r3, r0
 8003098:	2b00      	cmp	r3, #0
 800309a:	d001      	beq.n	80030a0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800309c:	f000 fb32 	bl	8003704 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80030a0:	bf00      	nop
 80030a2:	bd80      	pop	{r7, pc}
 80030a4:	20001b58 	.word	0x20001b58
 80030a8:	40005400 	.word	0x40005400
 80030ac:	00061a80 	.word	0x00061a80

080030b0 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80030b4:	4b12      	ldr	r3, [pc, #72]	; (8003100 <MX_I2C2_Init+0x50>)
 80030b6:	4a13      	ldr	r2, [pc, #76]	; (8003104 <MX_I2C2_Init+0x54>)
 80030b8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 80030ba:	4b11      	ldr	r3, [pc, #68]	; (8003100 <MX_I2C2_Init+0x50>)
 80030bc:	4a12      	ldr	r2, [pc, #72]	; (8003108 <MX_I2C2_Init+0x58>)
 80030be:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80030c0:	4b0f      	ldr	r3, [pc, #60]	; (8003100 <MX_I2C2_Init+0x50>)
 80030c2:	2200      	movs	r2, #0
 80030c4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80030c6:	4b0e      	ldr	r3, [pc, #56]	; (8003100 <MX_I2C2_Init+0x50>)
 80030c8:	2200      	movs	r2, #0
 80030ca:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80030cc:	4b0c      	ldr	r3, [pc, #48]	; (8003100 <MX_I2C2_Init+0x50>)
 80030ce:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80030d2:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80030d4:	4b0a      	ldr	r3, [pc, #40]	; (8003100 <MX_I2C2_Init+0x50>)
 80030d6:	2200      	movs	r2, #0
 80030d8:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80030da:	4b09      	ldr	r3, [pc, #36]	; (8003100 <MX_I2C2_Init+0x50>)
 80030dc:	2200      	movs	r2, #0
 80030de:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80030e0:	4b07      	ldr	r3, [pc, #28]	; (8003100 <MX_I2C2_Init+0x50>)
 80030e2:	2200      	movs	r2, #0
 80030e4:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80030e6:	4b06      	ldr	r3, [pc, #24]	; (8003100 <MX_I2C2_Init+0x50>)
 80030e8:	2200      	movs	r2, #0
 80030ea:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80030ec:	4804      	ldr	r0, [pc, #16]	; (8003100 <MX_I2C2_Init+0x50>)
 80030ee:	f001 fe1f 	bl	8004d30 <HAL_I2C_Init>
 80030f2:	4603      	mov	r3, r0
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d001      	beq.n	80030fc <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80030f8:	f000 fb04 	bl	8003704 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80030fc:	bf00      	nop
 80030fe:	bd80      	pop	{r7, pc}
 8003100:	20001bac 	.word	0x20001bac
 8003104:	40005800 	.word	0x40005800
 8003108:	00061a80 	.word	0x00061a80

0800310c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	b086      	sub	sp, #24
 8003110:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003112:	f107 0308 	add.w	r3, r7, #8
 8003116:	2200      	movs	r2, #0
 8003118:	601a      	str	r2, [r3, #0]
 800311a:	605a      	str	r2, [r3, #4]
 800311c:	609a      	str	r2, [r3, #8]
 800311e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003120:	463b      	mov	r3, r7
 8003122:	2200      	movs	r2, #0
 8003124:	601a      	str	r2, [r3, #0]
 8003126:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003128:	4b1e      	ldr	r3, [pc, #120]	; (80031a4 <MX_TIM2_Init+0x98>)
 800312a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800312e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1000-1;
 8003130:	4b1c      	ldr	r3, [pc, #112]	; (80031a4 <MX_TIM2_Init+0x98>)
 8003132:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003136:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003138:	4b1a      	ldr	r3, [pc, #104]	; (80031a4 <MX_TIM2_Init+0x98>)
 800313a:	2200      	movs	r2, #0
 800313c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2400;
 800313e:	4b19      	ldr	r3, [pc, #100]	; (80031a4 <MX_TIM2_Init+0x98>)
 8003140:	f44f 6216 	mov.w	r2, #2400	; 0x960
 8003144:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003146:	4b17      	ldr	r3, [pc, #92]	; (80031a4 <MX_TIM2_Init+0x98>)
 8003148:	2200      	movs	r2, #0
 800314a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800314c:	4b15      	ldr	r3, [pc, #84]	; (80031a4 <MX_TIM2_Init+0x98>)
 800314e:	2200      	movs	r2, #0
 8003150:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003152:	4814      	ldr	r0, [pc, #80]	; (80031a4 <MX_TIM2_Init+0x98>)
 8003154:	f003 fe2e 	bl	8006db4 <HAL_TIM_Base_Init>
 8003158:	4603      	mov	r3, r0
 800315a:	2b00      	cmp	r3, #0
 800315c:	d001      	beq.n	8003162 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800315e:	f000 fad1 	bl	8003704 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003162:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003166:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003168:	f107 0308 	add.w	r3, r7, #8
 800316c:	4619      	mov	r1, r3
 800316e:	480d      	ldr	r0, [pc, #52]	; (80031a4 <MX_TIM2_Init+0x98>)
 8003170:	f003 ffca 	bl	8007108 <HAL_TIM_ConfigClockSource>
 8003174:	4603      	mov	r3, r0
 8003176:	2b00      	cmp	r3, #0
 8003178:	d001      	beq.n	800317e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800317a:	f000 fac3 	bl	8003704 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800317e:	2300      	movs	r3, #0
 8003180:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003182:	2300      	movs	r3, #0
 8003184:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003186:	463b      	mov	r3, r7
 8003188:	4619      	mov	r1, r3
 800318a:	4806      	ldr	r0, [pc, #24]	; (80031a4 <MX_TIM2_Init+0x98>)
 800318c:	f004 f99c 	bl	80074c8 <HAL_TIMEx_MasterConfigSynchronization>
 8003190:	4603      	mov	r3, r0
 8003192:	2b00      	cmp	r3, #0
 8003194:	d001      	beq.n	800319a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8003196:	f000 fab5 	bl	8003704 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800319a:	bf00      	nop
 800319c:	3718      	adds	r7, #24
 800319e:	46bd      	mov	sp, r7
 80031a0:	bd80      	pop	{r7, pc}
 80031a2:	bf00      	nop
 80031a4:	20001c78 	.word	0x20001c78

080031a8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b086      	sub	sp, #24
 80031ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80031ae:	f107 0308 	add.w	r3, r7, #8
 80031b2:	2200      	movs	r2, #0
 80031b4:	601a      	str	r2, [r3, #0]
 80031b6:	605a      	str	r2, [r3, #4]
 80031b8:	609a      	str	r2, [r3, #8]
 80031ba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80031bc:	463b      	mov	r3, r7
 80031be:	2200      	movs	r2, #0
 80031c0:	601a      	str	r2, [r3, #0]
 80031c2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80031c4:	4b1d      	ldr	r3, [pc, #116]	; (800323c <MX_TIM3_Init+0x94>)
 80031c6:	4a1e      	ldr	r2, [pc, #120]	; (8003240 <MX_TIM3_Init+0x98>)
 80031c8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1000-1;
 80031ca:	4b1c      	ldr	r3, [pc, #112]	; (800323c <MX_TIM3_Init+0x94>)
 80031cc:	f240 32e7 	movw	r2, #999	; 0x3e7
 80031d0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80031d2:	4b1a      	ldr	r3, [pc, #104]	; (800323c <MX_TIM3_Init+0x94>)
 80031d4:	2200      	movs	r2, #0
 80031d6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 4000;
 80031d8:	4b18      	ldr	r3, [pc, #96]	; (800323c <MX_TIM3_Init+0x94>)
 80031da:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 80031de:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80031e0:	4b16      	ldr	r3, [pc, #88]	; (800323c <MX_TIM3_Init+0x94>)
 80031e2:	2200      	movs	r2, #0
 80031e4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80031e6:	4b15      	ldr	r3, [pc, #84]	; (800323c <MX_TIM3_Init+0x94>)
 80031e8:	2200      	movs	r2, #0
 80031ea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80031ec:	4813      	ldr	r0, [pc, #76]	; (800323c <MX_TIM3_Init+0x94>)
 80031ee:	f003 fde1 	bl	8006db4 <HAL_TIM_Base_Init>
 80031f2:	4603      	mov	r3, r0
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d001      	beq.n	80031fc <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 80031f8:	f000 fa84 	bl	8003704 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80031fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003200:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003202:	f107 0308 	add.w	r3, r7, #8
 8003206:	4619      	mov	r1, r3
 8003208:	480c      	ldr	r0, [pc, #48]	; (800323c <MX_TIM3_Init+0x94>)
 800320a:	f003 ff7d 	bl	8007108 <HAL_TIM_ConfigClockSource>
 800320e:	4603      	mov	r3, r0
 8003210:	2b00      	cmp	r3, #0
 8003212:	d001      	beq.n	8003218 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8003214:	f000 fa76 	bl	8003704 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003218:	2300      	movs	r3, #0
 800321a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800321c:	2300      	movs	r3, #0
 800321e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003220:	463b      	mov	r3, r7
 8003222:	4619      	mov	r1, r3
 8003224:	4805      	ldr	r0, [pc, #20]	; (800323c <MX_TIM3_Init+0x94>)
 8003226:	f004 f94f 	bl	80074c8 <HAL_TIMEx_MasterConfigSynchronization>
 800322a:	4603      	mov	r3, r0
 800322c:	2b00      	cmp	r3, #0
 800322e:	d001      	beq.n	8003234 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8003230:	f000 fa68 	bl	8003704 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8003234:	bf00      	nop
 8003236:	3718      	adds	r7, #24
 8003238:	46bd      	mov	sp, r7
 800323a:	bd80      	pop	{r7, pc}
 800323c:	20001c00 	.word	0x20001c00
 8003240:	40000400 	.word	0x40000400

08003244 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003248:	4b11      	ldr	r3, [pc, #68]	; (8003290 <MX_USART2_UART_Init+0x4c>)
 800324a:	4a12      	ldr	r2, [pc, #72]	; (8003294 <MX_USART2_UART_Init+0x50>)
 800324c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800324e:	4b10      	ldr	r3, [pc, #64]	; (8003290 <MX_USART2_UART_Init+0x4c>)
 8003250:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8003254:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003256:	4b0e      	ldr	r3, [pc, #56]	; (8003290 <MX_USART2_UART_Init+0x4c>)
 8003258:	2200      	movs	r2, #0
 800325a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800325c:	4b0c      	ldr	r3, [pc, #48]	; (8003290 <MX_USART2_UART_Init+0x4c>)
 800325e:	2200      	movs	r2, #0
 8003260:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003262:	4b0b      	ldr	r3, [pc, #44]	; (8003290 <MX_USART2_UART_Init+0x4c>)
 8003264:	2200      	movs	r2, #0
 8003266:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003268:	4b09      	ldr	r3, [pc, #36]	; (8003290 <MX_USART2_UART_Init+0x4c>)
 800326a:	220c      	movs	r2, #12
 800326c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800326e:	4b08      	ldr	r3, [pc, #32]	; (8003290 <MX_USART2_UART_Init+0x4c>)
 8003270:	2200      	movs	r2, #0
 8003272:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003274:	4b06      	ldr	r3, [pc, #24]	; (8003290 <MX_USART2_UART_Init+0x4c>)
 8003276:	2200      	movs	r2, #0
 8003278:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800327a:	4805      	ldr	r0, [pc, #20]	; (8003290 <MX_USART2_UART_Init+0x4c>)
 800327c:	f004 f994 	bl	80075a8 <HAL_UART_Init>
 8003280:	4603      	mov	r3, r0
 8003282:	2b00      	cmp	r3, #0
 8003284:	d001      	beq.n	800328a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8003286:	f000 fa3d 	bl	8003704 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800328a:	bf00      	nop
 800328c:	bd80      	pop	{r7, pc}
 800328e:	bf00      	nop
 8003290:	20001cc0 	.word	0x20001cc0
 8003294:	40004400 	.word	0x40004400

08003298 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003298:	b580      	push	{r7, lr}
 800329a:	b088      	sub	sp, #32
 800329c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800329e:	f107 0310 	add.w	r3, r7, #16
 80032a2:	2200      	movs	r2, #0
 80032a4:	601a      	str	r2, [r3, #0]
 80032a6:	605a      	str	r2, [r3, #4]
 80032a8:	609a      	str	r2, [r3, #8]
 80032aa:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80032ac:	4b38      	ldr	r3, [pc, #224]	; (8003390 <MX_GPIO_Init+0xf8>)
 80032ae:	699b      	ldr	r3, [r3, #24]
 80032b0:	4a37      	ldr	r2, [pc, #220]	; (8003390 <MX_GPIO_Init+0xf8>)
 80032b2:	f043 0310 	orr.w	r3, r3, #16
 80032b6:	6193      	str	r3, [r2, #24]
 80032b8:	4b35      	ldr	r3, [pc, #212]	; (8003390 <MX_GPIO_Init+0xf8>)
 80032ba:	699b      	ldr	r3, [r3, #24]
 80032bc:	f003 0310 	and.w	r3, r3, #16
 80032c0:	60fb      	str	r3, [r7, #12]
 80032c2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80032c4:	4b32      	ldr	r3, [pc, #200]	; (8003390 <MX_GPIO_Init+0xf8>)
 80032c6:	699b      	ldr	r3, [r3, #24]
 80032c8:	4a31      	ldr	r2, [pc, #196]	; (8003390 <MX_GPIO_Init+0xf8>)
 80032ca:	f043 0320 	orr.w	r3, r3, #32
 80032ce:	6193      	str	r3, [r2, #24]
 80032d0:	4b2f      	ldr	r3, [pc, #188]	; (8003390 <MX_GPIO_Init+0xf8>)
 80032d2:	699b      	ldr	r3, [r3, #24]
 80032d4:	f003 0320 	and.w	r3, r3, #32
 80032d8:	60bb      	str	r3, [r7, #8]
 80032da:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80032dc:	4b2c      	ldr	r3, [pc, #176]	; (8003390 <MX_GPIO_Init+0xf8>)
 80032de:	699b      	ldr	r3, [r3, #24]
 80032e0:	4a2b      	ldr	r2, [pc, #172]	; (8003390 <MX_GPIO_Init+0xf8>)
 80032e2:	f043 0304 	orr.w	r3, r3, #4
 80032e6:	6193      	str	r3, [r2, #24]
 80032e8:	4b29      	ldr	r3, [pc, #164]	; (8003390 <MX_GPIO_Init+0xf8>)
 80032ea:	699b      	ldr	r3, [r3, #24]
 80032ec:	f003 0304 	and.w	r3, r3, #4
 80032f0:	607b      	str	r3, [r7, #4]
 80032f2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80032f4:	4b26      	ldr	r3, [pc, #152]	; (8003390 <MX_GPIO_Init+0xf8>)
 80032f6:	699b      	ldr	r3, [r3, #24]
 80032f8:	4a25      	ldr	r2, [pc, #148]	; (8003390 <MX_GPIO_Init+0xf8>)
 80032fa:	f043 0308 	orr.w	r3, r3, #8
 80032fe:	6193      	str	r3, [r2, #24]
 8003300:	4b23      	ldr	r3, [pc, #140]	; (8003390 <MX_GPIO_Init+0xf8>)
 8003302:	699b      	ldr	r3, [r3, #24]
 8003304:	f003 0308 	and.w	r3, r3, #8
 8003308:	603b      	str	r3, [r7, #0]
 800330a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(User_Led_GPIO_Port, User_Led_Pin, GPIO_PIN_RESET);
 800330c:	2200      	movs	r2, #0
 800330e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003312:	4820      	ldr	r0, [pc, #128]	; (8003394 <MX_GPIO_Init+0xfc>)
 8003314:	f001 fcc2 	bl	8004c9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Motor_GPIO_Port, Motor_Pin, GPIO_PIN_SET);
 8003318:	2201      	movs	r2, #1
 800331a:	2102      	movs	r1, #2
 800331c:	481e      	ldr	r0, [pc, #120]	; (8003398 <MX_GPIO_Init+0x100>)
 800331e:	f001 fcbd 	bl	8004c9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : User_Led_Pin */
  GPIO_InitStruct.Pin = User_Led_Pin;
 8003322:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003326:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003328:	2301      	movs	r3, #1
 800332a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800332c:	2300      	movs	r3, #0
 800332e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003330:	2302      	movs	r3, #2
 8003332:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(User_Led_GPIO_Port, &GPIO_InitStruct);
 8003334:	f107 0310 	add.w	r3, r7, #16
 8003338:	4619      	mov	r1, r3
 800333a:	4816      	ldr	r0, [pc, #88]	; (8003394 <MX_GPIO_Init+0xfc>)
 800333c:	f001 fb2a 	bl	8004994 <HAL_GPIO_Init>

  /*Configure GPIO pin : Motor_Pin */
  GPIO_InitStruct.Pin = Motor_Pin;
 8003340:	2302      	movs	r3, #2
 8003342:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003344:	2301      	movs	r3, #1
 8003346:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003348:	2300      	movs	r3, #0
 800334a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800334c:	2302      	movs	r3, #2
 800334e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Motor_GPIO_Port, &GPIO_InitStruct);
 8003350:	f107 0310 	add.w	r3, r7, #16
 8003354:	4619      	mov	r1, r3
 8003356:	4810      	ldr	r0, [pc, #64]	; (8003398 <MX_GPIO_Init+0x100>)
 8003358:	f001 fb1c 	bl	8004994 <HAL_GPIO_Init>

  /*Configure GPIO pin : INT_Pin */
  GPIO_InitStruct.Pin = INT_Pin;
 800335c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003360:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003362:	4b0e      	ldr	r3, [pc, #56]	; (800339c <MX_GPIO_Init+0x104>)
 8003364:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003366:	2300      	movs	r3, #0
 8003368:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(INT_GPIO_Port, &GPIO_InitStruct);
 800336a:	f107 0310 	add.w	r3, r7, #16
 800336e:	4619      	mov	r1, r3
 8003370:	480b      	ldr	r0, [pc, #44]	; (80033a0 <MX_GPIO_Init+0x108>)
 8003372:	f001 fb0f 	bl	8004994 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8003376:	2200      	movs	r2, #0
 8003378:	2100      	movs	r1, #0
 800337a:	2017      	movs	r0, #23
 800337c:	f001 fa23 	bl	80047c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8003380:	2017      	movs	r0, #23
 8003382:	f001 fa3c 	bl	80047fe <HAL_NVIC_EnableIRQ>

}
 8003386:	bf00      	nop
 8003388:	3720      	adds	r7, #32
 800338a:	46bd      	mov	sp, r7
 800338c:	bd80      	pop	{r7, pc}
 800338e:	bf00      	nop
 8003390:	40021000 	.word	0x40021000
 8003394:	40011000 	.word	0x40011000
 8003398:	40010c00 	.word	0x40010c00
 800339c:	10210000 	.word	0x10210000
 80033a0:	40010800 	.word	0x40010800

080033a4 <_BootUpSequence>:

/* USER CODE BEGIN 4 */

// Boot up sequence
void _BootUpSequence(void){
 80033a4:	b580      	push	{r7, lr}
 80033a6:	af00      	add	r7, sp, #0

	SSD1306_SetPosition(0, 0);
 80033a8:	2100      	movs	r1, #0
 80033aa:	2000      	movs	r0, #0
 80033ac:	f7ff fb8c 	bl	8002ac8 <SSD1306_SetPosition>
	SSD1306_PrintString("choose HR or SPO2", &Font_7x10, SSD1306_COLOR_WHITE);
 80033b0:	2201      	movs	r2, #1
 80033b2:	490b      	ldr	r1, [pc, #44]	; (80033e0 <_BootUpSequence+0x3c>)
 80033b4:	480b      	ldr	r0, [pc, #44]	; (80033e4 <_BootUpSequence+0x40>)
 80033b6:	f7ff fc1d 	bl	8002bf4 <SSD1306_PrintString>
	SSD1306_UpdateScreen();
 80033ba:	f7ff fae1 	bl	8002980 <SSD1306_UpdateScreen>
	//blueToothInput = _BluetoothReceive();

	// Waiting till the user chooses the mode
	while(1){
		// Reading user's choice of HR or SPO2
		blueToothInput = _BluetoothReceive();
 80033be:	f000 f815 	bl	80033ec <_BluetoothReceive>
 80033c2:	4603      	mov	r3, r0
 80033c4:	461a      	mov	r2, r3
 80033c6:	4b08      	ldr	r3, [pc, #32]	; (80033e8 <_BootUpSequence+0x44>)
 80033c8:	701a      	strb	r2, [r3, #0]
		if((blueToothInput == SPO2ORHR_HR) || (blueToothInput == SPO2ORHR_SPO2))
 80033ca:	4b07      	ldr	r3, [pc, #28]	; (80033e8 <_BootUpSequence+0x44>)
 80033cc:	781b      	ldrb	r3, [r3, #0]
 80033ce:	2b68      	cmp	r3, #104	; 0x68
 80033d0:	d004      	beq.n	80033dc <_BootUpSequence+0x38>
 80033d2:	4b05      	ldr	r3, [pc, #20]	; (80033e8 <_BootUpSequence+0x44>)
 80033d4:	781b      	ldrb	r3, [r3, #0]
 80033d6:	2b73      	cmp	r3, #115	; 0x73
 80033d8:	d000      	beq.n	80033dc <_BootUpSequence+0x38>
		blueToothInput = _BluetoothReceive();
 80033da:	e7f0      	b.n	80033be <_BootUpSequence+0x1a>
			break;
	}
}
 80033dc:	bf00      	nop
 80033de:	bd80      	pop	{r7, pc}
 80033e0:	20000000 	.word	0x20000000
 80033e4:	0800ae6c 	.word	0x0800ae6c
 80033e8:	20001b54 	.word	0x20001b54

080033ec <_BluetoothReceive>:

// receiving the user choice of HR or SPO2
char _BluetoothReceive(void){
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b082      	sub	sp, #8
 80033f0:	af00      	add	r7, sp, #0
	char value;
	HAL_UART_Receive(&huart2, &value, sizeof(value), 5000);
 80033f2:	1df9      	adds	r1, r7, #7
 80033f4:	f241 3388 	movw	r3, #5000	; 0x1388
 80033f8:	2201      	movs	r2, #1
 80033fa:	4804      	ldr	r0, [pc, #16]	; (800340c <_BluetoothReceive+0x20>)
 80033fc:	f004 f9b3 	bl	8007766 <HAL_UART_Receive>
	return value;
 8003400:	79fb      	ldrb	r3, [r7, #7]
}
 8003402:	4618      	mov	r0, r3
 8003404:	3708      	adds	r7, #8
 8003406:	46bd      	mov	sp, r7
 8003408:	bd80      	pop	{r7, pc}
 800340a:	bf00      	nop
 800340c:	20001cc0 	.word	0x20001cc0

08003410 <_Show_HeartRate_SPO2>:

// Get and show heart rate and blood oxygen level
void _Show_HeartRate_SPO2(uint8_t value, uint8_t SPO2_OR_HR){
 8003410:	b580      	push	{r7, lr}
 8003412:	b088      	sub	sp, #32
 8003414:	af00      	add	r7, sp, #0
 8003416:	4603      	mov	r3, r0
 8003418:	460a      	mov	r2, r1
 800341a:	71fb      	strb	r3, [r7, #7]
 800341c:	4613      	mov	r3, r2
 800341e:	71bb      	strb	r3, [r7, #6]

	// if SPO2 is selected
	if(SPO2_OR_HR == SPO2ORHR_SPO2){
 8003420:	79bb      	ldrb	r3, [r7, #6]
 8003422:	2b73      	cmp	r3, #115	; 0x73
 8003424:	d114      	bne.n	8003450 <_Show_HeartRate_SPO2+0x40>
		char _valueText[9];
		sprintf(_valueText, "SPO2:   %3d", value);
 8003426:	79fa      	ldrb	r2, [r7, #7]
 8003428:	f107 0314 	add.w	r3, r7, #20
 800342c:	4916      	ldr	r1, [pc, #88]	; (8003488 <_Show_HeartRate_SPO2+0x78>)
 800342e:	4618      	mov	r0, r3
 8003430:	f005 fac6 	bl	80089c0 <siprintf>
		SSD1306_SetPosition(0, 25);
 8003434:	2119      	movs	r1, #25
 8003436:	2000      	movs	r0, #0
 8003438:	f7ff fb46 	bl	8002ac8 <SSD1306_SetPosition>
		SSD1306_PrintString(_valueText, &Font_11x18, SSD1306_COLOR_WHITE);
 800343c:	f107 0314 	add.w	r3, r7, #20
 8003440:	2201      	movs	r2, #1
 8003442:	4912      	ldr	r1, [pc, #72]	; (800348c <_Show_HeartRate_SPO2+0x7c>)
 8003444:	4618      	mov	r0, r3
 8003446:	f7ff fbd5 	bl	8002bf4 <SSD1306_PrintString>
		SSD1306_UpdateScreen();
 800344a:	f7ff fa99 	bl	8002980 <SSD1306_UpdateScreen>
		sprintf(_valueText, "BPM:    %3d", value);
		SSD1306_SetPosition(0, 25);
		SSD1306_PrintString(_valueText, &Font_11x18, SSD1306_COLOR_WHITE);
		SSD1306_UpdateScreen();
	}
}
 800344e:	e016      	b.n	800347e <_Show_HeartRate_SPO2+0x6e>
	else if(SPO2_OR_HR == SPO2ORHR_HR){
 8003450:	79bb      	ldrb	r3, [r7, #6]
 8003452:	2b68      	cmp	r3, #104	; 0x68
 8003454:	d113      	bne.n	800347e <_Show_HeartRate_SPO2+0x6e>
		sprintf(_valueText, "BPM:    %3d", value);
 8003456:	79fa      	ldrb	r2, [r7, #7]
 8003458:	f107 0308 	add.w	r3, r7, #8
 800345c:	490c      	ldr	r1, [pc, #48]	; (8003490 <_Show_HeartRate_SPO2+0x80>)
 800345e:	4618      	mov	r0, r3
 8003460:	f005 faae 	bl	80089c0 <siprintf>
		SSD1306_SetPosition(0, 25);
 8003464:	2119      	movs	r1, #25
 8003466:	2000      	movs	r0, #0
 8003468:	f7ff fb2e 	bl	8002ac8 <SSD1306_SetPosition>
		SSD1306_PrintString(_valueText, &Font_11x18, SSD1306_COLOR_WHITE);
 800346c:	f107 0308 	add.w	r3, r7, #8
 8003470:	2201      	movs	r2, #1
 8003472:	4906      	ldr	r1, [pc, #24]	; (800348c <_Show_HeartRate_SPO2+0x7c>)
 8003474:	4618      	mov	r0, r3
 8003476:	f7ff fbbd 	bl	8002bf4 <SSD1306_PrintString>
		SSD1306_UpdateScreen();
 800347a:	f7ff fa81 	bl	8002980 <SSD1306_UpdateScreen>
}
 800347e:	bf00      	nop
 8003480:	3720      	adds	r7, #32
 8003482:	46bd      	mov	sp, r7
 8003484:	bd80      	pop	{r7, pc}
 8003486:	bf00      	nop
 8003488:	0800ae80 	.word	0x0800ae80
 800348c:	20000008 	.word	0x20000008
 8003490:	0800ae8c 	.word	0x0800ae8c
 8003494:	00000000 	.word	0x00000000

08003498 <_BatteryVoltage>:


// Battery voltage reading
float _BatteryVoltage(void){
 8003498:	b580      	push	{r7, lr}
 800349a:	b082      	sub	sp, #8
 800349c:	af00      	add	r7, sp, #0
	uint16_t rawAnalogVal = 0;
 800349e:	2300      	movs	r3, #0
 80034a0:	80fb      	strh	r3, [r7, #6]
	float batteryVoltage = 0.0;
 80034a2:	f04f 0300 	mov.w	r3, #0
 80034a6:	603b      	str	r3, [r7, #0]

	// Initializing the ADC
	HAL_ADC_Start(&hadc1);
 80034a8:	481b      	ldr	r0, [pc, #108]	; (8003518 <_BatteryVoltage+0x80>)
 80034aa:	f000 fd35 	bl	8003f18 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 100);
 80034ae:	2164      	movs	r1, #100	; 0x64
 80034b0:	4819      	ldr	r0, [pc, #100]	; (8003518 <_BatteryVoltage+0x80>)
 80034b2:	f000 fe0b 	bl	80040cc <HAL_ADC_PollForConversion>

	// Reading ADC Value
	// NOTE: it is a 12-bit ADC
	rawAnalogVal = HAL_ADC_GetValue(&hadc1);
 80034b6:	4818      	ldr	r0, [pc, #96]	; (8003518 <_BatteryVoltage+0x80>)
 80034b8:	f000 ff0e 	bl	80042d8 <HAL_ADC_GetValue>
 80034bc:	4603      	mov	r3, r0
 80034be:	80fb      	strh	r3, [r7, #6]

	// Mapping the ADC value to readable voltage
	// NOTE: the value is multiplied by 2 because of the voltage divider circuit
	// which divides the voltage by 2
	batteryVoltage = (rawAnalogVal * 2  / 4095.00) * 3.30;
 80034c0:	88fb      	ldrh	r3, [r7, #6]
 80034c2:	005b      	lsls	r3, r3, #1
 80034c4:	4618      	mov	r0, r3
 80034c6:	f7fc ff9d 	bl	8000404 <__aeabi_i2d>
 80034ca:	a30f      	add	r3, pc, #60	; (adr r3, 8003508 <_BatteryVoltage+0x70>)
 80034cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034d0:	f7fd f92c 	bl	800072c <__aeabi_ddiv>
 80034d4:	4602      	mov	r2, r0
 80034d6:	460b      	mov	r3, r1
 80034d8:	4610      	mov	r0, r2
 80034da:	4619      	mov	r1, r3
 80034dc:	a30c      	add	r3, pc, #48	; (adr r3, 8003510 <_BatteryVoltage+0x78>)
 80034de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034e2:	f7fc fff9 	bl	80004d8 <__aeabi_dmul>
 80034e6:	4602      	mov	r2, r0
 80034e8:	460b      	mov	r3, r1
 80034ea:	4610      	mov	r0, r2
 80034ec:	4619      	mov	r1, r3
 80034ee:	f7fd facb 	bl	8000a88 <__aeabi_d2f>
 80034f2:	4603      	mov	r3, r0
 80034f4:	603b      	str	r3, [r7, #0]
	// Removing some inefficiency
	//batteryVoltage += 0.1;
	HAL_ADC_Stop(&hadc1);
 80034f6:	4808      	ldr	r0, [pc, #32]	; (8003518 <_BatteryVoltage+0x80>)
 80034f8:	f000 fdbc 	bl	8004074 <HAL_ADC_Stop>
	return batteryVoltage;
 80034fc:	683b      	ldr	r3, [r7, #0]
}
 80034fe:	4618      	mov	r0, r3
 8003500:	3708      	adds	r7, #8
 8003502:	46bd      	mov	sp, r7
 8003504:	bd80      	pop	{r7, pc}
 8003506:	bf00      	nop
 8003508:	00000000 	.word	0x00000000
 800350c:	40affe00 	.word	0x40affe00
 8003510:	66666666 	.word	0x66666666
 8003514:	400a6666 	.word	0x400a6666
 8003518:	20001c48 	.word	0x20001c48

0800351c <_BluetoothSend>:


void _BluetoothSend(uint8_t value, uint8_t SPO2_OR_HR){
 800351c:	b580      	push	{r7, lr}
 800351e:	b084      	sub	sp, #16
 8003520:	af00      	add	r7, sp, #0
 8003522:	4603      	mov	r3, r0
 8003524:	460a      	mov	r2, r1
 8003526:	71fb      	strb	r3, [r7, #7]
 8003528:	4613      	mov	r3, r2
 800352a:	71bb      	strb	r3, [r7, #6]
	char UartBuffer[8];
	//uint8_t val = (uint8_t)value;
	if(SPO2_OR_HR == SPO2ORHR_HR)
 800352c:	79bb      	ldrb	r3, [r7, #6]
 800352e:	2b68      	cmp	r3, #104	; 0x68
 8003530:	d117      	bne.n	8003562 <_BluetoothSend+0x46>
	{
		sprintf(UartBuffer, "%d",  value);
 8003532:	79fa      	ldrb	r2, [r7, #7]
 8003534:	f107 0308 	add.w	r3, r7, #8
 8003538:	4919      	ldr	r1, [pc, #100]	; (80035a0 <_BluetoothSend+0x84>)
 800353a:	4618      	mov	r0, r3
 800353c:	f005 fa40 	bl	80089c0 <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*)UartBuffer, strlen(UartBuffer), 100);
 8003540:	f107 0308 	add.w	r3, r7, #8
 8003544:	4618      	mov	r0, r3
 8003546:	f7fc fe03 	bl	8000150 <strlen>
 800354a:	4603      	mov	r3, r0
 800354c:	b29a      	uxth	r2, r3
 800354e:	f107 0108 	add.w	r1, r7, #8
 8003552:	2364      	movs	r3, #100	; 0x64
 8003554:	4813      	ldr	r0, [pc, #76]	; (80035a4 <_BluetoothSend+0x88>)
 8003556:	f004 f874 	bl	8007642 <HAL_UART_Transmit>
		HAL_Delay(100);
 800355a:	2064      	movs	r0, #100	; 0x64
 800355c:	f000 fbe0 	bl	8003d20 <HAL_Delay>
	else if(SPO2_OR_HR == SPO2ORHR_SPO2){
		sprintf(UartBuffer, "%d", value);
		HAL_UART_Transmit(&huart2, (uint8_t*)UartBuffer, strlen(UartBuffer), 100);
		HAL_Delay(100);
	}
}
 8003560:	e019      	b.n	8003596 <_BluetoothSend+0x7a>
	else if(SPO2_OR_HR == SPO2ORHR_SPO2){
 8003562:	79bb      	ldrb	r3, [r7, #6]
 8003564:	2b73      	cmp	r3, #115	; 0x73
 8003566:	d116      	bne.n	8003596 <_BluetoothSend+0x7a>
		sprintf(UartBuffer, "%d", value);
 8003568:	79fa      	ldrb	r2, [r7, #7]
 800356a:	f107 0308 	add.w	r3, r7, #8
 800356e:	490c      	ldr	r1, [pc, #48]	; (80035a0 <_BluetoothSend+0x84>)
 8003570:	4618      	mov	r0, r3
 8003572:	f005 fa25 	bl	80089c0 <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*)UartBuffer, strlen(UartBuffer), 100);
 8003576:	f107 0308 	add.w	r3, r7, #8
 800357a:	4618      	mov	r0, r3
 800357c:	f7fc fde8 	bl	8000150 <strlen>
 8003580:	4603      	mov	r3, r0
 8003582:	b29a      	uxth	r2, r3
 8003584:	f107 0108 	add.w	r1, r7, #8
 8003588:	2364      	movs	r3, #100	; 0x64
 800358a:	4806      	ldr	r0, [pc, #24]	; (80035a4 <_BluetoothSend+0x88>)
 800358c:	f004 f859 	bl	8007642 <HAL_UART_Transmit>
		HAL_Delay(100);
 8003590:	2064      	movs	r0, #100	; 0x64
 8003592:	f000 fbc5 	bl	8003d20 <HAL_Delay>
}
 8003596:	bf00      	nop
 8003598:	3710      	adds	r7, #16
 800359a:	46bd      	mov	sp, r7
 800359c:	bd80      	pop	{r7, pc}
 800359e:	bf00      	nop
 80035a0:	0800ae98 	.word	0x0800ae98
 80035a4:	20001cc0 	.word	0x20001cc0

080035a8 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b082      	sub	sp, #8
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	4603      	mov	r3, r0
 80035b0:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == INT_Pin) {
 80035b2:	88fb      	ldrh	r3, [r7, #6]
 80035b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80035b8:	d101      	bne.n	80035be <HAL_GPIO_EXTI_Callback+0x16>
		Max30102_InterruptCallback();
 80035ba:	f7fd fee3 	bl	8001384 <Max30102_InterruptCallback>
	}
}
 80035be:	bf00      	nop
 80035c0:	3708      	adds	r7, #8
 80035c2:	46bd      	mov	sp, r7
 80035c4:	bd80      	pop	{r7, pc}
	...

080035c8 <HAL_TIM_PeriodElapsedCallback>:


// Timer_2 ISR
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80035c8:	b480      	push	{r7}
 80035ca:	b083      	sub	sp, #12
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
  if(htim->Instance == TIM2)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035d8:	d103      	bne.n	80035e2 <HAL_TIM_PeriodElapsedCallback+0x1a>
	  _timer_2_interrupt = 1;
 80035da:	4b08      	ldr	r3, [pc, #32]	; (80035fc <HAL_TIM_PeriodElapsedCallback+0x34>)
 80035dc:	2201      	movs	r2, #1
 80035de:	701a      	strb	r2, [r3, #0]
  else if(htim->Instance == TIM3)
	  _timer_3_interrupt = 1;
}
 80035e0:	e007      	b.n	80035f2 <HAL_TIM_PeriodElapsedCallback+0x2a>
  else if(htim->Instance == TIM3)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	4a06      	ldr	r2, [pc, #24]	; (8003600 <HAL_TIM_PeriodElapsedCallback+0x38>)
 80035e8:	4293      	cmp	r3, r2
 80035ea:	d102      	bne.n	80035f2 <HAL_TIM_PeriodElapsedCallback+0x2a>
	  _timer_3_interrupt = 1;
 80035ec:	4b05      	ldr	r3, [pc, #20]	; (8003604 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 80035ee:	2201      	movs	r2, #1
 80035f0:	701a      	strb	r2, [r3, #0]
}
 80035f2:	bf00      	nop
 80035f4:	370c      	adds	r7, #12
 80035f6:	46bd      	mov	sp, r7
 80035f8:	bc80      	pop	{r7}
 80035fa:	4770      	bx	lr
 80035fc:	200011bd 	.word	0x200011bd
 8003600:	40000400 	.word	0x40000400
 8003604:	200011bc 	.word	0x200011bc

08003608 <_Check_HR_SPO2>:

// CHecking the HR and SPO2
void _Check_HR_SPO2(uint8_t data, char selectedMode){
 8003608:	b580      	push	{r7, lr}
 800360a:	b082      	sub	sp, #8
 800360c:	af00      	add	r7, sp, #0
 800360e:	4603      	mov	r3, r0
 8003610:	460a      	mov	r2, r1
 8003612:	71fb      	strb	r3, [r7, #7]
 8003614:	4613      	mov	r3, r2
 8003616:	71bb      	strb	r3, [r7, #6]
        //heart rate has been selected
        if(selectedMode == SPO2ORHR_HR) {
 8003618:	79bb      	ldrb	r3, [r7, #6]
 800361a:	2b68      	cmp	r3, #104	; 0x68
 800361c:	d132      	bne.n	8003684 <_Check_HR_SPO2+0x7c>
            // heart rate exceeds the natural level
            if (data > HRMAX) {
 800361e:	79fb      	ldrb	r3, [r7, #7]
 8003620:	2b73      	cmp	r3, #115	; 0x73
 8003622:	d911      	bls.n	8003648 <_Check_HR_SPO2+0x40>
                dangerZoneDataCnt++;
 8003624:	4b34      	ldr	r3, [pc, #208]	; (80036f8 <_Check_HR_SPO2+0xf0>)
 8003626:	781b      	ldrb	r3, [r3, #0]
 8003628:	3301      	adds	r3, #1
 800362a:	b2da      	uxtb	r2, r3
 800362c:	4b32      	ldr	r3, [pc, #200]	; (80036f8 <_Check_HR_SPO2+0xf0>)
 800362e:	701a      	strb	r2, [r3, #0]
                if (dangerZoneDataCnt < maxSampleCheck) {
 8003630:	4b31      	ldr	r3, [pc, #196]	; (80036f8 <_Check_HR_SPO2+0xf0>)
 8003632:	781b      	ldrb	r3, [r3, #0]
 8003634:	2b1d      	cmp	r3, #29
 8003636:	d85a      	bhi.n	80036ee <_Check_HR_SPO2+0xe6>
                    dangerZoneDataSum += data;
 8003638:	4b30      	ldr	r3, [pc, #192]	; (80036fc <_Check_HR_SPO2+0xf4>)
 800363a:	781a      	ldrb	r2, [r3, #0]
 800363c:	79fb      	ldrb	r3, [r7, #7]
 800363e:	4413      	add	r3, r2
 8003640:	b2da      	uxtb	r2, r3
 8003642:	4b2e      	ldr	r3, [pc, #184]	; (80036fc <_Check_HR_SPO2+0xf4>)
 8003644:	701a      	strb	r2, [r3, #0]
                }
                else{
                    dangerZoneDataCnt = 0;
                }
        }
    }
 8003646:	e052      	b.n	80036ee <_Check_HR_SPO2+0xe6>
            else if (data < HRMIN) {
 8003648:	79fb      	ldrb	r3, [r7, #7]
 800364a:	2b45      	cmp	r3, #69	; 0x45
 800364c:	d816      	bhi.n	800367c <_Check_HR_SPO2+0x74>
                dangerZoneDataCnt++;
 800364e:	4b2a      	ldr	r3, [pc, #168]	; (80036f8 <_Check_HR_SPO2+0xf0>)
 8003650:	781b      	ldrb	r3, [r3, #0]
 8003652:	3301      	adds	r3, #1
 8003654:	b2da      	uxtb	r2, r3
 8003656:	4b28      	ldr	r3, [pc, #160]	; (80036f8 <_Check_HR_SPO2+0xf0>)
 8003658:	701a      	strb	r2, [r3, #0]
                if (dangerZoneDataCnt < maxSampleCheck) {
 800365a:	4b27      	ldr	r3, [pc, #156]	; (80036f8 <_Check_HR_SPO2+0xf0>)
 800365c:	781b      	ldrb	r3, [r3, #0]
 800365e:	2b1d      	cmp	r3, #29
 8003660:	d806      	bhi.n	8003670 <_Check_HR_SPO2+0x68>
                    dangerZoneDataSum += data;
 8003662:	4b26      	ldr	r3, [pc, #152]	; (80036fc <_Check_HR_SPO2+0xf4>)
 8003664:	781a      	ldrb	r2, [r3, #0]
 8003666:	79fb      	ldrb	r3, [r7, #7]
 8003668:	4413      	add	r3, r2
 800366a:	b2da      	uxtb	r2, r3
 800366c:	4b23      	ldr	r3, [pc, #140]	; (80036fc <_Check_HR_SPO2+0xf4>)
 800366e:	701a      	strb	r2, [r3, #0]
                	HAL_GPIO_WritePin(Motor_GPIO_Port, Motor_Pin, GPIO_PIN_SET);
 8003670:	2201      	movs	r2, #1
 8003672:	2102      	movs	r1, #2
 8003674:	4822      	ldr	r0, [pc, #136]	; (8003700 <_Check_HR_SPO2+0xf8>)
 8003676:	f001 fb11 	bl	8004c9c <HAL_GPIO_WritePin>
    }
 800367a:	e038      	b.n	80036ee <_Check_HR_SPO2+0xe6>
                dangerZoneDataCnt = 0;
 800367c:	4b1e      	ldr	r3, [pc, #120]	; (80036f8 <_Check_HR_SPO2+0xf0>)
 800367e:	2200      	movs	r2, #0
 8003680:	701a      	strb	r2, [r3, #0]
    }
 8003682:	e034      	b.n	80036ee <_Check_HR_SPO2+0xe6>
            else if(selectedMode == SPO2ORHR_SPO2){
 8003684:	79bb      	ldrb	r3, [r7, #6]
 8003686:	2b73      	cmp	r3, #115	; 0x73
 8003688:	d131      	bne.n	80036ee <_Check_HR_SPO2+0xe6>
                if(data > SPO2MAX){
 800368a:	79fb      	ldrb	r3, [r7, #7]
 800368c:	2b64      	cmp	r3, #100	; 0x64
 800368e:	d911      	bls.n	80036b4 <_Check_HR_SPO2+0xac>
                    dangerZoneDataCnt++;
 8003690:	4b19      	ldr	r3, [pc, #100]	; (80036f8 <_Check_HR_SPO2+0xf0>)
 8003692:	781b      	ldrb	r3, [r3, #0]
 8003694:	3301      	adds	r3, #1
 8003696:	b2da      	uxtb	r2, r3
 8003698:	4b17      	ldr	r3, [pc, #92]	; (80036f8 <_Check_HR_SPO2+0xf0>)
 800369a:	701a      	strb	r2, [r3, #0]
                    if (dangerZoneDataCnt < maxSampleCheck){
 800369c:	4b16      	ldr	r3, [pc, #88]	; (80036f8 <_Check_HR_SPO2+0xf0>)
 800369e:	781b      	ldrb	r3, [r3, #0]
 80036a0:	2b1d      	cmp	r3, #29
 80036a2:	d824      	bhi.n	80036ee <_Check_HR_SPO2+0xe6>
                        dangerZoneDataSum += data;
 80036a4:	4b15      	ldr	r3, [pc, #84]	; (80036fc <_Check_HR_SPO2+0xf4>)
 80036a6:	781a      	ldrb	r2, [r3, #0]
 80036a8:	79fb      	ldrb	r3, [r7, #7]
 80036aa:	4413      	add	r3, r2
 80036ac:	b2da      	uxtb	r2, r3
 80036ae:	4b13      	ldr	r3, [pc, #76]	; (80036fc <_Check_HR_SPO2+0xf4>)
 80036b0:	701a      	strb	r2, [r3, #0]
    }
 80036b2:	e01c      	b.n	80036ee <_Check_HR_SPO2+0xe6>
                else if(data < SPO2MIN) {
 80036b4:	79fb      	ldrb	r3, [r7, #7]
 80036b6:	2b5e      	cmp	r3, #94	; 0x5e
 80036b8:	d816      	bhi.n	80036e8 <_Check_HR_SPO2+0xe0>
                    dangerZoneDataCnt++;
 80036ba:	4b0f      	ldr	r3, [pc, #60]	; (80036f8 <_Check_HR_SPO2+0xf0>)
 80036bc:	781b      	ldrb	r3, [r3, #0]
 80036be:	3301      	adds	r3, #1
 80036c0:	b2da      	uxtb	r2, r3
 80036c2:	4b0d      	ldr	r3, [pc, #52]	; (80036f8 <_Check_HR_SPO2+0xf0>)
 80036c4:	701a      	strb	r2, [r3, #0]
                    if (dangerZoneDataCnt < maxSampleCheck) {
 80036c6:	4b0c      	ldr	r3, [pc, #48]	; (80036f8 <_Check_HR_SPO2+0xf0>)
 80036c8:	781b      	ldrb	r3, [r3, #0]
 80036ca:	2b1d      	cmp	r3, #29
 80036cc:	d806      	bhi.n	80036dc <_Check_HR_SPO2+0xd4>
                        dangerZoneDataSum += data;
 80036ce:	4b0b      	ldr	r3, [pc, #44]	; (80036fc <_Check_HR_SPO2+0xf4>)
 80036d0:	781a      	ldrb	r2, [r3, #0]
 80036d2:	79fb      	ldrb	r3, [r7, #7]
 80036d4:	4413      	add	r3, r2
 80036d6:	b2da      	uxtb	r2, r3
 80036d8:	4b08      	ldr	r3, [pc, #32]	; (80036fc <_Check_HR_SPO2+0xf4>)
 80036da:	701a      	strb	r2, [r3, #0]
                    	HAL_GPIO_WritePin(Motor_GPIO_Port, Motor_Pin, GPIO_PIN_SET);
 80036dc:	2201      	movs	r2, #1
 80036de:	2102      	movs	r1, #2
 80036e0:	4807      	ldr	r0, [pc, #28]	; (8003700 <_Check_HR_SPO2+0xf8>)
 80036e2:	f001 fadb 	bl	8004c9c <HAL_GPIO_WritePin>
    }
 80036e6:	e002      	b.n	80036ee <_Check_HR_SPO2+0xe6>
                    dangerZoneDataCnt = 0;
 80036e8:	4b03      	ldr	r3, [pc, #12]	; (80036f8 <_Check_HR_SPO2+0xf0>)
 80036ea:	2200      	movs	r2, #0
 80036ec:	701a      	strb	r2, [r3, #0]
    }
 80036ee:	bf00      	nop
 80036f0:	3708      	adds	r7, #8
 80036f2:	46bd      	mov	sp, r7
 80036f4:	bd80      	pop	{r7, pc}
 80036f6:	bf00      	nop
 80036f8:	200011c1 	.word	0x200011c1
 80036fc:	200011c0 	.word	0x200011c0
 8003700:	40010c00 	.word	0x40010c00

08003704 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003704:	b480      	push	{r7}
 8003706:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003708:	b672      	cpsid	i
}
 800370a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800370c:	e7fe      	b.n	800370c <Error_Handler+0x8>
	...

08003710 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003710:	b480      	push	{r7}
 8003712:	b085      	sub	sp, #20
 8003714:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8003716:	4b15      	ldr	r3, [pc, #84]	; (800376c <HAL_MspInit+0x5c>)
 8003718:	699b      	ldr	r3, [r3, #24]
 800371a:	4a14      	ldr	r2, [pc, #80]	; (800376c <HAL_MspInit+0x5c>)
 800371c:	f043 0301 	orr.w	r3, r3, #1
 8003720:	6193      	str	r3, [r2, #24]
 8003722:	4b12      	ldr	r3, [pc, #72]	; (800376c <HAL_MspInit+0x5c>)
 8003724:	699b      	ldr	r3, [r3, #24]
 8003726:	f003 0301 	and.w	r3, r3, #1
 800372a:	60bb      	str	r3, [r7, #8]
 800372c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800372e:	4b0f      	ldr	r3, [pc, #60]	; (800376c <HAL_MspInit+0x5c>)
 8003730:	69db      	ldr	r3, [r3, #28]
 8003732:	4a0e      	ldr	r2, [pc, #56]	; (800376c <HAL_MspInit+0x5c>)
 8003734:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003738:	61d3      	str	r3, [r2, #28]
 800373a:	4b0c      	ldr	r3, [pc, #48]	; (800376c <HAL_MspInit+0x5c>)
 800373c:	69db      	ldr	r3, [r3, #28]
 800373e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003742:	607b      	str	r3, [r7, #4]
 8003744:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8003746:	4b0a      	ldr	r3, [pc, #40]	; (8003770 <HAL_MspInit+0x60>)
 8003748:	685b      	ldr	r3, [r3, #4]
 800374a:	60fb      	str	r3, [r7, #12]
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8003752:	60fb      	str	r3, [r7, #12]
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800375a:	60fb      	str	r3, [r7, #12]
 800375c:	4a04      	ldr	r2, [pc, #16]	; (8003770 <HAL_MspInit+0x60>)
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003762:	bf00      	nop
 8003764:	3714      	adds	r7, #20
 8003766:	46bd      	mov	sp, r7
 8003768:	bc80      	pop	{r7}
 800376a:	4770      	bx	lr
 800376c:	40021000 	.word	0x40021000
 8003770:	40010000 	.word	0x40010000

08003774 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003774:	b580      	push	{r7, lr}
 8003776:	b088      	sub	sp, #32
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800377c:	f107 0310 	add.w	r3, r7, #16
 8003780:	2200      	movs	r2, #0
 8003782:	601a      	str	r2, [r3, #0]
 8003784:	605a      	str	r2, [r3, #4]
 8003786:	609a      	str	r2, [r3, #8]
 8003788:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	4a14      	ldr	r2, [pc, #80]	; (80037e0 <HAL_ADC_MspInit+0x6c>)
 8003790:	4293      	cmp	r3, r2
 8003792:	d121      	bne.n	80037d8 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003794:	4b13      	ldr	r3, [pc, #76]	; (80037e4 <HAL_ADC_MspInit+0x70>)
 8003796:	699b      	ldr	r3, [r3, #24]
 8003798:	4a12      	ldr	r2, [pc, #72]	; (80037e4 <HAL_ADC_MspInit+0x70>)
 800379a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800379e:	6193      	str	r3, [r2, #24]
 80037a0:	4b10      	ldr	r3, [pc, #64]	; (80037e4 <HAL_ADC_MspInit+0x70>)
 80037a2:	699b      	ldr	r3, [r3, #24]
 80037a4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80037a8:	60fb      	str	r3, [r7, #12]
 80037aa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80037ac:	4b0d      	ldr	r3, [pc, #52]	; (80037e4 <HAL_ADC_MspInit+0x70>)
 80037ae:	699b      	ldr	r3, [r3, #24]
 80037b0:	4a0c      	ldr	r2, [pc, #48]	; (80037e4 <HAL_ADC_MspInit+0x70>)
 80037b2:	f043 0304 	orr.w	r3, r3, #4
 80037b6:	6193      	str	r3, [r2, #24]
 80037b8:	4b0a      	ldr	r3, [pc, #40]	; (80037e4 <HAL_ADC_MspInit+0x70>)
 80037ba:	699b      	ldr	r3, [r3, #24]
 80037bc:	f003 0304 	and.w	r3, r3, #4
 80037c0:	60bb      	str	r3, [r7, #8]
 80037c2:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80037c4:	2301      	movs	r3, #1
 80037c6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80037c8:	2303      	movs	r3, #3
 80037ca:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80037cc:	f107 0310 	add.w	r3, r7, #16
 80037d0:	4619      	mov	r1, r3
 80037d2:	4805      	ldr	r0, [pc, #20]	; (80037e8 <HAL_ADC_MspInit+0x74>)
 80037d4:	f001 f8de 	bl	8004994 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80037d8:	bf00      	nop
 80037da:	3720      	adds	r7, #32
 80037dc:	46bd      	mov	sp, r7
 80037de:	bd80      	pop	{r7, pc}
 80037e0:	40012400 	.word	0x40012400
 80037e4:	40021000 	.word	0x40021000
 80037e8:	40010800 	.word	0x40010800

080037ec <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b08a      	sub	sp, #40	; 0x28
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80037f4:	f107 0318 	add.w	r3, r7, #24
 80037f8:	2200      	movs	r2, #0
 80037fa:	601a      	str	r2, [r3, #0]
 80037fc:	605a      	str	r2, [r3, #4]
 80037fe:	609a      	str	r2, [r3, #8]
 8003800:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	4a2b      	ldr	r2, [pc, #172]	; (80038b4 <HAL_I2C_MspInit+0xc8>)
 8003808:	4293      	cmp	r3, r2
 800380a:	d124      	bne.n	8003856 <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800380c:	4b2a      	ldr	r3, [pc, #168]	; (80038b8 <HAL_I2C_MspInit+0xcc>)
 800380e:	699b      	ldr	r3, [r3, #24]
 8003810:	4a29      	ldr	r2, [pc, #164]	; (80038b8 <HAL_I2C_MspInit+0xcc>)
 8003812:	f043 0308 	orr.w	r3, r3, #8
 8003816:	6193      	str	r3, [r2, #24]
 8003818:	4b27      	ldr	r3, [pc, #156]	; (80038b8 <HAL_I2C_MspInit+0xcc>)
 800381a:	699b      	ldr	r3, [r3, #24]
 800381c:	f003 0308 	and.w	r3, r3, #8
 8003820:	617b      	str	r3, [r7, #20]
 8003822:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003824:	23c0      	movs	r3, #192	; 0xc0
 8003826:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003828:	2312      	movs	r3, #18
 800382a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800382c:	2303      	movs	r3, #3
 800382e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003830:	f107 0318 	add.w	r3, r7, #24
 8003834:	4619      	mov	r1, r3
 8003836:	4821      	ldr	r0, [pc, #132]	; (80038bc <HAL_I2C_MspInit+0xd0>)
 8003838:	f001 f8ac 	bl	8004994 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800383c:	4b1e      	ldr	r3, [pc, #120]	; (80038b8 <HAL_I2C_MspInit+0xcc>)
 800383e:	69db      	ldr	r3, [r3, #28]
 8003840:	4a1d      	ldr	r2, [pc, #116]	; (80038b8 <HAL_I2C_MspInit+0xcc>)
 8003842:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003846:	61d3      	str	r3, [r2, #28]
 8003848:	4b1b      	ldr	r3, [pc, #108]	; (80038b8 <HAL_I2C_MspInit+0xcc>)
 800384a:	69db      	ldr	r3, [r3, #28]
 800384c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003850:	613b      	str	r3, [r7, #16]
 8003852:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8003854:	e029      	b.n	80038aa <HAL_I2C_MspInit+0xbe>
  else if(hi2c->Instance==I2C2)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	4a19      	ldr	r2, [pc, #100]	; (80038c0 <HAL_I2C_MspInit+0xd4>)
 800385c:	4293      	cmp	r3, r2
 800385e:	d124      	bne.n	80038aa <HAL_I2C_MspInit+0xbe>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003860:	4b15      	ldr	r3, [pc, #84]	; (80038b8 <HAL_I2C_MspInit+0xcc>)
 8003862:	699b      	ldr	r3, [r3, #24]
 8003864:	4a14      	ldr	r2, [pc, #80]	; (80038b8 <HAL_I2C_MspInit+0xcc>)
 8003866:	f043 0308 	orr.w	r3, r3, #8
 800386a:	6193      	str	r3, [r2, #24]
 800386c:	4b12      	ldr	r3, [pc, #72]	; (80038b8 <HAL_I2C_MspInit+0xcc>)
 800386e:	699b      	ldr	r3, [r3, #24]
 8003870:	f003 0308 	and.w	r3, r3, #8
 8003874:	60fb      	str	r3, [r7, #12]
 8003876:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8003878:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800387c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800387e:	2312      	movs	r3, #18
 8003880:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003882:	2303      	movs	r3, #3
 8003884:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003886:	f107 0318 	add.w	r3, r7, #24
 800388a:	4619      	mov	r1, r3
 800388c:	480b      	ldr	r0, [pc, #44]	; (80038bc <HAL_I2C_MspInit+0xd0>)
 800388e:	f001 f881 	bl	8004994 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8003892:	4b09      	ldr	r3, [pc, #36]	; (80038b8 <HAL_I2C_MspInit+0xcc>)
 8003894:	69db      	ldr	r3, [r3, #28]
 8003896:	4a08      	ldr	r2, [pc, #32]	; (80038b8 <HAL_I2C_MspInit+0xcc>)
 8003898:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800389c:	61d3      	str	r3, [r2, #28]
 800389e:	4b06      	ldr	r3, [pc, #24]	; (80038b8 <HAL_I2C_MspInit+0xcc>)
 80038a0:	69db      	ldr	r3, [r3, #28]
 80038a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80038a6:	60bb      	str	r3, [r7, #8]
 80038a8:	68bb      	ldr	r3, [r7, #8]
}
 80038aa:	bf00      	nop
 80038ac:	3728      	adds	r7, #40	; 0x28
 80038ae:	46bd      	mov	sp, r7
 80038b0:	bd80      	pop	{r7, pc}
 80038b2:	bf00      	nop
 80038b4:	40005400 	.word	0x40005400
 80038b8:	40021000 	.word	0x40021000
 80038bc:	40010c00 	.word	0x40010c00
 80038c0:	40005800 	.word	0x40005800

080038c4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	b084      	sub	sp, #16
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038d4:	d114      	bne.n	8003900 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80038d6:	4b19      	ldr	r3, [pc, #100]	; (800393c <HAL_TIM_Base_MspInit+0x78>)
 80038d8:	69db      	ldr	r3, [r3, #28]
 80038da:	4a18      	ldr	r2, [pc, #96]	; (800393c <HAL_TIM_Base_MspInit+0x78>)
 80038dc:	f043 0301 	orr.w	r3, r3, #1
 80038e0:	61d3      	str	r3, [r2, #28]
 80038e2:	4b16      	ldr	r3, [pc, #88]	; (800393c <HAL_TIM_Base_MspInit+0x78>)
 80038e4:	69db      	ldr	r3, [r3, #28]
 80038e6:	f003 0301 	and.w	r3, r3, #1
 80038ea:	60fb      	str	r3, [r7, #12]
 80038ec:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80038ee:	2200      	movs	r2, #0
 80038f0:	2100      	movs	r1, #0
 80038f2:	201c      	movs	r0, #28
 80038f4:	f000 ff67 	bl	80047c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80038f8:	201c      	movs	r0, #28
 80038fa:	f000 ff80 	bl	80047fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80038fe:	e018      	b.n	8003932 <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM3)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	4a0e      	ldr	r2, [pc, #56]	; (8003940 <HAL_TIM_Base_MspInit+0x7c>)
 8003906:	4293      	cmp	r3, r2
 8003908:	d113      	bne.n	8003932 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800390a:	4b0c      	ldr	r3, [pc, #48]	; (800393c <HAL_TIM_Base_MspInit+0x78>)
 800390c:	69db      	ldr	r3, [r3, #28]
 800390e:	4a0b      	ldr	r2, [pc, #44]	; (800393c <HAL_TIM_Base_MspInit+0x78>)
 8003910:	f043 0302 	orr.w	r3, r3, #2
 8003914:	61d3      	str	r3, [r2, #28]
 8003916:	4b09      	ldr	r3, [pc, #36]	; (800393c <HAL_TIM_Base_MspInit+0x78>)
 8003918:	69db      	ldr	r3, [r3, #28]
 800391a:	f003 0302 	and.w	r3, r3, #2
 800391e:	60bb      	str	r3, [r7, #8]
 8003920:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8003922:	2200      	movs	r2, #0
 8003924:	2100      	movs	r1, #0
 8003926:	201d      	movs	r0, #29
 8003928:	f000 ff4d 	bl	80047c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800392c:	201d      	movs	r0, #29
 800392e:	f000 ff66 	bl	80047fe <HAL_NVIC_EnableIRQ>
}
 8003932:	bf00      	nop
 8003934:	3710      	adds	r7, #16
 8003936:	46bd      	mov	sp, r7
 8003938:	bd80      	pop	{r7, pc}
 800393a:	bf00      	nop
 800393c:	40021000 	.word	0x40021000
 8003940:	40000400 	.word	0x40000400

08003944 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003944:	b580      	push	{r7, lr}
 8003946:	b088      	sub	sp, #32
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800394c:	f107 0310 	add.w	r3, r7, #16
 8003950:	2200      	movs	r2, #0
 8003952:	601a      	str	r2, [r3, #0]
 8003954:	605a      	str	r2, [r3, #4]
 8003956:	609a      	str	r2, [r3, #8]
 8003958:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	4a1f      	ldr	r2, [pc, #124]	; (80039dc <HAL_UART_MspInit+0x98>)
 8003960:	4293      	cmp	r3, r2
 8003962:	d137      	bne.n	80039d4 <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003964:	4b1e      	ldr	r3, [pc, #120]	; (80039e0 <HAL_UART_MspInit+0x9c>)
 8003966:	69db      	ldr	r3, [r3, #28]
 8003968:	4a1d      	ldr	r2, [pc, #116]	; (80039e0 <HAL_UART_MspInit+0x9c>)
 800396a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800396e:	61d3      	str	r3, [r2, #28]
 8003970:	4b1b      	ldr	r3, [pc, #108]	; (80039e0 <HAL_UART_MspInit+0x9c>)
 8003972:	69db      	ldr	r3, [r3, #28]
 8003974:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003978:	60fb      	str	r3, [r7, #12]
 800397a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800397c:	4b18      	ldr	r3, [pc, #96]	; (80039e0 <HAL_UART_MspInit+0x9c>)
 800397e:	699b      	ldr	r3, [r3, #24]
 8003980:	4a17      	ldr	r2, [pc, #92]	; (80039e0 <HAL_UART_MspInit+0x9c>)
 8003982:	f043 0304 	orr.w	r3, r3, #4
 8003986:	6193      	str	r3, [r2, #24]
 8003988:	4b15      	ldr	r3, [pc, #84]	; (80039e0 <HAL_UART_MspInit+0x9c>)
 800398a:	699b      	ldr	r3, [r3, #24]
 800398c:	f003 0304 	and.w	r3, r3, #4
 8003990:	60bb      	str	r3, [r7, #8]
 8003992:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003994:	2304      	movs	r3, #4
 8003996:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003998:	2302      	movs	r3, #2
 800399a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800399c:	2303      	movs	r3, #3
 800399e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80039a0:	f107 0310 	add.w	r3, r7, #16
 80039a4:	4619      	mov	r1, r3
 80039a6:	480f      	ldr	r0, [pc, #60]	; (80039e4 <HAL_UART_MspInit+0xa0>)
 80039a8:	f000 fff4 	bl	8004994 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80039ac:	2308      	movs	r3, #8
 80039ae:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80039b0:	2300      	movs	r3, #0
 80039b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039b4:	2300      	movs	r3, #0
 80039b6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80039b8:	f107 0310 	add.w	r3, r7, #16
 80039bc:	4619      	mov	r1, r3
 80039be:	4809      	ldr	r0, [pc, #36]	; (80039e4 <HAL_UART_MspInit+0xa0>)
 80039c0:	f000 ffe8 	bl	8004994 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80039c4:	2200      	movs	r2, #0
 80039c6:	2100      	movs	r1, #0
 80039c8:	2026      	movs	r0, #38	; 0x26
 80039ca:	f000 fefc 	bl	80047c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80039ce:	2026      	movs	r0, #38	; 0x26
 80039d0:	f000 ff15 	bl	80047fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80039d4:	bf00      	nop
 80039d6:	3720      	adds	r7, #32
 80039d8:	46bd      	mov	sp, r7
 80039da:	bd80      	pop	{r7, pc}
 80039dc:	40004400 	.word	0x40004400
 80039e0:	40021000 	.word	0x40021000
 80039e4:	40010800 	.word	0x40010800

080039e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80039e8:	b480      	push	{r7}
 80039ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80039ec:	e7fe      	b.n	80039ec <NMI_Handler+0x4>

080039ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80039ee:	b480      	push	{r7}
 80039f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80039f2:	e7fe      	b.n	80039f2 <HardFault_Handler+0x4>

080039f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80039f4:	b480      	push	{r7}
 80039f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80039f8:	e7fe      	b.n	80039f8 <MemManage_Handler+0x4>

080039fa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80039fa:	b480      	push	{r7}
 80039fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80039fe:	e7fe      	b.n	80039fe <BusFault_Handler+0x4>

08003a00 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003a00:	b480      	push	{r7}
 8003a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003a04:	e7fe      	b.n	8003a04 <UsageFault_Handler+0x4>

08003a06 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003a06:	b480      	push	{r7}
 8003a08:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003a0a:	bf00      	nop
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	bc80      	pop	{r7}
 8003a10:	4770      	bx	lr

08003a12 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003a12:	b480      	push	{r7}
 8003a14:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003a16:	bf00      	nop
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	bc80      	pop	{r7}
 8003a1c:	4770      	bx	lr

08003a1e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003a1e:	b480      	push	{r7}
 8003a20:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003a22:	bf00      	nop
 8003a24:	46bd      	mov	sp, r7
 8003a26:	bc80      	pop	{r7}
 8003a28:	4770      	bx	lr

08003a2a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003a2a:	b580      	push	{r7, lr}
 8003a2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003a2e:	f000 f95b 	bl	8003ce8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003a32:	bf00      	nop
 8003a34:	bd80      	pop	{r7, pc}

08003a36 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8003a36:	b580      	push	{r7, lr}
 8003a38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8003a3a:	f44f 7000 	mov.w	r0, #512	; 0x200
 8003a3e:	f001 f95f 	bl	8004d00 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8003a42:	bf00      	nop
 8003a44:	bd80      	pop	{r7, pc}
	...

08003a48 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003a4c:	4802      	ldr	r0, [pc, #8]	; (8003a58 <TIM2_IRQHandler+0x10>)
 8003a4e:	f003 fa53 	bl	8006ef8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003a52:	bf00      	nop
 8003a54:	bd80      	pop	{r7, pc}
 8003a56:	bf00      	nop
 8003a58:	20001c78 	.word	0x20001c78

08003a5c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003a60:	4802      	ldr	r0, [pc, #8]	; (8003a6c <TIM3_IRQHandler+0x10>)
 8003a62:	f003 fa49 	bl	8006ef8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8003a66:	bf00      	nop
 8003a68:	bd80      	pop	{r7, pc}
 8003a6a:	bf00      	nop
 8003a6c:	20001c00 	.word	0x20001c00

08003a70 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003a70:	b580      	push	{r7, lr}
 8003a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003a74:	4802      	ldr	r0, [pc, #8]	; (8003a80 <USART2_IRQHandler+0x10>)
 8003a76:	f003 ff19 	bl	80078ac <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003a7a:	bf00      	nop
 8003a7c:	bd80      	pop	{r7, pc}
 8003a7e:	bf00      	nop
 8003a80:	20001cc0 	.word	0x20001cc0

08003a84 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003a84:	b480      	push	{r7}
 8003a86:	af00      	add	r7, sp, #0
	return 1;
 8003a88:	2301      	movs	r3, #1
}
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	bc80      	pop	{r7}
 8003a90:	4770      	bx	lr

08003a92 <_kill>:

int _kill(int pid, int sig)
{
 8003a92:	b580      	push	{r7, lr}
 8003a94:	b082      	sub	sp, #8
 8003a96:	af00      	add	r7, sp, #0
 8003a98:	6078      	str	r0, [r7, #4]
 8003a9a:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003a9c:	f004 fafe 	bl	800809c <__errno>
 8003aa0:	4603      	mov	r3, r0
 8003aa2:	2216      	movs	r2, #22
 8003aa4:	601a      	str	r2, [r3, #0]
	return -1;
 8003aa6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8003aaa:	4618      	mov	r0, r3
 8003aac:	3708      	adds	r7, #8
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	bd80      	pop	{r7, pc}

08003ab2 <_exit>:

void _exit (int status)
{
 8003ab2:	b580      	push	{r7, lr}
 8003ab4:	b082      	sub	sp, #8
 8003ab6:	af00      	add	r7, sp, #0
 8003ab8:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003aba:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003abe:	6878      	ldr	r0, [r7, #4]
 8003ac0:	f7ff ffe7 	bl	8003a92 <_kill>
	while (1) {}		/* Make sure we hang here */
 8003ac4:	e7fe      	b.n	8003ac4 <_exit+0x12>

08003ac6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003ac6:	b580      	push	{r7, lr}
 8003ac8:	b086      	sub	sp, #24
 8003aca:	af00      	add	r7, sp, #0
 8003acc:	60f8      	str	r0, [r7, #12]
 8003ace:	60b9      	str	r1, [r7, #8]
 8003ad0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	617b      	str	r3, [r7, #20]
 8003ad6:	e00a      	b.n	8003aee <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003ad8:	f3af 8000 	nop.w
 8003adc:	4601      	mov	r1, r0
 8003ade:	68bb      	ldr	r3, [r7, #8]
 8003ae0:	1c5a      	adds	r2, r3, #1
 8003ae2:	60ba      	str	r2, [r7, #8]
 8003ae4:	b2ca      	uxtb	r2, r1
 8003ae6:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003ae8:	697b      	ldr	r3, [r7, #20]
 8003aea:	3301      	adds	r3, #1
 8003aec:	617b      	str	r3, [r7, #20]
 8003aee:	697a      	ldr	r2, [r7, #20]
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	429a      	cmp	r2, r3
 8003af4:	dbf0      	blt.n	8003ad8 <_read+0x12>
	}

return len;
 8003af6:	687b      	ldr	r3, [r7, #4]
}
 8003af8:	4618      	mov	r0, r3
 8003afa:	3718      	adds	r7, #24
 8003afc:	46bd      	mov	sp, r7
 8003afe:	bd80      	pop	{r7, pc}

08003b00 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b086      	sub	sp, #24
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	60f8      	str	r0, [r7, #12]
 8003b08:	60b9      	str	r1, [r7, #8]
 8003b0a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003b0c:	2300      	movs	r3, #0
 8003b0e:	617b      	str	r3, [r7, #20]
 8003b10:	e009      	b.n	8003b26 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003b12:	68bb      	ldr	r3, [r7, #8]
 8003b14:	1c5a      	adds	r2, r3, #1
 8003b16:	60ba      	str	r2, [r7, #8]
 8003b18:	781b      	ldrb	r3, [r3, #0]
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003b20:	697b      	ldr	r3, [r7, #20]
 8003b22:	3301      	adds	r3, #1
 8003b24:	617b      	str	r3, [r7, #20]
 8003b26:	697a      	ldr	r2, [r7, #20]
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	429a      	cmp	r2, r3
 8003b2c:	dbf1      	blt.n	8003b12 <_write+0x12>
	}
	return len;
 8003b2e:	687b      	ldr	r3, [r7, #4]
}
 8003b30:	4618      	mov	r0, r3
 8003b32:	3718      	adds	r7, #24
 8003b34:	46bd      	mov	sp, r7
 8003b36:	bd80      	pop	{r7, pc}

08003b38 <_close>:

int _close(int file)
{
 8003b38:	b480      	push	{r7}
 8003b3a:	b083      	sub	sp, #12
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]
	return -1;
 8003b40:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8003b44:	4618      	mov	r0, r3
 8003b46:	370c      	adds	r7, #12
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	bc80      	pop	{r7}
 8003b4c:	4770      	bx	lr

08003b4e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003b4e:	b480      	push	{r7}
 8003b50:	b083      	sub	sp, #12
 8003b52:	af00      	add	r7, sp, #0
 8003b54:	6078      	str	r0, [r7, #4]
 8003b56:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003b58:	683b      	ldr	r3, [r7, #0]
 8003b5a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003b5e:	605a      	str	r2, [r3, #4]
	return 0;
 8003b60:	2300      	movs	r3, #0
}
 8003b62:	4618      	mov	r0, r3
 8003b64:	370c      	adds	r7, #12
 8003b66:	46bd      	mov	sp, r7
 8003b68:	bc80      	pop	{r7}
 8003b6a:	4770      	bx	lr

08003b6c <_isatty>:

int _isatty(int file)
{
 8003b6c:	b480      	push	{r7}
 8003b6e:	b083      	sub	sp, #12
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
	return 1;
 8003b74:	2301      	movs	r3, #1
}
 8003b76:	4618      	mov	r0, r3
 8003b78:	370c      	adds	r7, #12
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	bc80      	pop	{r7}
 8003b7e:	4770      	bx	lr

08003b80 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003b80:	b480      	push	{r7}
 8003b82:	b085      	sub	sp, #20
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	60f8      	str	r0, [r7, #12]
 8003b88:	60b9      	str	r1, [r7, #8]
 8003b8a:	607a      	str	r2, [r7, #4]
	return 0;
 8003b8c:	2300      	movs	r3, #0
}
 8003b8e:	4618      	mov	r0, r3
 8003b90:	3714      	adds	r7, #20
 8003b92:	46bd      	mov	sp, r7
 8003b94:	bc80      	pop	{r7}
 8003b96:	4770      	bx	lr

08003b98 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b086      	sub	sp, #24
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003ba0:	4a14      	ldr	r2, [pc, #80]	; (8003bf4 <_sbrk+0x5c>)
 8003ba2:	4b15      	ldr	r3, [pc, #84]	; (8003bf8 <_sbrk+0x60>)
 8003ba4:	1ad3      	subs	r3, r2, r3
 8003ba6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003ba8:	697b      	ldr	r3, [r7, #20]
 8003baa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003bac:	4b13      	ldr	r3, [pc, #76]	; (8003bfc <_sbrk+0x64>)
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d102      	bne.n	8003bba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003bb4:	4b11      	ldr	r3, [pc, #68]	; (8003bfc <_sbrk+0x64>)
 8003bb6:	4a12      	ldr	r2, [pc, #72]	; (8003c00 <_sbrk+0x68>)
 8003bb8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003bba:	4b10      	ldr	r3, [pc, #64]	; (8003bfc <_sbrk+0x64>)
 8003bbc:	681a      	ldr	r2, [r3, #0]
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	4413      	add	r3, r2
 8003bc2:	693a      	ldr	r2, [r7, #16]
 8003bc4:	429a      	cmp	r2, r3
 8003bc6:	d207      	bcs.n	8003bd8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003bc8:	f004 fa68 	bl	800809c <__errno>
 8003bcc:	4603      	mov	r3, r0
 8003bce:	220c      	movs	r2, #12
 8003bd0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003bd2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003bd6:	e009      	b.n	8003bec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003bd8:	4b08      	ldr	r3, [pc, #32]	; (8003bfc <_sbrk+0x64>)
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003bde:	4b07      	ldr	r3, [pc, #28]	; (8003bfc <_sbrk+0x64>)
 8003be0:	681a      	ldr	r2, [r3, #0]
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	4413      	add	r3, r2
 8003be6:	4a05      	ldr	r2, [pc, #20]	; (8003bfc <_sbrk+0x64>)
 8003be8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003bea:	68fb      	ldr	r3, [r7, #12]
}
 8003bec:	4618      	mov	r0, r3
 8003bee:	3718      	adds	r7, #24
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	bd80      	pop	{r7, pc}
 8003bf4:	20005000 	.word	0x20005000
 8003bf8:	00000400 	.word	0x00000400
 8003bfc:	200011c4 	.word	0x200011c4
 8003c00:	20001d18 	.word	0x20001d18

08003c04 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003c04:	b480      	push	{r7}
 8003c06:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003c08:	bf00      	nop
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	bc80      	pop	{r7}
 8003c0e:	4770      	bx	lr

08003c10 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003c10:	480c      	ldr	r0, [pc, #48]	; (8003c44 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003c12:	490d      	ldr	r1, [pc, #52]	; (8003c48 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003c14:	4a0d      	ldr	r2, [pc, #52]	; (8003c4c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003c16:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003c18:	e002      	b.n	8003c20 <LoopCopyDataInit>

08003c1a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003c1a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003c1c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003c1e:	3304      	adds	r3, #4

08003c20 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003c20:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003c22:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003c24:	d3f9      	bcc.n	8003c1a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003c26:	4a0a      	ldr	r2, [pc, #40]	; (8003c50 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003c28:	4c0a      	ldr	r4, [pc, #40]	; (8003c54 <LoopFillZerobss+0x22>)
  movs r3, #0
 8003c2a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003c2c:	e001      	b.n	8003c32 <LoopFillZerobss>

08003c2e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003c2e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003c30:	3204      	adds	r2, #4

08003c32 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003c32:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003c34:	d3fb      	bcc.n	8003c2e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8003c36:	f7ff ffe5 	bl	8003c04 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003c3a:	f004 fa35 	bl	80080a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003c3e:	f7ff f881 	bl	8002d44 <main>
  bx lr
 8003c42:	4770      	bx	lr
  ldr r0, =_sdata
 8003c44:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003c48:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 8003c4c:	0800c87c 	.word	0x0800c87c
  ldr r2, =_sbss
 8003c50:	200001ec 	.word	0x200001ec
  ldr r4, =_ebss
 8003c54:	20001d18 	.word	0x20001d18

08003c58 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003c58:	e7fe      	b.n	8003c58 <ADC1_2_IRQHandler>
	...

08003c5c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003c60:	4b08      	ldr	r3, [pc, #32]	; (8003c84 <HAL_Init+0x28>)
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	4a07      	ldr	r2, [pc, #28]	; (8003c84 <HAL_Init+0x28>)
 8003c66:	f043 0310 	orr.w	r3, r3, #16
 8003c6a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003c6c:	2003      	movs	r0, #3
 8003c6e:	f000 fd9f 	bl	80047b0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003c72:	2000      	movs	r0, #0
 8003c74:	f000 f808 	bl	8003c88 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003c78:	f7ff fd4a 	bl	8003710 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003c7c:	2300      	movs	r3, #0
}
 8003c7e:	4618      	mov	r0, r3
 8003c80:	bd80      	pop	{r7, pc}
 8003c82:	bf00      	nop
 8003c84:	40022000 	.word	0x40022000

08003c88 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b082      	sub	sp, #8
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003c90:	4b12      	ldr	r3, [pc, #72]	; (8003cdc <HAL_InitTick+0x54>)
 8003c92:	681a      	ldr	r2, [r3, #0]
 8003c94:	4b12      	ldr	r3, [pc, #72]	; (8003ce0 <HAL_InitTick+0x58>)
 8003c96:	781b      	ldrb	r3, [r3, #0]
 8003c98:	4619      	mov	r1, r3
 8003c9a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003c9e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003ca2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	f000 fdb7 	bl	800481a <HAL_SYSTICK_Config>
 8003cac:	4603      	mov	r3, r0
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d001      	beq.n	8003cb6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003cb2:	2301      	movs	r3, #1
 8003cb4:	e00e      	b.n	8003cd4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	2b0f      	cmp	r3, #15
 8003cba:	d80a      	bhi.n	8003cd2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	6879      	ldr	r1, [r7, #4]
 8003cc0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003cc4:	f000 fd7f 	bl	80047c6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003cc8:	4a06      	ldr	r2, [pc, #24]	; (8003ce4 <HAL_InitTick+0x5c>)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003cce:	2300      	movs	r3, #0
 8003cd0:	e000      	b.n	8003cd4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003cd2:	2301      	movs	r3, #1
}
 8003cd4:	4618      	mov	r0, r3
 8003cd6:	3708      	adds	r7, #8
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	bd80      	pop	{r7, pc}
 8003cdc:	20000010 	.word	0x20000010
 8003ce0:	20000018 	.word	0x20000018
 8003ce4:	20000014 	.word	0x20000014

08003ce8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003ce8:	b480      	push	{r7}
 8003cea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003cec:	4b05      	ldr	r3, [pc, #20]	; (8003d04 <HAL_IncTick+0x1c>)
 8003cee:	781b      	ldrb	r3, [r3, #0]
 8003cf0:	461a      	mov	r2, r3
 8003cf2:	4b05      	ldr	r3, [pc, #20]	; (8003d08 <HAL_IncTick+0x20>)
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	4413      	add	r3, r2
 8003cf8:	4a03      	ldr	r2, [pc, #12]	; (8003d08 <HAL_IncTick+0x20>)
 8003cfa:	6013      	str	r3, [r2, #0]
}
 8003cfc:	bf00      	nop
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	bc80      	pop	{r7}
 8003d02:	4770      	bx	lr
 8003d04:	20000018 	.word	0x20000018
 8003d08:	20001d04 	.word	0x20001d04

08003d0c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003d0c:	b480      	push	{r7}
 8003d0e:	af00      	add	r7, sp, #0
  return uwTick;
 8003d10:	4b02      	ldr	r3, [pc, #8]	; (8003d1c <HAL_GetTick+0x10>)
 8003d12:	681b      	ldr	r3, [r3, #0]
}
 8003d14:	4618      	mov	r0, r3
 8003d16:	46bd      	mov	sp, r7
 8003d18:	bc80      	pop	{r7}
 8003d1a:	4770      	bx	lr
 8003d1c:	20001d04 	.word	0x20001d04

08003d20 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003d20:	b580      	push	{r7, lr}
 8003d22:	b084      	sub	sp, #16
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003d28:	f7ff fff0 	bl	8003d0c <HAL_GetTick>
 8003d2c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003d38:	d005      	beq.n	8003d46 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003d3a:	4b0a      	ldr	r3, [pc, #40]	; (8003d64 <HAL_Delay+0x44>)
 8003d3c:	781b      	ldrb	r3, [r3, #0]
 8003d3e:	461a      	mov	r2, r3
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	4413      	add	r3, r2
 8003d44:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003d46:	bf00      	nop
 8003d48:	f7ff ffe0 	bl	8003d0c <HAL_GetTick>
 8003d4c:	4602      	mov	r2, r0
 8003d4e:	68bb      	ldr	r3, [r7, #8]
 8003d50:	1ad3      	subs	r3, r2, r3
 8003d52:	68fa      	ldr	r2, [r7, #12]
 8003d54:	429a      	cmp	r2, r3
 8003d56:	d8f7      	bhi.n	8003d48 <HAL_Delay+0x28>
  {
  }
}
 8003d58:	bf00      	nop
 8003d5a:	bf00      	nop
 8003d5c:	3710      	adds	r7, #16
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	bd80      	pop	{r7, pc}
 8003d62:	bf00      	nop
 8003d64:	20000018 	.word	0x20000018

08003d68 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	b086      	sub	sp, #24
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003d70:	2300      	movs	r3, #0
 8003d72:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8003d74:	2300      	movs	r3, #0
 8003d76:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8003d78:	2300      	movs	r3, #0
 8003d7a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8003d7c:	2300      	movs	r3, #0
 8003d7e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d101      	bne.n	8003d8a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8003d86:	2301      	movs	r3, #1
 8003d88:	e0be      	b.n	8003f08 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	689b      	ldr	r3, [r3, #8]
 8003d8e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d109      	bne.n	8003dac <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	2200      	movs	r2, #0
 8003da2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003da6:	6878      	ldr	r0, [r7, #4]
 8003da8:	f7ff fce4 	bl	8003774 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8003dac:	6878      	ldr	r0, [r7, #4]
 8003dae:	f000 fbf1 	bl	8004594 <ADC_ConversionStop_Disable>
 8003db2:	4603      	mov	r3, r0
 8003db4:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dba:	f003 0310 	and.w	r3, r3, #16
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	f040 8099 	bne.w	8003ef6 <HAL_ADC_Init+0x18e>
 8003dc4:	7dfb      	ldrb	r3, [r7, #23]
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	f040 8095 	bne.w	8003ef6 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dd0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003dd4:	f023 0302 	bic.w	r3, r3, #2
 8003dd8:	f043 0202 	orr.w	r2, r3, #2
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003de8:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	7b1b      	ldrb	r3, [r3, #12]
 8003dee:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8003df0:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003df2:	68ba      	ldr	r2, [r7, #8]
 8003df4:	4313      	orrs	r3, r2
 8003df6:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	689b      	ldr	r3, [r3, #8]
 8003dfc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e00:	d003      	beq.n	8003e0a <HAL_ADC_Init+0xa2>
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	689b      	ldr	r3, [r3, #8]
 8003e06:	2b01      	cmp	r3, #1
 8003e08:	d102      	bne.n	8003e10 <HAL_ADC_Init+0xa8>
 8003e0a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003e0e:	e000      	b.n	8003e12 <HAL_ADC_Init+0xaa>
 8003e10:	2300      	movs	r3, #0
 8003e12:	693a      	ldr	r2, [r7, #16]
 8003e14:	4313      	orrs	r3, r2
 8003e16:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	7d1b      	ldrb	r3, [r3, #20]
 8003e1c:	2b01      	cmp	r3, #1
 8003e1e:	d119      	bne.n	8003e54 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	7b1b      	ldrb	r3, [r3, #12]
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d109      	bne.n	8003e3c <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	699b      	ldr	r3, [r3, #24]
 8003e2c:	3b01      	subs	r3, #1
 8003e2e:	035a      	lsls	r2, r3, #13
 8003e30:	693b      	ldr	r3, [r7, #16]
 8003e32:	4313      	orrs	r3, r2
 8003e34:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003e38:	613b      	str	r3, [r7, #16]
 8003e3a:	e00b      	b.n	8003e54 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e40:	f043 0220 	orr.w	r2, r3, #32
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e4c:	f043 0201 	orr.w	r2, r3, #1
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	685b      	ldr	r3, [r3, #4]
 8003e5a:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	693a      	ldr	r2, [r7, #16]
 8003e64:	430a      	orrs	r2, r1
 8003e66:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	689a      	ldr	r2, [r3, #8]
 8003e6e:	4b28      	ldr	r3, [pc, #160]	; (8003f10 <HAL_ADC_Init+0x1a8>)
 8003e70:	4013      	ands	r3, r2
 8003e72:	687a      	ldr	r2, [r7, #4]
 8003e74:	6812      	ldr	r2, [r2, #0]
 8003e76:	68b9      	ldr	r1, [r7, #8]
 8003e78:	430b      	orrs	r3, r1
 8003e7a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	689b      	ldr	r3, [r3, #8]
 8003e80:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e84:	d003      	beq.n	8003e8e <HAL_ADC_Init+0x126>
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	689b      	ldr	r3, [r3, #8]
 8003e8a:	2b01      	cmp	r3, #1
 8003e8c:	d104      	bne.n	8003e98 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	691b      	ldr	r3, [r3, #16]
 8003e92:	3b01      	subs	r3, #1
 8003e94:	051b      	lsls	r3, r3, #20
 8003e96:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e9e:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	68fa      	ldr	r2, [r7, #12]
 8003ea8:	430a      	orrs	r2, r1
 8003eaa:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	689a      	ldr	r2, [r3, #8]
 8003eb2:	4b18      	ldr	r3, [pc, #96]	; (8003f14 <HAL_ADC_Init+0x1ac>)
 8003eb4:	4013      	ands	r3, r2
 8003eb6:	68ba      	ldr	r2, [r7, #8]
 8003eb8:	429a      	cmp	r2, r3
 8003eba:	d10b      	bne.n	8003ed4 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ec6:	f023 0303 	bic.w	r3, r3, #3
 8003eca:	f043 0201 	orr.w	r2, r3, #1
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003ed2:	e018      	b.n	8003f06 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ed8:	f023 0312 	bic.w	r3, r3, #18
 8003edc:	f043 0210 	orr.w	r2, r3, #16
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ee8:	f043 0201 	orr.w	r2, r3, #1
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8003ef0:	2301      	movs	r3, #1
 8003ef2:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003ef4:	e007      	b.n	8003f06 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003efa:	f043 0210 	orr.w	r2, r3, #16
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8003f02:	2301      	movs	r3, #1
 8003f04:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8003f06:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f08:	4618      	mov	r0, r3
 8003f0a:	3718      	adds	r7, #24
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	bd80      	pop	{r7, pc}
 8003f10:	ffe1f7fd 	.word	0xffe1f7fd
 8003f14:	ff1f0efe 	.word	0xff1f0efe

08003f18 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	b084      	sub	sp, #16
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003f20:	2300      	movs	r3, #0
 8003f22:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003f2a:	2b01      	cmp	r3, #1
 8003f2c:	d101      	bne.n	8003f32 <HAL_ADC_Start+0x1a>
 8003f2e:	2302      	movs	r3, #2
 8003f30:	e098      	b.n	8004064 <HAL_ADC_Start+0x14c>
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	2201      	movs	r2, #1
 8003f36:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8003f3a:	6878      	ldr	r0, [r7, #4]
 8003f3c:	f000 fad0 	bl	80044e0 <ADC_Enable>
 8003f40:	4603      	mov	r3, r0
 8003f42:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8003f44:	7bfb      	ldrb	r3, [r7, #15]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	f040 8087 	bne.w	800405a <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f50:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f54:	f023 0301 	bic.w	r3, r3, #1
 8003f58:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	4a41      	ldr	r2, [pc, #260]	; (800406c <HAL_ADC_Start+0x154>)
 8003f66:	4293      	cmp	r3, r2
 8003f68:	d105      	bne.n	8003f76 <HAL_ADC_Start+0x5e>
 8003f6a:	4b41      	ldr	r3, [pc, #260]	; (8004070 <HAL_ADC_Start+0x158>)
 8003f6c:	685b      	ldr	r3, [r3, #4]
 8003f6e:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d115      	bne.n	8003fa2 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f7a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	685b      	ldr	r3, [r3, #4]
 8003f88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d026      	beq.n	8003fde <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f94:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003f98:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003fa0:	e01d      	b.n	8003fde <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fa6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	4a2f      	ldr	r2, [pc, #188]	; (8004070 <HAL_ADC_Start+0x158>)
 8003fb4:	4293      	cmp	r3, r2
 8003fb6:	d004      	beq.n	8003fc2 <HAL_ADC_Start+0xaa>
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	4a2b      	ldr	r2, [pc, #172]	; (800406c <HAL_ADC_Start+0x154>)
 8003fbe:	4293      	cmp	r3, r2
 8003fc0:	d10d      	bne.n	8003fde <HAL_ADC_Start+0xc6>
 8003fc2:	4b2b      	ldr	r3, [pc, #172]	; (8004070 <HAL_ADC_Start+0x158>)
 8003fc4:	685b      	ldr	r3, [r3, #4]
 8003fc6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d007      	beq.n	8003fde <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fd2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003fd6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fe2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d006      	beq.n	8003ff8 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fee:	f023 0206 	bic.w	r2, r3, #6
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	62da      	str	r2, [r3, #44]	; 0x2c
 8003ff6:	e002      	b.n	8003ffe <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	2200      	movs	r2, #0
 8004002:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f06f 0202 	mvn.w	r2, #2
 800400e:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	689b      	ldr	r3, [r3, #8]
 8004016:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800401a:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800401e:	d113      	bne.n	8004048 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8004024:	4a11      	ldr	r2, [pc, #68]	; (800406c <HAL_ADC_Start+0x154>)
 8004026:	4293      	cmp	r3, r2
 8004028:	d105      	bne.n	8004036 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 800402a:	4b11      	ldr	r3, [pc, #68]	; (8004070 <HAL_ADC_Start+0x158>)
 800402c:	685b      	ldr	r3, [r3, #4]
 800402e:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8004032:	2b00      	cmp	r3, #0
 8004034:	d108      	bne.n	8004048 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	689a      	ldr	r2, [r3, #8]
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8004044:	609a      	str	r2, [r3, #8]
 8004046:	e00c      	b.n	8004062 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	689a      	ldr	r2, [r3, #8]
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8004056:	609a      	str	r2, [r3, #8]
 8004058:	e003      	b.n	8004062 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	2200      	movs	r2, #0
 800405e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8004062:	7bfb      	ldrb	r3, [r7, #15]
}
 8004064:	4618      	mov	r0, r3
 8004066:	3710      	adds	r7, #16
 8004068:	46bd      	mov	sp, r7
 800406a:	bd80      	pop	{r7, pc}
 800406c:	40012800 	.word	0x40012800
 8004070:	40012400 	.word	0x40012400

08004074 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8004074:	b580      	push	{r7, lr}
 8004076:	b084      	sub	sp, #16
 8004078:	af00      	add	r7, sp, #0
 800407a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800407c:	2300      	movs	r3, #0
 800407e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004086:	2b01      	cmp	r3, #1
 8004088:	d101      	bne.n	800408e <HAL_ADC_Stop+0x1a>
 800408a:	2302      	movs	r3, #2
 800408c:	e01a      	b.n	80040c4 <HAL_ADC_Stop+0x50>
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	2201      	movs	r2, #1
 8004092:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8004096:	6878      	ldr	r0, [r7, #4]
 8004098:	f000 fa7c 	bl	8004594 <ADC_ConversionStop_Disable>
 800409c:	4603      	mov	r3, r0
 800409e:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80040a0:	7bfb      	ldrb	r3, [r7, #15]
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d109      	bne.n	80040ba <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040aa:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80040ae:	f023 0301 	bic.w	r3, r3, #1
 80040b2:	f043 0201 	orr.w	r2, r3, #1
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	2200      	movs	r2, #0
 80040be:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80040c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80040c4:	4618      	mov	r0, r3
 80040c6:	3710      	adds	r7, #16
 80040c8:	46bd      	mov	sp, r7
 80040ca:	bd80      	pop	{r7, pc}

080040cc <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80040cc:	b590      	push	{r4, r7, lr}
 80040ce:	b087      	sub	sp, #28
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]
 80040d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80040d6:	2300      	movs	r3, #0
 80040d8:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 80040da:	2300      	movs	r3, #0
 80040dc:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 80040de:	2300      	movs	r3, #0
 80040e0:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 80040e2:	f7ff fe13 	bl	8003d0c <HAL_GetTick>
 80040e6:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	689b      	ldr	r3, [r3, #8]
 80040ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d00b      	beq.n	800410e <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040fa:	f043 0220 	orr.w	r2, r3, #32
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	2200      	movs	r2, #0
 8004106:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 800410a:	2301      	movs	r3, #1
 800410c:	e0d3      	b.n	80042b6 <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	685b      	ldr	r3, [r3, #4]
 8004114:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004118:	2b00      	cmp	r3, #0
 800411a:	d131      	bne.n	8004180 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004122:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8004126:	2b00      	cmp	r3, #0
 8004128:	d12a      	bne.n	8004180 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800412a:	e021      	b.n	8004170 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 800412c:	683b      	ldr	r3, [r7, #0]
 800412e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004132:	d01d      	beq.n	8004170 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	2b00      	cmp	r3, #0
 8004138:	d007      	beq.n	800414a <HAL_ADC_PollForConversion+0x7e>
 800413a:	f7ff fde7 	bl	8003d0c <HAL_GetTick>
 800413e:	4602      	mov	r2, r0
 8004140:	697b      	ldr	r3, [r7, #20]
 8004142:	1ad3      	subs	r3, r2, r3
 8004144:	683a      	ldr	r2, [r7, #0]
 8004146:	429a      	cmp	r2, r3
 8004148:	d212      	bcs.n	8004170 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f003 0302 	and.w	r3, r3, #2
 8004154:	2b00      	cmp	r3, #0
 8004156:	d10b      	bne.n	8004170 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800415c:	f043 0204 	orr.w	r2, r3, #4
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2200      	movs	r2, #0
 8004168:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            
            return HAL_TIMEOUT;
 800416c:	2303      	movs	r3, #3
 800416e:	e0a2      	b.n	80042b6 <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f003 0302 	and.w	r3, r3, #2
 800417a:	2b00      	cmp	r3, #0
 800417c:	d0d6      	beq.n	800412c <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800417e:	e070      	b.n	8004262 <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8004180:	4b4f      	ldr	r3, [pc, #316]	; (80042c0 <HAL_ADC_PollForConversion+0x1f4>)
 8004182:	681c      	ldr	r4, [r3, #0]
 8004184:	2002      	movs	r0, #2
 8004186:	f002 fd51 	bl	8006c2c <HAL_RCCEx_GetPeriphCLKFreq>
 800418a:	4603      	mov	r3, r0
 800418c:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	6919      	ldr	r1, [r3, #16]
 8004196:	4b4b      	ldr	r3, [pc, #300]	; (80042c4 <HAL_ADC_PollForConversion+0x1f8>)
 8004198:	400b      	ands	r3, r1
 800419a:	2b00      	cmp	r3, #0
 800419c:	d118      	bne.n	80041d0 <HAL_ADC_PollForConversion+0x104>
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	68d9      	ldr	r1, [r3, #12]
 80041a4:	4b48      	ldr	r3, [pc, #288]	; (80042c8 <HAL_ADC_PollForConversion+0x1fc>)
 80041a6:	400b      	ands	r3, r1
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d111      	bne.n	80041d0 <HAL_ADC_PollForConversion+0x104>
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	6919      	ldr	r1, [r3, #16]
 80041b2:	4b46      	ldr	r3, [pc, #280]	; (80042cc <HAL_ADC_PollForConversion+0x200>)
 80041b4:	400b      	ands	r3, r1
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d108      	bne.n	80041cc <HAL_ADC_PollForConversion+0x100>
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	68d9      	ldr	r1, [r3, #12]
 80041c0:	4b43      	ldr	r3, [pc, #268]	; (80042d0 <HAL_ADC_PollForConversion+0x204>)
 80041c2:	400b      	ands	r3, r1
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d101      	bne.n	80041cc <HAL_ADC_PollForConversion+0x100>
 80041c8:	2314      	movs	r3, #20
 80041ca:	e020      	b.n	800420e <HAL_ADC_PollForConversion+0x142>
 80041cc:	2329      	movs	r3, #41	; 0x29
 80041ce:	e01e      	b.n	800420e <HAL_ADC_PollForConversion+0x142>
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	6919      	ldr	r1, [r3, #16]
 80041d6:	4b3d      	ldr	r3, [pc, #244]	; (80042cc <HAL_ADC_PollForConversion+0x200>)
 80041d8:	400b      	ands	r3, r1
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d106      	bne.n	80041ec <HAL_ADC_PollForConversion+0x120>
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	68d9      	ldr	r1, [r3, #12]
 80041e4:	4b3a      	ldr	r3, [pc, #232]	; (80042d0 <HAL_ADC_PollForConversion+0x204>)
 80041e6:	400b      	ands	r3, r1
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d00d      	beq.n	8004208 <HAL_ADC_PollForConversion+0x13c>
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	6919      	ldr	r1, [r3, #16]
 80041f2:	4b38      	ldr	r3, [pc, #224]	; (80042d4 <HAL_ADC_PollForConversion+0x208>)
 80041f4:	400b      	ands	r3, r1
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d108      	bne.n	800420c <HAL_ADC_PollForConversion+0x140>
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	68d9      	ldr	r1, [r3, #12]
 8004200:	4b34      	ldr	r3, [pc, #208]	; (80042d4 <HAL_ADC_PollForConversion+0x208>)
 8004202:	400b      	ands	r3, r1
 8004204:	2b00      	cmp	r3, #0
 8004206:	d101      	bne.n	800420c <HAL_ADC_PollForConversion+0x140>
 8004208:	2354      	movs	r3, #84	; 0x54
 800420a:	e000      	b.n	800420e <HAL_ADC_PollForConversion+0x142>
 800420c:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 800420e:	fb02 f303 	mul.w	r3, r2, r3
 8004212:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8004214:	e021      	b.n	800425a <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8004216:	683b      	ldr	r3, [r7, #0]
 8004218:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800421c:	d01a      	beq.n	8004254 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800421e:	683b      	ldr	r3, [r7, #0]
 8004220:	2b00      	cmp	r3, #0
 8004222:	d007      	beq.n	8004234 <HAL_ADC_PollForConversion+0x168>
 8004224:	f7ff fd72 	bl	8003d0c <HAL_GetTick>
 8004228:	4602      	mov	r2, r0
 800422a:	697b      	ldr	r3, [r7, #20]
 800422c:	1ad3      	subs	r3, r2, r3
 800422e:	683a      	ldr	r2, [r7, #0]
 8004230:	429a      	cmp	r2, r3
 8004232:	d20f      	bcs.n	8004254 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	693a      	ldr	r2, [r7, #16]
 8004238:	429a      	cmp	r2, r3
 800423a:	d90b      	bls.n	8004254 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004240:	f043 0204 	orr.w	r2, r3, #4
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	629a      	str	r2, [r3, #40]	; 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2200      	movs	r2, #0
 800424c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            return HAL_TIMEOUT;
 8004250:	2303      	movs	r3, #3
 8004252:	e030      	b.n	80042b6 <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	3301      	adds	r3, #1
 8004258:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	693a      	ldr	r2, [r7, #16]
 800425e:	429a      	cmp	r2, r3
 8004260:	d8d9      	bhi.n	8004216 <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f06f 0212 	mvn.w	r2, #18
 800426a:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004270:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	689b      	ldr	r3, [r3, #8]
 800427e:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8004282:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8004286:	d115      	bne.n	80042b4 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800428c:	2b00      	cmp	r3, #0
 800428e:	d111      	bne.n	80042b4 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004294:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042a0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d105      	bne.n	80042b4 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042ac:	f043 0201 	orr.w	r2, r3, #1
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80042b4:	2300      	movs	r3, #0
}
 80042b6:	4618      	mov	r0, r3
 80042b8:	371c      	adds	r7, #28
 80042ba:	46bd      	mov	sp, r7
 80042bc:	bd90      	pop	{r4, r7, pc}
 80042be:	bf00      	nop
 80042c0:	20000010 	.word	0x20000010
 80042c4:	24924924 	.word	0x24924924
 80042c8:	00924924 	.word	0x00924924
 80042cc:	12492492 	.word	0x12492492
 80042d0:	00492492 	.word	0x00492492
 80042d4:	00249249 	.word	0x00249249

080042d8 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80042d8:	b480      	push	{r7}
 80042da:	b083      	sub	sp, #12
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80042e6:	4618      	mov	r0, r3
 80042e8:	370c      	adds	r7, #12
 80042ea:	46bd      	mov	sp, r7
 80042ec:	bc80      	pop	{r7}
 80042ee:	4770      	bx	lr

080042f0 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80042f0:	b480      	push	{r7}
 80042f2:	b085      	sub	sp, #20
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	6078      	str	r0, [r7, #4]
 80042f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80042fa:	2300      	movs	r3, #0
 80042fc:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80042fe:	2300      	movs	r3, #0
 8004300:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004308:	2b01      	cmp	r3, #1
 800430a:	d101      	bne.n	8004310 <HAL_ADC_ConfigChannel+0x20>
 800430c:	2302      	movs	r3, #2
 800430e:	e0dc      	b.n	80044ca <HAL_ADC_ConfigChannel+0x1da>
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	2201      	movs	r2, #1
 8004314:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8004318:	683b      	ldr	r3, [r7, #0]
 800431a:	685b      	ldr	r3, [r3, #4]
 800431c:	2b06      	cmp	r3, #6
 800431e:	d81c      	bhi.n	800435a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004326:	683b      	ldr	r3, [r7, #0]
 8004328:	685a      	ldr	r2, [r3, #4]
 800432a:	4613      	mov	r3, r2
 800432c:	009b      	lsls	r3, r3, #2
 800432e:	4413      	add	r3, r2
 8004330:	3b05      	subs	r3, #5
 8004332:	221f      	movs	r2, #31
 8004334:	fa02 f303 	lsl.w	r3, r2, r3
 8004338:	43db      	mvns	r3, r3
 800433a:	4019      	ands	r1, r3
 800433c:	683b      	ldr	r3, [r7, #0]
 800433e:	6818      	ldr	r0, [r3, #0]
 8004340:	683b      	ldr	r3, [r7, #0]
 8004342:	685a      	ldr	r2, [r3, #4]
 8004344:	4613      	mov	r3, r2
 8004346:	009b      	lsls	r3, r3, #2
 8004348:	4413      	add	r3, r2
 800434a:	3b05      	subs	r3, #5
 800434c:	fa00 f203 	lsl.w	r2, r0, r3
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	430a      	orrs	r2, r1
 8004356:	635a      	str	r2, [r3, #52]	; 0x34
 8004358:	e03c      	b.n	80043d4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800435a:	683b      	ldr	r3, [r7, #0]
 800435c:	685b      	ldr	r3, [r3, #4]
 800435e:	2b0c      	cmp	r3, #12
 8004360:	d81c      	bhi.n	800439c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004368:	683b      	ldr	r3, [r7, #0]
 800436a:	685a      	ldr	r2, [r3, #4]
 800436c:	4613      	mov	r3, r2
 800436e:	009b      	lsls	r3, r3, #2
 8004370:	4413      	add	r3, r2
 8004372:	3b23      	subs	r3, #35	; 0x23
 8004374:	221f      	movs	r2, #31
 8004376:	fa02 f303 	lsl.w	r3, r2, r3
 800437a:	43db      	mvns	r3, r3
 800437c:	4019      	ands	r1, r3
 800437e:	683b      	ldr	r3, [r7, #0]
 8004380:	6818      	ldr	r0, [r3, #0]
 8004382:	683b      	ldr	r3, [r7, #0]
 8004384:	685a      	ldr	r2, [r3, #4]
 8004386:	4613      	mov	r3, r2
 8004388:	009b      	lsls	r3, r3, #2
 800438a:	4413      	add	r3, r2
 800438c:	3b23      	subs	r3, #35	; 0x23
 800438e:	fa00 f203 	lsl.w	r2, r0, r3
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	430a      	orrs	r2, r1
 8004398:	631a      	str	r2, [r3, #48]	; 0x30
 800439a:	e01b      	b.n	80043d4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80043a2:	683b      	ldr	r3, [r7, #0]
 80043a4:	685a      	ldr	r2, [r3, #4]
 80043a6:	4613      	mov	r3, r2
 80043a8:	009b      	lsls	r3, r3, #2
 80043aa:	4413      	add	r3, r2
 80043ac:	3b41      	subs	r3, #65	; 0x41
 80043ae:	221f      	movs	r2, #31
 80043b0:	fa02 f303 	lsl.w	r3, r2, r3
 80043b4:	43db      	mvns	r3, r3
 80043b6:	4019      	ands	r1, r3
 80043b8:	683b      	ldr	r3, [r7, #0]
 80043ba:	6818      	ldr	r0, [r3, #0]
 80043bc:	683b      	ldr	r3, [r7, #0]
 80043be:	685a      	ldr	r2, [r3, #4]
 80043c0:	4613      	mov	r3, r2
 80043c2:	009b      	lsls	r3, r3, #2
 80043c4:	4413      	add	r3, r2
 80043c6:	3b41      	subs	r3, #65	; 0x41
 80043c8:	fa00 f203 	lsl.w	r2, r0, r3
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	430a      	orrs	r2, r1
 80043d2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80043d4:	683b      	ldr	r3, [r7, #0]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	2b09      	cmp	r3, #9
 80043da:	d91c      	bls.n	8004416 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	68d9      	ldr	r1, [r3, #12]
 80043e2:	683b      	ldr	r3, [r7, #0]
 80043e4:	681a      	ldr	r2, [r3, #0]
 80043e6:	4613      	mov	r3, r2
 80043e8:	005b      	lsls	r3, r3, #1
 80043ea:	4413      	add	r3, r2
 80043ec:	3b1e      	subs	r3, #30
 80043ee:	2207      	movs	r2, #7
 80043f0:	fa02 f303 	lsl.w	r3, r2, r3
 80043f4:	43db      	mvns	r3, r3
 80043f6:	4019      	ands	r1, r3
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	6898      	ldr	r0, [r3, #8]
 80043fc:	683b      	ldr	r3, [r7, #0]
 80043fe:	681a      	ldr	r2, [r3, #0]
 8004400:	4613      	mov	r3, r2
 8004402:	005b      	lsls	r3, r3, #1
 8004404:	4413      	add	r3, r2
 8004406:	3b1e      	subs	r3, #30
 8004408:	fa00 f203 	lsl.w	r2, r0, r3
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	430a      	orrs	r2, r1
 8004412:	60da      	str	r2, [r3, #12]
 8004414:	e019      	b.n	800444a <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	6919      	ldr	r1, [r3, #16]
 800441c:	683b      	ldr	r3, [r7, #0]
 800441e:	681a      	ldr	r2, [r3, #0]
 8004420:	4613      	mov	r3, r2
 8004422:	005b      	lsls	r3, r3, #1
 8004424:	4413      	add	r3, r2
 8004426:	2207      	movs	r2, #7
 8004428:	fa02 f303 	lsl.w	r3, r2, r3
 800442c:	43db      	mvns	r3, r3
 800442e:	4019      	ands	r1, r3
 8004430:	683b      	ldr	r3, [r7, #0]
 8004432:	6898      	ldr	r0, [r3, #8]
 8004434:	683b      	ldr	r3, [r7, #0]
 8004436:	681a      	ldr	r2, [r3, #0]
 8004438:	4613      	mov	r3, r2
 800443a:	005b      	lsls	r3, r3, #1
 800443c:	4413      	add	r3, r2
 800443e:	fa00 f203 	lsl.w	r2, r0, r3
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	430a      	orrs	r2, r1
 8004448:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800444a:	683b      	ldr	r3, [r7, #0]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	2b10      	cmp	r3, #16
 8004450:	d003      	beq.n	800445a <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8004452:	683b      	ldr	r3, [r7, #0]
 8004454:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8004456:	2b11      	cmp	r3, #17
 8004458:	d132      	bne.n	80044c0 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	4a1d      	ldr	r2, [pc, #116]	; (80044d4 <HAL_ADC_ConfigChannel+0x1e4>)
 8004460:	4293      	cmp	r3, r2
 8004462:	d125      	bne.n	80044b0 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	689b      	ldr	r3, [r3, #8]
 800446a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800446e:	2b00      	cmp	r3, #0
 8004470:	d126      	bne.n	80044c0 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	689a      	ldr	r2, [r3, #8]
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8004480:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004482:	683b      	ldr	r3, [r7, #0]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	2b10      	cmp	r3, #16
 8004488:	d11a      	bne.n	80044c0 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800448a:	4b13      	ldr	r3, [pc, #76]	; (80044d8 <HAL_ADC_ConfigChannel+0x1e8>)
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	4a13      	ldr	r2, [pc, #76]	; (80044dc <HAL_ADC_ConfigChannel+0x1ec>)
 8004490:	fba2 2303 	umull	r2, r3, r2, r3
 8004494:	0c9a      	lsrs	r2, r3, #18
 8004496:	4613      	mov	r3, r2
 8004498:	009b      	lsls	r3, r3, #2
 800449a:	4413      	add	r3, r2
 800449c:	005b      	lsls	r3, r3, #1
 800449e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80044a0:	e002      	b.n	80044a8 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80044a2:	68bb      	ldr	r3, [r7, #8]
 80044a4:	3b01      	subs	r3, #1
 80044a6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80044a8:	68bb      	ldr	r3, [r7, #8]
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d1f9      	bne.n	80044a2 <HAL_ADC_ConfigChannel+0x1b2>
 80044ae:	e007      	b.n	80044c0 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044b4:	f043 0220 	orr.w	r2, r3, #32
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80044bc:	2301      	movs	r3, #1
 80044be:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2200      	movs	r2, #0
 80044c4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80044c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80044ca:	4618      	mov	r0, r3
 80044cc:	3714      	adds	r7, #20
 80044ce:	46bd      	mov	sp, r7
 80044d0:	bc80      	pop	{r7}
 80044d2:	4770      	bx	lr
 80044d4:	40012400 	.word	0x40012400
 80044d8:	20000010 	.word	0x20000010
 80044dc:	431bde83 	.word	0x431bde83

080044e0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80044e0:	b580      	push	{r7, lr}
 80044e2:	b084      	sub	sp, #16
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80044e8:	2300      	movs	r3, #0
 80044ea:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80044ec:	2300      	movs	r3, #0
 80044ee:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	689b      	ldr	r3, [r3, #8]
 80044f6:	f003 0301 	and.w	r3, r3, #1
 80044fa:	2b01      	cmp	r3, #1
 80044fc:	d040      	beq.n	8004580 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	689a      	ldr	r2, [r3, #8]
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f042 0201 	orr.w	r2, r2, #1
 800450c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800450e:	4b1f      	ldr	r3, [pc, #124]	; (800458c <ADC_Enable+0xac>)
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	4a1f      	ldr	r2, [pc, #124]	; (8004590 <ADC_Enable+0xb0>)
 8004514:	fba2 2303 	umull	r2, r3, r2, r3
 8004518:	0c9b      	lsrs	r3, r3, #18
 800451a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800451c:	e002      	b.n	8004524 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 800451e:	68bb      	ldr	r3, [r7, #8]
 8004520:	3b01      	subs	r3, #1
 8004522:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8004524:	68bb      	ldr	r3, [r7, #8]
 8004526:	2b00      	cmp	r3, #0
 8004528:	d1f9      	bne.n	800451e <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 800452a:	f7ff fbef 	bl	8003d0c <HAL_GetTick>
 800452e:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8004530:	e01f      	b.n	8004572 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004532:	f7ff fbeb 	bl	8003d0c <HAL_GetTick>
 8004536:	4602      	mov	r2, r0
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	1ad3      	subs	r3, r2, r3
 800453c:	2b02      	cmp	r3, #2
 800453e:	d918      	bls.n	8004572 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	689b      	ldr	r3, [r3, #8]
 8004546:	f003 0301 	and.w	r3, r3, #1
 800454a:	2b01      	cmp	r3, #1
 800454c:	d011      	beq.n	8004572 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004552:	f043 0210 	orr.w	r2, r3, #16
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800455e:	f043 0201 	orr.w	r2, r3, #1
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	2200      	movs	r2, #0
 800456a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 800456e:	2301      	movs	r3, #1
 8004570:	e007      	b.n	8004582 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	689b      	ldr	r3, [r3, #8]
 8004578:	f003 0301 	and.w	r3, r3, #1
 800457c:	2b01      	cmp	r3, #1
 800457e:	d1d8      	bne.n	8004532 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8004580:	2300      	movs	r3, #0
}
 8004582:	4618      	mov	r0, r3
 8004584:	3710      	adds	r7, #16
 8004586:	46bd      	mov	sp, r7
 8004588:	bd80      	pop	{r7, pc}
 800458a:	bf00      	nop
 800458c:	20000010 	.word	0x20000010
 8004590:	431bde83 	.word	0x431bde83

08004594 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8004594:	b580      	push	{r7, lr}
 8004596:	b084      	sub	sp, #16
 8004598:	af00      	add	r7, sp, #0
 800459a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800459c:	2300      	movs	r3, #0
 800459e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	689b      	ldr	r3, [r3, #8]
 80045a6:	f003 0301 	and.w	r3, r3, #1
 80045aa:	2b01      	cmp	r3, #1
 80045ac:	d12e      	bne.n	800460c <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	689a      	ldr	r2, [r3, #8]
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f022 0201 	bic.w	r2, r2, #1
 80045bc:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80045be:	f7ff fba5 	bl	8003d0c <HAL_GetTick>
 80045c2:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80045c4:	e01b      	b.n	80045fe <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80045c6:	f7ff fba1 	bl	8003d0c <HAL_GetTick>
 80045ca:	4602      	mov	r2, r0
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	1ad3      	subs	r3, r2, r3
 80045d0:	2b02      	cmp	r3, #2
 80045d2:	d914      	bls.n	80045fe <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	689b      	ldr	r3, [r3, #8]
 80045da:	f003 0301 	and.w	r3, r3, #1
 80045de:	2b01      	cmp	r3, #1
 80045e0:	d10d      	bne.n	80045fe <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045e6:	f043 0210 	orr.w	r2, r3, #16
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045f2:	f043 0201 	orr.w	r2, r3, #1
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 80045fa:	2301      	movs	r3, #1
 80045fc:	e007      	b.n	800460e <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	689b      	ldr	r3, [r3, #8]
 8004604:	f003 0301 	and.w	r3, r3, #1
 8004608:	2b01      	cmp	r3, #1
 800460a:	d0dc      	beq.n	80045c6 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800460c:	2300      	movs	r3, #0
}
 800460e:	4618      	mov	r0, r3
 8004610:	3710      	adds	r7, #16
 8004612:	46bd      	mov	sp, r7
 8004614:	bd80      	pop	{r7, pc}
	...

08004618 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004618:	b480      	push	{r7}
 800461a:	b085      	sub	sp, #20
 800461c:	af00      	add	r7, sp, #0
 800461e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	f003 0307 	and.w	r3, r3, #7
 8004626:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004628:	4b0c      	ldr	r3, [pc, #48]	; (800465c <__NVIC_SetPriorityGrouping+0x44>)
 800462a:	68db      	ldr	r3, [r3, #12]
 800462c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800462e:	68ba      	ldr	r2, [r7, #8]
 8004630:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004634:	4013      	ands	r3, r2
 8004636:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800463c:	68bb      	ldr	r3, [r7, #8]
 800463e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004640:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004644:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004648:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800464a:	4a04      	ldr	r2, [pc, #16]	; (800465c <__NVIC_SetPriorityGrouping+0x44>)
 800464c:	68bb      	ldr	r3, [r7, #8]
 800464e:	60d3      	str	r3, [r2, #12]
}
 8004650:	bf00      	nop
 8004652:	3714      	adds	r7, #20
 8004654:	46bd      	mov	sp, r7
 8004656:	bc80      	pop	{r7}
 8004658:	4770      	bx	lr
 800465a:	bf00      	nop
 800465c:	e000ed00 	.word	0xe000ed00

08004660 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004660:	b480      	push	{r7}
 8004662:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004664:	4b04      	ldr	r3, [pc, #16]	; (8004678 <__NVIC_GetPriorityGrouping+0x18>)
 8004666:	68db      	ldr	r3, [r3, #12]
 8004668:	0a1b      	lsrs	r3, r3, #8
 800466a:	f003 0307 	and.w	r3, r3, #7
}
 800466e:	4618      	mov	r0, r3
 8004670:	46bd      	mov	sp, r7
 8004672:	bc80      	pop	{r7}
 8004674:	4770      	bx	lr
 8004676:	bf00      	nop
 8004678:	e000ed00 	.word	0xe000ed00

0800467c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800467c:	b480      	push	{r7}
 800467e:	b083      	sub	sp, #12
 8004680:	af00      	add	r7, sp, #0
 8004682:	4603      	mov	r3, r0
 8004684:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004686:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800468a:	2b00      	cmp	r3, #0
 800468c:	db0b      	blt.n	80046a6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800468e:	79fb      	ldrb	r3, [r7, #7]
 8004690:	f003 021f 	and.w	r2, r3, #31
 8004694:	4906      	ldr	r1, [pc, #24]	; (80046b0 <__NVIC_EnableIRQ+0x34>)
 8004696:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800469a:	095b      	lsrs	r3, r3, #5
 800469c:	2001      	movs	r0, #1
 800469e:	fa00 f202 	lsl.w	r2, r0, r2
 80046a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80046a6:	bf00      	nop
 80046a8:	370c      	adds	r7, #12
 80046aa:	46bd      	mov	sp, r7
 80046ac:	bc80      	pop	{r7}
 80046ae:	4770      	bx	lr
 80046b0:	e000e100 	.word	0xe000e100

080046b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80046b4:	b480      	push	{r7}
 80046b6:	b083      	sub	sp, #12
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	4603      	mov	r3, r0
 80046bc:	6039      	str	r1, [r7, #0]
 80046be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80046c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	db0a      	blt.n	80046de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80046c8:	683b      	ldr	r3, [r7, #0]
 80046ca:	b2da      	uxtb	r2, r3
 80046cc:	490c      	ldr	r1, [pc, #48]	; (8004700 <__NVIC_SetPriority+0x4c>)
 80046ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046d2:	0112      	lsls	r2, r2, #4
 80046d4:	b2d2      	uxtb	r2, r2
 80046d6:	440b      	add	r3, r1
 80046d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80046dc:	e00a      	b.n	80046f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80046de:	683b      	ldr	r3, [r7, #0]
 80046e0:	b2da      	uxtb	r2, r3
 80046e2:	4908      	ldr	r1, [pc, #32]	; (8004704 <__NVIC_SetPriority+0x50>)
 80046e4:	79fb      	ldrb	r3, [r7, #7]
 80046e6:	f003 030f 	and.w	r3, r3, #15
 80046ea:	3b04      	subs	r3, #4
 80046ec:	0112      	lsls	r2, r2, #4
 80046ee:	b2d2      	uxtb	r2, r2
 80046f0:	440b      	add	r3, r1
 80046f2:	761a      	strb	r2, [r3, #24]
}
 80046f4:	bf00      	nop
 80046f6:	370c      	adds	r7, #12
 80046f8:	46bd      	mov	sp, r7
 80046fa:	bc80      	pop	{r7}
 80046fc:	4770      	bx	lr
 80046fe:	bf00      	nop
 8004700:	e000e100 	.word	0xe000e100
 8004704:	e000ed00 	.word	0xe000ed00

08004708 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004708:	b480      	push	{r7}
 800470a:	b089      	sub	sp, #36	; 0x24
 800470c:	af00      	add	r7, sp, #0
 800470e:	60f8      	str	r0, [r7, #12]
 8004710:	60b9      	str	r1, [r7, #8]
 8004712:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	f003 0307 	and.w	r3, r3, #7
 800471a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800471c:	69fb      	ldr	r3, [r7, #28]
 800471e:	f1c3 0307 	rsb	r3, r3, #7
 8004722:	2b04      	cmp	r3, #4
 8004724:	bf28      	it	cs
 8004726:	2304      	movcs	r3, #4
 8004728:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800472a:	69fb      	ldr	r3, [r7, #28]
 800472c:	3304      	adds	r3, #4
 800472e:	2b06      	cmp	r3, #6
 8004730:	d902      	bls.n	8004738 <NVIC_EncodePriority+0x30>
 8004732:	69fb      	ldr	r3, [r7, #28]
 8004734:	3b03      	subs	r3, #3
 8004736:	e000      	b.n	800473a <NVIC_EncodePriority+0x32>
 8004738:	2300      	movs	r3, #0
 800473a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800473c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004740:	69bb      	ldr	r3, [r7, #24]
 8004742:	fa02 f303 	lsl.w	r3, r2, r3
 8004746:	43da      	mvns	r2, r3
 8004748:	68bb      	ldr	r3, [r7, #8]
 800474a:	401a      	ands	r2, r3
 800474c:	697b      	ldr	r3, [r7, #20]
 800474e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004750:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004754:	697b      	ldr	r3, [r7, #20]
 8004756:	fa01 f303 	lsl.w	r3, r1, r3
 800475a:	43d9      	mvns	r1, r3
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004760:	4313      	orrs	r3, r2
         );
}
 8004762:	4618      	mov	r0, r3
 8004764:	3724      	adds	r7, #36	; 0x24
 8004766:	46bd      	mov	sp, r7
 8004768:	bc80      	pop	{r7}
 800476a:	4770      	bx	lr

0800476c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800476c:	b580      	push	{r7, lr}
 800476e:	b082      	sub	sp, #8
 8004770:	af00      	add	r7, sp, #0
 8004772:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	3b01      	subs	r3, #1
 8004778:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800477c:	d301      	bcc.n	8004782 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800477e:	2301      	movs	r3, #1
 8004780:	e00f      	b.n	80047a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004782:	4a0a      	ldr	r2, [pc, #40]	; (80047ac <SysTick_Config+0x40>)
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	3b01      	subs	r3, #1
 8004788:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800478a:	210f      	movs	r1, #15
 800478c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004790:	f7ff ff90 	bl	80046b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004794:	4b05      	ldr	r3, [pc, #20]	; (80047ac <SysTick_Config+0x40>)
 8004796:	2200      	movs	r2, #0
 8004798:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800479a:	4b04      	ldr	r3, [pc, #16]	; (80047ac <SysTick_Config+0x40>)
 800479c:	2207      	movs	r2, #7
 800479e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80047a0:	2300      	movs	r3, #0
}
 80047a2:	4618      	mov	r0, r3
 80047a4:	3708      	adds	r7, #8
 80047a6:	46bd      	mov	sp, r7
 80047a8:	bd80      	pop	{r7, pc}
 80047aa:	bf00      	nop
 80047ac:	e000e010 	.word	0xe000e010

080047b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80047b0:	b580      	push	{r7, lr}
 80047b2:	b082      	sub	sp, #8
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80047b8:	6878      	ldr	r0, [r7, #4]
 80047ba:	f7ff ff2d 	bl	8004618 <__NVIC_SetPriorityGrouping>
}
 80047be:	bf00      	nop
 80047c0:	3708      	adds	r7, #8
 80047c2:	46bd      	mov	sp, r7
 80047c4:	bd80      	pop	{r7, pc}

080047c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80047c6:	b580      	push	{r7, lr}
 80047c8:	b086      	sub	sp, #24
 80047ca:	af00      	add	r7, sp, #0
 80047cc:	4603      	mov	r3, r0
 80047ce:	60b9      	str	r1, [r7, #8]
 80047d0:	607a      	str	r2, [r7, #4]
 80047d2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80047d4:	2300      	movs	r3, #0
 80047d6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80047d8:	f7ff ff42 	bl	8004660 <__NVIC_GetPriorityGrouping>
 80047dc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80047de:	687a      	ldr	r2, [r7, #4]
 80047e0:	68b9      	ldr	r1, [r7, #8]
 80047e2:	6978      	ldr	r0, [r7, #20]
 80047e4:	f7ff ff90 	bl	8004708 <NVIC_EncodePriority>
 80047e8:	4602      	mov	r2, r0
 80047ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80047ee:	4611      	mov	r1, r2
 80047f0:	4618      	mov	r0, r3
 80047f2:	f7ff ff5f 	bl	80046b4 <__NVIC_SetPriority>
}
 80047f6:	bf00      	nop
 80047f8:	3718      	adds	r7, #24
 80047fa:	46bd      	mov	sp, r7
 80047fc:	bd80      	pop	{r7, pc}

080047fe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80047fe:	b580      	push	{r7, lr}
 8004800:	b082      	sub	sp, #8
 8004802:	af00      	add	r7, sp, #0
 8004804:	4603      	mov	r3, r0
 8004806:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004808:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800480c:	4618      	mov	r0, r3
 800480e:	f7ff ff35 	bl	800467c <__NVIC_EnableIRQ>
}
 8004812:	bf00      	nop
 8004814:	3708      	adds	r7, #8
 8004816:	46bd      	mov	sp, r7
 8004818:	bd80      	pop	{r7, pc}

0800481a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800481a:	b580      	push	{r7, lr}
 800481c:	b082      	sub	sp, #8
 800481e:	af00      	add	r7, sp, #0
 8004820:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004822:	6878      	ldr	r0, [r7, #4]
 8004824:	f7ff ffa2 	bl	800476c <SysTick_Config>
 8004828:	4603      	mov	r3, r0
}
 800482a:	4618      	mov	r0, r3
 800482c:	3708      	adds	r7, #8
 800482e:	46bd      	mov	sp, r7
 8004830:	bd80      	pop	{r7, pc}

08004832 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004832:	b480      	push	{r7}
 8004834:	b085      	sub	sp, #20
 8004836:	af00      	add	r7, sp, #0
 8004838:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800483a:	2300      	movs	r3, #0
 800483c:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004844:	2b02      	cmp	r3, #2
 8004846:	d008      	beq.n	800485a <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2204      	movs	r2, #4
 800484c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	2200      	movs	r2, #0
 8004852:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8004856:	2301      	movs	r3, #1
 8004858:	e020      	b.n	800489c <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	681a      	ldr	r2, [r3, #0]
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f022 020e 	bic.w	r2, r2, #14
 8004868:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	681a      	ldr	r2, [r3, #0]
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f022 0201 	bic.w	r2, r2, #1
 8004878:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004882:	2101      	movs	r1, #1
 8004884:	fa01 f202 	lsl.w	r2, r1, r2
 8004888:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	2201      	movs	r2, #1
 800488e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	2200      	movs	r2, #0
 8004896:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800489a:	7bfb      	ldrb	r3, [r7, #15]
}
 800489c:	4618      	mov	r0, r3
 800489e:	3714      	adds	r7, #20
 80048a0:	46bd      	mov	sp, r7
 80048a2:	bc80      	pop	{r7}
 80048a4:	4770      	bx	lr
	...

080048a8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80048a8:	b580      	push	{r7, lr}
 80048aa:	b084      	sub	sp, #16
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80048b0:	2300      	movs	r3, #0
 80048b2:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80048ba:	2b02      	cmp	r3, #2
 80048bc:	d005      	beq.n	80048ca <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	2204      	movs	r2, #4
 80048c2:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80048c4:	2301      	movs	r3, #1
 80048c6:	73fb      	strb	r3, [r7, #15]
 80048c8:	e051      	b.n	800496e <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	681a      	ldr	r2, [r3, #0]
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f022 020e 	bic.w	r2, r2, #14
 80048d8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	681a      	ldr	r2, [r3, #0]
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f022 0201 	bic.w	r2, r2, #1
 80048e8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	4a22      	ldr	r2, [pc, #136]	; (8004978 <HAL_DMA_Abort_IT+0xd0>)
 80048f0:	4293      	cmp	r3, r2
 80048f2:	d029      	beq.n	8004948 <HAL_DMA_Abort_IT+0xa0>
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	4a20      	ldr	r2, [pc, #128]	; (800497c <HAL_DMA_Abort_IT+0xd4>)
 80048fa:	4293      	cmp	r3, r2
 80048fc:	d022      	beq.n	8004944 <HAL_DMA_Abort_IT+0x9c>
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	4a1f      	ldr	r2, [pc, #124]	; (8004980 <HAL_DMA_Abort_IT+0xd8>)
 8004904:	4293      	cmp	r3, r2
 8004906:	d01a      	beq.n	800493e <HAL_DMA_Abort_IT+0x96>
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	4a1d      	ldr	r2, [pc, #116]	; (8004984 <HAL_DMA_Abort_IT+0xdc>)
 800490e:	4293      	cmp	r3, r2
 8004910:	d012      	beq.n	8004938 <HAL_DMA_Abort_IT+0x90>
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	4a1c      	ldr	r2, [pc, #112]	; (8004988 <HAL_DMA_Abort_IT+0xe0>)
 8004918:	4293      	cmp	r3, r2
 800491a:	d00a      	beq.n	8004932 <HAL_DMA_Abort_IT+0x8a>
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	4a1a      	ldr	r2, [pc, #104]	; (800498c <HAL_DMA_Abort_IT+0xe4>)
 8004922:	4293      	cmp	r3, r2
 8004924:	d102      	bne.n	800492c <HAL_DMA_Abort_IT+0x84>
 8004926:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800492a:	e00e      	b.n	800494a <HAL_DMA_Abort_IT+0xa2>
 800492c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004930:	e00b      	b.n	800494a <HAL_DMA_Abort_IT+0xa2>
 8004932:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004936:	e008      	b.n	800494a <HAL_DMA_Abort_IT+0xa2>
 8004938:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800493c:	e005      	b.n	800494a <HAL_DMA_Abort_IT+0xa2>
 800493e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004942:	e002      	b.n	800494a <HAL_DMA_Abort_IT+0xa2>
 8004944:	2310      	movs	r3, #16
 8004946:	e000      	b.n	800494a <HAL_DMA_Abort_IT+0xa2>
 8004948:	2301      	movs	r3, #1
 800494a:	4a11      	ldr	r2, [pc, #68]	; (8004990 <HAL_DMA_Abort_IT+0xe8>)
 800494c:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	2201      	movs	r2, #1
 8004952:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	2200      	movs	r2, #0
 800495a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004962:	2b00      	cmp	r3, #0
 8004964:	d003      	beq.n	800496e <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800496a:	6878      	ldr	r0, [r7, #4]
 800496c:	4798      	blx	r3
    } 
  }
  return status;
 800496e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004970:	4618      	mov	r0, r3
 8004972:	3710      	adds	r7, #16
 8004974:	46bd      	mov	sp, r7
 8004976:	bd80      	pop	{r7, pc}
 8004978:	40020008 	.word	0x40020008
 800497c:	4002001c 	.word	0x4002001c
 8004980:	40020030 	.word	0x40020030
 8004984:	40020044 	.word	0x40020044
 8004988:	40020058 	.word	0x40020058
 800498c:	4002006c 	.word	0x4002006c
 8004990:	40020000 	.word	0x40020000

08004994 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004994:	b480      	push	{r7}
 8004996:	b08b      	sub	sp, #44	; 0x2c
 8004998:	af00      	add	r7, sp, #0
 800499a:	6078      	str	r0, [r7, #4]
 800499c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800499e:	2300      	movs	r3, #0
 80049a0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80049a2:	2300      	movs	r3, #0
 80049a4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80049a6:	e169      	b.n	8004c7c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80049a8:	2201      	movs	r2, #1
 80049aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049ac:	fa02 f303 	lsl.w	r3, r2, r3
 80049b0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80049b2:	683b      	ldr	r3, [r7, #0]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	69fa      	ldr	r2, [r7, #28]
 80049b8:	4013      	ands	r3, r2
 80049ba:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80049bc:	69ba      	ldr	r2, [r7, #24]
 80049be:	69fb      	ldr	r3, [r7, #28]
 80049c0:	429a      	cmp	r2, r3
 80049c2:	f040 8158 	bne.w	8004c76 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80049c6:	683b      	ldr	r3, [r7, #0]
 80049c8:	685b      	ldr	r3, [r3, #4]
 80049ca:	4a9a      	ldr	r2, [pc, #616]	; (8004c34 <HAL_GPIO_Init+0x2a0>)
 80049cc:	4293      	cmp	r3, r2
 80049ce:	d05e      	beq.n	8004a8e <HAL_GPIO_Init+0xfa>
 80049d0:	4a98      	ldr	r2, [pc, #608]	; (8004c34 <HAL_GPIO_Init+0x2a0>)
 80049d2:	4293      	cmp	r3, r2
 80049d4:	d875      	bhi.n	8004ac2 <HAL_GPIO_Init+0x12e>
 80049d6:	4a98      	ldr	r2, [pc, #608]	; (8004c38 <HAL_GPIO_Init+0x2a4>)
 80049d8:	4293      	cmp	r3, r2
 80049da:	d058      	beq.n	8004a8e <HAL_GPIO_Init+0xfa>
 80049dc:	4a96      	ldr	r2, [pc, #600]	; (8004c38 <HAL_GPIO_Init+0x2a4>)
 80049de:	4293      	cmp	r3, r2
 80049e0:	d86f      	bhi.n	8004ac2 <HAL_GPIO_Init+0x12e>
 80049e2:	4a96      	ldr	r2, [pc, #600]	; (8004c3c <HAL_GPIO_Init+0x2a8>)
 80049e4:	4293      	cmp	r3, r2
 80049e6:	d052      	beq.n	8004a8e <HAL_GPIO_Init+0xfa>
 80049e8:	4a94      	ldr	r2, [pc, #592]	; (8004c3c <HAL_GPIO_Init+0x2a8>)
 80049ea:	4293      	cmp	r3, r2
 80049ec:	d869      	bhi.n	8004ac2 <HAL_GPIO_Init+0x12e>
 80049ee:	4a94      	ldr	r2, [pc, #592]	; (8004c40 <HAL_GPIO_Init+0x2ac>)
 80049f0:	4293      	cmp	r3, r2
 80049f2:	d04c      	beq.n	8004a8e <HAL_GPIO_Init+0xfa>
 80049f4:	4a92      	ldr	r2, [pc, #584]	; (8004c40 <HAL_GPIO_Init+0x2ac>)
 80049f6:	4293      	cmp	r3, r2
 80049f8:	d863      	bhi.n	8004ac2 <HAL_GPIO_Init+0x12e>
 80049fa:	4a92      	ldr	r2, [pc, #584]	; (8004c44 <HAL_GPIO_Init+0x2b0>)
 80049fc:	4293      	cmp	r3, r2
 80049fe:	d046      	beq.n	8004a8e <HAL_GPIO_Init+0xfa>
 8004a00:	4a90      	ldr	r2, [pc, #576]	; (8004c44 <HAL_GPIO_Init+0x2b0>)
 8004a02:	4293      	cmp	r3, r2
 8004a04:	d85d      	bhi.n	8004ac2 <HAL_GPIO_Init+0x12e>
 8004a06:	2b12      	cmp	r3, #18
 8004a08:	d82a      	bhi.n	8004a60 <HAL_GPIO_Init+0xcc>
 8004a0a:	2b12      	cmp	r3, #18
 8004a0c:	d859      	bhi.n	8004ac2 <HAL_GPIO_Init+0x12e>
 8004a0e:	a201      	add	r2, pc, #4	; (adr r2, 8004a14 <HAL_GPIO_Init+0x80>)
 8004a10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a14:	08004a8f 	.word	0x08004a8f
 8004a18:	08004a69 	.word	0x08004a69
 8004a1c:	08004a7b 	.word	0x08004a7b
 8004a20:	08004abd 	.word	0x08004abd
 8004a24:	08004ac3 	.word	0x08004ac3
 8004a28:	08004ac3 	.word	0x08004ac3
 8004a2c:	08004ac3 	.word	0x08004ac3
 8004a30:	08004ac3 	.word	0x08004ac3
 8004a34:	08004ac3 	.word	0x08004ac3
 8004a38:	08004ac3 	.word	0x08004ac3
 8004a3c:	08004ac3 	.word	0x08004ac3
 8004a40:	08004ac3 	.word	0x08004ac3
 8004a44:	08004ac3 	.word	0x08004ac3
 8004a48:	08004ac3 	.word	0x08004ac3
 8004a4c:	08004ac3 	.word	0x08004ac3
 8004a50:	08004ac3 	.word	0x08004ac3
 8004a54:	08004ac3 	.word	0x08004ac3
 8004a58:	08004a71 	.word	0x08004a71
 8004a5c:	08004a85 	.word	0x08004a85
 8004a60:	4a79      	ldr	r2, [pc, #484]	; (8004c48 <HAL_GPIO_Init+0x2b4>)
 8004a62:	4293      	cmp	r3, r2
 8004a64:	d013      	beq.n	8004a8e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8004a66:	e02c      	b.n	8004ac2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8004a68:	683b      	ldr	r3, [r7, #0]
 8004a6a:	68db      	ldr	r3, [r3, #12]
 8004a6c:	623b      	str	r3, [r7, #32]
          break;
 8004a6e:	e029      	b.n	8004ac4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8004a70:	683b      	ldr	r3, [r7, #0]
 8004a72:	68db      	ldr	r3, [r3, #12]
 8004a74:	3304      	adds	r3, #4
 8004a76:	623b      	str	r3, [r7, #32]
          break;
 8004a78:	e024      	b.n	8004ac4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8004a7a:	683b      	ldr	r3, [r7, #0]
 8004a7c:	68db      	ldr	r3, [r3, #12]
 8004a7e:	3308      	adds	r3, #8
 8004a80:	623b      	str	r3, [r7, #32]
          break;
 8004a82:	e01f      	b.n	8004ac4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8004a84:	683b      	ldr	r3, [r7, #0]
 8004a86:	68db      	ldr	r3, [r3, #12]
 8004a88:	330c      	adds	r3, #12
 8004a8a:	623b      	str	r3, [r7, #32]
          break;
 8004a8c:	e01a      	b.n	8004ac4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8004a8e:	683b      	ldr	r3, [r7, #0]
 8004a90:	689b      	ldr	r3, [r3, #8]
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d102      	bne.n	8004a9c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8004a96:	2304      	movs	r3, #4
 8004a98:	623b      	str	r3, [r7, #32]
          break;
 8004a9a:	e013      	b.n	8004ac4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8004a9c:	683b      	ldr	r3, [r7, #0]
 8004a9e:	689b      	ldr	r3, [r3, #8]
 8004aa0:	2b01      	cmp	r3, #1
 8004aa2:	d105      	bne.n	8004ab0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004aa4:	2308      	movs	r3, #8
 8004aa6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	69fa      	ldr	r2, [r7, #28]
 8004aac:	611a      	str	r2, [r3, #16]
          break;
 8004aae:	e009      	b.n	8004ac4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004ab0:	2308      	movs	r3, #8
 8004ab2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	69fa      	ldr	r2, [r7, #28]
 8004ab8:	615a      	str	r2, [r3, #20]
          break;
 8004aba:	e003      	b.n	8004ac4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8004abc:	2300      	movs	r3, #0
 8004abe:	623b      	str	r3, [r7, #32]
          break;
 8004ac0:	e000      	b.n	8004ac4 <HAL_GPIO_Init+0x130>
          break;
 8004ac2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8004ac4:	69bb      	ldr	r3, [r7, #24]
 8004ac6:	2bff      	cmp	r3, #255	; 0xff
 8004ac8:	d801      	bhi.n	8004ace <HAL_GPIO_Init+0x13a>
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	e001      	b.n	8004ad2 <HAL_GPIO_Init+0x13e>
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	3304      	adds	r3, #4
 8004ad2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8004ad4:	69bb      	ldr	r3, [r7, #24]
 8004ad6:	2bff      	cmp	r3, #255	; 0xff
 8004ad8:	d802      	bhi.n	8004ae0 <HAL_GPIO_Init+0x14c>
 8004ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004adc:	009b      	lsls	r3, r3, #2
 8004ade:	e002      	b.n	8004ae6 <HAL_GPIO_Init+0x152>
 8004ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ae2:	3b08      	subs	r3, #8
 8004ae4:	009b      	lsls	r3, r3, #2
 8004ae6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8004ae8:	697b      	ldr	r3, [r7, #20]
 8004aea:	681a      	ldr	r2, [r3, #0]
 8004aec:	210f      	movs	r1, #15
 8004aee:	693b      	ldr	r3, [r7, #16]
 8004af0:	fa01 f303 	lsl.w	r3, r1, r3
 8004af4:	43db      	mvns	r3, r3
 8004af6:	401a      	ands	r2, r3
 8004af8:	6a39      	ldr	r1, [r7, #32]
 8004afa:	693b      	ldr	r3, [r7, #16]
 8004afc:	fa01 f303 	lsl.w	r3, r1, r3
 8004b00:	431a      	orrs	r2, r3
 8004b02:	697b      	ldr	r3, [r7, #20]
 8004b04:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004b06:	683b      	ldr	r3, [r7, #0]
 8004b08:	685b      	ldr	r3, [r3, #4]
 8004b0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	f000 80b1 	beq.w	8004c76 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8004b14:	4b4d      	ldr	r3, [pc, #308]	; (8004c4c <HAL_GPIO_Init+0x2b8>)
 8004b16:	699b      	ldr	r3, [r3, #24]
 8004b18:	4a4c      	ldr	r2, [pc, #304]	; (8004c4c <HAL_GPIO_Init+0x2b8>)
 8004b1a:	f043 0301 	orr.w	r3, r3, #1
 8004b1e:	6193      	str	r3, [r2, #24]
 8004b20:	4b4a      	ldr	r3, [pc, #296]	; (8004c4c <HAL_GPIO_Init+0x2b8>)
 8004b22:	699b      	ldr	r3, [r3, #24]
 8004b24:	f003 0301 	and.w	r3, r3, #1
 8004b28:	60bb      	str	r3, [r7, #8]
 8004b2a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8004b2c:	4a48      	ldr	r2, [pc, #288]	; (8004c50 <HAL_GPIO_Init+0x2bc>)
 8004b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b30:	089b      	lsrs	r3, r3, #2
 8004b32:	3302      	adds	r3, #2
 8004b34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b38:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8004b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b3c:	f003 0303 	and.w	r3, r3, #3
 8004b40:	009b      	lsls	r3, r3, #2
 8004b42:	220f      	movs	r2, #15
 8004b44:	fa02 f303 	lsl.w	r3, r2, r3
 8004b48:	43db      	mvns	r3, r3
 8004b4a:	68fa      	ldr	r2, [r7, #12]
 8004b4c:	4013      	ands	r3, r2
 8004b4e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	4a40      	ldr	r2, [pc, #256]	; (8004c54 <HAL_GPIO_Init+0x2c0>)
 8004b54:	4293      	cmp	r3, r2
 8004b56:	d013      	beq.n	8004b80 <HAL_GPIO_Init+0x1ec>
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	4a3f      	ldr	r2, [pc, #252]	; (8004c58 <HAL_GPIO_Init+0x2c4>)
 8004b5c:	4293      	cmp	r3, r2
 8004b5e:	d00d      	beq.n	8004b7c <HAL_GPIO_Init+0x1e8>
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	4a3e      	ldr	r2, [pc, #248]	; (8004c5c <HAL_GPIO_Init+0x2c8>)
 8004b64:	4293      	cmp	r3, r2
 8004b66:	d007      	beq.n	8004b78 <HAL_GPIO_Init+0x1e4>
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	4a3d      	ldr	r2, [pc, #244]	; (8004c60 <HAL_GPIO_Init+0x2cc>)
 8004b6c:	4293      	cmp	r3, r2
 8004b6e:	d101      	bne.n	8004b74 <HAL_GPIO_Init+0x1e0>
 8004b70:	2303      	movs	r3, #3
 8004b72:	e006      	b.n	8004b82 <HAL_GPIO_Init+0x1ee>
 8004b74:	2304      	movs	r3, #4
 8004b76:	e004      	b.n	8004b82 <HAL_GPIO_Init+0x1ee>
 8004b78:	2302      	movs	r3, #2
 8004b7a:	e002      	b.n	8004b82 <HAL_GPIO_Init+0x1ee>
 8004b7c:	2301      	movs	r3, #1
 8004b7e:	e000      	b.n	8004b82 <HAL_GPIO_Init+0x1ee>
 8004b80:	2300      	movs	r3, #0
 8004b82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b84:	f002 0203 	and.w	r2, r2, #3
 8004b88:	0092      	lsls	r2, r2, #2
 8004b8a:	4093      	lsls	r3, r2
 8004b8c:	68fa      	ldr	r2, [r7, #12]
 8004b8e:	4313      	orrs	r3, r2
 8004b90:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8004b92:	492f      	ldr	r1, [pc, #188]	; (8004c50 <HAL_GPIO_Init+0x2bc>)
 8004b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b96:	089b      	lsrs	r3, r3, #2
 8004b98:	3302      	adds	r3, #2
 8004b9a:	68fa      	ldr	r2, [r7, #12]
 8004b9c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004ba0:	683b      	ldr	r3, [r7, #0]
 8004ba2:	685b      	ldr	r3, [r3, #4]
 8004ba4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d006      	beq.n	8004bba <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8004bac:	4b2d      	ldr	r3, [pc, #180]	; (8004c64 <HAL_GPIO_Init+0x2d0>)
 8004bae:	681a      	ldr	r2, [r3, #0]
 8004bb0:	492c      	ldr	r1, [pc, #176]	; (8004c64 <HAL_GPIO_Init+0x2d0>)
 8004bb2:	69bb      	ldr	r3, [r7, #24]
 8004bb4:	4313      	orrs	r3, r2
 8004bb6:	600b      	str	r3, [r1, #0]
 8004bb8:	e006      	b.n	8004bc8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8004bba:	4b2a      	ldr	r3, [pc, #168]	; (8004c64 <HAL_GPIO_Init+0x2d0>)
 8004bbc:	681a      	ldr	r2, [r3, #0]
 8004bbe:	69bb      	ldr	r3, [r7, #24]
 8004bc0:	43db      	mvns	r3, r3
 8004bc2:	4928      	ldr	r1, [pc, #160]	; (8004c64 <HAL_GPIO_Init+0x2d0>)
 8004bc4:	4013      	ands	r3, r2
 8004bc6:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004bc8:	683b      	ldr	r3, [r7, #0]
 8004bca:	685b      	ldr	r3, [r3, #4]
 8004bcc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d006      	beq.n	8004be2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8004bd4:	4b23      	ldr	r3, [pc, #140]	; (8004c64 <HAL_GPIO_Init+0x2d0>)
 8004bd6:	685a      	ldr	r2, [r3, #4]
 8004bd8:	4922      	ldr	r1, [pc, #136]	; (8004c64 <HAL_GPIO_Init+0x2d0>)
 8004bda:	69bb      	ldr	r3, [r7, #24]
 8004bdc:	4313      	orrs	r3, r2
 8004bde:	604b      	str	r3, [r1, #4]
 8004be0:	e006      	b.n	8004bf0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8004be2:	4b20      	ldr	r3, [pc, #128]	; (8004c64 <HAL_GPIO_Init+0x2d0>)
 8004be4:	685a      	ldr	r2, [r3, #4]
 8004be6:	69bb      	ldr	r3, [r7, #24]
 8004be8:	43db      	mvns	r3, r3
 8004bea:	491e      	ldr	r1, [pc, #120]	; (8004c64 <HAL_GPIO_Init+0x2d0>)
 8004bec:	4013      	ands	r3, r2
 8004bee:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004bf0:	683b      	ldr	r3, [r7, #0]
 8004bf2:	685b      	ldr	r3, [r3, #4]
 8004bf4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d006      	beq.n	8004c0a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8004bfc:	4b19      	ldr	r3, [pc, #100]	; (8004c64 <HAL_GPIO_Init+0x2d0>)
 8004bfe:	689a      	ldr	r2, [r3, #8]
 8004c00:	4918      	ldr	r1, [pc, #96]	; (8004c64 <HAL_GPIO_Init+0x2d0>)
 8004c02:	69bb      	ldr	r3, [r7, #24]
 8004c04:	4313      	orrs	r3, r2
 8004c06:	608b      	str	r3, [r1, #8]
 8004c08:	e006      	b.n	8004c18 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8004c0a:	4b16      	ldr	r3, [pc, #88]	; (8004c64 <HAL_GPIO_Init+0x2d0>)
 8004c0c:	689a      	ldr	r2, [r3, #8]
 8004c0e:	69bb      	ldr	r3, [r7, #24]
 8004c10:	43db      	mvns	r3, r3
 8004c12:	4914      	ldr	r1, [pc, #80]	; (8004c64 <HAL_GPIO_Init+0x2d0>)
 8004c14:	4013      	ands	r3, r2
 8004c16:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004c18:	683b      	ldr	r3, [r7, #0]
 8004c1a:	685b      	ldr	r3, [r3, #4]
 8004c1c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d021      	beq.n	8004c68 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8004c24:	4b0f      	ldr	r3, [pc, #60]	; (8004c64 <HAL_GPIO_Init+0x2d0>)
 8004c26:	68da      	ldr	r2, [r3, #12]
 8004c28:	490e      	ldr	r1, [pc, #56]	; (8004c64 <HAL_GPIO_Init+0x2d0>)
 8004c2a:	69bb      	ldr	r3, [r7, #24]
 8004c2c:	4313      	orrs	r3, r2
 8004c2e:	60cb      	str	r3, [r1, #12]
 8004c30:	e021      	b.n	8004c76 <HAL_GPIO_Init+0x2e2>
 8004c32:	bf00      	nop
 8004c34:	10320000 	.word	0x10320000
 8004c38:	10310000 	.word	0x10310000
 8004c3c:	10220000 	.word	0x10220000
 8004c40:	10210000 	.word	0x10210000
 8004c44:	10120000 	.word	0x10120000
 8004c48:	10110000 	.word	0x10110000
 8004c4c:	40021000 	.word	0x40021000
 8004c50:	40010000 	.word	0x40010000
 8004c54:	40010800 	.word	0x40010800
 8004c58:	40010c00 	.word	0x40010c00
 8004c5c:	40011000 	.word	0x40011000
 8004c60:	40011400 	.word	0x40011400
 8004c64:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8004c68:	4b0b      	ldr	r3, [pc, #44]	; (8004c98 <HAL_GPIO_Init+0x304>)
 8004c6a:	68da      	ldr	r2, [r3, #12]
 8004c6c:	69bb      	ldr	r3, [r7, #24]
 8004c6e:	43db      	mvns	r3, r3
 8004c70:	4909      	ldr	r1, [pc, #36]	; (8004c98 <HAL_GPIO_Init+0x304>)
 8004c72:	4013      	ands	r3, r2
 8004c74:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8004c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c78:	3301      	adds	r3, #1
 8004c7a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004c7c:	683b      	ldr	r3, [r7, #0]
 8004c7e:	681a      	ldr	r2, [r3, #0]
 8004c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c82:	fa22 f303 	lsr.w	r3, r2, r3
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	f47f ae8e 	bne.w	80049a8 <HAL_GPIO_Init+0x14>
  }
}
 8004c8c:	bf00      	nop
 8004c8e:	bf00      	nop
 8004c90:	372c      	adds	r7, #44	; 0x2c
 8004c92:	46bd      	mov	sp, r7
 8004c94:	bc80      	pop	{r7}
 8004c96:	4770      	bx	lr
 8004c98:	40010400 	.word	0x40010400

08004c9c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004c9c:	b480      	push	{r7}
 8004c9e:	b083      	sub	sp, #12
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	6078      	str	r0, [r7, #4]
 8004ca4:	460b      	mov	r3, r1
 8004ca6:	807b      	strh	r3, [r7, #2]
 8004ca8:	4613      	mov	r3, r2
 8004caa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004cac:	787b      	ldrb	r3, [r7, #1]
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d003      	beq.n	8004cba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004cb2:	887a      	ldrh	r2, [r7, #2]
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8004cb8:	e003      	b.n	8004cc2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004cba:	887b      	ldrh	r3, [r7, #2]
 8004cbc:	041a      	lsls	r2, r3, #16
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	611a      	str	r2, [r3, #16]
}
 8004cc2:	bf00      	nop
 8004cc4:	370c      	adds	r7, #12
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	bc80      	pop	{r7}
 8004cca:	4770      	bx	lr

08004ccc <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004ccc:	b480      	push	{r7}
 8004cce:	b085      	sub	sp, #20
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	6078      	str	r0, [r7, #4]
 8004cd4:	460b      	mov	r3, r1
 8004cd6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	68db      	ldr	r3, [r3, #12]
 8004cdc:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004cde:	887a      	ldrh	r2, [r7, #2]
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	4013      	ands	r3, r2
 8004ce4:	041a      	lsls	r2, r3, #16
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	43d9      	mvns	r1, r3
 8004cea:	887b      	ldrh	r3, [r7, #2]
 8004cec:	400b      	ands	r3, r1
 8004cee:	431a      	orrs	r2, r3
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	611a      	str	r2, [r3, #16]
}
 8004cf4:	bf00      	nop
 8004cf6:	3714      	adds	r7, #20
 8004cf8:	46bd      	mov	sp, r7
 8004cfa:	bc80      	pop	{r7}
 8004cfc:	4770      	bx	lr
	...

08004d00 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004d00:	b580      	push	{r7, lr}
 8004d02:	b082      	sub	sp, #8
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	4603      	mov	r3, r0
 8004d08:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004d0a:	4b08      	ldr	r3, [pc, #32]	; (8004d2c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004d0c:	695a      	ldr	r2, [r3, #20]
 8004d0e:	88fb      	ldrh	r3, [r7, #6]
 8004d10:	4013      	ands	r3, r2
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d006      	beq.n	8004d24 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004d16:	4a05      	ldr	r2, [pc, #20]	; (8004d2c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004d18:	88fb      	ldrh	r3, [r7, #6]
 8004d1a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004d1c:	88fb      	ldrh	r3, [r7, #6]
 8004d1e:	4618      	mov	r0, r3
 8004d20:	f7fe fc42 	bl	80035a8 <HAL_GPIO_EXTI_Callback>
  }
}
 8004d24:	bf00      	nop
 8004d26:	3708      	adds	r7, #8
 8004d28:	46bd      	mov	sp, r7
 8004d2a:	bd80      	pop	{r7, pc}
 8004d2c:	40010400 	.word	0x40010400

08004d30 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004d30:	b580      	push	{r7, lr}
 8004d32:	b084      	sub	sp, #16
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d101      	bne.n	8004d42 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004d3e:	2301      	movs	r3, #1
 8004d40:	e12b      	b.n	8004f9a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d48:	b2db      	uxtb	r3, r3
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d106      	bne.n	8004d5c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	2200      	movs	r2, #0
 8004d52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004d56:	6878      	ldr	r0, [r7, #4]
 8004d58:	f7fe fd48 	bl	80037ec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	2224      	movs	r2, #36	; 0x24
 8004d60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	681a      	ldr	r2, [r3, #0]
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	f022 0201 	bic.w	r2, r2, #1
 8004d72:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	681a      	ldr	r2, [r3, #0]
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004d82:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	681a      	ldr	r2, [r3, #0]
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004d92:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004d94:	f001 fe4e 	bl	8006a34 <HAL_RCC_GetPCLK1Freq>
 8004d98:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	685b      	ldr	r3, [r3, #4]
 8004d9e:	4a81      	ldr	r2, [pc, #516]	; (8004fa4 <HAL_I2C_Init+0x274>)
 8004da0:	4293      	cmp	r3, r2
 8004da2:	d807      	bhi.n	8004db4 <HAL_I2C_Init+0x84>
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	4a80      	ldr	r2, [pc, #512]	; (8004fa8 <HAL_I2C_Init+0x278>)
 8004da8:	4293      	cmp	r3, r2
 8004daa:	bf94      	ite	ls
 8004dac:	2301      	movls	r3, #1
 8004dae:	2300      	movhi	r3, #0
 8004db0:	b2db      	uxtb	r3, r3
 8004db2:	e006      	b.n	8004dc2 <HAL_I2C_Init+0x92>
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	4a7d      	ldr	r2, [pc, #500]	; (8004fac <HAL_I2C_Init+0x27c>)
 8004db8:	4293      	cmp	r3, r2
 8004dba:	bf94      	ite	ls
 8004dbc:	2301      	movls	r3, #1
 8004dbe:	2300      	movhi	r3, #0
 8004dc0:	b2db      	uxtb	r3, r3
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d001      	beq.n	8004dca <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004dc6:	2301      	movs	r3, #1
 8004dc8:	e0e7      	b.n	8004f9a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	4a78      	ldr	r2, [pc, #480]	; (8004fb0 <HAL_I2C_Init+0x280>)
 8004dce:	fba2 2303 	umull	r2, r3, r2, r3
 8004dd2:	0c9b      	lsrs	r3, r3, #18
 8004dd4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	685b      	ldr	r3, [r3, #4]
 8004ddc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	68ba      	ldr	r2, [r7, #8]
 8004de6:	430a      	orrs	r2, r1
 8004de8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	6a1b      	ldr	r3, [r3, #32]
 8004df0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	685b      	ldr	r3, [r3, #4]
 8004df8:	4a6a      	ldr	r2, [pc, #424]	; (8004fa4 <HAL_I2C_Init+0x274>)
 8004dfa:	4293      	cmp	r3, r2
 8004dfc:	d802      	bhi.n	8004e04 <HAL_I2C_Init+0xd4>
 8004dfe:	68bb      	ldr	r3, [r7, #8]
 8004e00:	3301      	adds	r3, #1
 8004e02:	e009      	b.n	8004e18 <HAL_I2C_Init+0xe8>
 8004e04:	68bb      	ldr	r3, [r7, #8]
 8004e06:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004e0a:	fb02 f303 	mul.w	r3, r2, r3
 8004e0e:	4a69      	ldr	r2, [pc, #420]	; (8004fb4 <HAL_I2C_Init+0x284>)
 8004e10:	fba2 2303 	umull	r2, r3, r2, r3
 8004e14:	099b      	lsrs	r3, r3, #6
 8004e16:	3301      	adds	r3, #1
 8004e18:	687a      	ldr	r2, [r7, #4]
 8004e1a:	6812      	ldr	r2, [r2, #0]
 8004e1c:	430b      	orrs	r3, r1
 8004e1e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	69db      	ldr	r3, [r3, #28]
 8004e26:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004e2a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	685b      	ldr	r3, [r3, #4]
 8004e32:	495c      	ldr	r1, [pc, #368]	; (8004fa4 <HAL_I2C_Init+0x274>)
 8004e34:	428b      	cmp	r3, r1
 8004e36:	d819      	bhi.n	8004e6c <HAL_I2C_Init+0x13c>
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	1e59      	subs	r1, r3, #1
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	685b      	ldr	r3, [r3, #4]
 8004e40:	005b      	lsls	r3, r3, #1
 8004e42:	fbb1 f3f3 	udiv	r3, r1, r3
 8004e46:	1c59      	adds	r1, r3, #1
 8004e48:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004e4c:	400b      	ands	r3, r1
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d00a      	beq.n	8004e68 <HAL_I2C_Init+0x138>
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	1e59      	subs	r1, r3, #1
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	685b      	ldr	r3, [r3, #4]
 8004e5a:	005b      	lsls	r3, r3, #1
 8004e5c:	fbb1 f3f3 	udiv	r3, r1, r3
 8004e60:	3301      	adds	r3, #1
 8004e62:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004e66:	e051      	b.n	8004f0c <HAL_I2C_Init+0x1dc>
 8004e68:	2304      	movs	r3, #4
 8004e6a:	e04f      	b.n	8004f0c <HAL_I2C_Init+0x1dc>
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	689b      	ldr	r3, [r3, #8]
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d111      	bne.n	8004e98 <HAL_I2C_Init+0x168>
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	1e58      	subs	r0, r3, #1
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	6859      	ldr	r1, [r3, #4]
 8004e7c:	460b      	mov	r3, r1
 8004e7e:	005b      	lsls	r3, r3, #1
 8004e80:	440b      	add	r3, r1
 8004e82:	fbb0 f3f3 	udiv	r3, r0, r3
 8004e86:	3301      	adds	r3, #1
 8004e88:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	bf0c      	ite	eq
 8004e90:	2301      	moveq	r3, #1
 8004e92:	2300      	movne	r3, #0
 8004e94:	b2db      	uxtb	r3, r3
 8004e96:	e012      	b.n	8004ebe <HAL_I2C_Init+0x18e>
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	1e58      	subs	r0, r3, #1
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	6859      	ldr	r1, [r3, #4]
 8004ea0:	460b      	mov	r3, r1
 8004ea2:	009b      	lsls	r3, r3, #2
 8004ea4:	440b      	add	r3, r1
 8004ea6:	0099      	lsls	r1, r3, #2
 8004ea8:	440b      	add	r3, r1
 8004eaa:	fbb0 f3f3 	udiv	r3, r0, r3
 8004eae:	3301      	adds	r3, #1
 8004eb0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	bf0c      	ite	eq
 8004eb8:	2301      	moveq	r3, #1
 8004eba:	2300      	movne	r3, #0
 8004ebc:	b2db      	uxtb	r3, r3
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d001      	beq.n	8004ec6 <HAL_I2C_Init+0x196>
 8004ec2:	2301      	movs	r3, #1
 8004ec4:	e022      	b.n	8004f0c <HAL_I2C_Init+0x1dc>
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	689b      	ldr	r3, [r3, #8]
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d10e      	bne.n	8004eec <HAL_I2C_Init+0x1bc>
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	1e58      	subs	r0, r3, #1
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	6859      	ldr	r1, [r3, #4]
 8004ed6:	460b      	mov	r3, r1
 8004ed8:	005b      	lsls	r3, r3, #1
 8004eda:	440b      	add	r3, r1
 8004edc:	fbb0 f3f3 	udiv	r3, r0, r3
 8004ee0:	3301      	adds	r3, #1
 8004ee2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004ee6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004eea:	e00f      	b.n	8004f0c <HAL_I2C_Init+0x1dc>
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	1e58      	subs	r0, r3, #1
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	6859      	ldr	r1, [r3, #4]
 8004ef4:	460b      	mov	r3, r1
 8004ef6:	009b      	lsls	r3, r3, #2
 8004ef8:	440b      	add	r3, r1
 8004efa:	0099      	lsls	r1, r3, #2
 8004efc:	440b      	add	r3, r1
 8004efe:	fbb0 f3f3 	udiv	r3, r0, r3
 8004f02:	3301      	adds	r3, #1
 8004f04:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004f08:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004f0c:	6879      	ldr	r1, [r7, #4]
 8004f0e:	6809      	ldr	r1, [r1, #0]
 8004f10:	4313      	orrs	r3, r2
 8004f12:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	69da      	ldr	r2, [r3, #28]
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	6a1b      	ldr	r3, [r3, #32]
 8004f26:	431a      	orrs	r2, r3
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	430a      	orrs	r2, r1
 8004f2e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	689b      	ldr	r3, [r3, #8]
 8004f36:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004f3a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004f3e:	687a      	ldr	r2, [r7, #4]
 8004f40:	6911      	ldr	r1, [r2, #16]
 8004f42:	687a      	ldr	r2, [r7, #4]
 8004f44:	68d2      	ldr	r2, [r2, #12]
 8004f46:	4311      	orrs	r1, r2
 8004f48:	687a      	ldr	r2, [r7, #4]
 8004f4a:	6812      	ldr	r2, [r2, #0]
 8004f4c:	430b      	orrs	r3, r1
 8004f4e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	68db      	ldr	r3, [r3, #12]
 8004f56:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	695a      	ldr	r2, [r3, #20]
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	699b      	ldr	r3, [r3, #24]
 8004f62:	431a      	orrs	r2, r3
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	430a      	orrs	r2, r1
 8004f6a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	681a      	ldr	r2, [r3, #0]
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	f042 0201 	orr.w	r2, r2, #1
 8004f7a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	2200      	movs	r2, #0
 8004f80:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	2220      	movs	r2, #32
 8004f86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	2200      	movs	r2, #0
 8004f8e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2200      	movs	r2, #0
 8004f94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004f98:	2300      	movs	r3, #0
}
 8004f9a:	4618      	mov	r0, r3
 8004f9c:	3710      	adds	r7, #16
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	bd80      	pop	{r7, pc}
 8004fa2:	bf00      	nop
 8004fa4:	000186a0 	.word	0x000186a0
 8004fa8:	001e847f 	.word	0x001e847f
 8004fac:	003d08ff 	.word	0x003d08ff
 8004fb0:	431bde83 	.word	0x431bde83
 8004fb4:	10624dd3 	.word	0x10624dd3

08004fb8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004fb8:	b580      	push	{r7, lr}
 8004fba:	b088      	sub	sp, #32
 8004fbc:	af02      	add	r7, sp, #8
 8004fbe:	60f8      	str	r0, [r7, #12]
 8004fc0:	607a      	str	r2, [r7, #4]
 8004fc2:	461a      	mov	r2, r3
 8004fc4:	460b      	mov	r3, r1
 8004fc6:	817b      	strh	r3, [r7, #10]
 8004fc8:	4613      	mov	r3, r2
 8004fca:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004fcc:	f7fe fe9e 	bl	8003d0c <HAL_GetTick>
 8004fd0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fd8:	b2db      	uxtb	r3, r3
 8004fda:	2b20      	cmp	r3, #32
 8004fdc:	f040 80e0 	bne.w	80051a0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004fe0:	697b      	ldr	r3, [r7, #20]
 8004fe2:	9300      	str	r3, [sp, #0]
 8004fe4:	2319      	movs	r3, #25
 8004fe6:	2201      	movs	r2, #1
 8004fe8:	4970      	ldr	r1, [pc, #448]	; (80051ac <HAL_I2C_Master_Transmit+0x1f4>)
 8004fea:	68f8      	ldr	r0, [r7, #12]
 8004fec:	f000 ff72 	bl	8005ed4 <I2C_WaitOnFlagUntilTimeout>
 8004ff0:	4603      	mov	r3, r0
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d001      	beq.n	8004ffa <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8004ff6:	2302      	movs	r3, #2
 8004ff8:	e0d3      	b.n	80051a2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005000:	2b01      	cmp	r3, #1
 8005002:	d101      	bne.n	8005008 <HAL_I2C_Master_Transmit+0x50>
 8005004:	2302      	movs	r3, #2
 8005006:	e0cc      	b.n	80051a2 <HAL_I2C_Master_Transmit+0x1ea>
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	2201      	movs	r2, #1
 800500c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	f003 0301 	and.w	r3, r3, #1
 800501a:	2b01      	cmp	r3, #1
 800501c:	d007      	beq.n	800502e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	681a      	ldr	r2, [r3, #0]
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f042 0201 	orr.w	r2, r2, #1
 800502c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	681a      	ldr	r2, [r3, #0]
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800503c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	2221      	movs	r2, #33	; 0x21
 8005042:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	2210      	movs	r2, #16
 800504a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	2200      	movs	r2, #0
 8005052:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	687a      	ldr	r2, [r7, #4]
 8005058:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	893a      	ldrh	r2, [r7, #8]
 800505e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005064:	b29a      	uxth	r2, r3
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	4a50      	ldr	r2, [pc, #320]	; (80051b0 <HAL_I2C_Master_Transmit+0x1f8>)
 800506e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005070:	8979      	ldrh	r1, [r7, #10]
 8005072:	697b      	ldr	r3, [r7, #20]
 8005074:	6a3a      	ldr	r2, [r7, #32]
 8005076:	68f8      	ldr	r0, [r7, #12]
 8005078:	f000 fd2c 	bl	8005ad4 <I2C_MasterRequestWrite>
 800507c:	4603      	mov	r3, r0
 800507e:	2b00      	cmp	r3, #0
 8005080:	d001      	beq.n	8005086 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8005082:	2301      	movs	r3, #1
 8005084:	e08d      	b.n	80051a2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005086:	2300      	movs	r3, #0
 8005088:	613b      	str	r3, [r7, #16]
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	695b      	ldr	r3, [r3, #20]
 8005090:	613b      	str	r3, [r7, #16]
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	699b      	ldr	r3, [r3, #24]
 8005098:	613b      	str	r3, [r7, #16]
 800509a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800509c:	e066      	b.n	800516c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800509e:	697a      	ldr	r2, [r7, #20]
 80050a0:	6a39      	ldr	r1, [r7, #32]
 80050a2:	68f8      	ldr	r0, [r7, #12]
 80050a4:	f000 ffec 	bl	8006080 <I2C_WaitOnTXEFlagUntilTimeout>
 80050a8:	4603      	mov	r3, r0
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d00d      	beq.n	80050ca <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050b2:	2b04      	cmp	r3, #4
 80050b4:	d107      	bne.n	80050c6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	681a      	ldr	r2, [r3, #0]
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80050c4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80050c6:	2301      	movs	r3, #1
 80050c8:	e06b      	b.n	80051a2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050ce:	781a      	ldrb	r2, [r3, #0]
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050da:	1c5a      	adds	r2, r3, #1
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050e4:	b29b      	uxth	r3, r3
 80050e6:	3b01      	subs	r3, #1
 80050e8:	b29a      	uxth	r2, r3
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050f2:	3b01      	subs	r3, #1
 80050f4:	b29a      	uxth	r2, r3
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	695b      	ldr	r3, [r3, #20]
 8005100:	f003 0304 	and.w	r3, r3, #4
 8005104:	2b04      	cmp	r3, #4
 8005106:	d11b      	bne.n	8005140 <HAL_I2C_Master_Transmit+0x188>
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800510c:	2b00      	cmp	r3, #0
 800510e:	d017      	beq.n	8005140 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005114:	781a      	ldrb	r2, [r3, #0]
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005120:	1c5a      	adds	r2, r3, #1
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800512a:	b29b      	uxth	r3, r3
 800512c:	3b01      	subs	r3, #1
 800512e:	b29a      	uxth	r2, r3
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005138:	3b01      	subs	r3, #1
 800513a:	b29a      	uxth	r2, r3
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005140:	697a      	ldr	r2, [r7, #20]
 8005142:	6a39      	ldr	r1, [r7, #32]
 8005144:	68f8      	ldr	r0, [r7, #12]
 8005146:	f000 ffdc 	bl	8006102 <I2C_WaitOnBTFFlagUntilTimeout>
 800514a:	4603      	mov	r3, r0
 800514c:	2b00      	cmp	r3, #0
 800514e:	d00d      	beq.n	800516c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005154:	2b04      	cmp	r3, #4
 8005156:	d107      	bne.n	8005168 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	681a      	ldr	r2, [r3, #0]
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005166:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005168:	2301      	movs	r3, #1
 800516a:	e01a      	b.n	80051a2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005170:	2b00      	cmp	r3, #0
 8005172:	d194      	bne.n	800509e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	681a      	ldr	r2, [r3, #0]
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005182:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	2220      	movs	r2, #32
 8005188:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	2200      	movs	r2, #0
 8005190:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	2200      	movs	r2, #0
 8005198:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800519c:	2300      	movs	r3, #0
 800519e:	e000      	b.n	80051a2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80051a0:	2302      	movs	r3, #2
  }
}
 80051a2:	4618      	mov	r0, r3
 80051a4:	3718      	adds	r7, #24
 80051a6:	46bd      	mov	sp, r7
 80051a8:	bd80      	pop	{r7, pc}
 80051aa:	bf00      	nop
 80051ac:	00100002 	.word	0x00100002
 80051b0:	ffff0000 	.word	0xffff0000

080051b4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80051b4:	b580      	push	{r7, lr}
 80051b6:	b088      	sub	sp, #32
 80051b8:	af02      	add	r7, sp, #8
 80051ba:	60f8      	str	r0, [r7, #12]
 80051bc:	4608      	mov	r0, r1
 80051be:	4611      	mov	r1, r2
 80051c0:	461a      	mov	r2, r3
 80051c2:	4603      	mov	r3, r0
 80051c4:	817b      	strh	r3, [r7, #10]
 80051c6:	460b      	mov	r3, r1
 80051c8:	813b      	strh	r3, [r7, #8]
 80051ca:	4613      	mov	r3, r2
 80051cc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80051ce:	f7fe fd9d 	bl	8003d0c <HAL_GetTick>
 80051d2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051da:	b2db      	uxtb	r3, r3
 80051dc:	2b20      	cmp	r3, #32
 80051de:	f040 80d9 	bne.w	8005394 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80051e2:	697b      	ldr	r3, [r7, #20]
 80051e4:	9300      	str	r3, [sp, #0]
 80051e6:	2319      	movs	r3, #25
 80051e8:	2201      	movs	r2, #1
 80051ea:	496d      	ldr	r1, [pc, #436]	; (80053a0 <HAL_I2C_Mem_Write+0x1ec>)
 80051ec:	68f8      	ldr	r0, [r7, #12]
 80051ee:	f000 fe71 	bl	8005ed4 <I2C_WaitOnFlagUntilTimeout>
 80051f2:	4603      	mov	r3, r0
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d001      	beq.n	80051fc <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80051f8:	2302      	movs	r3, #2
 80051fa:	e0cc      	b.n	8005396 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005202:	2b01      	cmp	r3, #1
 8005204:	d101      	bne.n	800520a <HAL_I2C_Mem_Write+0x56>
 8005206:	2302      	movs	r3, #2
 8005208:	e0c5      	b.n	8005396 <HAL_I2C_Mem_Write+0x1e2>
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	2201      	movs	r2, #1
 800520e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f003 0301 	and.w	r3, r3, #1
 800521c:	2b01      	cmp	r3, #1
 800521e:	d007      	beq.n	8005230 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	681a      	ldr	r2, [r3, #0]
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	f042 0201 	orr.w	r2, r2, #1
 800522e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	681a      	ldr	r2, [r3, #0]
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800523e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	2221      	movs	r2, #33	; 0x21
 8005244:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	2240      	movs	r2, #64	; 0x40
 800524c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	2200      	movs	r2, #0
 8005254:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	6a3a      	ldr	r2, [r7, #32]
 800525a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005260:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005266:	b29a      	uxth	r2, r3
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	4a4d      	ldr	r2, [pc, #308]	; (80053a4 <HAL_I2C_Mem_Write+0x1f0>)
 8005270:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005272:	88f8      	ldrh	r0, [r7, #6]
 8005274:	893a      	ldrh	r2, [r7, #8]
 8005276:	8979      	ldrh	r1, [r7, #10]
 8005278:	697b      	ldr	r3, [r7, #20]
 800527a:	9301      	str	r3, [sp, #4]
 800527c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800527e:	9300      	str	r3, [sp, #0]
 8005280:	4603      	mov	r3, r0
 8005282:	68f8      	ldr	r0, [r7, #12]
 8005284:	f000 fca8 	bl	8005bd8 <I2C_RequestMemoryWrite>
 8005288:	4603      	mov	r3, r0
 800528a:	2b00      	cmp	r3, #0
 800528c:	d052      	beq.n	8005334 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800528e:	2301      	movs	r3, #1
 8005290:	e081      	b.n	8005396 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005292:	697a      	ldr	r2, [r7, #20]
 8005294:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005296:	68f8      	ldr	r0, [r7, #12]
 8005298:	f000 fef2 	bl	8006080 <I2C_WaitOnTXEFlagUntilTimeout>
 800529c:	4603      	mov	r3, r0
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d00d      	beq.n	80052be <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052a6:	2b04      	cmp	r3, #4
 80052a8:	d107      	bne.n	80052ba <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	681a      	ldr	r2, [r3, #0]
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80052b8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80052ba:	2301      	movs	r3, #1
 80052bc:	e06b      	b.n	8005396 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052c2:	781a      	ldrb	r2, [r3, #0]
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052ce:	1c5a      	adds	r2, r3, #1
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052d8:	3b01      	subs	r3, #1
 80052da:	b29a      	uxth	r2, r3
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052e4:	b29b      	uxth	r3, r3
 80052e6:	3b01      	subs	r3, #1
 80052e8:	b29a      	uxth	r2, r3
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	695b      	ldr	r3, [r3, #20]
 80052f4:	f003 0304 	and.w	r3, r3, #4
 80052f8:	2b04      	cmp	r3, #4
 80052fa:	d11b      	bne.n	8005334 <HAL_I2C_Mem_Write+0x180>
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005300:	2b00      	cmp	r3, #0
 8005302:	d017      	beq.n	8005334 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005308:	781a      	ldrb	r2, [r3, #0]
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005314:	1c5a      	adds	r2, r3, #1
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800531e:	3b01      	subs	r3, #1
 8005320:	b29a      	uxth	r2, r3
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800532a:	b29b      	uxth	r3, r3
 800532c:	3b01      	subs	r3, #1
 800532e:	b29a      	uxth	r2, r3
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005338:	2b00      	cmp	r3, #0
 800533a:	d1aa      	bne.n	8005292 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800533c:	697a      	ldr	r2, [r7, #20]
 800533e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005340:	68f8      	ldr	r0, [r7, #12]
 8005342:	f000 fede 	bl	8006102 <I2C_WaitOnBTFFlagUntilTimeout>
 8005346:	4603      	mov	r3, r0
 8005348:	2b00      	cmp	r3, #0
 800534a:	d00d      	beq.n	8005368 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005350:	2b04      	cmp	r3, #4
 8005352:	d107      	bne.n	8005364 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	681a      	ldr	r2, [r3, #0]
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005362:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005364:	2301      	movs	r3, #1
 8005366:	e016      	b.n	8005396 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	681a      	ldr	r2, [r3, #0]
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005376:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	2220      	movs	r2, #32
 800537c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	2200      	movs	r2, #0
 8005384:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	2200      	movs	r2, #0
 800538c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005390:	2300      	movs	r3, #0
 8005392:	e000      	b.n	8005396 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8005394:	2302      	movs	r3, #2
  }
}
 8005396:	4618      	mov	r0, r3
 8005398:	3718      	adds	r7, #24
 800539a:	46bd      	mov	sp, r7
 800539c:	bd80      	pop	{r7, pc}
 800539e:	bf00      	nop
 80053a0:	00100002 	.word	0x00100002
 80053a4:	ffff0000 	.word	0xffff0000

080053a8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80053a8:	b580      	push	{r7, lr}
 80053aa:	b08c      	sub	sp, #48	; 0x30
 80053ac:	af02      	add	r7, sp, #8
 80053ae:	60f8      	str	r0, [r7, #12]
 80053b0:	4608      	mov	r0, r1
 80053b2:	4611      	mov	r1, r2
 80053b4:	461a      	mov	r2, r3
 80053b6:	4603      	mov	r3, r0
 80053b8:	817b      	strh	r3, [r7, #10]
 80053ba:	460b      	mov	r3, r1
 80053bc:	813b      	strh	r3, [r7, #8]
 80053be:	4613      	mov	r3, r2
 80053c0:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 80053c2:	2300      	movs	r3, #0
 80053c4:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80053c6:	f7fe fca1 	bl	8003d0c <HAL_GetTick>
 80053ca:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053d2:	b2db      	uxtb	r3, r3
 80053d4:	2b20      	cmp	r3, #32
 80053d6:	f040 8244 	bne.w	8005862 <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80053da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053dc:	9300      	str	r3, [sp, #0]
 80053de:	2319      	movs	r3, #25
 80053e0:	2201      	movs	r2, #1
 80053e2:	4982      	ldr	r1, [pc, #520]	; (80055ec <HAL_I2C_Mem_Read+0x244>)
 80053e4:	68f8      	ldr	r0, [r7, #12]
 80053e6:	f000 fd75 	bl	8005ed4 <I2C_WaitOnFlagUntilTimeout>
 80053ea:	4603      	mov	r3, r0
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d001      	beq.n	80053f4 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 80053f0:	2302      	movs	r3, #2
 80053f2:	e237      	b.n	8005864 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80053fa:	2b01      	cmp	r3, #1
 80053fc:	d101      	bne.n	8005402 <HAL_I2C_Mem_Read+0x5a>
 80053fe:	2302      	movs	r3, #2
 8005400:	e230      	b.n	8005864 <HAL_I2C_Mem_Read+0x4bc>
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	2201      	movs	r2, #1
 8005406:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	f003 0301 	and.w	r3, r3, #1
 8005414:	2b01      	cmp	r3, #1
 8005416:	d007      	beq.n	8005428 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	681a      	ldr	r2, [r3, #0]
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	f042 0201 	orr.w	r2, r2, #1
 8005426:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	681a      	ldr	r2, [r3, #0]
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005436:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	2222      	movs	r2, #34	; 0x22
 800543c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	2240      	movs	r2, #64	; 0x40
 8005444:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	2200      	movs	r2, #0
 800544c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005452:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8005458:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800545e:	b29a      	uxth	r2, r3
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	4a62      	ldr	r2, [pc, #392]	; (80055f0 <HAL_I2C_Mem_Read+0x248>)
 8005468:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800546a:	88f8      	ldrh	r0, [r7, #6]
 800546c:	893a      	ldrh	r2, [r7, #8]
 800546e:	8979      	ldrh	r1, [r7, #10]
 8005470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005472:	9301      	str	r3, [sp, #4]
 8005474:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005476:	9300      	str	r3, [sp, #0]
 8005478:	4603      	mov	r3, r0
 800547a:	68f8      	ldr	r0, [r7, #12]
 800547c:	f000 fc42 	bl	8005d04 <I2C_RequestMemoryRead>
 8005480:	4603      	mov	r3, r0
 8005482:	2b00      	cmp	r3, #0
 8005484:	d001      	beq.n	800548a <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8005486:	2301      	movs	r3, #1
 8005488:	e1ec      	b.n	8005864 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800548e:	2b00      	cmp	r3, #0
 8005490:	d113      	bne.n	80054ba <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005492:	2300      	movs	r3, #0
 8005494:	61fb      	str	r3, [r7, #28]
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	695b      	ldr	r3, [r3, #20]
 800549c:	61fb      	str	r3, [r7, #28]
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	699b      	ldr	r3, [r3, #24]
 80054a4:	61fb      	str	r3, [r7, #28]
 80054a6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	681a      	ldr	r2, [r3, #0]
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80054b6:	601a      	str	r2, [r3, #0]
 80054b8:	e1c0      	b.n	800583c <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80054be:	2b01      	cmp	r3, #1
 80054c0:	d11e      	bne.n	8005500 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	681a      	ldr	r2, [r3, #0]
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80054d0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80054d2:	b672      	cpsid	i
}
 80054d4:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80054d6:	2300      	movs	r3, #0
 80054d8:	61bb      	str	r3, [r7, #24]
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	695b      	ldr	r3, [r3, #20]
 80054e0:	61bb      	str	r3, [r7, #24]
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	699b      	ldr	r3, [r3, #24]
 80054e8:	61bb      	str	r3, [r7, #24]
 80054ea:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	681a      	ldr	r2, [r3, #0]
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80054fa:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80054fc:	b662      	cpsie	i
}
 80054fe:	e035      	b.n	800556c <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005504:	2b02      	cmp	r3, #2
 8005506:	d11e      	bne.n	8005546 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	681a      	ldr	r2, [r3, #0]
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005516:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8005518:	b672      	cpsid	i
}
 800551a:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800551c:	2300      	movs	r3, #0
 800551e:	617b      	str	r3, [r7, #20]
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	695b      	ldr	r3, [r3, #20]
 8005526:	617b      	str	r3, [r7, #20]
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	699b      	ldr	r3, [r3, #24]
 800552e:	617b      	str	r3, [r7, #20]
 8005530:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	681a      	ldr	r2, [r3, #0]
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005540:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8005542:	b662      	cpsie	i
}
 8005544:	e012      	b.n	800556c <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	681a      	ldr	r2, [r3, #0]
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005554:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005556:	2300      	movs	r3, #0
 8005558:	613b      	str	r3, [r7, #16]
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	695b      	ldr	r3, [r3, #20]
 8005560:	613b      	str	r3, [r7, #16]
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	699b      	ldr	r3, [r3, #24]
 8005568:	613b      	str	r3, [r7, #16]
 800556a:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 800556c:	e166      	b.n	800583c <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005572:	2b03      	cmp	r3, #3
 8005574:	f200 811f 	bhi.w	80057b6 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800557c:	2b01      	cmp	r3, #1
 800557e:	d123      	bne.n	80055c8 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005580:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005582:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005584:	68f8      	ldr	r0, [r7, #12]
 8005586:	f000 fdfd 	bl	8006184 <I2C_WaitOnRXNEFlagUntilTimeout>
 800558a:	4603      	mov	r3, r0
 800558c:	2b00      	cmp	r3, #0
 800558e:	d001      	beq.n	8005594 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8005590:	2301      	movs	r3, #1
 8005592:	e167      	b.n	8005864 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	691a      	ldr	r2, [r3, #16]
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800559e:	b2d2      	uxtb	r2, r2
 80055a0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055a6:	1c5a      	adds	r2, r3, #1
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80055b0:	3b01      	subs	r3, #1
 80055b2:	b29a      	uxth	r2, r3
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055bc:	b29b      	uxth	r3, r3
 80055be:	3b01      	subs	r3, #1
 80055c0:	b29a      	uxth	r2, r3
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80055c6:	e139      	b.n	800583c <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80055cc:	2b02      	cmp	r3, #2
 80055ce:	d152      	bne.n	8005676 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80055d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055d2:	9300      	str	r3, [sp, #0]
 80055d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055d6:	2200      	movs	r2, #0
 80055d8:	4906      	ldr	r1, [pc, #24]	; (80055f4 <HAL_I2C_Mem_Read+0x24c>)
 80055da:	68f8      	ldr	r0, [r7, #12]
 80055dc:	f000 fc7a 	bl	8005ed4 <I2C_WaitOnFlagUntilTimeout>
 80055e0:	4603      	mov	r3, r0
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d008      	beq.n	80055f8 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 80055e6:	2301      	movs	r3, #1
 80055e8:	e13c      	b.n	8005864 <HAL_I2C_Mem_Read+0x4bc>
 80055ea:	bf00      	nop
 80055ec:	00100002 	.word	0x00100002
 80055f0:	ffff0000 	.word	0xffff0000
 80055f4:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80055f8:	b672      	cpsid	i
}
 80055fa:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	681a      	ldr	r2, [r3, #0]
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800560a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	691a      	ldr	r2, [r3, #16]
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005616:	b2d2      	uxtb	r2, r2
 8005618:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800561e:	1c5a      	adds	r2, r3, #1
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005628:	3b01      	subs	r3, #1
 800562a:	b29a      	uxth	r2, r3
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005634:	b29b      	uxth	r3, r3
 8005636:	3b01      	subs	r3, #1
 8005638:	b29a      	uxth	r2, r3
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800563e:	b662      	cpsie	i
}
 8005640:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	691a      	ldr	r2, [r3, #16]
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800564c:	b2d2      	uxtb	r2, r2
 800564e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005654:	1c5a      	adds	r2, r3, #1
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800565e:	3b01      	subs	r3, #1
 8005660:	b29a      	uxth	r2, r3
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800566a:	b29b      	uxth	r3, r3
 800566c:	3b01      	subs	r3, #1
 800566e:	b29a      	uxth	r2, r3
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005674:	e0e2      	b.n	800583c <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005678:	9300      	str	r3, [sp, #0]
 800567a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800567c:	2200      	movs	r2, #0
 800567e:	497b      	ldr	r1, [pc, #492]	; (800586c <HAL_I2C_Mem_Read+0x4c4>)
 8005680:	68f8      	ldr	r0, [r7, #12]
 8005682:	f000 fc27 	bl	8005ed4 <I2C_WaitOnFlagUntilTimeout>
 8005686:	4603      	mov	r3, r0
 8005688:	2b00      	cmp	r3, #0
 800568a:	d001      	beq.n	8005690 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 800568c:	2301      	movs	r3, #1
 800568e:	e0e9      	b.n	8005864 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	681a      	ldr	r2, [r3, #0]
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800569e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80056a0:	b672      	cpsid	i
}
 80056a2:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	691a      	ldr	r2, [r3, #16]
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056ae:	b2d2      	uxtb	r2, r2
 80056b0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056b6:	1c5a      	adds	r2, r3, #1
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80056c0:	3b01      	subs	r3, #1
 80056c2:	b29a      	uxth	r2, r3
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056cc:	b29b      	uxth	r3, r3
 80056ce:	3b01      	subs	r3, #1
 80056d0:	b29a      	uxth	r2, r3
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80056d6:	4b66      	ldr	r3, [pc, #408]	; (8005870 <HAL_I2C_Mem_Read+0x4c8>)
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	08db      	lsrs	r3, r3, #3
 80056dc:	4a65      	ldr	r2, [pc, #404]	; (8005874 <HAL_I2C_Mem_Read+0x4cc>)
 80056de:	fba2 2303 	umull	r2, r3, r2, r3
 80056e2:	0a1a      	lsrs	r2, r3, #8
 80056e4:	4613      	mov	r3, r2
 80056e6:	009b      	lsls	r3, r3, #2
 80056e8:	4413      	add	r3, r2
 80056ea:	00da      	lsls	r2, r3, #3
 80056ec:	1ad3      	subs	r3, r2, r3
 80056ee:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 80056f0:	6a3b      	ldr	r3, [r7, #32]
 80056f2:	3b01      	subs	r3, #1
 80056f4:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 80056f6:	6a3b      	ldr	r3, [r7, #32]
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d118      	bne.n	800572e <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	2200      	movs	r2, #0
 8005700:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	2220      	movs	r2, #32
 8005706:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	2200      	movs	r2, #0
 800570e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005716:	f043 0220 	orr.w	r2, r3, #32
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800571e:	b662      	cpsie	i
}
 8005720:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	2200      	movs	r2, #0
 8005726:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 800572a:	2301      	movs	r3, #1
 800572c:	e09a      	b.n	8005864 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	695b      	ldr	r3, [r3, #20]
 8005734:	f003 0304 	and.w	r3, r3, #4
 8005738:	2b04      	cmp	r3, #4
 800573a:	d1d9      	bne.n	80056f0 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	681a      	ldr	r2, [r3, #0]
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800574a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	691a      	ldr	r2, [r3, #16]
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005756:	b2d2      	uxtb	r2, r2
 8005758:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800575e:	1c5a      	adds	r2, r3, #1
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005768:	3b01      	subs	r3, #1
 800576a:	b29a      	uxth	r2, r3
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005774:	b29b      	uxth	r3, r3
 8005776:	3b01      	subs	r3, #1
 8005778:	b29a      	uxth	r2, r3
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800577e:	b662      	cpsie	i
}
 8005780:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	691a      	ldr	r2, [r3, #16]
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800578c:	b2d2      	uxtb	r2, r2
 800578e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005794:	1c5a      	adds	r2, r3, #1
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800579e:	3b01      	subs	r3, #1
 80057a0:	b29a      	uxth	r2, r3
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057aa:	b29b      	uxth	r3, r3
 80057ac:	3b01      	subs	r3, #1
 80057ae:	b29a      	uxth	r2, r3
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80057b4:	e042      	b.n	800583c <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80057b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80057b8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80057ba:	68f8      	ldr	r0, [r7, #12]
 80057bc:	f000 fce2 	bl	8006184 <I2C_WaitOnRXNEFlagUntilTimeout>
 80057c0:	4603      	mov	r3, r0
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d001      	beq.n	80057ca <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 80057c6:	2301      	movs	r3, #1
 80057c8:	e04c      	b.n	8005864 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	691a      	ldr	r2, [r3, #16]
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057d4:	b2d2      	uxtb	r2, r2
 80057d6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057dc:	1c5a      	adds	r2, r3, #1
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80057e6:	3b01      	subs	r3, #1
 80057e8:	b29a      	uxth	r2, r3
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057f2:	b29b      	uxth	r3, r3
 80057f4:	3b01      	subs	r3, #1
 80057f6:	b29a      	uxth	r2, r3
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	695b      	ldr	r3, [r3, #20]
 8005802:	f003 0304 	and.w	r3, r3, #4
 8005806:	2b04      	cmp	r3, #4
 8005808:	d118      	bne.n	800583c <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	691a      	ldr	r2, [r3, #16]
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005814:	b2d2      	uxtb	r2, r2
 8005816:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800581c:	1c5a      	adds	r2, r3, #1
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005826:	3b01      	subs	r3, #1
 8005828:	b29a      	uxth	r2, r3
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005832:	b29b      	uxth	r3, r3
 8005834:	3b01      	subs	r3, #1
 8005836:	b29a      	uxth	r2, r3
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005840:	2b00      	cmp	r3, #0
 8005842:	f47f ae94 	bne.w	800556e <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	2220      	movs	r2, #32
 800584a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	2200      	movs	r2, #0
 8005852:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	2200      	movs	r2, #0
 800585a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800585e:	2300      	movs	r3, #0
 8005860:	e000      	b.n	8005864 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 8005862:	2302      	movs	r3, #2
  }
}
 8005864:	4618      	mov	r0, r3
 8005866:	3728      	adds	r7, #40	; 0x28
 8005868:	46bd      	mov	sp, r7
 800586a:	bd80      	pop	{r7, pc}
 800586c:	00010004 	.word	0x00010004
 8005870:	20000010 	.word	0x20000010
 8005874:	14f8b589 	.word	0x14f8b589

08005878 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8005878:	b580      	push	{r7, lr}
 800587a:	b08a      	sub	sp, #40	; 0x28
 800587c:	af02      	add	r7, sp, #8
 800587e:	60f8      	str	r0, [r7, #12]
 8005880:	607a      	str	r2, [r7, #4]
 8005882:	603b      	str	r3, [r7, #0]
 8005884:	460b      	mov	r3, r1
 8005886:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8005888:	f7fe fa40 	bl	8003d0c <HAL_GetTick>
 800588c:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 800588e:	2301      	movs	r3, #1
 8005890:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005898:	b2db      	uxtb	r3, r3
 800589a:	2b20      	cmp	r3, #32
 800589c:	f040 8111 	bne.w	8005ac2 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80058a0:	69fb      	ldr	r3, [r7, #28]
 80058a2:	9300      	str	r3, [sp, #0]
 80058a4:	2319      	movs	r3, #25
 80058a6:	2201      	movs	r2, #1
 80058a8:	4988      	ldr	r1, [pc, #544]	; (8005acc <HAL_I2C_IsDeviceReady+0x254>)
 80058aa:	68f8      	ldr	r0, [r7, #12]
 80058ac:	f000 fb12 	bl	8005ed4 <I2C_WaitOnFlagUntilTimeout>
 80058b0:	4603      	mov	r3, r0
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d001      	beq.n	80058ba <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80058b6:	2302      	movs	r3, #2
 80058b8:	e104      	b.n	8005ac4 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80058c0:	2b01      	cmp	r3, #1
 80058c2:	d101      	bne.n	80058c8 <HAL_I2C_IsDeviceReady+0x50>
 80058c4:	2302      	movs	r3, #2
 80058c6:	e0fd      	b.n	8005ac4 <HAL_I2C_IsDeviceReady+0x24c>
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	2201      	movs	r2, #1
 80058cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	f003 0301 	and.w	r3, r3, #1
 80058da:	2b01      	cmp	r3, #1
 80058dc:	d007      	beq.n	80058ee <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	681a      	ldr	r2, [r3, #0]
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	f042 0201 	orr.w	r2, r2, #1
 80058ec:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	681a      	ldr	r2, [r3, #0]
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80058fc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	2224      	movs	r2, #36	; 0x24
 8005902:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	2200      	movs	r2, #0
 800590a:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	4a70      	ldr	r2, [pc, #448]	; (8005ad0 <HAL_I2C_IsDeviceReady+0x258>)
 8005910:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	681a      	ldr	r2, [r3, #0]
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005920:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8005922:	69fb      	ldr	r3, [r7, #28]
 8005924:	9300      	str	r3, [sp, #0]
 8005926:	683b      	ldr	r3, [r7, #0]
 8005928:	2200      	movs	r2, #0
 800592a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800592e:	68f8      	ldr	r0, [r7, #12]
 8005930:	f000 fad0 	bl	8005ed4 <I2C_WaitOnFlagUntilTimeout>
 8005934:	4603      	mov	r3, r0
 8005936:	2b00      	cmp	r3, #0
 8005938:	d00d      	beq.n	8005956 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005944:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005948:	d103      	bne.n	8005952 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005950:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8005952:	2303      	movs	r3, #3
 8005954:	e0b6      	b.n	8005ac4 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005956:	897b      	ldrh	r3, [r7, #10]
 8005958:	b2db      	uxtb	r3, r3
 800595a:	461a      	mov	r2, r3
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005964:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8005966:	f7fe f9d1 	bl	8003d0c <HAL_GetTick>
 800596a:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	695b      	ldr	r3, [r3, #20]
 8005972:	f003 0302 	and.w	r3, r3, #2
 8005976:	2b02      	cmp	r3, #2
 8005978:	bf0c      	ite	eq
 800597a:	2301      	moveq	r3, #1
 800597c:	2300      	movne	r3, #0
 800597e:	b2db      	uxtb	r3, r3
 8005980:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	695b      	ldr	r3, [r3, #20]
 8005988:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800598c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005990:	bf0c      	ite	eq
 8005992:	2301      	moveq	r3, #1
 8005994:	2300      	movne	r3, #0
 8005996:	b2db      	uxtb	r3, r3
 8005998:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800599a:	e025      	b.n	80059e8 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800599c:	f7fe f9b6 	bl	8003d0c <HAL_GetTick>
 80059a0:	4602      	mov	r2, r0
 80059a2:	69fb      	ldr	r3, [r7, #28]
 80059a4:	1ad3      	subs	r3, r2, r3
 80059a6:	683a      	ldr	r2, [r7, #0]
 80059a8:	429a      	cmp	r2, r3
 80059aa:	d302      	bcc.n	80059b2 <HAL_I2C_IsDeviceReady+0x13a>
 80059ac:	683b      	ldr	r3, [r7, #0]
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d103      	bne.n	80059ba <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	22a0      	movs	r2, #160	; 0xa0
 80059b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	695b      	ldr	r3, [r3, #20]
 80059c0:	f003 0302 	and.w	r3, r3, #2
 80059c4:	2b02      	cmp	r3, #2
 80059c6:	bf0c      	ite	eq
 80059c8:	2301      	moveq	r3, #1
 80059ca:	2300      	movne	r3, #0
 80059cc:	b2db      	uxtb	r3, r3
 80059ce:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	695b      	ldr	r3, [r3, #20]
 80059d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80059da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80059de:	bf0c      	ite	eq
 80059e0:	2301      	moveq	r3, #1
 80059e2:	2300      	movne	r3, #0
 80059e4:	b2db      	uxtb	r3, r3
 80059e6:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80059ee:	b2db      	uxtb	r3, r3
 80059f0:	2ba0      	cmp	r3, #160	; 0xa0
 80059f2:	d005      	beq.n	8005a00 <HAL_I2C_IsDeviceReady+0x188>
 80059f4:	7dfb      	ldrb	r3, [r7, #23]
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d102      	bne.n	8005a00 <HAL_I2C_IsDeviceReady+0x188>
 80059fa:	7dbb      	ldrb	r3, [r7, #22]
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d0cd      	beq.n	800599c <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	2220      	movs	r2, #32
 8005a04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	695b      	ldr	r3, [r3, #20]
 8005a0e:	f003 0302 	and.w	r3, r3, #2
 8005a12:	2b02      	cmp	r3, #2
 8005a14:	d129      	bne.n	8005a6a <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	681a      	ldr	r2, [r3, #0]
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005a24:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005a26:	2300      	movs	r3, #0
 8005a28:	613b      	str	r3, [r7, #16]
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	695b      	ldr	r3, [r3, #20]
 8005a30:	613b      	str	r3, [r7, #16]
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	699b      	ldr	r3, [r3, #24]
 8005a38:	613b      	str	r3, [r7, #16]
 8005a3a:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005a3c:	69fb      	ldr	r3, [r7, #28]
 8005a3e:	9300      	str	r3, [sp, #0]
 8005a40:	2319      	movs	r3, #25
 8005a42:	2201      	movs	r2, #1
 8005a44:	4921      	ldr	r1, [pc, #132]	; (8005acc <HAL_I2C_IsDeviceReady+0x254>)
 8005a46:	68f8      	ldr	r0, [r7, #12]
 8005a48:	f000 fa44 	bl	8005ed4 <I2C_WaitOnFlagUntilTimeout>
 8005a4c:	4603      	mov	r3, r0
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d001      	beq.n	8005a56 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8005a52:	2301      	movs	r3, #1
 8005a54:	e036      	b.n	8005ac4 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	2220      	movs	r2, #32
 8005a5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	2200      	movs	r2, #0
 8005a62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8005a66:	2300      	movs	r3, #0
 8005a68:	e02c      	b.n	8005ac4 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	681a      	ldr	r2, [r3, #0]
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005a78:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005a82:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005a84:	69fb      	ldr	r3, [r7, #28]
 8005a86:	9300      	str	r3, [sp, #0]
 8005a88:	2319      	movs	r3, #25
 8005a8a:	2201      	movs	r2, #1
 8005a8c:	490f      	ldr	r1, [pc, #60]	; (8005acc <HAL_I2C_IsDeviceReady+0x254>)
 8005a8e:	68f8      	ldr	r0, [r7, #12]
 8005a90:	f000 fa20 	bl	8005ed4 <I2C_WaitOnFlagUntilTimeout>
 8005a94:	4603      	mov	r3, r0
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d001      	beq.n	8005a9e <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8005a9a:	2301      	movs	r3, #1
 8005a9c:	e012      	b.n	8005ac4 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8005a9e:	69bb      	ldr	r3, [r7, #24]
 8005aa0:	3301      	adds	r3, #1
 8005aa2:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8005aa4:	69ba      	ldr	r2, [r7, #24]
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	429a      	cmp	r2, r3
 8005aaa:	f4ff af32 	bcc.w	8005912 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	2220      	movs	r2, #32
 8005ab2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	2200      	movs	r2, #0
 8005aba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005abe:	2301      	movs	r3, #1
 8005ac0:	e000      	b.n	8005ac4 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8005ac2:	2302      	movs	r3, #2
  }
}
 8005ac4:	4618      	mov	r0, r3
 8005ac6:	3720      	adds	r7, #32
 8005ac8:	46bd      	mov	sp, r7
 8005aca:	bd80      	pop	{r7, pc}
 8005acc:	00100002 	.word	0x00100002
 8005ad0:	ffff0000 	.word	0xffff0000

08005ad4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005ad4:	b580      	push	{r7, lr}
 8005ad6:	b088      	sub	sp, #32
 8005ad8:	af02      	add	r7, sp, #8
 8005ada:	60f8      	str	r0, [r7, #12]
 8005adc:	607a      	str	r2, [r7, #4]
 8005ade:	603b      	str	r3, [r7, #0]
 8005ae0:	460b      	mov	r3, r1
 8005ae2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ae8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005aea:	697b      	ldr	r3, [r7, #20]
 8005aec:	2b08      	cmp	r3, #8
 8005aee:	d006      	beq.n	8005afe <I2C_MasterRequestWrite+0x2a>
 8005af0:	697b      	ldr	r3, [r7, #20]
 8005af2:	2b01      	cmp	r3, #1
 8005af4:	d003      	beq.n	8005afe <I2C_MasterRequestWrite+0x2a>
 8005af6:	697b      	ldr	r3, [r7, #20]
 8005af8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005afc:	d108      	bne.n	8005b10 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	681a      	ldr	r2, [r3, #0]
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005b0c:	601a      	str	r2, [r3, #0]
 8005b0e:	e00b      	b.n	8005b28 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b14:	2b12      	cmp	r3, #18
 8005b16:	d107      	bne.n	8005b28 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	681a      	ldr	r2, [r3, #0]
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005b26:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005b28:	683b      	ldr	r3, [r7, #0]
 8005b2a:	9300      	str	r3, [sp, #0]
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	2200      	movs	r2, #0
 8005b30:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005b34:	68f8      	ldr	r0, [r7, #12]
 8005b36:	f000 f9cd 	bl	8005ed4 <I2C_WaitOnFlagUntilTimeout>
 8005b3a:	4603      	mov	r3, r0
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d00d      	beq.n	8005b5c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b4a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b4e:	d103      	bne.n	8005b58 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005b56:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005b58:	2303      	movs	r3, #3
 8005b5a:	e035      	b.n	8005bc8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	691b      	ldr	r3, [r3, #16]
 8005b60:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005b64:	d108      	bne.n	8005b78 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005b66:	897b      	ldrh	r3, [r7, #10]
 8005b68:	b2db      	uxtb	r3, r3
 8005b6a:	461a      	mov	r2, r3
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005b74:	611a      	str	r2, [r3, #16]
 8005b76:	e01b      	b.n	8005bb0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005b78:	897b      	ldrh	r3, [r7, #10]
 8005b7a:	11db      	asrs	r3, r3, #7
 8005b7c:	b2db      	uxtb	r3, r3
 8005b7e:	f003 0306 	and.w	r3, r3, #6
 8005b82:	b2db      	uxtb	r3, r3
 8005b84:	f063 030f 	orn	r3, r3, #15
 8005b88:	b2da      	uxtb	r2, r3
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005b90:	683b      	ldr	r3, [r7, #0]
 8005b92:	687a      	ldr	r2, [r7, #4]
 8005b94:	490e      	ldr	r1, [pc, #56]	; (8005bd0 <I2C_MasterRequestWrite+0xfc>)
 8005b96:	68f8      	ldr	r0, [r7, #12]
 8005b98:	f000 f9f3 	bl	8005f82 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005b9c:	4603      	mov	r3, r0
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d001      	beq.n	8005ba6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8005ba2:	2301      	movs	r3, #1
 8005ba4:	e010      	b.n	8005bc8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005ba6:	897b      	ldrh	r3, [r7, #10]
 8005ba8:	b2da      	uxtb	r2, r3
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005bb0:	683b      	ldr	r3, [r7, #0]
 8005bb2:	687a      	ldr	r2, [r7, #4]
 8005bb4:	4907      	ldr	r1, [pc, #28]	; (8005bd4 <I2C_MasterRequestWrite+0x100>)
 8005bb6:	68f8      	ldr	r0, [r7, #12]
 8005bb8:	f000 f9e3 	bl	8005f82 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005bbc:	4603      	mov	r3, r0
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d001      	beq.n	8005bc6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8005bc2:	2301      	movs	r3, #1
 8005bc4:	e000      	b.n	8005bc8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8005bc6:	2300      	movs	r3, #0
}
 8005bc8:	4618      	mov	r0, r3
 8005bca:	3718      	adds	r7, #24
 8005bcc:	46bd      	mov	sp, r7
 8005bce:	bd80      	pop	{r7, pc}
 8005bd0:	00010008 	.word	0x00010008
 8005bd4:	00010002 	.word	0x00010002

08005bd8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005bd8:	b580      	push	{r7, lr}
 8005bda:	b088      	sub	sp, #32
 8005bdc:	af02      	add	r7, sp, #8
 8005bde:	60f8      	str	r0, [r7, #12]
 8005be0:	4608      	mov	r0, r1
 8005be2:	4611      	mov	r1, r2
 8005be4:	461a      	mov	r2, r3
 8005be6:	4603      	mov	r3, r0
 8005be8:	817b      	strh	r3, [r7, #10]
 8005bea:	460b      	mov	r3, r1
 8005bec:	813b      	strh	r3, [r7, #8]
 8005bee:	4613      	mov	r3, r2
 8005bf0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	681a      	ldr	r2, [r3, #0]
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005c00:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c04:	9300      	str	r3, [sp, #0]
 8005c06:	6a3b      	ldr	r3, [r7, #32]
 8005c08:	2200      	movs	r2, #0
 8005c0a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005c0e:	68f8      	ldr	r0, [r7, #12]
 8005c10:	f000 f960 	bl	8005ed4 <I2C_WaitOnFlagUntilTimeout>
 8005c14:	4603      	mov	r3, r0
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d00d      	beq.n	8005c36 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c24:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005c28:	d103      	bne.n	8005c32 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005c30:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005c32:	2303      	movs	r3, #3
 8005c34:	e05f      	b.n	8005cf6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005c36:	897b      	ldrh	r3, [r7, #10]
 8005c38:	b2db      	uxtb	r3, r3
 8005c3a:	461a      	mov	r2, r3
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005c44:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c48:	6a3a      	ldr	r2, [r7, #32]
 8005c4a:	492d      	ldr	r1, [pc, #180]	; (8005d00 <I2C_RequestMemoryWrite+0x128>)
 8005c4c:	68f8      	ldr	r0, [r7, #12]
 8005c4e:	f000 f998 	bl	8005f82 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005c52:	4603      	mov	r3, r0
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d001      	beq.n	8005c5c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8005c58:	2301      	movs	r3, #1
 8005c5a:	e04c      	b.n	8005cf6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005c5c:	2300      	movs	r3, #0
 8005c5e:	617b      	str	r3, [r7, #20]
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	695b      	ldr	r3, [r3, #20]
 8005c66:	617b      	str	r3, [r7, #20]
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	699b      	ldr	r3, [r3, #24]
 8005c6e:	617b      	str	r3, [r7, #20]
 8005c70:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005c72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c74:	6a39      	ldr	r1, [r7, #32]
 8005c76:	68f8      	ldr	r0, [r7, #12]
 8005c78:	f000 fa02 	bl	8006080 <I2C_WaitOnTXEFlagUntilTimeout>
 8005c7c:	4603      	mov	r3, r0
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d00d      	beq.n	8005c9e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c86:	2b04      	cmp	r3, #4
 8005c88:	d107      	bne.n	8005c9a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	681a      	ldr	r2, [r3, #0]
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005c98:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005c9a:	2301      	movs	r3, #1
 8005c9c:	e02b      	b.n	8005cf6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005c9e:	88fb      	ldrh	r3, [r7, #6]
 8005ca0:	2b01      	cmp	r3, #1
 8005ca2:	d105      	bne.n	8005cb0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005ca4:	893b      	ldrh	r3, [r7, #8]
 8005ca6:	b2da      	uxtb	r2, r3
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	611a      	str	r2, [r3, #16]
 8005cae:	e021      	b.n	8005cf4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005cb0:	893b      	ldrh	r3, [r7, #8]
 8005cb2:	0a1b      	lsrs	r3, r3, #8
 8005cb4:	b29b      	uxth	r3, r3
 8005cb6:	b2da      	uxtb	r2, r3
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005cbe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005cc0:	6a39      	ldr	r1, [r7, #32]
 8005cc2:	68f8      	ldr	r0, [r7, #12]
 8005cc4:	f000 f9dc 	bl	8006080 <I2C_WaitOnTXEFlagUntilTimeout>
 8005cc8:	4603      	mov	r3, r0
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d00d      	beq.n	8005cea <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cd2:	2b04      	cmp	r3, #4
 8005cd4:	d107      	bne.n	8005ce6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	681a      	ldr	r2, [r3, #0]
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005ce4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005ce6:	2301      	movs	r3, #1
 8005ce8:	e005      	b.n	8005cf6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005cea:	893b      	ldrh	r3, [r7, #8]
 8005cec:	b2da      	uxtb	r2, r3
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005cf4:	2300      	movs	r3, #0
}
 8005cf6:	4618      	mov	r0, r3
 8005cf8:	3718      	adds	r7, #24
 8005cfa:	46bd      	mov	sp, r7
 8005cfc:	bd80      	pop	{r7, pc}
 8005cfe:	bf00      	nop
 8005d00:	00010002 	.word	0x00010002

08005d04 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005d04:	b580      	push	{r7, lr}
 8005d06:	b088      	sub	sp, #32
 8005d08:	af02      	add	r7, sp, #8
 8005d0a:	60f8      	str	r0, [r7, #12]
 8005d0c:	4608      	mov	r0, r1
 8005d0e:	4611      	mov	r1, r2
 8005d10:	461a      	mov	r2, r3
 8005d12:	4603      	mov	r3, r0
 8005d14:	817b      	strh	r3, [r7, #10]
 8005d16:	460b      	mov	r3, r1
 8005d18:	813b      	strh	r3, [r7, #8]
 8005d1a:	4613      	mov	r3, r2
 8005d1c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	681a      	ldr	r2, [r3, #0]
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005d2c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	681a      	ldr	r2, [r3, #0]
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005d3c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d40:	9300      	str	r3, [sp, #0]
 8005d42:	6a3b      	ldr	r3, [r7, #32]
 8005d44:	2200      	movs	r2, #0
 8005d46:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005d4a:	68f8      	ldr	r0, [r7, #12]
 8005d4c:	f000 f8c2 	bl	8005ed4 <I2C_WaitOnFlagUntilTimeout>
 8005d50:	4603      	mov	r3, r0
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d00d      	beq.n	8005d72 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d60:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005d64:	d103      	bne.n	8005d6e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005d6c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005d6e:	2303      	movs	r3, #3
 8005d70:	e0aa      	b.n	8005ec8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005d72:	897b      	ldrh	r3, [r7, #10]
 8005d74:	b2db      	uxtb	r3, r3
 8005d76:	461a      	mov	r2, r3
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005d80:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d84:	6a3a      	ldr	r2, [r7, #32]
 8005d86:	4952      	ldr	r1, [pc, #328]	; (8005ed0 <I2C_RequestMemoryRead+0x1cc>)
 8005d88:	68f8      	ldr	r0, [r7, #12]
 8005d8a:	f000 f8fa 	bl	8005f82 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005d8e:	4603      	mov	r3, r0
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d001      	beq.n	8005d98 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8005d94:	2301      	movs	r3, #1
 8005d96:	e097      	b.n	8005ec8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005d98:	2300      	movs	r3, #0
 8005d9a:	617b      	str	r3, [r7, #20]
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	695b      	ldr	r3, [r3, #20]
 8005da2:	617b      	str	r3, [r7, #20]
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	699b      	ldr	r3, [r3, #24]
 8005daa:	617b      	str	r3, [r7, #20]
 8005dac:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005dae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005db0:	6a39      	ldr	r1, [r7, #32]
 8005db2:	68f8      	ldr	r0, [r7, #12]
 8005db4:	f000 f964 	bl	8006080 <I2C_WaitOnTXEFlagUntilTimeout>
 8005db8:	4603      	mov	r3, r0
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d00d      	beq.n	8005dda <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dc2:	2b04      	cmp	r3, #4
 8005dc4:	d107      	bne.n	8005dd6 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	681a      	ldr	r2, [r3, #0]
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005dd4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005dd6:	2301      	movs	r3, #1
 8005dd8:	e076      	b.n	8005ec8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005dda:	88fb      	ldrh	r3, [r7, #6]
 8005ddc:	2b01      	cmp	r3, #1
 8005dde:	d105      	bne.n	8005dec <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005de0:	893b      	ldrh	r3, [r7, #8]
 8005de2:	b2da      	uxtb	r2, r3
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	611a      	str	r2, [r3, #16]
 8005dea:	e021      	b.n	8005e30 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005dec:	893b      	ldrh	r3, [r7, #8]
 8005dee:	0a1b      	lsrs	r3, r3, #8
 8005df0:	b29b      	uxth	r3, r3
 8005df2:	b2da      	uxtb	r2, r3
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005dfa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005dfc:	6a39      	ldr	r1, [r7, #32]
 8005dfe:	68f8      	ldr	r0, [r7, #12]
 8005e00:	f000 f93e 	bl	8006080 <I2C_WaitOnTXEFlagUntilTimeout>
 8005e04:	4603      	mov	r3, r0
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d00d      	beq.n	8005e26 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e0e:	2b04      	cmp	r3, #4
 8005e10:	d107      	bne.n	8005e22 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	681a      	ldr	r2, [r3, #0]
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005e20:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005e22:	2301      	movs	r3, #1
 8005e24:	e050      	b.n	8005ec8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005e26:	893b      	ldrh	r3, [r7, #8]
 8005e28:	b2da      	uxtb	r2, r3
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005e30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e32:	6a39      	ldr	r1, [r7, #32]
 8005e34:	68f8      	ldr	r0, [r7, #12]
 8005e36:	f000 f923 	bl	8006080 <I2C_WaitOnTXEFlagUntilTimeout>
 8005e3a:	4603      	mov	r3, r0
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d00d      	beq.n	8005e5c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e44:	2b04      	cmp	r3, #4
 8005e46:	d107      	bne.n	8005e58 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	681a      	ldr	r2, [r3, #0]
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005e56:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005e58:	2301      	movs	r3, #1
 8005e5a:	e035      	b.n	8005ec8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	681a      	ldr	r2, [r3, #0]
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005e6a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e6e:	9300      	str	r3, [sp, #0]
 8005e70:	6a3b      	ldr	r3, [r7, #32]
 8005e72:	2200      	movs	r2, #0
 8005e74:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005e78:	68f8      	ldr	r0, [r7, #12]
 8005e7a:	f000 f82b 	bl	8005ed4 <I2C_WaitOnFlagUntilTimeout>
 8005e7e:	4603      	mov	r3, r0
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d00d      	beq.n	8005ea0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e8e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005e92:	d103      	bne.n	8005e9c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005e9a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005e9c:	2303      	movs	r3, #3
 8005e9e:	e013      	b.n	8005ec8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005ea0:	897b      	ldrh	r3, [r7, #10]
 8005ea2:	b2db      	uxtb	r3, r3
 8005ea4:	f043 0301 	orr.w	r3, r3, #1
 8005ea8:	b2da      	uxtb	r2, r3
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eb2:	6a3a      	ldr	r2, [r7, #32]
 8005eb4:	4906      	ldr	r1, [pc, #24]	; (8005ed0 <I2C_RequestMemoryRead+0x1cc>)
 8005eb6:	68f8      	ldr	r0, [r7, #12]
 8005eb8:	f000 f863 	bl	8005f82 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005ebc:	4603      	mov	r3, r0
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d001      	beq.n	8005ec6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8005ec2:	2301      	movs	r3, #1
 8005ec4:	e000      	b.n	8005ec8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8005ec6:	2300      	movs	r3, #0
}
 8005ec8:	4618      	mov	r0, r3
 8005eca:	3718      	adds	r7, #24
 8005ecc:	46bd      	mov	sp, r7
 8005ece:	bd80      	pop	{r7, pc}
 8005ed0:	00010002 	.word	0x00010002

08005ed4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005ed4:	b580      	push	{r7, lr}
 8005ed6:	b084      	sub	sp, #16
 8005ed8:	af00      	add	r7, sp, #0
 8005eda:	60f8      	str	r0, [r7, #12]
 8005edc:	60b9      	str	r1, [r7, #8]
 8005ede:	603b      	str	r3, [r7, #0]
 8005ee0:	4613      	mov	r3, r2
 8005ee2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005ee4:	e025      	b.n	8005f32 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005ee6:	683b      	ldr	r3, [r7, #0]
 8005ee8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005eec:	d021      	beq.n	8005f32 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005eee:	f7fd ff0d 	bl	8003d0c <HAL_GetTick>
 8005ef2:	4602      	mov	r2, r0
 8005ef4:	69bb      	ldr	r3, [r7, #24]
 8005ef6:	1ad3      	subs	r3, r2, r3
 8005ef8:	683a      	ldr	r2, [r7, #0]
 8005efa:	429a      	cmp	r2, r3
 8005efc:	d302      	bcc.n	8005f04 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005efe:	683b      	ldr	r3, [r7, #0]
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d116      	bne.n	8005f32 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	2200      	movs	r2, #0
 8005f08:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	2220      	movs	r2, #32
 8005f0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	2200      	movs	r2, #0
 8005f16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f1e:	f043 0220 	orr.w	r2, r3, #32
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	2200      	movs	r2, #0
 8005f2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005f2e:	2301      	movs	r3, #1
 8005f30:	e023      	b.n	8005f7a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005f32:	68bb      	ldr	r3, [r7, #8]
 8005f34:	0c1b      	lsrs	r3, r3, #16
 8005f36:	b2db      	uxtb	r3, r3
 8005f38:	2b01      	cmp	r3, #1
 8005f3a:	d10d      	bne.n	8005f58 <I2C_WaitOnFlagUntilTimeout+0x84>
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	695b      	ldr	r3, [r3, #20]
 8005f42:	43da      	mvns	r2, r3
 8005f44:	68bb      	ldr	r3, [r7, #8]
 8005f46:	4013      	ands	r3, r2
 8005f48:	b29b      	uxth	r3, r3
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	bf0c      	ite	eq
 8005f4e:	2301      	moveq	r3, #1
 8005f50:	2300      	movne	r3, #0
 8005f52:	b2db      	uxtb	r3, r3
 8005f54:	461a      	mov	r2, r3
 8005f56:	e00c      	b.n	8005f72 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	699b      	ldr	r3, [r3, #24]
 8005f5e:	43da      	mvns	r2, r3
 8005f60:	68bb      	ldr	r3, [r7, #8]
 8005f62:	4013      	ands	r3, r2
 8005f64:	b29b      	uxth	r3, r3
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	bf0c      	ite	eq
 8005f6a:	2301      	moveq	r3, #1
 8005f6c:	2300      	movne	r3, #0
 8005f6e:	b2db      	uxtb	r3, r3
 8005f70:	461a      	mov	r2, r3
 8005f72:	79fb      	ldrb	r3, [r7, #7]
 8005f74:	429a      	cmp	r2, r3
 8005f76:	d0b6      	beq.n	8005ee6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005f78:	2300      	movs	r3, #0
}
 8005f7a:	4618      	mov	r0, r3
 8005f7c:	3710      	adds	r7, #16
 8005f7e:	46bd      	mov	sp, r7
 8005f80:	bd80      	pop	{r7, pc}

08005f82 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005f82:	b580      	push	{r7, lr}
 8005f84:	b084      	sub	sp, #16
 8005f86:	af00      	add	r7, sp, #0
 8005f88:	60f8      	str	r0, [r7, #12]
 8005f8a:	60b9      	str	r1, [r7, #8]
 8005f8c:	607a      	str	r2, [r7, #4]
 8005f8e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005f90:	e051      	b.n	8006036 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	695b      	ldr	r3, [r3, #20]
 8005f98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005f9c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005fa0:	d123      	bne.n	8005fea <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	681a      	ldr	r2, [r3, #0]
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005fb0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005fba:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	2200      	movs	r2, #0
 8005fc0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	2220      	movs	r2, #32
 8005fc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	2200      	movs	r2, #0
 8005fce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fd6:	f043 0204 	orr.w	r2, r3, #4
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	2200      	movs	r2, #0
 8005fe2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005fe6:	2301      	movs	r3, #1
 8005fe8:	e046      	b.n	8006078 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005ff0:	d021      	beq.n	8006036 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ff2:	f7fd fe8b 	bl	8003d0c <HAL_GetTick>
 8005ff6:	4602      	mov	r2, r0
 8005ff8:	683b      	ldr	r3, [r7, #0]
 8005ffa:	1ad3      	subs	r3, r2, r3
 8005ffc:	687a      	ldr	r2, [r7, #4]
 8005ffe:	429a      	cmp	r2, r3
 8006000:	d302      	bcc.n	8006008 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	2b00      	cmp	r3, #0
 8006006:	d116      	bne.n	8006036 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	2200      	movs	r2, #0
 800600c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	2220      	movs	r2, #32
 8006012:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	2200      	movs	r2, #0
 800601a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006022:	f043 0220 	orr.w	r2, r3, #32
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	2200      	movs	r2, #0
 800602e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006032:	2301      	movs	r3, #1
 8006034:	e020      	b.n	8006078 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006036:	68bb      	ldr	r3, [r7, #8]
 8006038:	0c1b      	lsrs	r3, r3, #16
 800603a:	b2db      	uxtb	r3, r3
 800603c:	2b01      	cmp	r3, #1
 800603e:	d10c      	bne.n	800605a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	695b      	ldr	r3, [r3, #20]
 8006046:	43da      	mvns	r2, r3
 8006048:	68bb      	ldr	r3, [r7, #8]
 800604a:	4013      	ands	r3, r2
 800604c:	b29b      	uxth	r3, r3
 800604e:	2b00      	cmp	r3, #0
 8006050:	bf14      	ite	ne
 8006052:	2301      	movne	r3, #1
 8006054:	2300      	moveq	r3, #0
 8006056:	b2db      	uxtb	r3, r3
 8006058:	e00b      	b.n	8006072 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	699b      	ldr	r3, [r3, #24]
 8006060:	43da      	mvns	r2, r3
 8006062:	68bb      	ldr	r3, [r7, #8]
 8006064:	4013      	ands	r3, r2
 8006066:	b29b      	uxth	r3, r3
 8006068:	2b00      	cmp	r3, #0
 800606a:	bf14      	ite	ne
 800606c:	2301      	movne	r3, #1
 800606e:	2300      	moveq	r3, #0
 8006070:	b2db      	uxtb	r3, r3
 8006072:	2b00      	cmp	r3, #0
 8006074:	d18d      	bne.n	8005f92 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8006076:	2300      	movs	r3, #0
}
 8006078:	4618      	mov	r0, r3
 800607a:	3710      	adds	r7, #16
 800607c:	46bd      	mov	sp, r7
 800607e:	bd80      	pop	{r7, pc}

08006080 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006080:	b580      	push	{r7, lr}
 8006082:	b084      	sub	sp, #16
 8006084:	af00      	add	r7, sp, #0
 8006086:	60f8      	str	r0, [r7, #12]
 8006088:	60b9      	str	r1, [r7, #8]
 800608a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800608c:	e02d      	b.n	80060ea <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800608e:	68f8      	ldr	r0, [r7, #12]
 8006090:	f000 f8ce 	bl	8006230 <I2C_IsAcknowledgeFailed>
 8006094:	4603      	mov	r3, r0
 8006096:	2b00      	cmp	r3, #0
 8006098:	d001      	beq.n	800609e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800609a:	2301      	movs	r3, #1
 800609c:	e02d      	b.n	80060fa <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800609e:	68bb      	ldr	r3, [r7, #8]
 80060a0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80060a4:	d021      	beq.n	80060ea <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80060a6:	f7fd fe31 	bl	8003d0c <HAL_GetTick>
 80060aa:	4602      	mov	r2, r0
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	1ad3      	subs	r3, r2, r3
 80060b0:	68ba      	ldr	r2, [r7, #8]
 80060b2:	429a      	cmp	r2, r3
 80060b4:	d302      	bcc.n	80060bc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80060b6:	68bb      	ldr	r3, [r7, #8]
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d116      	bne.n	80060ea <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	2200      	movs	r2, #0
 80060c0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	2220      	movs	r2, #32
 80060c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	2200      	movs	r2, #0
 80060ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060d6:	f043 0220 	orr.w	r2, r3, #32
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	2200      	movs	r2, #0
 80060e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80060e6:	2301      	movs	r3, #1
 80060e8:	e007      	b.n	80060fa <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	695b      	ldr	r3, [r3, #20]
 80060f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060f4:	2b80      	cmp	r3, #128	; 0x80
 80060f6:	d1ca      	bne.n	800608e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80060f8:	2300      	movs	r3, #0
}
 80060fa:	4618      	mov	r0, r3
 80060fc:	3710      	adds	r7, #16
 80060fe:	46bd      	mov	sp, r7
 8006100:	bd80      	pop	{r7, pc}

08006102 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006102:	b580      	push	{r7, lr}
 8006104:	b084      	sub	sp, #16
 8006106:	af00      	add	r7, sp, #0
 8006108:	60f8      	str	r0, [r7, #12]
 800610a:	60b9      	str	r1, [r7, #8]
 800610c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800610e:	e02d      	b.n	800616c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006110:	68f8      	ldr	r0, [r7, #12]
 8006112:	f000 f88d 	bl	8006230 <I2C_IsAcknowledgeFailed>
 8006116:	4603      	mov	r3, r0
 8006118:	2b00      	cmp	r3, #0
 800611a:	d001      	beq.n	8006120 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800611c:	2301      	movs	r3, #1
 800611e:	e02d      	b.n	800617c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006120:	68bb      	ldr	r3, [r7, #8]
 8006122:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006126:	d021      	beq.n	800616c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006128:	f7fd fdf0 	bl	8003d0c <HAL_GetTick>
 800612c:	4602      	mov	r2, r0
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	1ad3      	subs	r3, r2, r3
 8006132:	68ba      	ldr	r2, [r7, #8]
 8006134:	429a      	cmp	r2, r3
 8006136:	d302      	bcc.n	800613e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006138:	68bb      	ldr	r3, [r7, #8]
 800613a:	2b00      	cmp	r3, #0
 800613c:	d116      	bne.n	800616c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	2200      	movs	r2, #0
 8006142:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	2220      	movs	r2, #32
 8006148:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	2200      	movs	r2, #0
 8006150:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006158:	f043 0220 	orr.w	r2, r3, #32
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	2200      	movs	r2, #0
 8006164:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006168:	2301      	movs	r3, #1
 800616a:	e007      	b.n	800617c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	695b      	ldr	r3, [r3, #20]
 8006172:	f003 0304 	and.w	r3, r3, #4
 8006176:	2b04      	cmp	r3, #4
 8006178:	d1ca      	bne.n	8006110 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800617a:	2300      	movs	r3, #0
}
 800617c:	4618      	mov	r0, r3
 800617e:	3710      	adds	r7, #16
 8006180:	46bd      	mov	sp, r7
 8006182:	bd80      	pop	{r7, pc}

08006184 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006184:	b580      	push	{r7, lr}
 8006186:	b084      	sub	sp, #16
 8006188:	af00      	add	r7, sp, #0
 800618a:	60f8      	str	r0, [r7, #12]
 800618c:	60b9      	str	r1, [r7, #8]
 800618e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006190:	e042      	b.n	8006218 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	695b      	ldr	r3, [r3, #20]
 8006198:	f003 0310 	and.w	r3, r3, #16
 800619c:	2b10      	cmp	r3, #16
 800619e:	d119      	bne.n	80061d4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	f06f 0210 	mvn.w	r2, #16
 80061a8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	2200      	movs	r2, #0
 80061ae:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	2220      	movs	r2, #32
 80061b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	2200      	movs	r2, #0
 80061bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	2200      	movs	r2, #0
 80061cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80061d0:	2301      	movs	r3, #1
 80061d2:	e029      	b.n	8006228 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80061d4:	f7fd fd9a 	bl	8003d0c <HAL_GetTick>
 80061d8:	4602      	mov	r2, r0
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	1ad3      	subs	r3, r2, r3
 80061de:	68ba      	ldr	r2, [r7, #8]
 80061e0:	429a      	cmp	r2, r3
 80061e2:	d302      	bcc.n	80061ea <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80061e4:	68bb      	ldr	r3, [r7, #8]
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d116      	bne.n	8006218 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	2200      	movs	r2, #0
 80061ee:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	2220      	movs	r2, #32
 80061f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	2200      	movs	r2, #0
 80061fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006204:	f043 0220 	orr.w	r2, r3, #32
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	2200      	movs	r2, #0
 8006210:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006214:	2301      	movs	r3, #1
 8006216:	e007      	b.n	8006228 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	695b      	ldr	r3, [r3, #20]
 800621e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006222:	2b40      	cmp	r3, #64	; 0x40
 8006224:	d1b5      	bne.n	8006192 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006226:	2300      	movs	r3, #0
}
 8006228:	4618      	mov	r0, r3
 800622a:	3710      	adds	r7, #16
 800622c:	46bd      	mov	sp, r7
 800622e:	bd80      	pop	{r7, pc}

08006230 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006230:	b480      	push	{r7}
 8006232:	b083      	sub	sp, #12
 8006234:	af00      	add	r7, sp, #0
 8006236:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	695b      	ldr	r3, [r3, #20]
 800623e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006242:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006246:	d11b      	bne.n	8006280 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006250:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	2200      	movs	r2, #0
 8006256:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	2220      	movs	r2, #32
 800625c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	2200      	movs	r2, #0
 8006264:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800626c:	f043 0204 	orr.w	r2, r3, #4
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	2200      	movs	r2, #0
 8006278:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800627c:	2301      	movs	r3, #1
 800627e:	e000      	b.n	8006282 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006280:	2300      	movs	r3, #0
}
 8006282:	4618      	mov	r0, r3
 8006284:	370c      	adds	r7, #12
 8006286:	46bd      	mov	sp, r7
 8006288:	bc80      	pop	{r7}
 800628a:	4770      	bx	lr

0800628c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800628c:	b580      	push	{r7, lr}
 800628e:	b086      	sub	sp, #24
 8006290:	af00      	add	r7, sp, #0
 8006292:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	2b00      	cmp	r3, #0
 8006298:	d101      	bne.n	800629e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800629a:	2301      	movs	r3, #1
 800629c:	e26c      	b.n	8006778 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	f003 0301 	and.w	r3, r3, #1
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	f000 8087 	beq.w	80063ba <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80062ac:	4b92      	ldr	r3, [pc, #584]	; (80064f8 <HAL_RCC_OscConfig+0x26c>)
 80062ae:	685b      	ldr	r3, [r3, #4]
 80062b0:	f003 030c 	and.w	r3, r3, #12
 80062b4:	2b04      	cmp	r3, #4
 80062b6:	d00c      	beq.n	80062d2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80062b8:	4b8f      	ldr	r3, [pc, #572]	; (80064f8 <HAL_RCC_OscConfig+0x26c>)
 80062ba:	685b      	ldr	r3, [r3, #4]
 80062bc:	f003 030c 	and.w	r3, r3, #12
 80062c0:	2b08      	cmp	r3, #8
 80062c2:	d112      	bne.n	80062ea <HAL_RCC_OscConfig+0x5e>
 80062c4:	4b8c      	ldr	r3, [pc, #560]	; (80064f8 <HAL_RCC_OscConfig+0x26c>)
 80062c6:	685b      	ldr	r3, [r3, #4]
 80062c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80062cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80062d0:	d10b      	bne.n	80062ea <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80062d2:	4b89      	ldr	r3, [pc, #548]	; (80064f8 <HAL_RCC_OscConfig+0x26c>)
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d06c      	beq.n	80063b8 <HAL_RCC_OscConfig+0x12c>
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	685b      	ldr	r3, [r3, #4]
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d168      	bne.n	80063b8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80062e6:	2301      	movs	r3, #1
 80062e8:	e246      	b.n	8006778 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	685b      	ldr	r3, [r3, #4]
 80062ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80062f2:	d106      	bne.n	8006302 <HAL_RCC_OscConfig+0x76>
 80062f4:	4b80      	ldr	r3, [pc, #512]	; (80064f8 <HAL_RCC_OscConfig+0x26c>)
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	4a7f      	ldr	r2, [pc, #508]	; (80064f8 <HAL_RCC_OscConfig+0x26c>)
 80062fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80062fe:	6013      	str	r3, [r2, #0]
 8006300:	e02e      	b.n	8006360 <HAL_RCC_OscConfig+0xd4>
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	685b      	ldr	r3, [r3, #4]
 8006306:	2b00      	cmp	r3, #0
 8006308:	d10c      	bne.n	8006324 <HAL_RCC_OscConfig+0x98>
 800630a:	4b7b      	ldr	r3, [pc, #492]	; (80064f8 <HAL_RCC_OscConfig+0x26c>)
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	4a7a      	ldr	r2, [pc, #488]	; (80064f8 <HAL_RCC_OscConfig+0x26c>)
 8006310:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006314:	6013      	str	r3, [r2, #0]
 8006316:	4b78      	ldr	r3, [pc, #480]	; (80064f8 <HAL_RCC_OscConfig+0x26c>)
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	4a77      	ldr	r2, [pc, #476]	; (80064f8 <HAL_RCC_OscConfig+0x26c>)
 800631c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006320:	6013      	str	r3, [r2, #0]
 8006322:	e01d      	b.n	8006360 <HAL_RCC_OscConfig+0xd4>
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	685b      	ldr	r3, [r3, #4]
 8006328:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800632c:	d10c      	bne.n	8006348 <HAL_RCC_OscConfig+0xbc>
 800632e:	4b72      	ldr	r3, [pc, #456]	; (80064f8 <HAL_RCC_OscConfig+0x26c>)
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	4a71      	ldr	r2, [pc, #452]	; (80064f8 <HAL_RCC_OscConfig+0x26c>)
 8006334:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006338:	6013      	str	r3, [r2, #0]
 800633a:	4b6f      	ldr	r3, [pc, #444]	; (80064f8 <HAL_RCC_OscConfig+0x26c>)
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	4a6e      	ldr	r2, [pc, #440]	; (80064f8 <HAL_RCC_OscConfig+0x26c>)
 8006340:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006344:	6013      	str	r3, [r2, #0]
 8006346:	e00b      	b.n	8006360 <HAL_RCC_OscConfig+0xd4>
 8006348:	4b6b      	ldr	r3, [pc, #428]	; (80064f8 <HAL_RCC_OscConfig+0x26c>)
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	4a6a      	ldr	r2, [pc, #424]	; (80064f8 <HAL_RCC_OscConfig+0x26c>)
 800634e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006352:	6013      	str	r3, [r2, #0]
 8006354:	4b68      	ldr	r3, [pc, #416]	; (80064f8 <HAL_RCC_OscConfig+0x26c>)
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	4a67      	ldr	r2, [pc, #412]	; (80064f8 <HAL_RCC_OscConfig+0x26c>)
 800635a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800635e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	685b      	ldr	r3, [r3, #4]
 8006364:	2b00      	cmp	r3, #0
 8006366:	d013      	beq.n	8006390 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006368:	f7fd fcd0 	bl	8003d0c <HAL_GetTick>
 800636c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800636e:	e008      	b.n	8006382 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006370:	f7fd fccc 	bl	8003d0c <HAL_GetTick>
 8006374:	4602      	mov	r2, r0
 8006376:	693b      	ldr	r3, [r7, #16]
 8006378:	1ad3      	subs	r3, r2, r3
 800637a:	2b64      	cmp	r3, #100	; 0x64
 800637c:	d901      	bls.n	8006382 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800637e:	2303      	movs	r3, #3
 8006380:	e1fa      	b.n	8006778 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006382:	4b5d      	ldr	r3, [pc, #372]	; (80064f8 <HAL_RCC_OscConfig+0x26c>)
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800638a:	2b00      	cmp	r3, #0
 800638c:	d0f0      	beq.n	8006370 <HAL_RCC_OscConfig+0xe4>
 800638e:	e014      	b.n	80063ba <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006390:	f7fd fcbc 	bl	8003d0c <HAL_GetTick>
 8006394:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006396:	e008      	b.n	80063aa <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006398:	f7fd fcb8 	bl	8003d0c <HAL_GetTick>
 800639c:	4602      	mov	r2, r0
 800639e:	693b      	ldr	r3, [r7, #16]
 80063a0:	1ad3      	subs	r3, r2, r3
 80063a2:	2b64      	cmp	r3, #100	; 0x64
 80063a4:	d901      	bls.n	80063aa <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80063a6:	2303      	movs	r3, #3
 80063a8:	e1e6      	b.n	8006778 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80063aa:	4b53      	ldr	r3, [pc, #332]	; (80064f8 <HAL_RCC_OscConfig+0x26c>)
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d1f0      	bne.n	8006398 <HAL_RCC_OscConfig+0x10c>
 80063b6:	e000      	b.n	80063ba <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80063b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	f003 0302 	and.w	r3, r3, #2
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d063      	beq.n	800648e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80063c6:	4b4c      	ldr	r3, [pc, #304]	; (80064f8 <HAL_RCC_OscConfig+0x26c>)
 80063c8:	685b      	ldr	r3, [r3, #4]
 80063ca:	f003 030c 	and.w	r3, r3, #12
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d00b      	beq.n	80063ea <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80063d2:	4b49      	ldr	r3, [pc, #292]	; (80064f8 <HAL_RCC_OscConfig+0x26c>)
 80063d4:	685b      	ldr	r3, [r3, #4]
 80063d6:	f003 030c 	and.w	r3, r3, #12
 80063da:	2b08      	cmp	r3, #8
 80063dc:	d11c      	bne.n	8006418 <HAL_RCC_OscConfig+0x18c>
 80063de:	4b46      	ldr	r3, [pc, #280]	; (80064f8 <HAL_RCC_OscConfig+0x26c>)
 80063e0:	685b      	ldr	r3, [r3, #4]
 80063e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d116      	bne.n	8006418 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80063ea:	4b43      	ldr	r3, [pc, #268]	; (80064f8 <HAL_RCC_OscConfig+0x26c>)
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	f003 0302 	and.w	r3, r3, #2
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d005      	beq.n	8006402 <HAL_RCC_OscConfig+0x176>
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	691b      	ldr	r3, [r3, #16]
 80063fa:	2b01      	cmp	r3, #1
 80063fc:	d001      	beq.n	8006402 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80063fe:	2301      	movs	r3, #1
 8006400:	e1ba      	b.n	8006778 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006402:	4b3d      	ldr	r3, [pc, #244]	; (80064f8 <HAL_RCC_OscConfig+0x26c>)
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	695b      	ldr	r3, [r3, #20]
 800640e:	00db      	lsls	r3, r3, #3
 8006410:	4939      	ldr	r1, [pc, #228]	; (80064f8 <HAL_RCC_OscConfig+0x26c>)
 8006412:	4313      	orrs	r3, r2
 8006414:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006416:	e03a      	b.n	800648e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	691b      	ldr	r3, [r3, #16]
 800641c:	2b00      	cmp	r3, #0
 800641e:	d020      	beq.n	8006462 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006420:	4b36      	ldr	r3, [pc, #216]	; (80064fc <HAL_RCC_OscConfig+0x270>)
 8006422:	2201      	movs	r2, #1
 8006424:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006426:	f7fd fc71 	bl	8003d0c <HAL_GetTick>
 800642a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800642c:	e008      	b.n	8006440 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800642e:	f7fd fc6d 	bl	8003d0c <HAL_GetTick>
 8006432:	4602      	mov	r2, r0
 8006434:	693b      	ldr	r3, [r7, #16]
 8006436:	1ad3      	subs	r3, r2, r3
 8006438:	2b02      	cmp	r3, #2
 800643a:	d901      	bls.n	8006440 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800643c:	2303      	movs	r3, #3
 800643e:	e19b      	b.n	8006778 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006440:	4b2d      	ldr	r3, [pc, #180]	; (80064f8 <HAL_RCC_OscConfig+0x26c>)
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	f003 0302 	and.w	r3, r3, #2
 8006448:	2b00      	cmp	r3, #0
 800644a:	d0f0      	beq.n	800642e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800644c:	4b2a      	ldr	r3, [pc, #168]	; (80064f8 <HAL_RCC_OscConfig+0x26c>)
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	695b      	ldr	r3, [r3, #20]
 8006458:	00db      	lsls	r3, r3, #3
 800645a:	4927      	ldr	r1, [pc, #156]	; (80064f8 <HAL_RCC_OscConfig+0x26c>)
 800645c:	4313      	orrs	r3, r2
 800645e:	600b      	str	r3, [r1, #0]
 8006460:	e015      	b.n	800648e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006462:	4b26      	ldr	r3, [pc, #152]	; (80064fc <HAL_RCC_OscConfig+0x270>)
 8006464:	2200      	movs	r2, #0
 8006466:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006468:	f7fd fc50 	bl	8003d0c <HAL_GetTick>
 800646c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800646e:	e008      	b.n	8006482 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006470:	f7fd fc4c 	bl	8003d0c <HAL_GetTick>
 8006474:	4602      	mov	r2, r0
 8006476:	693b      	ldr	r3, [r7, #16]
 8006478:	1ad3      	subs	r3, r2, r3
 800647a:	2b02      	cmp	r3, #2
 800647c:	d901      	bls.n	8006482 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800647e:	2303      	movs	r3, #3
 8006480:	e17a      	b.n	8006778 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006482:	4b1d      	ldr	r3, [pc, #116]	; (80064f8 <HAL_RCC_OscConfig+0x26c>)
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	f003 0302 	and.w	r3, r3, #2
 800648a:	2b00      	cmp	r3, #0
 800648c:	d1f0      	bne.n	8006470 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	f003 0308 	and.w	r3, r3, #8
 8006496:	2b00      	cmp	r3, #0
 8006498:	d03a      	beq.n	8006510 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	699b      	ldr	r3, [r3, #24]
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d019      	beq.n	80064d6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80064a2:	4b17      	ldr	r3, [pc, #92]	; (8006500 <HAL_RCC_OscConfig+0x274>)
 80064a4:	2201      	movs	r2, #1
 80064a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80064a8:	f7fd fc30 	bl	8003d0c <HAL_GetTick>
 80064ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80064ae:	e008      	b.n	80064c2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80064b0:	f7fd fc2c 	bl	8003d0c <HAL_GetTick>
 80064b4:	4602      	mov	r2, r0
 80064b6:	693b      	ldr	r3, [r7, #16]
 80064b8:	1ad3      	subs	r3, r2, r3
 80064ba:	2b02      	cmp	r3, #2
 80064bc:	d901      	bls.n	80064c2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80064be:	2303      	movs	r3, #3
 80064c0:	e15a      	b.n	8006778 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80064c2:	4b0d      	ldr	r3, [pc, #52]	; (80064f8 <HAL_RCC_OscConfig+0x26c>)
 80064c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064c6:	f003 0302 	and.w	r3, r3, #2
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d0f0      	beq.n	80064b0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80064ce:	2001      	movs	r0, #1
 80064d0:	f000 fad8 	bl	8006a84 <RCC_Delay>
 80064d4:	e01c      	b.n	8006510 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80064d6:	4b0a      	ldr	r3, [pc, #40]	; (8006500 <HAL_RCC_OscConfig+0x274>)
 80064d8:	2200      	movs	r2, #0
 80064da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80064dc:	f7fd fc16 	bl	8003d0c <HAL_GetTick>
 80064e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80064e2:	e00f      	b.n	8006504 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80064e4:	f7fd fc12 	bl	8003d0c <HAL_GetTick>
 80064e8:	4602      	mov	r2, r0
 80064ea:	693b      	ldr	r3, [r7, #16]
 80064ec:	1ad3      	subs	r3, r2, r3
 80064ee:	2b02      	cmp	r3, #2
 80064f0:	d908      	bls.n	8006504 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80064f2:	2303      	movs	r3, #3
 80064f4:	e140      	b.n	8006778 <HAL_RCC_OscConfig+0x4ec>
 80064f6:	bf00      	nop
 80064f8:	40021000 	.word	0x40021000
 80064fc:	42420000 	.word	0x42420000
 8006500:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006504:	4b9e      	ldr	r3, [pc, #632]	; (8006780 <HAL_RCC_OscConfig+0x4f4>)
 8006506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006508:	f003 0302 	and.w	r3, r3, #2
 800650c:	2b00      	cmp	r3, #0
 800650e:	d1e9      	bne.n	80064e4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	f003 0304 	and.w	r3, r3, #4
 8006518:	2b00      	cmp	r3, #0
 800651a:	f000 80a6 	beq.w	800666a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800651e:	2300      	movs	r3, #0
 8006520:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006522:	4b97      	ldr	r3, [pc, #604]	; (8006780 <HAL_RCC_OscConfig+0x4f4>)
 8006524:	69db      	ldr	r3, [r3, #28]
 8006526:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800652a:	2b00      	cmp	r3, #0
 800652c:	d10d      	bne.n	800654a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800652e:	4b94      	ldr	r3, [pc, #592]	; (8006780 <HAL_RCC_OscConfig+0x4f4>)
 8006530:	69db      	ldr	r3, [r3, #28]
 8006532:	4a93      	ldr	r2, [pc, #588]	; (8006780 <HAL_RCC_OscConfig+0x4f4>)
 8006534:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006538:	61d3      	str	r3, [r2, #28]
 800653a:	4b91      	ldr	r3, [pc, #580]	; (8006780 <HAL_RCC_OscConfig+0x4f4>)
 800653c:	69db      	ldr	r3, [r3, #28]
 800653e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006542:	60bb      	str	r3, [r7, #8]
 8006544:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006546:	2301      	movs	r3, #1
 8006548:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800654a:	4b8e      	ldr	r3, [pc, #568]	; (8006784 <HAL_RCC_OscConfig+0x4f8>)
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006552:	2b00      	cmp	r3, #0
 8006554:	d118      	bne.n	8006588 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006556:	4b8b      	ldr	r3, [pc, #556]	; (8006784 <HAL_RCC_OscConfig+0x4f8>)
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	4a8a      	ldr	r2, [pc, #552]	; (8006784 <HAL_RCC_OscConfig+0x4f8>)
 800655c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006560:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006562:	f7fd fbd3 	bl	8003d0c <HAL_GetTick>
 8006566:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006568:	e008      	b.n	800657c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800656a:	f7fd fbcf 	bl	8003d0c <HAL_GetTick>
 800656e:	4602      	mov	r2, r0
 8006570:	693b      	ldr	r3, [r7, #16]
 8006572:	1ad3      	subs	r3, r2, r3
 8006574:	2b64      	cmp	r3, #100	; 0x64
 8006576:	d901      	bls.n	800657c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8006578:	2303      	movs	r3, #3
 800657a:	e0fd      	b.n	8006778 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800657c:	4b81      	ldr	r3, [pc, #516]	; (8006784 <HAL_RCC_OscConfig+0x4f8>)
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006584:	2b00      	cmp	r3, #0
 8006586:	d0f0      	beq.n	800656a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	68db      	ldr	r3, [r3, #12]
 800658c:	2b01      	cmp	r3, #1
 800658e:	d106      	bne.n	800659e <HAL_RCC_OscConfig+0x312>
 8006590:	4b7b      	ldr	r3, [pc, #492]	; (8006780 <HAL_RCC_OscConfig+0x4f4>)
 8006592:	6a1b      	ldr	r3, [r3, #32]
 8006594:	4a7a      	ldr	r2, [pc, #488]	; (8006780 <HAL_RCC_OscConfig+0x4f4>)
 8006596:	f043 0301 	orr.w	r3, r3, #1
 800659a:	6213      	str	r3, [r2, #32]
 800659c:	e02d      	b.n	80065fa <HAL_RCC_OscConfig+0x36e>
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	68db      	ldr	r3, [r3, #12]
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d10c      	bne.n	80065c0 <HAL_RCC_OscConfig+0x334>
 80065a6:	4b76      	ldr	r3, [pc, #472]	; (8006780 <HAL_RCC_OscConfig+0x4f4>)
 80065a8:	6a1b      	ldr	r3, [r3, #32]
 80065aa:	4a75      	ldr	r2, [pc, #468]	; (8006780 <HAL_RCC_OscConfig+0x4f4>)
 80065ac:	f023 0301 	bic.w	r3, r3, #1
 80065b0:	6213      	str	r3, [r2, #32]
 80065b2:	4b73      	ldr	r3, [pc, #460]	; (8006780 <HAL_RCC_OscConfig+0x4f4>)
 80065b4:	6a1b      	ldr	r3, [r3, #32]
 80065b6:	4a72      	ldr	r2, [pc, #456]	; (8006780 <HAL_RCC_OscConfig+0x4f4>)
 80065b8:	f023 0304 	bic.w	r3, r3, #4
 80065bc:	6213      	str	r3, [r2, #32]
 80065be:	e01c      	b.n	80065fa <HAL_RCC_OscConfig+0x36e>
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	68db      	ldr	r3, [r3, #12]
 80065c4:	2b05      	cmp	r3, #5
 80065c6:	d10c      	bne.n	80065e2 <HAL_RCC_OscConfig+0x356>
 80065c8:	4b6d      	ldr	r3, [pc, #436]	; (8006780 <HAL_RCC_OscConfig+0x4f4>)
 80065ca:	6a1b      	ldr	r3, [r3, #32]
 80065cc:	4a6c      	ldr	r2, [pc, #432]	; (8006780 <HAL_RCC_OscConfig+0x4f4>)
 80065ce:	f043 0304 	orr.w	r3, r3, #4
 80065d2:	6213      	str	r3, [r2, #32]
 80065d4:	4b6a      	ldr	r3, [pc, #424]	; (8006780 <HAL_RCC_OscConfig+0x4f4>)
 80065d6:	6a1b      	ldr	r3, [r3, #32]
 80065d8:	4a69      	ldr	r2, [pc, #420]	; (8006780 <HAL_RCC_OscConfig+0x4f4>)
 80065da:	f043 0301 	orr.w	r3, r3, #1
 80065de:	6213      	str	r3, [r2, #32]
 80065e0:	e00b      	b.n	80065fa <HAL_RCC_OscConfig+0x36e>
 80065e2:	4b67      	ldr	r3, [pc, #412]	; (8006780 <HAL_RCC_OscConfig+0x4f4>)
 80065e4:	6a1b      	ldr	r3, [r3, #32]
 80065e6:	4a66      	ldr	r2, [pc, #408]	; (8006780 <HAL_RCC_OscConfig+0x4f4>)
 80065e8:	f023 0301 	bic.w	r3, r3, #1
 80065ec:	6213      	str	r3, [r2, #32]
 80065ee:	4b64      	ldr	r3, [pc, #400]	; (8006780 <HAL_RCC_OscConfig+0x4f4>)
 80065f0:	6a1b      	ldr	r3, [r3, #32]
 80065f2:	4a63      	ldr	r2, [pc, #396]	; (8006780 <HAL_RCC_OscConfig+0x4f4>)
 80065f4:	f023 0304 	bic.w	r3, r3, #4
 80065f8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	68db      	ldr	r3, [r3, #12]
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d015      	beq.n	800662e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006602:	f7fd fb83 	bl	8003d0c <HAL_GetTick>
 8006606:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006608:	e00a      	b.n	8006620 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800660a:	f7fd fb7f 	bl	8003d0c <HAL_GetTick>
 800660e:	4602      	mov	r2, r0
 8006610:	693b      	ldr	r3, [r7, #16]
 8006612:	1ad3      	subs	r3, r2, r3
 8006614:	f241 3288 	movw	r2, #5000	; 0x1388
 8006618:	4293      	cmp	r3, r2
 800661a:	d901      	bls.n	8006620 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800661c:	2303      	movs	r3, #3
 800661e:	e0ab      	b.n	8006778 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006620:	4b57      	ldr	r3, [pc, #348]	; (8006780 <HAL_RCC_OscConfig+0x4f4>)
 8006622:	6a1b      	ldr	r3, [r3, #32]
 8006624:	f003 0302 	and.w	r3, r3, #2
 8006628:	2b00      	cmp	r3, #0
 800662a:	d0ee      	beq.n	800660a <HAL_RCC_OscConfig+0x37e>
 800662c:	e014      	b.n	8006658 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800662e:	f7fd fb6d 	bl	8003d0c <HAL_GetTick>
 8006632:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006634:	e00a      	b.n	800664c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006636:	f7fd fb69 	bl	8003d0c <HAL_GetTick>
 800663a:	4602      	mov	r2, r0
 800663c:	693b      	ldr	r3, [r7, #16]
 800663e:	1ad3      	subs	r3, r2, r3
 8006640:	f241 3288 	movw	r2, #5000	; 0x1388
 8006644:	4293      	cmp	r3, r2
 8006646:	d901      	bls.n	800664c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8006648:	2303      	movs	r3, #3
 800664a:	e095      	b.n	8006778 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800664c:	4b4c      	ldr	r3, [pc, #304]	; (8006780 <HAL_RCC_OscConfig+0x4f4>)
 800664e:	6a1b      	ldr	r3, [r3, #32]
 8006650:	f003 0302 	and.w	r3, r3, #2
 8006654:	2b00      	cmp	r3, #0
 8006656:	d1ee      	bne.n	8006636 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8006658:	7dfb      	ldrb	r3, [r7, #23]
 800665a:	2b01      	cmp	r3, #1
 800665c:	d105      	bne.n	800666a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800665e:	4b48      	ldr	r3, [pc, #288]	; (8006780 <HAL_RCC_OscConfig+0x4f4>)
 8006660:	69db      	ldr	r3, [r3, #28]
 8006662:	4a47      	ldr	r2, [pc, #284]	; (8006780 <HAL_RCC_OscConfig+0x4f4>)
 8006664:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006668:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	69db      	ldr	r3, [r3, #28]
 800666e:	2b00      	cmp	r3, #0
 8006670:	f000 8081 	beq.w	8006776 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006674:	4b42      	ldr	r3, [pc, #264]	; (8006780 <HAL_RCC_OscConfig+0x4f4>)
 8006676:	685b      	ldr	r3, [r3, #4]
 8006678:	f003 030c 	and.w	r3, r3, #12
 800667c:	2b08      	cmp	r3, #8
 800667e:	d061      	beq.n	8006744 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	69db      	ldr	r3, [r3, #28]
 8006684:	2b02      	cmp	r3, #2
 8006686:	d146      	bne.n	8006716 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006688:	4b3f      	ldr	r3, [pc, #252]	; (8006788 <HAL_RCC_OscConfig+0x4fc>)
 800668a:	2200      	movs	r2, #0
 800668c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800668e:	f7fd fb3d 	bl	8003d0c <HAL_GetTick>
 8006692:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006694:	e008      	b.n	80066a8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006696:	f7fd fb39 	bl	8003d0c <HAL_GetTick>
 800669a:	4602      	mov	r2, r0
 800669c:	693b      	ldr	r3, [r7, #16]
 800669e:	1ad3      	subs	r3, r2, r3
 80066a0:	2b02      	cmp	r3, #2
 80066a2:	d901      	bls.n	80066a8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80066a4:	2303      	movs	r3, #3
 80066a6:	e067      	b.n	8006778 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80066a8:	4b35      	ldr	r3, [pc, #212]	; (8006780 <HAL_RCC_OscConfig+0x4f4>)
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d1f0      	bne.n	8006696 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	6a1b      	ldr	r3, [r3, #32]
 80066b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80066bc:	d108      	bne.n	80066d0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80066be:	4b30      	ldr	r3, [pc, #192]	; (8006780 <HAL_RCC_OscConfig+0x4f4>)
 80066c0:	685b      	ldr	r3, [r3, #4]
 80066c2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	689b      	ldr	r3, [r3, #8]
 80066ca:	492d      	ldr	r1, [pc, #180]	; (8006780 <HAL_RCC_OscConfig+0x4f4>)
 80066cc:	4313      	orrs	r3, r2
 80066ce:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80066d0:	4b2b      	ldr	r3, [pc, #172]	; (8006780 <HAL_RCC_OscConfig+0x4f4>)
 80066d2:	685b      	ldr	r3, [r3, #4]
 80066d4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	6a19      	ldr	r1, [r3, #32]
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066e0:	430b      	orrs	r3, r1
 80066e2:	4927      	ldr	r1, [pc, #156]	; (8006780 <HAL_RCC_OscConfig+0x4f4>)
 80066e4:	4313      	orrs	r3, r2
 80066e6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80066e8:	4b27      	ldr	r3, [pc, #156]	; (8006788 <HAL_RCC_OscConfig+0x4fc>)
 80066ea:	2201      	movs	r2, #1
 80066ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80066ee:	f7fd fb0d 	bl	8003d0c <HAL_GetTick>
 80066f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80066f4:	e008      	b.n	8006708 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80066f6:	f7fd fb09 	bl	8003d0c <HAL_GetTick>
 80066fa:	4602      	mov	r2, r0
 80066fc:	693b      	ldr	r3, [r7, #16]
 80066fe:	1ad3      	subs	r3, r2, r3
 8006700:	2b02      	cmp	r3, #2
 8006702:	d901      	bls.n	8006708 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8006704:	2303      	movs	r3, #3
 8006706:	e037      	b.n	8006778 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006708:	4b1d      	ldr	r3, [pc, #116]	; (8006780 <HAL_RCC_OscConfig+0x4f4>)
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006710:	2b00      	cmp	r3, #0
 8006712:	d0f0      	beq.n	80066f6 <HAL_RCC_OscConfig+0x46a>
 8006714:	e02f      	b.n	8006776 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006716:	4b1c      	ldr	r3, [pc, #112]	; (8006788 <HAL_RCC_OscConfig+0x4fc>)
 8006718:	2200      	movs	r2, #0
 800671a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800671c:	f7fd faf6 	bl	8003d0c <HAL_GetTick>
 8006720:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006722:	e008      	b.n	8006736 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006724:	f7fd faf2 	bl	8003d0c <HAL_GetTick>
 8006728:	4602      	mov	r2, r0
 800672a:	693b      	ldr	r3, [r7, #16]
 800672c:	1ad3      	subs	r3, r2, r3
 800672e:	2b02      	cmp	r3, #2
 8006730:	d901      	bls.n	8006736 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8006732:	2303      	movs	r3, #3
 8006734:	e020      	b.n	8006778 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006736:	4b12      	ldr	r3, [pc, #72]	; (8006780 <HAL_RCC_OscConfig+0x4f4>)
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800673e:	2b00      	cmp	r3, #0
 8006740:	d1f0      	bne.n	8006724 <HAL_RCC_OscConfig+0x498>
 8006742:	e018      	b.n	8006776 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	69db      	ldr	r3, [r3, #28]
 8006748:	2b01      	cmp	r3, #1
 800674a:	d101      	bne.n	8006750 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800674c:	2301      	movs	r3, #1
 800674e:	e013      	b.n	8006778 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8006750:	4b0b      	ldr	r3, [pc, #44]	; (8006780 <HAL_RCC_OscConfig+0x4f4>)
 8006752:	685b      	ldr	r3, [r3, #4]
 8006754:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	6a1b      	ldr	r3, [r3, #32]
 8006760:	429a      	cmp	r2, r3
 8006762:	d106      	bne.n	8006772 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800676e:	429a      	cmp	r2, r3
 8006770:	d001      	beq.n	8006776 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8006772:	2301      	movs	r3, #1
 8006774:	e000      	b.n	8006778 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8006776:	2300      	movs	r3, #0
}
 8006778:	4618      	mov	r0, r3
 800677a:	3718      	adds	r7, #24
 800677c:	46bd      	mov	sp, r7
 800677e:	bd80      	pop	{r7, pc}
 8006780:	40021000 	.word	0x40021000
 8006784:	40007000 	.word	0x40007000
 8006788:	42420060 	.word	0x42420060

0800678c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800678c:	b580      	push	{r7, lr}
 800678e:	b084      	sub	sp, #16
 8006790:	af00      	add	r7, sp, #0
 8006792:	6078      	str	r0, [r7, #4]
 8006794:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	2b00      	cmp	r3, #0
 800679a:	d101      	bne.n	80067a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800679c:	2301      	movs	r3, #1
 800679e:	e0d0      	b.n	8006942 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80067a0:	4b6a      	ldr	r3, [pc, #424]	; (800694c <HAL_RCC_ClockConfig+0x1c0>)
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	f003 0307 	and.w	r3, r3, #7
 80067a8:	683a      	ldr	r2, [r7, #0]
 80067aa:	429a      	cmp	r2, r3
 80067ac:	d910      	bls.n	80067d0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80067ae:	4b67      	ldr	r3, [pc, #412]	; (800694c <HAL_RCC_ClockConfig+0x1c0>)
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	f023 0207 	bic.w	r2, r3, #7
 80067b6:	4965      	ldr	r1, [pc, #404]	; (800694c <HAL_RCC_ClockConfig+0x1c0>)
 80067b8:	683b      	ldr	r3, [r7, #0]
 80067ba:	4313      	orrs	r3, r2
 80067bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80067be:	4b63      	ldr	r3, [pc, #396]	; (800694c <HAL_RCC_ClockConfig+0x1c0>)
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	f003 0307 	and.w	r3, r3, #7
 80067c6:	683a      	ldr	r2, [r7, #0]
 80067c8:	429a      	cmp	r2, r3
 80067ca:	d001      	beq.n	80067d0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80067cc:	2301      	movs	r3, #1
 80067ce:	e0b8      	b.n	8006942 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	f003 0302 	and.w	r3, r3, #2
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d020      	beq.n	800681e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	f003 0304 	and.w	r3, r3, #4
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d005      	beq.n	80067f4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80067e8:	4b59      	ldr	r3, [pc, #356]	; (8006950 <HAL_RCC_ClockConfig+0x1c4>)
 80067ea:	685b      	ldr	r3, [r3, #4]
 80067ec:	4a58      	ldr	r2, [pc, #352]	; (8006950 <HAL_RCC_ClockConfig+0x1c4>)
 80067ee:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80067f2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	f003 0308 	and.w	r3, r3, #8
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d005      	beq.n	800680c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006800:	4b53      	ldr	r3, [pc, #332]	; (8006950 <HAL_RCC_ClockConfig+0x1c4>)
 8006802:	685b      	ldr	r3, [r3, #4]
 8006804:	4a52      	ldr	r2, [pc, #328]	; (8006950 <HAL_RCC_ClockConfig+0x1c4>)
 8006806:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800680a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800680c:	4b50      	ldr	r3, [pc, #320]	; (8006950 <HAL_RCC_ClockConfig+0x1c4>)
 800680e:	685b      	ldr	r3, [r3, #4]
 8006810:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	689b      	ldr	r3, [r3, #8]
 8006818:	494d      	ldr	r1, [pc, #308]	; (8006950 <HAL_RCC_ClockConfig+0x1c4>)
 800681a:	4313      	orrs	r3, r2
 800681c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	f003 0301 	and.w	r3, r3, #1
 8006826:	2b00      	cmp	r3, #0
 8006828:	d040      	beq.n	80068ac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	685b      	ldr	r3, [r3, #4]
 800682e:	2b01      	cmp	r3, #1
 8006830:	d107      	bne.n	8006842 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006832:	4b47      	ldr	r3, [pc, #284]	; (8006950 <HAL_RCC_ClockConfig+0x1c4>)
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800683a:	2b00      	cmp	r3, #0
 800683c:	d115      	bne.n	800686a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800683e:	2301      	movs	r3, #1
 8006840:	e07f      	b.n	8006942 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	685b      	ldr	r3, [r3, #4]
 8006846:	2b02      	cmp	r3, #2
 8006848:	d107      	bne.n	800685a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800684a:	4b41      	ldr	r3, [pc, #260]	; (8006950 <HAL_RCC_ClockConfig+0x1c4>)
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006852:	2b00      	cmp	r3, #0
 8006854:	d109      	bne.n	800686a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006856:	2301      	movs	r3, #1
 8006858:	e073      	b.n	8006942 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800685a:	4b3d      	ldr	r3, [pc, #244]	; (8006950 <HAL_RCC_ClockConfig+0x1c4>)
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	f003 0302 	and.w	r3, r3, #2
 8006862:	2b00      	cmp	r3, #0
 8006864:	d101      	bne.n	800686a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006866:	2301      	movs	r3, #1
 8006868:	e06b      	b.n	8006942 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800686a:	4b39      	ldr	r3, [pc, #228]	; (8006950 <HAL_RCC_ClockConfig+0x1c4>)
 800686c:	685b      	ldr	r3, [r3, #4]
 800686e:	f023 0203 	bic.w	r2, r3, #3
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	685b      	ldr	r3, [r3, #4]
 8006876:	4936      	ldr	r1, [pc, #216]	; (8006950 <HAL_RCC_ClockConfig+0x1c4>)
 8006878:	4313      	orrs	r3, r2
 800687a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800687c:	f7fd fa46 	bl	8003d0c <HAL_GetTick>
 8006880:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006882:	e00a      	b.n	800689a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006884:	f7fd fa42 	bl	8003d0c <HAL_GetTick>
 8006888:	4602      	mov	r2, r0
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	1ad3      	subs	r3, r2, r3
 800688e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006892:	4293      	cmp	r3, r2
 8006894:	d901      	bls.n	800689a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006896:	2303      	movs	r3, #3
 8006898:	e053      	b.n	8006942 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800689a:	4b2d      	ldr	r3, [pc, #180]	; (8006950 <HAL_RCC_ClockConfig+0x1c4>)
 800689c:	685b      	ldr	r3, [r3, #4]
 800689e:	f003 020c 	and.w	r2, r3, #12
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	685b      	ldr	r3, [r3, #4]
 80068a6:	009b      	lsls	r3, r3, #2
 80068a8:	429a      	cmp	r2, r3
 80068aa:	d1eb      	bne.n	8006884 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80068ac:	4b27      	ldr	r3, [pc, #156]	; (800694c <HAL_RCC_ClockConfig+0x1c0>)
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	f003 0307 	and.w	r3, r3, #7
 80068b4:	683a      	ldr	r2, [r7, #0]
 80068b6:	429a      	cmp	r2, r3
 80068b8:	d210      	bcs.n	80068dc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80068ba:	4b24      	ldr	r3, [pc, #144]	; (800694c <HAL_RCC_ClockConfig+0x1c0>)
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	f023 0207 	bic.w	r2, r3, #7
 80068c2:	4922      	ldr	r1, [pc, #136]	; (800694c <HAL_RCC_ClockConfig+0x1c0>)
 80068c4:	683b      	ldr	r3, [r7, #0]
 80068c6:	4313      	orrs	r3, r2
 80068c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80068ca:	4b20      	ldr	r3, [pc, #128]	; (800694c <HAL_RCC_ClockConfig+0x1c0>)
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	f003 0307 	and.w	r3, r3, #7
 80068d2:	683a      	ldr	r2, [r7, #0]
 80068d4:	429a      	cmp	r2, r3
 80068d6:	d001      	beq.n	80068dc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80068d8:	2301      	movs	r3, #1
 80068da:	e032      	b.n	8006942 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	f003 0304 	and.w	r3, r3, #4
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d008      	beq.n	80068fa <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80068e8:	4b19      	ldr	r3, [pc, #100]	; (8006950 <HAL_RCC_ClockConfig+0x1c4>)
 80068ea:	685b      	ldr	r3, [r3, #4]
 80068ec:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	68db      	ldr	r3, [r3, #12]
 80068f4:	4916      	ldr	r1, [pc, #88]	; (8006950 <HAL_RCC_ClockConfig+0x1c4>)
 80068f6:	4313      	orrs	r3, r2
 80068f8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	f003 0308 	and.w	r3, r3, #8
 8006902:	2b00      	cmp	r3, #0
 8006904:	d009      	beq.n	800691a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006906:	4b12      	ldr	r3, [pc, #72]	; (8006950 <HAL_RCC_ClockConfig+0x1c4>)
 8006908:	685b      	ldr	r3, [r3, #4]
 800690a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	691b      	ldr	r3, [r3, #16]
 8006912:	00db      	lsls	r3, r3, #3
 8006914:	490e      	ldr	r1, [pc, #56]	; (8006950 <HAL_RCC_ClockConfig+0x1c4>)
 8006916:	4313      	orrs	r3, r2
 8006918:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800691a:	f000 f821 	bl	8006960 <HAL_RCC_GetSysClockFreq>
 800691e:	4602      	mov	r2, r0
 8006920:	4b0b      	ldr	r3, [pc, #44]	; (8006950 <HAL_RCC_ClockConfig+0x1c4>)
 8006922:	685b      	ldr	r3, [r3, #4]
 8006924:	091b      	lsrs	r3, r3, #4
 8006926:	f003 030f 	and.w	r3, r3, #15
 800692a:	490a      	ldr	r1, [pc, #40]	; (8006954 <HAL_RCC_ClockConfig+0x1c8>)
 800692c:	5ccb      	ldrb	r3, [r1, r3]
 800692e:	fa22 f303 	lsr.w	r3, r2, r3
 8006932:	4a09      	ldr	r2, [pc, #36]	; (8006958 <HAL_RCC_ClockConfig+0x1cc>)
 8006934:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8006936:	4b09      	ldr	r3, [pc, #36]	; (800695c <HAL_RCC_ClockConfig+0x1d0>)
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	4618      	mov	r0, r3
 800693c:	f7fd f9a4 	bl	8003c88 <HAL_InitTick>

  return HAL_OK;
 8006940:	2300      	movs	r3, #0
}
 8006942:	4618      	mov	r0, r3
 8006944:	3710      	adds	r7, #16
 8006946:	46bd      	mov	sp, r7
 8006948:	bd80      	pop	{r7, pc}
 800694a:	bf00      	nop
 800694c:	40022000 	.word	0x40022000
 8006950:	40021000 	.word	0x40021000
 8006954:	0800c47c 	.word	0x0800c47c
 8006958:	20000010 	.word	0x20000010
 800695c:	20000014 	.word	0x20000014

08006960 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006960:	b490      	push	{r4, r7}
 8006962:	b08a      	sub	sp, #40	; 0x28
 8006964:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8006966:	4b2a      	ldr	r3, [pc, #168]	; (8006a10 <HAL_RCC_GetSysClockFreq+0xb0>)
 8006968:	1d3c      	adds	r4, r7, #4
 800696a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800696c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8006970:	f240 2301 	movw	r3, #513	; 0x201
 8006974:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8006976:	2300      	movs	r3, #0
 8006978:	61fb      	str	r3, [r7, #28]
 800697a:	2300      	movs	r3, #0
 800697c:	61bb      	str	r3, [r7, #24]
 800697e:	2300      	movs	r3, #0
 8006980:	627b      	str	r3, [r7, #36]	; 0x24
 8006982:	2300      	movs	r3, #0
 8006984:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8006986:	2300      	movs	r3, #0
 8006988:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800698a:	4b22      	ldr	r3, [pc, #136]	; (8006a14 <HAL_RCC_GetSysClockFreq+0xb4>)
 800698c:	685b      	ldr	r3, [r3, #4]
 800698e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8006990:	69fb      	ldr	r3, [r7, #28]
 8006992:	f003 030c 	and.w	r3, r3, #12
 8006996:	2b04      	cmp	r3, #4
 8006998:	d002      	beq.n	80069a0 <HAL_RCC_GetSysClockFreq+0x40>
 800699a:	2b08      	cmp	r3, #8
 800699c:	d003      	beq.n	80069a6 <HAL_RCC_GetSysClockFreq+0x46>
 800699e:	e02d      	b.n	80069fc <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80069a0:	4b1d      	ldr	r3, [pc, #116]	; (8006a18 <HAL_RCC_GetSysClockFreq+0xb8>)
 80069a2:	623b      	str	r3, [r7, #32]
      break;
 80069a4:	e02d      	b.n	8006a02 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80069a6:	69fb      	ldr	r3, [r7, #28]
 80069a8:	0c9b      	lsrs	r3, r3, #18
 80069aa:	f003 030f 	and.w	r3, r3, #15
 80069ae:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80069b2:	4413      	add	r3, r2
 80069b4:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80069b8:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80069ba:	69fb      	ldr	r3, [r7, #28]
 80069bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d013      	beq.n	80069ec <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80069c4:	4b13      	ldr	r3, [pc, #76]	; (8006a14 <HAL_RCC_GetSysClockFreq+0xb4>)
 80069c6:	685b      	ldr	r3, [r3, #4]
 80069c8:	0c5b      	lsrs	r3, r3, #17
 80069ca:	f003 0301 	and.w	r3, r3, #1
 80069ce:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80069d2:	4413      	add	r3, r2
 80069d4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80069d8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80069da:	697b      	ldr	r3, [r7, #20]
 80069dc:	4a0e      	ldr	r2, [pc, #56]	; (8006a18 <HAL_RCC_GetSysClockFreq+0xb8>)
 80069de:	fb02 f203 	mul.w	r2, r2, r3
 80069e2:	69bb      	ldr	r3, [r7, #24]
 80069e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80069e8:	627b      	str	r3, [r7, #36]	; 0x24
 80069ea:	e004      	b.n	80069f6 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80069ec:	697b      	ldr	r3, [r7, #20]
 80069ee:	4a0b      	ldr	r2, [pc, #44]	; (8006a1c <HAL_RCC_GetSysClockFreq+0xbc>)
 80069f0:	fb02 f303 	mul.w	r3, r2, r3
 80069f4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80069f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069f8:	623b      	str	r3, [r7, #32]
      break;
 80069fa:	e002      	b.n	8006a02 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80069fc:	4b06      	ldr	r3, [pc, #24]	; (8006a18 <HAL_RCC_GetSysClockFreq+0xb8>)
 80069fe:	623b      	str	r3, [r7, #32]
      break;
 8006a00:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006a02:	6a3b      	ldr	r3, [r7, #32]
}
 8006a04:	4618      	mov	r0, r3
 8006a06:	3728      	adds	r7, #40	; 0x28
 8006a08:	46bd      	mov	sp, r7
 8006a0a:	bc90      	pop	{r4, r7}
 8006a0c:	4770      	bx	lr
 8006a0e:	bf00      	nop
 8006a10:	0800ae9c 	.word	0x0800ae9c
 8006a14:	40021000 	.word	0x40021000
 8006a18:	007a1200 	.word	0x007a1200
 8006a1c:	003d0900 	.word	0x003d0900

08006a20 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006a20:	b480      	push	{r7}
 8006a22:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006a24:	4b02      	ldr	r3, [pc, #8]	; (8006a30 <HAL_RCC_GetHCLKFreq+0x10>)
 8006a26:	681b      	ldr	r3, [r3, #0]
}
 8006a28:	4618      	mov	r0, r3
 8006a2a:	46bd      	mov	sp, r7
 8006a2c:	bc80      	pop	{r7}
 8006a2e:	4770      	bx	lr
 8006a30:	20000010 	.word	0x20000010

08006a34 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006a34:	b580      	push	{r7, lr}
 8006a36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006a38:	f7ff fff2 	bl	8006a20 <HAL_RCC_GetHCLKFreq>
 8006a3c:	4602      	mov	r2, r0
 8006a3e:	4b05      	ldr	r3, [pc, #20]	; (8006a54 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006a40:	685b      	ldr	r3, [r3, #4]
 8006a42:	0a1b      	lsrs	r3, r3, #8
 8006a44:	f003 0307 	and.w	r3, r3, #7
 8006a48:	4903      	ldr	r1, [pc, #12]	; (8006a58 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006a4a:	5ccb      	ldrb	r3, [r1, r3]
 8006a4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006a50:	4618      	mov	r0, r3
 8006a52:	bd80      	pop	{r7, pc}
 8006a54:	40021000 	.word	0x40021000
 8006a58:	0800c48c 	.word	0x0800c48c

08006a5c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006a5c:	b580      	push	{r7, lr}
 8006a5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006a60:	f7ff ffde 	bl	8006a20 <HAL_RCC_GetHCLKFreq>
 8006a64:	4602      	mov	r2, r0
 8006a66:	4b05      	ldr	r3, [pc, #20]	; (8006a7c <HAL_RCC_GetPCLK2Freq+0x20>)
 8006a68:	685b      	ldr	r3, [r3, #4]
 8006a6a:	0adb      	lsrs	r3, r3, #11
 8006a6c:	f003 0307 	and.w	r3, r3, #7
 8006a70:	4903      	ldr	r1, [pc, #12]	; (8006a80 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006a72:	5ccb      	ldrb	r3, [r1, r3]
 8006a74:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006a78:	4618      	mov	r0, r3
 8006a7a:	bd80      	pop	{r7, pc}
 8006a7c:	40021000 	.word	0x40021000
 8006a80:	0800c48c 	.word	0x0800c48c

08006a84 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8006a84:	b480      	push	{r7}
 8006a86:	b085      	sub	sp, #20
 8006a88:	af00      	add	r7, sp, #0
 8006a8a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8006a8c:	4b0a      	ldr	r3, [pc, #40]	; (8006ab8 <RCC_Delay+0x34>)
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	4a0a      	ldr	r2, [pc, #40]	; (8006abc <RCC_Delay+0x38>)
 8006a92:	fba2 2303 	umull	r2, r3, r2, r3
 8006a96:	0a5b      	lsrs	r3, r3, #9
 8006a98:	687a      	ldr	r2, [r7, #4]
 8006a9a:	fb02 f303 	mul.w	r3, r2, r3
 8006a9e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8006aa0:	bf00      	nop
  }
  while (Delay --);
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	1e5a      	subs	r2, r3, #1
 8006aa6:	60fa      	str	r2, [r7, #12]
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d1f9      	bne.n	8006aa0 <RCC_Delay+0x1c>
}
 8006aac:	bf00      	nop
 8006aae:	bf00      	nop
 8006ab0:	3714      	adds	r7, #20
 8006ab2:	46bd      	mov	sp, r7
 8006ab4:	bc80      	pop	{r7}
 8006ab6:	4770      	bx	lr
 8006ab8:	20000010 	.word	0x20000010
 8006abc:	10624dd3 	.word	0x10624dd3

08006ac0 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006ac0:	b580      	push	{r7, lr}
 8006ac2:	b086      	sub	sp, #24
 8006ac4:	af00      	add	r7, sp, #0
 8006ac6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8006ac8:	2300      	movs	r3, #0
 8006aca:	613b      	str	r3, [r7, #16]
 8006acc:	2300      	movs	r3, #0
 8006ace:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	f003 0301 	and.w	r3, r3, #1
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d07d      	beq.n	8006bd8 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8006adc:	2300      	movs	r3, #0
 8006ade:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006ae0:	4b4f      	ldr	r3, [pc, #316]	; (8006c20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006ae2:	69db      	ldr	r3, [r3, #28]
 8006ae4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d10d      	bne.n	8006b08 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006aec:	4b4c      	ldr	r3, [pc, #304]	; (8006c20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006aee:	69db      	ldr	r3, [r3, #28]
 8006af0:	4a4b      	ldr	r2, [pc, #300]	; (8006c20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006af2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006af6:	61d3      	str	r3, [r2, #28]
 8006af8:	4b49      	ldr	r3, [pc, #292]	; (8006c20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006afa:	69db      	ldr	r3, [r3, #28]
 8006afc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006b00:	60bb      	str	r3, [r7, #8]
 8006b02:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006b04:	2301      	movs	r3, #1
 8006b06:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006b08:	4b46      	ldr	r3, [pc, #280]	; (8006c24 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d118      	bne.n	8006b46 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006b14:	4b43      	ldr	r3, [pc, #268]	; (8006c24 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	4a42      	ldr	r2, [pc, #264]	; (8006c24 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006b1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006b1e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006b20:	f7fd f8f4 	bl	8003d0c <HAL_GetTick>
 8006b24:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006b26:	e008      	b.n	8006b3a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006b28:	f7fd f8f0 	bl	8003d0c <HAL_GetTick>
 8006b2c:	4602      	mov	r2, r0
 8006b2e:	693b      	ldr	r3, [r7, #16]
 8006b30:	1ad3      	subs	r3, r2, r3
 8006b32:	2b64      	cmp	r3, #100	; 0x64
 8006b34:	d901      	bls.n	8006b3a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8006b36:	2303      	movs	r3, #3
 8006b38:	e06d      	b.n	8006c16 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006b3a:	4b3a      	ldr	r3, [pc, #232]	; (8006c24 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d0f0      	beq.n	8006b28 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006b46:	4b36      	ldr	r3, [pc, #216]	; (8006c20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006b48:	6a1b      	ldr	r3, [r3, #32]
 8006b4a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006b4e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d02e      	beq.n	8006bb4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	685b      	ldr	r3, [r3, #4]
 8006b5a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006b5e:	68fa      	ldr	r2, [r7, #12]
 8006b60:	429a      	cmp	r2, r3
 8006b62:	d027      	beq.n	8006bb4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006b64:	4b2e      	ldr	r3, [pc, #184]	; (8006c20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006b66:	6a1b      	ldr	r3, [r3, #32]
 8006b68:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006b6c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006b6e:	4b2e      	ldr	r3, [pc, #184]	; (8006c28 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8006b70:	2201      	movs	r2, #1
 8006b72:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006b74:	4b2c      	ldr	r3, [pc, #176]	; (8006c28 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8006b76:	2200      	movs	r2, #0
 8006b78:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8006b7a:	4a29      	ldr	r2, [pc, #164]	; (8006c20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	f003 0301 	and.w	r3, r3, #1
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d014      	beq.n	8006bb4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006b8a:	f7fd f8bf 	bl	8003d0c <HAL_GetTick>
 8006b8e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006b90:	e00a      	b.n	8006ba8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006b92:	f7fd f8bb 	bl	8003d0c <HAL_GetTick>
 8006b96:	4602      	mov	r2, r0
 8006b98:	693b      	ldr	r3, [r7, #16]
 8006b9a:	1ad3      	subs	r3, r2, r3
 8006b9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006ba0:	4293      	cmp	r3, r2
 8006ba2:	d901      	bls.n	8006ba8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8006ba4:	2303      	movs	r3, #3
 8006ba6:	e036      	b.n	8006c16 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006ba8:	4b1d      	ldr	r3, [pc, #116]	; (8006c20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006baa:	6a1b      	ldr	r3, [r3, #32]
 8006bac:	f003 0302 	and.w	r3, r3, #2
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d0ee      	beq.n	8006b92 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006bb4:	4b1a      	ldr	r3, [pc, #104]	; (8006c20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006bb6:	6a1b      	ldr	r3, [r3, #32]
 8006bb8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	685b      	ldr	r3, [r3, #4]
 8006bc0:	4917      	ldr	r1, [pc, #92]	; (8006c20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006bc2:	4313      	orrs	r3, r2
 8006bc4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8006bc6:	7dfb      	ldrb	r3, [r7, #23]
 8006bc8:	2b01      	cmp	r3, #1
 8006bca:	d105      	bne.n	8006bd8 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006bcc:	4b14      	ldr	r3, [pc, #80]	; (8006c20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006bce:	69db      	ldr	r3, [r3, #28]
 8006bd0:	4a13      	ldr	r2, [pc, #76]	; (8006c20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006bd2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006bd6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	f003 0302 	and.w	r3, r3, #2
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d008      	beq.n	8006bf6 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006be4:	4b0e      	ldr	r3, [pc, #56]	; (8006c20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006be6:	685b      	ldr	r3, [r3, #4]
 8006be8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	689b      	ldr	r3, [r3, #8]
 8006bf0:	490b      	ldr	r1, [pc, #44]	; (8006c20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006bf2:	4313      	orrs	r3, r2
 8006bf4:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	f003 0310 	and.w	r3, r3, #16
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d008      	beq.n	8006c14 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006c02:	4b07      	ldr	r3, [pc, #28]	; (8006c20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006c04:	685b      	ldr	r3, [r3, #4]
 8006c06:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	68db      	ldr	r3, [r3, #12]
 8006c0e:	4904      	ldr	r1, [pc, #16]	; (8006c20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006c10:	4313      	orrs	r3, r2
 8006c12:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8006c14:	2300      	movs	r3, #0
}
 8006c16:	4618      	mov	r0, r3
 8006c18:	3718      	adds	r7, #24
 8006c1a:	46bd      	mov	sp, r7
 8006c1c:	bd80      	pop	{r7, pc}
 8006c1e:	bf00      	nop
 8006c20:	40021000 	.word	0x40021000
 8006c24:	40007000 	.word	0x40007000
 8006c28:	42420440 	.word	0x42420440

08006c2c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8006c2c:	b590      	push	{r4, r7, lr}
 8006c2e:	b08d      	sub	sp, #52	; 0x34
 8006c30:	af00      	add	r7, sp, #0
 8006c32:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8006c34:	4b5a      	ldr	r3, [pc, #360]	; (8006da0 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8006c36:	f107 040c 	add.w	r4, r7, #12
 8006c3a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006c3c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8006c40:	f240 2301 	movw	r3, #513	; 0x201
 8006c44:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8006c46:	2300      	movs	r3, #0
 8006c48:	627b      	str	r3, [r7, #36]	; 0x24
 8006c4a:	2300      	movs	r3, #0
 8006c4c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006c4e:	2300      	movs	r3, #0
 8006c50:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8006c52:	2300      	movs	r3, #0
 8006c54:	61fb      	str	r3, [r7, #28]
 8006c56:	2300      	movs	r3, #0
 8006c58:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	2b10      	cmp	r3, #16
 8006c5e:	d00a      	beq.n	8006c76 <HAL_RCCEx_GetPeriphCLKFreq+0x4a>
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	2b10      	cmp	r3, #16
 8006c64:	f200 8091 	bhi.w	8006d8a <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	2b01      	cmp	r3, #1
 8006c6c:	d04c      	beq.n	8006d08 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	2b02      	cmp	r3, #2
 8006c72:	d07c      	beq.n	8006d6e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8006c74:	e089      	b.n	8006d8a <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
      temp_reg = RCC->CFGR;
 8006c76:	4b4b      	ldr	r3, [pc, #300]	; (8006da4 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8006c78:	685b      	ldr	r3, [r3, #4]
 8006c7a:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8006c7c:	4b49      	ldr	r3, [pc, #292]	; (8006da4 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	f000 8082 	beq.w	8006d8e <HAL_RCCEx_GetPeriphCLKFreq+0x162>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8006c8a:	69fb      	ldr	r3, [r7, #28]
 8006c8c:	0c9b      	lsrs	r3, r3, #18
 8006c8e:	f003 030f 	and.w	r3, r3, #15
 8006c92:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8006c96:	4413      	add	r3, r2
 8006c98:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8006c9c:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006c9e:	69fb      	ldr	r3, [r7, #28]
 8006ca0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d018      	beq.n	8006cda <HAL_RCCEx_GetPeriphCLKFreq+0xae>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8006ca8:	4b3e      	ldr	r3, [pc, #248]	; (8006da4 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8006caa:	685b      	ldr	r3, [r3, #4]
 8006cac:	0c5b      	lsrs	r3, r3, #17
 8006cae:	f003 0301 	and.w	r3, r3, #1
 8006cb2:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8006cb6:	4413      	add	r3, r2
 8006cb8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8006cbc:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006cbe:	69fb      	ldr	r3, [r7, #28]
 8006cc0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d00d      	beq.n	8006ce4 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8006cc8:	4a37      	ldr	r2, [pc, #220]	; (8006da8 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>)
 8006cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ccc:	fbb2 f2f3 	udiv	r2, r2, r3
 8006cd0:	6a3b      	ldr	r3, [r7, #32]
 8006cd2:	fb02 f303 	mul.w	r3, r2, r3
 8006cd6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006cd8:	e004      	b.n	8006ce4 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8006cda:	6a3b      	ldr	r3, [r7, #32]
 8006cdc:	4a33      	ldr	r2, [pc, #204]	; (8006dac <HAL_RCCEx_GetPeriphCLKFreq+0x180>)
 8006cde:	fb02 f303 	mul.w	r3, r2, r3
 8006ce2:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8006ce4:	4b2f      	ldr	r3, [pc, #188]	; (8006da4 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8006ce6:	685b      	ldr	r3, [r3, #4]
 8006ce8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006cec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006cf0:	d102      	bne.n	8006cf8 <HAL_RCCEx_GetPeriphCLKFreq+0xcc>
          frequency = pllclk;
 8006cf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cf4:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8006cf6:	e04a      	b.n	8006d8e <HAL_RCCEx_GetPeriphCLKFreq+0x162>
          frequency = (pllclk * 2) / 3;
 8006cf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cfa:	005b      	lsls	r3, r3, #1
 8006cfc:	4a2c      	ldr	r2, [pc, #176]	; (8006db0 <HAL_RCCEx_GetPeriphCLKFreq+0x184>)
 8006cfe:	fba2 2303 	umull	r2, r3, r2, r3
 8006d02:	085b      	lsrs	r3, r3, #1
 8006d04:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8006d06:	e042      	b.n	8006d8e <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      temp_reg = RCC->BDCR;
 8006d08:	4b26      	ldr	r3, [pc, #152]	; (8006da4 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8006d0a:	6a1b      	ldr	r3, [r3, #32]
 8006d0c:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8006d0e:	69fb      	ldr	r3, [r7, #28]
 8006d10:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006d14:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006d18:	d108      	bne.n	8006d2c <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8006d1a:	69fb      	ldr	r3, [r7, #28]
 8006d1c:	f003 0302 	and.w	r3, r3, #2
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d003      	beq.n	8006d2c <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSE_VALUE;
 8006d24:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006d28:	62bb      	str	r3, [r7, #40]	; 0x28
 8006d2a:	e01f      	b.n	8006d6c <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8006d2c:	69fb      	ldr	r3, [r7, #28]
 8006d2e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006d32:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006d36:	d109      	bne.n	8006d4c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 8006d38:	4b1a      	ldr	r3, [pc, #104]	; (8006da4 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8006d3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d3c:	f003 0302 	and.w	r3, r3, #2
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d003      	beq.n	8006d4c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
        frequency = LSI_VALUE;
 8006d44:	f649 4340 	movw	r3, #40000	; 0x9c40
 8006d48:	62bb      	str	r3, [r7, #40]	; 0x28
 8006d4a:	e00f      	b.n	8006d6c <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8006d4c:	69fb      	ldr	r3, [r7, #28]
 8006d4e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006d52:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006d56:	d11c      	bne.n	8006d92 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 8006d58:	4b12      	ldr	r3, [pc, #72]	; (8006da4 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d016      	beq.n	8006d92 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
        frequency = HSE_VALUE / 128U;
 8006d64:	f24f 4324 	movw	r3, #62500	; 0xf424
 8006d68:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8006d6a:	e012      	b.n	8006d92 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 8006d6c:	e011      	b.n	8006d92 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8006d6e:	f7ff fe75 	bl	8006a5c <HAL_RCC_GetPCLK2Freq>
 8006d72:	4602      	mov	r2, r0
 8006d74:	4b0b      	ldr	r3, [pc, #44]	; (8006da4 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8006d76:	685b      	ldr	r3, [r3, #4]
 8006d78:	0b9b      	lsrs	r3, r3, #14
 8006d7a:	f003 0303 	and.w	r3, r3, #3
 8006d7e:	3301      	adds	r3, #1
 8006d80:	005b      	lsls	r3, r3, #1
 8006d82:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d86:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8006d88:	e004      	b.n	8006d94 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 8006d8a:	bf00      	nop
 8006d8c:	e002      	b.n	8006d94 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 8006d8e:	bf00      	nop
 8006d90:	e000      	b.n	8006d94 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 8006d92:	bf00      	nop
    }
  }
  return (frequency);
 8006d94:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8006d96:	4618      	mov	r0, r3
 8006d98:	3734      	adds	r7, #52	; 0x34
 8006d9a:	46bd      	mov	sp, r7
 8006d9c:	bd90      	pop	{r4, r7, pc}
 8006d9e:	bf00      	nop
 8006da0:	0800aeac 	.word	0x0800aeac
 8006da4:	40021000 	.word	0x40021000
 8006da8:	007a1200 	.word	0x007a1200
 8006dac:	003d0900 	.word	0x003d0900
 8006db0:	aaaaaaab 	.word	0xaaaaaaab

08006db4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006db4:	b580      	push	{r7, lr}
 8006db6:	b082      	sub	sp, #8
 8006db8:	af00      	add	r7, sp, #0
 8006dba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d101      	bne.n	8006dc6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006dc2:	2301      	movs	r3, #1
 8006dc4:	e041      	b.n	8006e4a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006dcc:	b2db      	uxtb	r3, r3
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d106      	bne.n	8006de0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	2200      	movs	r2, #0
 8006dd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006dda:	6878      	ldr	r0, [r7, #4]
 8006ddc:	f7fc fd72 	bl	80038c4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	2202      	movs	r2, #2
 8006de4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681a      	ldr	r2, [r3, #0]
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	3304      	adds	r3, #4
 8006df0:	4619      	mov	r1, r3
 8006df2:	4610      	mov	r0, r2
 8006df4:	f000 fa70 	bl	80072d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	2201      	movs	r2, #1
 8006dfc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	2201      	movs	r2, #1
 8006e04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	2201      	movs	r2, #1
 8006e0c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	2201      	movs	r2, #1
 8006e14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	2201      	movs	r2, #1
 8006e1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	2201      	movs	r2, #1
 8006e24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	2201      	movs	r2, #1
 8006e2c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	2201      	movs	r2, #1
 8006e34:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	2201      	movs	r2, #1
 8006e3c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	2201      	movs	r2, #1
 8006e44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006e48:	2300      	movs	r3, #0
}
 8006e4a:	4618      	mov	r0, r3
 8006e4c:	3708      	adds	r7, #8
 8006e4e:	46bd      	mov	sp, r7
 8006e50:	bd80      	pop	{r7, pc}
	...

08006e54 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006e54:	b480      	push	{r7}
 8006e56:	b085      	sub	sp, #20
 8006e58:	af00      	add	r7, sp, #0
 8006e5a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006e62:	b2db      	uxtb	r3, r3
 8006e64:	2b01      	cmp	r3, #1
 8006e66:	d001      	beq.n	8006e6c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006e68:	2301      	movs	r3, #1
 8006e6a:	e03a      	b.n	8006ee2 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	2202      	movs	r2, #2
 8006e70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	68da      	ldr	r2, [r3, #12]
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	f042 0201 	orr.w	r2, r2, #1
 8006e82:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	4a18      	ldr	r2, [pc, #96]	; (8006eec <HAL_TIM_Base_Start_IT+0x98>)
 8006e8a:	4293      	cmp	r3, r2
 8006e8c:	d00e      	beq.n	8006eac <HAL_TIM_Base_Start_IT+0x58>
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e96:	d009      	beq.n	8006eac <HAL_TIM_Base_Start_IT+0x58>
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	4a14      	ldr	r2, [pc, #80]	; (8006ef0 <HAL_TIM_Base_Start_IT+0x9c>)
 8006e9e:	4293      	cmp	r3, r2
 8006ea0:	d004      	beq.n	8006eac <HAL_TIM_Base_Start_IT+0x58>
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	4a13      	ldr	r2, [pc, #76]	; (8006ef4 <HAL_TIM_Base_Start_IT+0xa0>)
 8006ea8:	4293      	cmp	r3, r2
 8006eaa:	d111      	bne.n	8006ed0 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	689b      	ldr	r3, [r3, #8]
 8006eb2:	f003 0307 	and.w	r3, r3, #7
 8006eb6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	2b06      	cmp	r3, #6
 8006ebc:	d010      	beq.n	8006ee0 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	681a      	ldr	r2, [r3, #0]
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	f042 0201 	orr.w	r2, r2, #1
 8006ecc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006ece:	e007      	b.n	8006ee0 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	681a      	ldr	r2, [r3, #0]
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	f042 0201 	orr.w	r2, r2, #1
 8006ede:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006ee0:	2300      	movs	r3, #0
}
 8006ee2:	4618      	mov	r0, r3
 8006ee4:	3714      	adds	r7, #20
 8006ee6:	46bd      	mov	sp, r7
 8006ee8:	bc80      	pop	{r7}
 8006eea:	4770      	bx	lr
 8006eec:	40012c00 	.word	0x40012c00
 8006ef0:	40000400 	.word	0x40000400
 8006ef4:	40000800 	.word	0x40000800

08006ef8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006ef8:	b580      	push	{r7, lr}
 8006efa:	b082      	sub	sp, #8
 8006efc:	af00      	add	r7, sp, #0
 8006efe:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	691b      	ldr	r3, [r3, #16]
 8006f06:	f003 0302 	and.w	r3, r3, #2
 8006f0a:	2b02      	cmp	r3, #2
 8006f0c:	d122      	bne.n	8006f54 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	68db      	ldr	r3, [r3, #12]
 8006f14:	f003 0302 	and.w	r3, r3, #2
 8006f18:	2b02      	cmp	r3, #2
 8006f1a:	d11b      	bne.n	8006f54 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	f06f 0202 	mvn.w	r2, #2
 8006f24:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	2201      	movs	r2, #1
 8006f2a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	699b      	ldr	r3, [r3, #24]
 8006f32:	f003 0303 	and.w	r3, r3, #3
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d003      	beq.n	8006f42 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006f3a:	6878      	ldr	r0, [r7, #4]
 8006f3c:	f000 f9b1 	bl	80072a2 <HAL_TIM_IC_CaptureCallback>
 8006f40:	e005      	b.n	8006f4e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006f42:	6878      	ldr	r0, [r7, #4]
 8006f44:	f000 f9a4 	bl	8007290 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006f48:	6878      	ldr	r0, [r7, #4]
 8006f4a:	f000 f9b3 	bl	80072b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	2200      	movs	r2, #0
 8006f52:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	691b      	ldr	r3, [r3, #16]
 8006f5a:	f003 0304 	and.w	r3, r3, #4
 8006f5e:	2b04      	cmp	r3, #4
 8006f60:	d122      	bne.n	8006fa8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	68db      	ldr	r3, [r3, #12]
 8006f68:	f003 0304 	and.w	r3, r3, #4
 8006f6c:	2b04      	cmp	r3, #4
 8006f6e:	d11b      	bne.n	8006fa8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	f06f 0204 	mvn.w	r2, #4
 8006f78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	2202      	movs	r2, #2
 8006f7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	699b      	ldr	r3, [r3, #24]
 8006f86:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d003      	beq.n	8006f96 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006f8e:	6878      	ldr	r0, [r7, #4]
 8006f90:	f000 f987 	bl	80072a2 <HAL_TIM_IC_CaptureCallback>
 8006f94:	e005      	b.n	8006fa2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006f96:	6878      	ldr	r0, [r7, #4]
 8006f98:	f000 f97a 	bl	8007290 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006f9c:	6878      	ldr	r0, [r7, #4]
 8006f9e:	f000 f989 	bl	80072b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	2200      	movs	r2, #0
 8006fa6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	691b      	ldr	r3, [r3, #16]
 8006fae:	f003 0308 	and.w	r3, r3, #8
 8006fb2:	2b08      	cmp	r3, #8
 8006fb4:	d122      	bne.n	8006ffc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	68db      	ldr	r3, [r3, #12]
 8006fbc:	f003 0308 	and.w	r3, r3, #8
 8006fc0:	2b08      	cmp	r3, #8
 8006fc2:	d11b      	bne.n	8006ffc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	f06f 0208 	mvn.w	r2, #8
 8006fcc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	2204      	movs	r2, #4
 8006fd2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	69db      	ldr	r3, [r3, #28]
 8006fda:	f003 0303 	and.w	r3, r3, #3
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d003      	beq.n	8006fea <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006fe2:	6878      	ldr	r0, [r7, #4]
 8006fe4:	f000 f95d 	bl	80072a2 <HAL_TIM_IC_CaptureCallback>
 8006fe8:	e005      	b.n	8006ff6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006fea:	6878      	ldr	r0, [r7, #4]
 8006fec:	f000 f950 	bl	8007290 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ff0:	6878      	ldr	r0, [r7, #4]
 8006ff2:	f000 f95f 	bl	80072b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	2200      	movs	r2, #0
 8006ffa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	691b      	ldr	r3, [r3, #16]
 8007002:	f003 0310 	and.w	r3, r3, #16
 8007006:	2b10      	cmp	r3, #16
 8007008:	d122      	bne.n	8007050 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	68db      	ldr	r3, [r3, #12]
 8007010:	f003 0310 	and.w	r3, r3, #16
 8007014:	2b10      	cmp	r3, #16
 8007016:	d11b      	bne.n	8007050 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	f06f 0210 	mvn.w	r2, #16
 8007020:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	2208      	movs	r2, #8
 8007026:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	69db      	ldr	r3, [r3, #28]
 800702e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007032:	2b00      	cmp	r3, #0
 8007034:	d003      	beq.n	800703e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007036:	6878      	ldr	r0, [r7, #4]
 8007038:	f000 f933 	bl	80072a2 <HAL_TIM_IC_CaptureCallback>
 800703c:	e005      	b.n	800704a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800703e:	6878      	ldr	r0, [r7, #4]
 8007040:	f000 f926 	bl	8007290 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007044:	6878      	ldr	r0, [r7, #4]
 8007046:	f000 f935 	bl	80072b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	2200      	movs	r2, #0
 800704e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	691b      	ldr	r3, [r3, #16]
 8007056:	f003 0301 	and.w	r3, r3, #1
 800705a:	2b01      	cmp	r3, #1
 800705c:	d10e      	bne.n	800707c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	68db      	ldr	r3, [r3, #12]
 8007064:	f003 0301 	and.w	r3, r3, #1
 8007068:	2b01      	cmp	r3, #1
 800706a:	d107      	bne.n	800707c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	f06f 0201 	mvn.w	r2, #1
 8007074:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007076:	6878      	ldr	r0, [r7, #4]
 8007078:	f7fc faa6 	bl	80035c8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	691b      	ldr	r3, [r3, #16]
 8007082:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007086:	2b80      	cmp	r3, #128	; 0x80
 8007088:	d10e      	bne.n	80070a8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	68db      	ldr	r3, [r3, #12]
 8007090:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007094:	2b80      	cmp	r3, #128	; 0x80
 8007096:	d107      	bne.n	80070a8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80070a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80070a2:	6878      	ldr	r0, [r7, #4]
 80070a4:	f000 fa77 	bl	8007596 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	691b      	ldr	r3, [r3, #16]
 80070ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070b2:	2b40      	cmp	r3, #64	; 0x40
 80070b4:	d10e      	bne.n	80070d4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	68db      	ldr	r3, [r3, #12]
 80070bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070c0:	2b40      	cmp	r3, #64	; 0x40
 80070c2:	d107      	bne.n	80070d4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80070cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80070ce:	6878      	ldr	r0, [r7, #4]
 80070d0:	f000 f8f9 	bl	80072c6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	691b      	ldr	r3, [r3, #16]
 80070da:	f003 0320 	and.w	r3, r3, #32
 80070de:	2b20      	cmp	r3, #32
 80070e0:	d10e      	bne.n	8007100 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	68db      	ldr	r3, [r3, #12]
 80070e8:	f003 0320 	and.w	r3, r3, #32
 80070ec:	2b20      	cmp	r3, #32
 80070ee:	d107      	bne.n	8007100 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	f06f 0220 	mvn.w	r2, #32
 80070f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80070fa:	6878      	ldr	r0, [r7, #4]
 80070fc:	f000 fa42 	bl	8007584 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007100:	bf00      	nop
 8007102:	3708      	adds	r7, #8
 8007104:	46bd      	mov	sp, r7
 8007106:	bd80      	pop	{r7, pc}

08007108 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007108:	b580      	push	{r7, lr}
 800710a:	b084      	sub	sp, #16
 800710c:	af00      	add	r7, sp, #0
 800710e:	6078      	str	r0, [r7, #4]
 8007110:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007118:	2b01      	cmp	r3, #1
 800711a:	d101      	bne.n	8007120 <HAL_TIM_ConfigClockSource+0x18>
 800711c:	2302      	movs	r3, #2
 800711e:	e0b3      	b.n	8007288 <HAL_TIM_ConfigClockSource+0x180>
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	2201      	movs	r2, #1
 8007124:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	2202      	movs	r2, #2
 800712c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	689b      	ldr	r3, [r3, #8]
 8007136:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800713e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007146:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	68fa      	ldr	r2, [r7, #12]
 800714e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007150:	683b      	ldr	r3, [r7, #0]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007158:	d03e      	beq.n	80071d8 <HAL_TIM_ConfigClockSource+0xd0>
 800715a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800715e:	f200 8087 	bhi.w	8007270 <HAL_TIM_ConfigClockSource+0x168>
 8007162:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007166:	f000 8085 	beq.w	8007274 <HAL_TIM_ConfigClockSource+0x16c>
 800716a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800716e:	d87f      	bhi.n	8007270 <HAL_TIM_ConfigClockSource+0x168>
 8007170:	2b70      	cmp	r3, #112	; 0x70
 8007172:	d01a      	beq.n	80071aa <HAL_TIM_ConfigClockSource+0xa2>
 8007174:	2b70      	cmp	r3, #112	; 0x70
 8007176:	d87b      	bhi.n	8007270 <HAL_TIM_ConfigClockSource+0x168>
 8007178:	2b60      	cmp	r3, #96	; 0x60
 800717a:	d050      	beq.n	800721e <HAL_TIM_ConfigClockSource+0x116>
 800717c:	2b60      	cmp	r3, #96	; 0x60
 800717e:	d877      	bhi.n	8007270 <HAL_TIM_ConfigClockSource+0x168>
 8007180:	2b50      	cmp	r3, #80	; 0x50
 8007182:	d03c      	beq.n	80071fe <HAL_TIM_ConfigClockSource+0xf6>
 8007184:	2b50      	cmp	r3, #80	; 0x50
 8007186:	d873      	bhi.n	8007270 <HAL_TIM_ConfigClockSource+0x168>
 8007188:	2b40      	cmp	r3, #64	; 0x40
 800718a:	d058      	beq.n	800723e <HAL_TIM_ConfigClockSource+0x136>
 800718c:	2b40      	cmp	r3, #64	; 0x40
 800718e:	d86f      	bhi.n	8007270 <HAL_TIM_ConfigClockSource+0x168>
 8007190:	2b30      	cmp	r3, #48	; 0x30
 8007192:	d064      	beq.n	800725e <HAL_TIM_ConfigClockSource+0x156>
 8007194:	2b30      	cmp	r3, #48	; 0x30
 8007196:	d86b      	bhi.n	8007270 <HAL_TIM_ConfigClockSource+0x168>
 8007198:	2b20      	cmp	r3, #32
 800719a:	d060      	beq.n	800725e <HAL_TIM_ConfigClockSource+0x156>
 800719c:	2b20      	cmp	r3, #32
 800719e:	d867      	bhi.n	8007270 <HAL_TIM_ConfigClockSource+0x168>
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d05c      	beq.n	800725e <HAL_TIM_ConfigClockSource+0x156>
 80071a4:	2b10      	cmp	r3, #16
 80071a6:	d05a      	beq.n	800725e <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80071a8:	e062      	b.n	8007270 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	6818      	ldr	r0, [r3, #0]
 80071ae:	683b      	ldr	r3, [r7, #0]
 80071b0:	6899      	ldr	r1, [r3, #8]
 80071b2:	683b      	ldr	r3, [r7, #0]
 80071b4:	685a      	ldr	r2, [r3, #4]
 80071b6:	683b      	ldr	r3, [r7, #0]
 80071b8:	68db      	ldr	r3, [r3, #12]
 80071ba:	f000 f966 	bl	800748a <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	689b      	ldr	r3, [r3, #8]
 80071c4:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80071cc:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	68fa      	ldr	r2, [r7, #12]
 80071d4:	609a      	str	r2, [r3, #8]
      break;
 80071d6:	e04e      	b.n	8007276 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	6818      	ldr	r0, [r3, #0]
 80071dc:	683b      	ldr	r3, [r7, #0]
 80071de:	6899      	ldr	r1, [r3, #8]
 80071e0:	683b      	ldr	r3, [r7, #0]
 80071e2:	685a      	ldr	r2, [r3, #4]
 80071e4:	683b      	ldr	r3, [r7, #0]
 80071e6:	68db      	ldr	r3, [r3, #12]
 80071e8:	f000 f94f 	bl	800748a <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	689a      	ldr	r2, [r3, #8]
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80071fa:	609a      	str	r2, [r3, #8]
      break;
 80071fc:	e03b      	b.n	8007276 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	6818      	ldr	r0, [r3, #0]
 8007202:	683b      	ldr	r3, [r7, #0]
 8007204:	6859      	ldr	r1, [r3, #4]
 8007206:	683b      	ldr	r3, [r7, #0]
 8007208:	68db      	ldr	r3, [r3, #12]
 800720a:	461a      	mov	r2, r3
 800720c:	f000 f8c6 	bl	800739c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	2150      	movs	r1, #80	; 0x50
 8007216:	4618      	mov	r0, r3
 8007218:	f000 f91d 	bl	8007456 <TIM_ITRx_SetConfig>
      break;
 800721c:	e02b      	b.n	8007276 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	6818      	ldr	r0, [r3, #0]
 8007222:	683b      	ldr	r3, [r7, #0]
 8007224:	6859      	ldr	r1, [r3, #4]
 8007226:	683b      	ldr	r3, [r7, #0]
 8007228:	68db      	ldr	r3, [r3, #12]
 800722a:	461a      	mov	r2, r3
 800722c:	f000 f8e4 	bl	80073f8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	2160      	movs	r1, #96	; 0x60
 8007236:	4618      	mov	r0, r3
 8007238:	f000 f90d 	bl	8007456 <TIM_ITRx_SetConfig>
      break;
 800723c:	e01b      	b.n	8007276 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	6818      	ldr	r0, [r3, #0]
 8007242:	683b      	ldr	r3, [r7, #0]
 8007244:	6859      	ldr	r1, [r3, #4]
 8007246:	683b      	ldr	r3, [r7, #0]
 8007248:	68db      	ldr	r3, [r3, #12]
 800724a:	461a      	mov	r2, r3
 800724c:	f000 f8a6 	bl	800739c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	2140      	movs	r1, #64	; 0x40
 8007256:	4618      	mov	r0, r3
 8007258:	f000 f8fd 	bl	8007456 <TIM_ITRx_SetConfig>
      break;
 800725c:	e00b      	b.n	8007276 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681a      	ldr	r2, [r3, #0]
 8007262:	683b      	ldr	r3, [r7, #0]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	4619      	mov	r1, r3
 8007268:	4610      	mov	r0, r2
 800726a:	f000 f8f4 	bl	8007456 <TIM_ITRx_SetConfig>
        break;
 800726e:	e002      	b.n	8007276 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8007270:	bf00      	nop
 8007272:	e000      	b.n	8007276 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8007274:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	2201      	movs	r2, #1
 800727a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	2200      	movs	r2, #0
 8007282:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007286:	2300      	movs	r3, #0
}
 8007288:	4618      	mov	r0, r3
 800728a:	3710      	adds	r7, #16
 800728c:	46bd      	mov	sp, r7
 800728e:	bd80      	pop	{r7, pc}

08007290 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007290:	b480      	push	{r7}
 8007292:	b083      	sub	sp, #12
 8007294:	af00      	add	r7, sp, #0
 8007296:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007298:	bf00      	nop
 800729a:	370c      	adds	r7, #12
 800729c:	46bd      	mov	sp, r7
 800729e:	bc80      	pop	{r7}
 80072a0:	4770      	bx	lr

080072a2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80072a2:	b480      	push	{r7}
 80072a4:	b083      	sub	sp, #12
 80072a6:	af00      	add	r7, sp, #0
 80072a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80072aa:	bf00      	nop
 80072ac:	370c      	adds	r7, #12
 80072ae:	46bd      	mov	sp, r7
 80072b0:	bc80      	pop	{r7}
 80072b2:	4770      	bx	lr

080072b4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80072b4:	b480      	push	{r7}
 80072b6:	b083      	sub	sp, #12
 80072b8:	af00      	add	r7, sp, #0
 80072ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80072bc:	bf00      	nop
 80072be:	370c      	adds	r7, #12
 80072c0:	46bd      	mov	sp, r7
 80072c2:	bc80      	pop	{r7}
 80072c4:	4770      	bx	lr

080072c6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80072c6:	b480      	push	{r7}
 80072c8:	b083      	sub	sp, #12
 80072ca:	af00      	add	r7, sp, #0
 80072cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80072ce:	bf00      	nop
 80072d0:	370c      	adds	r7, #12
 80072d2:	46bd      	mov	sp, r7
 80072d4:	bc80      	pop	{r7}
 80072d6:	4770      	bx	lr

080072d8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80072d8:	b480      	push	{r7}
 80072da:	b085      	sub	sp, #20
 80072dc:	af00      	add	r7, sp, #0
 80072de:	6078      	str	r0, [r7, #4]
 80072e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	4a29      	ldr	r2, [pc, #164]	; (8007390 <TIM_Base_SetConfig+0xb8>)
 80072ec:	4293      	cmp	r3, r2
 80072ee:	d00b      	beq.n	8007308 <TIM_Base_SetConfig+0x30>
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80072f6:	d007      	beq.n	8007308 <TIM_Base_SetConfig+0x30>
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	4a26      	ldr	r2, [pc, #152]	; (8007394 <TIM_Base_SetConfig+0xbc>)
 80072fc:	4293      	cmp	r3, r2
 80072fe:	d003      	beq.n	8007308 <TIM_Base_SetConfig+0x30>
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	4a25      	ldr	r2, [pc, #148]	; (8007398 <TIM_Base_SetConfig+0xc0>)
 8007304:	4293      	cmp	r3, r2
 8007306:	d108      	bne.n	800731a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800730e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007310:	683b      	ldr	r3, [r7, #0]
 8007312:	685b      	ldr	r3, [r3, #4]
 8007314:	68fa      	ldr	r2, [r7, #12]
 8007316:	4313      	orrs	r3, r2
 8007318:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	4a1c      	ldr	r2, [pc, #112]	; (8007390 <TIM_Base_SetConfig+0xb8>)
 800731e:	4293      	cmp	r3, r2
 8007320:	d00b      	beq.n	800733a <TIM_Base_SetConfig+0x62>
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007328:	d007      	beq.n	800733a <TIM_Base_SetConfig+0x62>
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	4a19      	ldr	r2, [pc, #100]	; (8007394 <TIM_Base_SetConfig+0xbc>)
 800732e:	4293      	cmp	r3, r2
 8007330:	d003      	beq.n	800733a <TIM_Base_SetConfig+0x62>
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	4a18      	ldr	r2, [pc, #96]	; (8007398 <TIM_Base_SetConfig+0xc0>)
 8007336:	4293      	cmp	r3, r2
 8007338:	d108      	bne.n	800734c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007340:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007342:	683b      	ldr	r3, [r7, #0]
 8007344:	68db      	ldr	r3, [r3, #12]
 8007346:	68fa      	ldr	r2, [r7, #12]
 8007348:	4313      	orrs	r3, r2
 800734a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007352:	683b      	ldr	r3, [r7, #0]
 8007354:	695b      	ldr	r3, [r3, #20]
 8007356:	4313      	orrs	r3, r2
 8007358:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	68fa      	ldr	r2, [r7, #12]
 800735e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007360:	683b      	ldr	r3, [r7, #0]
 8007362:	689a      	ldr	r2, [r3, #8]
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007368:	683b      	ldr	r3, [r7, #0]
 800736a:	681a      	ldr	r2, [r3, #0]
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	4a07      	ldr	r2, [pc, #28]	; (8007390 <TIM_Base_SetConfig+0xb8>)
 8007374:	4293      	cmp	r3, r2
 8007376:	d103      	bne.n	8007380 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007378:	683b      	ldr	r3, [r7, #0]
 800737a:	691a      	ldr	r2, [r3, #16]
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	2201      	movs	r2, #1
 8007384:	615a      	str	r2, [r3, #20]
}
 8007386:	bf00      	nop
 8007388:	3714      	adds	r7, #20
 800738a:	46bd      	mov	sp, r7
 800738c:	bc80      	pop	{r7}
 800738e:	4770      	bx	lr
 8007390:	40012c00 	.word	0x40012c00
 8007394:	40000400 	.word	0x40000400
 8007398:	40000800 	.word	0x40000800

0800739c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800739c:	b480      	push	{r7}
 800739e:	b087      	sub	sp, #28
 80073a0:	af00      	add	r7, sp, #0
 80073a2:	60f8      	str	r0, [r7, #12]
 80073a4:	60b9      	str	r1, [r7, #8]
 80073a6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	6a1b      	ldr	r3, [r3, #32]
 80073ac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	6a1b      	ldr	r3, [r3, #32]
 80073b2:	f023 0201 	bic.w	r2, r3, #1
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	699b      	ldr	r3, [r3, #24]
 80073be:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80073c0:	693b      	ldr	r3, [r7, #16]
 80073c2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80073c6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	011b      	lsls	r3, r3, #4
 80073cc:	693a      	ldr	r2, [r7, #16]
 80073ce:	4313      	orrs	r3, r2
 80073d0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80073d2:	697b      	ldr	r3, [r7, #20]
 80073d4:	f023 030a 	bic.w	r3, r3, #10
 80073d8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80073da:	697a      	ldr	r2, [r7, #20]
 80073dc:	68bb      	ldr	r3, [r7, #8]
 80073de:	4313      	orrs	r3, r2
 80073e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	693a      	ldr	r2, [r7, #16]
 80073e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	697a      	ldr	r2, [r7, #20]
 80073ec:	621a      	str	r2, [r3, #32]
}
 80073ee:	bf00      	nop
 80073f0:	371c      	adds	r7, #28
 80073f2:	46bd      	mov	sp, r7
 80073f4:	bc80      	pop	{r7}
 80073f6:	4770      	bx	lr

080073f8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80073f8:	b480      	push	{r7}
 80073fa:	b087      	sub	sp, #28
 80073fc:	af00      	add	r7, sp, #0
 80073fe:	60f8      	str	r0, [r7, #12]
 8007400:	60b9      	str	r1, [r7, #8]
 8007402:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	6a1b      	ldr	r3, [r3, #32]
 8007408:	f023 0210 	bic.w	r2, r3, #16
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	699b      	ldr	r3, [r3, #24]
 8007414:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	6a1b      	ldr	r3, [r3, #32]
 800741a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800741c:	697b      	ldr	r3, [r7, #20]
 800741e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007422:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	031b      	lsls	r3, r3, #12
 8007428:	697a      	ldr	r2, [r7, #20]
 800742a:	4313      	orrs	r3, r2
 800742c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800742e:	693b      	ldr	r3, [r7, #16]
 8007430:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007434:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007436:	68bb      	ldr	r3, [r7, #8]
 8007438:	011b      	lsls	r3, r3, #4
 800743a:	693a      	ldr	r2, [r7, #16]
 800743c:	4313      	orrs	r3, r2
 800743e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	697a      	ldr	r2, [r7, #20]
 8007444:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	693a      	ldr	r2, [r7, #16]
 800744a:	621a      	str	r2, [r3, #32]
}
 800744c:	bf00      	nop
 800744e:	371c      	adds	r7, #28
 8007450:	46bd      	mov	sp, r7
 8007452:	bc80      	pop	{r7}
 8007454:	4770      	bx	lr

08007456 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007456:	b480      	push	{r7}
 8007458:	b085      	sub	sp, #20
 800745a:	af00      	add	r7, sp, #0
 800745c:	6078      	str	r0, [r7, #4]
 800745e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	689b      	ldr	r3, [r3, #8]
 8007464:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800746c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800746e:	683a      	ldr	r2, [r7, #0]
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	4313      	orrs	r3, r2
 8007474:	f043 0307 	orr.w	r3, r3, #7
 8007478:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	68fa      	ldr	r2, [r7, #12]
 800747e:	609a      	str	r2, [r3, #8]
}
 8007480:	bf00      	nop
 8007482:	3714      	adds	r7, #20
 8007484:	46bd      	mov	sp, r7
 8007486:	bc80      	pop	{r7}
 8007488:	4770      	bx	lr

0800748a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800748a:	b480      	push	{r7}
 800748c:	b087      	sub	sp, #28
 800748e:	af00      	add	r7, sp, #0
 8007490:	60f8      	str	r0, [r7, #12]
 8007492:	60b9      	str	r1, [r7, #8]
 8007494:	607a      	str	r2, [r7, #4]
 8007496:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	689b      	ldr	r3, [r3, #8]
 800749c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800749e:	697b      	ldr	r3, [r7, #20]
 80074a0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80074a4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80074a6:	683b      	ldr	r3, [r7, #0]
 80074a8:	021a      	lsls	r2, r3, #8
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	431a      	orrs	r2, r3
 80074ae:	68bb      	ldr	r3, [r7, #8]
 80074b0:	4313      	orrs	r3, r2
 80074b2:	697a      	ldr	r2, [r7, #20]
 80074b4:	4313      	orrs	r3, r2
 80074b6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	697a      	ldr	r2, [r7, #20]
 80074bc:	609a      	str	r2, [r3, #8]
}
 80074be:	bf00      	nop
 80074c0:	371c      	adds	r7, #28
 80074c2:	46bd      	mov	sp, r7
 80074c4:	bc80      	pop	{r7}
 80074c6:	4770      	bx	lr

080074c8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80074c8:	b480      	push	{r7}
 80074ca:	b085      	sub	sp, #20
 80074cc:	af00      	add	r7, sp, #0
 80074ce:	6078      	str	r0, [r7, #4]
 80074d0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80074d8:	2b01      	cmp	r3, #1
 80074da:	d101      	bne.n	80074e0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80074dc:	2302      	movs	r3, #2
 80074de:	e046      	b.n	800756e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	2201      	movs	r2, #1
 80074e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	2202      	movs	r2, #2
 80074ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	685b      	ldr	r3, [r3, #4]
 80074f6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	689b      	ldr	r3, [r3, #8]
 80074fe:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007506:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007508:	683b      	ldr	r3, [r7, #0]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	68fa      	ldr	r2, [r7, #12]
 800750e:	4313      	orrs	r3, r2
 8007510:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	68fa      	ldr	r2, [r7, #12]
 8007518:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	4a16      	ldr	r2, [pc, #88]	; (8007578 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8007520:	4293      	cmp	r3, r2
 8007522:	d00e      	beq.n	8007542 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800752c:	d009      	beq.n	8007542 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	4a12      	ldr	r2, [pc, #72]	; (800757c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8007534:	4293      	cmp	r3, r2
 8007536:	d004      	beq.n	8007542 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	4a10      	ldr	r2, [pc, #64]	; (8007580 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800753e:	4293      	cmp	r3, r2
 8007540:	d10c      	bne.n	800755c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007542:	68bb      	ldr	r3, [r7, #8]
 8007544:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007548:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800754a:	683b      	ldr	r3, [r7, #0]
 800754c:	685b      	ldr	r3, [r3, #4]
 800754e:	68ba      	ldr	r2, [r7, #8]
 8007550:	4313      	orrs	r3, r2
 8007552:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	68ba      	ldr	r2, [r7, #8]
 800755a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	2201      	movs	r2, #1
 8007560:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	2200      	movs	r2, #0
 8007568:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800756c:	2300      	movs	r3, #0
}
 800756e:	4618      	mov	r0, r3
 8007570:	3714      	adds	r7, #20
 8007572:	46bd      	mov	sp, r7
 8007574:	bc80      	pop	{r7}
 8007576:	4770      	bx	lr
 8007578:	40012c00 	.word	0x40012c00
 800757c:	40000400 	.word	0x40000400
 8007580:	40000800 	.word	0x40000800

08007584 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007584:	b480      	push	{r7}
 8007586:	b083      	sub	sp, #12
 8007588:	af00      	add	r7, sp, #0
 800758a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800758c:	bf00      	nop
 800758e:	370c      	adds	r7, #12
 8007590:	46bd      	mov	sp, r7
 8007592:	bc80      	pop	{r7}
 8007594:	4770      	bx	lr

08007596 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007596:	b480      	push	{r7}
 8007598:	b083      	sub	sp, #12
 800759a:	af00      	add	r7, sp, #0
 800759c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800759e:	bf00      	nop
 80075a0:	370c      	adds	r7, #12
 80075a2:	46bd      	mov	sp, r7
 80075a4:	bc80      	pop	{r7}
 80075a6:	4770      	bx	lr

080075a8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80075a8:	b580      	push	{r7, lr}
 80075aa:	b082      	sub	sp, #8
 80075ac:	af00      	add	r7, sp, #0
 80075ae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d101      	bne.n	80075ba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80075b6:	2301      	movs	r3, #1
 80075b8:	e03f      	b.n	800763a <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80075c0:	b2db      	uxtb	r3, r3
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d106      	bne.n	80075d4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	2200      	movs	r2, #0
 80075ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80075ce:	6878      	ldr	r0, [r7, #4]
 80075d0:	f7fc f9b8 	bl	8003944 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	2224      	movs	r2, #36	; 0x24
 80075d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	68da      	ldr	r2, [r3, #12]
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80075ea:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80075ec:	6878      	ldr	r0, [r7, #4]
 80075ee:	f000 fcc7 	bl	8007f80 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	691a      	ldr	r2, [r3, #16]
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007600:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	695a      	ldr	r2, [r3, #20]
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007610:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	68da      	ldr	r2, [r3, #12]
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007620:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	2200      	movs	r2, #0
 8007626:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	2220      	movs	r2, #32
 800762c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	2220      	movs	r2, #32
 8007634:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007638:	2300      	movs	r3, #0
}
 800763a:	4618      	mov	r0, r3
 800763c:	3708      	adds	r7, #8
 800763e:	46bd      	mov	sp, r7
 8007640:	bd80      	pop	{r7, pc}

08007642 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007642:	b580      	push	{r7, lr}
 8007644:	b08a      	sub	sp, #40	; 0x28
 8007646:	af02      	add	r7, sp, #8
 8007648:	60f8      	str	r0, [r7, #12]
 800764a:	60b9      	str	r1, [r7, #8]
 800764c:	603b      	str	r3, [r7, #0]
 800764e:	4613      	mov	r3, r2
 8007650:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007652:	2300      	movs	r3, #0
 8007654:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800765c:	b2db      	uxtb	r3, r3
 800765e:	2b20      	cmp	r3, #32
 8007660:	d17c      	bne.n	800775c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007662:	68bb      	ldr	r3, [r7, #8]
 8007664:	2b00      	cmp	r3, #0
 8007666:	d002      	beq.n	800766e <HAL_UART_Transmit+0x2c>
 8007668:	88fb      	ldrh	r3, [r7, #6]
 800766a:	2b00      	cmp	r3, #0
 800766c:	d101      	bne.n	8007672 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800766e:	2301      	movs	r3, #1
 8007670:	e075      	b.n	800775e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007678:	2b01      	cmp	r3, #1
 800767a:	d101      	bne.n	8007680 <HAL_UART_Transmit+0x3e>
 800767c:	2302      	movs	r3, #2
 800767e:	e06e      	b.n	800775e <HAL_UART_Transmit+0x11c>
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	2201      	movs	r2, #1
 8007684:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	2200      	movs	r2, #0
 800768c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	2221      	movs	r2, #33	; 0x21
 8007692:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007696:	f7fc fb39 	bl	8003d0c <HAL_GetTick>
 800769a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	88fa      	ldrh	r2, [r7, #6]
 80076a0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	88fa      	ldrh	r2, [r7, #6]
 80076a6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	689b      	ldr	r3, [r3, #8]
 80076ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80076b0:	d108      	bne.n	80076c4 <HAL_UART_Transmit+0x82>
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	691b      	ldr	r3, [r3, #16]
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d104      	bne.n	80076c4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80076ba:	2300      	movs	r3, #0
 80076bc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80076be:	68bb      	ldr	r3, [r7, #8]
 80076c0:	61bb      	str	r3, [r7, #24]
 80076c2:	e003      	b.n	80076cc <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80076c4:	68bb      	ldr	r3, [r7, #8]
 80076c6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80076c8:	2300      	movs	r3, #0
 80076ca:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	2200      	movs	r2, #0
 80076d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80076d4:	e02a      	b.n	800772c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80076d6:	683b      	ldr	r3, [r7, #0]
 80076d8:	9300      	str	r3, [sp, #0]
 80076da:	697b      	ldr	r3, [r7, #20]
 80076dc:	2200      	movs	r2, #0
 80076de:	2180      	movs	r1, #128	; 0x80
 80076e0:	68f8      	ldr	r0, [r7, #12]
 80076e2:	f000 fab3 	bl	8007c4c <UART_WaitOnFlagUntilTimeout>
 80076e6:	4603      	mov	r3, r0
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d001      	beq.n	80076f0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80076ec:	2303      	movs	r3, #3
 80076ee:	e036      	b.n	800775e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80076f0:	69fb      	ldr	r3, [r7, #28]
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d10b      	bne.n	800770e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80076f6:	69bb      	ldr	r3, [r7, #24]
 80076f8:	881b      	ldrh	r3, [r3, #0]
 80076fa:	461a      	mov	r2, r3
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007704:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8007706:	69bb      	ldr	r3, [r7, #24]
 8007708:	3302      	adds	r3, #2
 800770a:	61bb      	str	r3, [r7, #24]
 800770c:	e007      	b.n	800771e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800770e:	69fb      	ldr	r3, [r7, #28]
 8007710:	781a      	ldrb	r2, [r3, #0]
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007718:	69fb      	ldr	r3, [r7, #28]
 800771a:	3301      	adds	r3, #1
 800771c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007722:	b29b      	uxth	r3, r3
 8007724:	3b01      	subs	r3, #1
 8007726:	b29a      	uxth	r2, r3
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007730:	b29b      	uxth	r3, r3
 8007732:	2b00      	cmp	r3, #0
 8007734:	d1cf      	bne.n	80076d6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007736:	683b      	ldr	r3, [r7, #0]
 8007738:	9300      	str	r3, [sp, #0]
 800773a:	697b      	ldr	r3, [r7, #20]
 800773c:	2200      	movs	r2, #0
 800773e:	2140      	movs	r1, #64	; 0x40
 8007740:	68f8      	ldr	r0, [r7, #12]
 8007742:	f000 fa83 	bl	8007c4c <UART_WaitOnFlagUntilTimeout>
 8007746:	4603      	mov	r3, r0
 8007748:	2b00      	cmp	r3, #0
 800774a:	d001      	beq.n	8007750 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800774c:	2303      	movs	r3, #3
 800774e:	e006      	b.n	800775e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	2220      	movs	r2, #32
 8007754:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8007758:	2300      	movs	r3, #0
 800775a:	e000      	b.n	800775e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800775c:	2302      	movs	r3, #2
  }
}
 800775e:	4618      	mov	r0, r3
 8007760:	3720      	adds	r7, #32
 8007762:	46bd      	mov	sp, r7
 8007764:	bd80      	pop	{r7, pc}

08007766 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007766:	b580      	push	{r7, lr}
 8007768:	b08a      	sub	sp, #40	; 0x28
 800776a:	af02      	add	r7, sp, #8
 800776c:	60f8      	str	r0, [r7, #12]
 800776e:	60b9      	str	r1, [r7, #8]
 8007770:	603b      	str	r3, [r7, #0]
 8007772:	4613      	mov	r3, r2
 8007774:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007776:	2300      	movs	r3, #0
 8007778:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007780:	b2db      	uxtb	r3, r3
 8007782:	2b20      	cmp	r3, #32
 8007784:	f040 808c 	bne.w	80078a0 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007788:	68bb      	ldr	r3, [r7, #8]
 800778a:	2b00      	cmp	r3, #0
 800778c:	d002      	beq.n	8007794 <HAL_UART_Receive+0x2e>
 800778e:	88fb      	ldrh	r3, [r7, #6]
 8007790:	2b00      	cmp	r3, #0
 8007792:	d101      	bne.n	8007798 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8007794:	2301      	movs	r3, #1
 8007796:	e084      	b.n	80078a2 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800779e:	2b01      	cmp	r3, #1
 80077a0:	d101      	bne.n	80077a6 <HAL_UART_Receive+0x40>
 80077a2:	2302      	movs	r3, #2
 80077a4:	e07d      	b.n	80078a2 <HAL_UART_Receive+0x13c>
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	2201      	movs	r2, #1
 80077aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	2200      	movs	r2, #0
 80077b2:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	2222      	movs	r2, #34	; 0x22
 80077b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	2200      	movs	r2, #0
 80077c0:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80077c2:	f7fc faa3 	bl	8003d0c <HAL_GetTick>
 80077c6:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	88fa      	ldrh	r2, [r7, #6]
 80077cc:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	88fa      	ldrh	r2, [r7, #6]
 80077d2:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	689b      	ldr	r3, [r3, #8]
 80077d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80077dc:	d108      	bne.n	80077f0 <HAL_UART_Receive+0x8a>
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	691b      	ldr	r3, [r3, #16]
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d104      	bne.n	80077f0 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 80077e6:	2300      	movs	r3, #0
 80077e8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80077ea:	68bb      	ldr	r3, [r7, #8]
 80077ec:	61bb      	str	r3, [r7, #24]
 80077ee:	e003      	b.n	80077f8 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 80077f0:	68bb      	ldr	r3, [r7, #8]
 80077f2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80077f4:	2300      	movs	r3, #0
 80077f6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	2200      	movs	r2, #0
 80077fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8007800:	e043      	b.n	800788a <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8007802:	683b      	ldr	r3, [r7, #0]
 8007804:	9300      	str	r3, [sp, #0]
 8007806:	697b      	ldr	r3, [r7, #20]
 8007808:	2200      	movs	r2, #0
 800780a:	2120      	movs	r1, #32
 800780c:	68f8      	ldr	r0, [r7, #12]
 800780e:	f000 fa1d 	bl	8007c4c <UART_WaitOnFlagUntilTimeout>
 8007812:	4603      	mov	r3, r0
 8007814:	2b00      	cmp	r3, #0
 8007816:	d001      	beq.n	800781c <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8007818:	2303      	movs	r3, #3
 800781a:	e042      	b.n	80078a2 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 800781c:	69fb      	ldr	r3, [r7, #28]
 800781e:	2b00      	cmp	r3, #0
 8007820:	d10c      	bne.n	800783c <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	685b      	ldr	r3, [r3, #4]
 8007828:	b29b      	uxth	r3, r3
 800782a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800782e:	b29a      	uxth	r2, r3
 8007830:	69bb      	ldr	r3, [r7, #24]
 8007832:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8007834:	69bb      	ldr	r3, [r7, #24]
 8007836:	3302      	adds	r3, #2
 8007838:	61bb      	str	r3, [r7, #24]
 800783a:	e01f      	b.n	800787c <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	689b      	ldr	r3, [r3, #8]
 8007840:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007844:	d007      	beq.n	8007856 <HAL_UART_Receive+0xf0>
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	689b      	ldr	r3, [r3, #8]
 800784a:	2b00      	cmp	r3, #0
 800784c:	d10a      	bne.n	8007864 <HAL_UART_Receive+0xfe>
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	691b      	ldr	r3, [r3, #16]
 8007852:	2b00      	cmp	r3, #0
 8007854:	d106      	bne.n	8007864 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	685b      	ldr	r3, [r3, #4]
 800785c:	b2da      	uxtb	r2, r3
 800785e:	69fb      	ldr	r3, [r7, #28]
 8007860:	701a      	strb	r2, [r3, #0]
 8007862:	e008      	b.n	8007876 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	685b      	ldr	r3, [r3, #4]
 800786a:	b2db      	uxtb	r3, r3
 800786c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007870:	b2da      	uxtb	r2, r3
 8007872:	69fb      	ldr	r3, [r7, #28]
 8007874:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8007876:	69fb      	ldr	r3, [r7, #28]
 8007878:	3301      	adds	r3, #1
 800787a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007880:	b29b      	uxth	r3, r3
 8007882:	3b01      	subs	r3, #1
 8007884:	b29a      	uxth	r2, r3
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800788e:	b29b      	uxth	r3, r3
 8007890:	2b00      	cmp	r3, #0
 8007892:	d1b6      	bne.n	8007802 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	2220      	movs	r2, #32
 8007898:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 800789c:	2300      	movs	r3, #0
 800789e:	e000      	b.n	80078a2 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 80078a0:	2302      	movs	r3, #2
  }
}
 80078a2:	4618      	mov	r0, r3
 80078a4:	3720      	adds	r7, #32
 80078a6:	46bd      	mov	sp, r7
 80078a8:	bd80      	pop	{r7, pc}
	...

080078ac <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80078ac:	b580      	push	{r7, lr}
 80078ae:	b08a      	sub	sp, #40	; 0x28
 80078b0:	af00      	add	r7, sp, #0
 80078b2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	68db      	ldr	r3, [r3, #12]
 80078c2:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	695b      	ldr	r3, [r3, #20]
 80078ca:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 80078cc:	2300      	movs	r3, #0
 80078ce:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 80078d0:	2300      	movs	r3, #0
 80078d2:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80078d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078d6:	f003 030f 	and.w	r3, r3, #15
 80078da:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 80078dc:	69bb      	ldr	r3, [r7, #24]
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d10d      	bne.n	80078fe <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80078e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078e4:	f003 0320 	and.w	r3, r3, #32
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d008      	beq.n	80078fe <HAL_UART_IRQHandler+0x52>
 80078ec:	6a3b      	ldr	r3, [r7, #32]
 80078ee:	f003 0320 	and.w	r3, r3, #32
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d003      	beq.n	80078fe <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80078f6:	6878      	ldr	r0, [r7, #4]
 80078f8:	f000 fa99 	bl	8007e2e <UART_Receive_IT>
      return;
 80078fc:	e17b      	b.n	8007bf6 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80078fe:	69bb      	ldr	r3, [r7, #24]
 8007900:	2b00      	cmp	r3, #0
 8007902:	f000 80b1 	beq.w	8007a68 <HAL_UART_IRQHandler+0x1bc>
 8007906:	69fb      	ldr	r3, [r7, #28]
 8007908:	f003 0301 	and.w	r3, r3, #1
 800790c:	2b00      	cmp	r3, #0
 800790e:	d105      	bne.n	800791c <HAL_UART_IRQHandler+0x70>
 8007910:	6a3b      	ldr	r3, [r7, #32]
 8007912:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007916:	2b00      	cmp	r3, #0
 8007918:	f000 80a6 	beq.w	8007a68 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800791c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800791e:	f003 0301 	and.w	r3, r3, #1
 8007922:	2b00      	cmp	r3, #0
 8007924:	d00a      	beq.n	800793c <HAL_UART_IRQHandler+0x90>
 8007926:	6a3b      	ldr	r3, [r7, #32]
 8007928:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800792c:	2b00      	cmp	r3, #0
 800792e:	d005      	beq.n	800793c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007934:	f043 0201 	orr.w	r2, r3, #1
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800793c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800793e:	f003 0304 	and.w	r3, r3, #4
 8007942:	2b00      	cmp	r3, #0
 8007944:	d00a      	beq.n	800795c <HAL_UART_IRQHandler+0xb0>
 8007946:	69fb      	ldr	r3, [r7, #28]
 8007948:	f003 0301 	and.w	r3, r3, #1
 800794c:	2b00      	cmp	r3, #0
 800794e:	d005      	beq.n	800795c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007954:	f043 0202 	orr.w	r2, r3, #2
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800795c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800795e:	f003 0302 	and.w	r3, r3, #2
 8007962:	2b00      	cmp	r3, #0
 8007964:	d00a      	beq.n	800797c <HAL_UART_IRQHandler+0xd0>
 8007966:	69fb      	ldr	r3, [r7, #28]
 8007968:	f003 0301 	and.w	r3, r3, #1
 800796c:	2b00      	cmp	r3, #0
 800796e:	d005      	beq.n	800797c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007974:	f043 0204 	orr.w	r2, r3, #4
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800797c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800797e:	f003 0308 	and.w	r3, r3, #8
 8007982:	2b00      	cmp	r3, #0
 8007984:	d00f      	beq.n	80079a6 <HAL_UART_IRQHandler+0xfa>
 8007986:	6a3b      	ldr	r3, [r7, #32]
 8007988:	f003 0320 	and.w	r3, r3, #32
 800798c:	2b00      	cmp	r3, #0
 800798e:	d104      	bne.n	800799a <HAL_UART_IRQHandler+0xee>
 8007990:	69fb      	ldr	r3, [r7, #28]
 8007992:	f003 0301 	and.w	r3, r3, #1
 8007996:	2b00      	cmp	r3, #0
 8007998:	d005      	beq.n	80079a6 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800799e:	f043 0208 	orr.w	r2, r3, #8
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	f000 811e 	beq.w	8007bec <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80079b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079b2:	f003 0320 	and.w	r3, r3, #32
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d007      	beq.n	80079ca <HAL_UART_IRQHandler+0x11e>
 80079ba:	6a3b      	ldr	r3, [r7, #32]
 80079bc:	f003 0320 	and.w	r3, r3, #32
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d002      	beq.n	80079ca <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 80079c4:	6878      	ldr	r0, [r7, #4]
 80079c6:	f000 fa32 	bl	8007e2e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	695b      	ldr	r3, [r3, #20]
 80079d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	bf14      	ite	ne
 80079d8:	2301      	movne	r3, #1
 80079da:	2300      	moveq	r3, #0
 80079dc:	b2db      	uxtb	r3, r3
 80079de:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079e4:	f003 0308 	and.w	r3, r3, #8
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d102      	bne.n	80079f2 <HAL_UART_IRQHandler+0x146>
 80079ec:	697b      	ldr	r3, [r7, #20]
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d031      	beq.n	8007a56 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80079f2:	6878      	ldr	r0, [r7, #4]
 80079f4:	f000 f974 	bl	8007ce0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	695b      	ldr	r3, [r3, #20]
 80079fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d023      	beq.n	8007a4e <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	695a      	ldr	r2, [r3, #20]
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007a14:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d013      	beq.n	8007a46 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a22:	4a76      	ldr	r2, [pc, #472]	; (8007bfc <HAL_UART_IRQHandler+0x350>)
 8007a24:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a2a:	4618      	mov	r0, r3
 8007a2c:	f7fc ff3c 	bl	80048a8 <HAL_DMA_Abort_IT>
 8007a30:	4603      	mov	r3, r0
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d016      	beq.n	8007a64 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a3c:	687a      	ldr	r2, [r7, #4]
 8007a3e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007a40:	4610      	mov	r0, r2
 8007a42:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a44:	e00e      	b.n	8007a64 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007a46:	6878      	ldr	r0, [r7, #4]
 8007a48:	f000 f8ec 	bl	8007c24 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a4c:	e00a      	b.n	8007a64 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007a4e:	6878      	ldr	r0, [r7, #4]
 8007a50:	f000 f8e8 	bl	8007c24 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a54:	e006      	b.n	8007a64 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007a56:	6878      	ldr	r0, [r7, #4]
 8007a58:	f000 f8e4 	bl	8007c24 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	2200      	movs	r2, #0
 8007a60:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8007a62:	e0c3      	b.n	8007bec <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a64:	bf00      	nop
    return;
 8007a66:	e0c1      	b.n	8007bec <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a6c:	2b01      	cmp	r3, #1
 8007a6e:	f040 80a1 	bne.w	8007bb4 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8007a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a74:	f003 0310 	and.w	r3, r3, #16
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	f000 809b 	beq.w	8007bb4 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8007a7e:	6a3b      	ldr	r3, [r7, #32]
 8007a80:	f003 0310 	and.w	r3, r3, #16
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	f000 8095 	beq.w	8007bb4 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007a8a:	2300      	movs	r3, #0
 8007a8c:	60fb      	str	r3, [r7, #12]
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	60fb      	str	r3, [r7, #12]
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	685b      	ldr	r3, [r3, #4]
 8007a9c:	60fb      	str	r3, [r7, #12]
 8007a9e:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	695b      	ldr	r3, [r3, #20]
 8007aa6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d04e      	beq.n	8007b4c <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	685b      	ldr	r3, [r3, #4]
 8007ab6:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8007ab8:	8a3b      	ldrh	r3, [r7, #16]
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	f000 8098 	beq.w	8007bf0 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007ac4:	8a3a      	ldrh	r2, [r7, #16]
 8007ac6:	429a      	cmp	r2, r3
 8007ac8:	f080 8092 	bcs.w	8007bf0 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	8a3a      	ldrh	r2, [r7, #16]
 8007ad0:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ad6:	699b      	ldr	r3, [r3, #24]
 8007ad8:	2b20      	cmp	r3, #32
 8007ada:	d02b      	beq.n	8007b34 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	68da      	ldr	r2, [r3, #12]
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007aea:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	695a      	ldr	r2, [r3, #20]
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	f022 0201 	bic.w	r2, r2, #1
 8007afa:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	695a      	ldr	r2, [r3, #20]
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007b0a:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	2220      	movs	r2, #32
 8007b10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	2200      	movs	r2, #0
 8007b18:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	68da      	ldr	r2, [r3, #12]
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	f022 0210 	bic.w	r2, r2, #16
 8007b28:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b2e:	4618      	mov	r0, r3
 8007b30:	f7fc fe7f 	bl	8004832 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007b3c:	b29b      	uxth	r3, r3
 8007b3e:	1ad3      	subs	r3, r2, r3
 8007b40:	b29b      	uxth	r3, r3
 8007b42:	4619      	mov	r1, r3
 8007b44:	6878      	ldr	r0, [r7, #4]
 8007b46:	f000 f876 	bl	8007c36 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8007b4a:	e051      	b.n	8007bf0 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007b54:	b29b      	uxth	r3, r3
 8007b56:	1ad3      	subs	r3, r2, r3
 8007b58:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007b5e:	b29b      	uxth	r3, r3
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d047      	beq.n	8007bf4 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8007b64:	8a7b      	ldrh	r3, [r7, #18]
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d044      	beq.n	8007bf4 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	68da      	ldr	r2, [r3, #12]
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007b78:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	695a      	ldr	r2, [r3, #20]
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	f022 0201 	bic.w	r2, r2, #1
 8007b88:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	2220      	movs	r2, #32
 8007b8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	2200      	movs	r2, #0
 8007b96:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	68da      	ldr	r2, [r3, #12]
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	f022 0210 	bic.w	r2, r2, #16
 8007ba6:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007ba8:	8a7b      	ldrh	r3, [r7, #18]
 8007baa:	4619      	mov	r1, r3
 8007bac:	6878      	ldr	r0, [r7, #4]
 8007bae:	f000 f842 	bl	8007c36 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8007bb2:	e01f      	b.n	8007bf4 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d008      	beq.n	8007bd0 <HAL_UART_IRQHandler+0x324>
 8007bbe:	6a3b      	ldr	r3, [r7, #32]
 8007bc0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d003      	beq.n	8007bd0 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8007bc8:	6878      	ldr	r0, [r7, #4]
 8007bca:	f000 f8c9 	bl	8007d60 <UART_Transmit_IT>
    return;
 8007bce:	e012      	b.n	8007bf6 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d00d      	beq.n	8007bf6 <HAL_UART_IRQHandler+0x34a>
 8007bda:	6a3b      	ldr	r3, [r7, #32]
 8007bdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d008      	beq.n	8007bf6 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8007be4:	6878      	ldr	r0, [r7, #4]
 8007be6:	f000 f90a 	bl	8007dfe <UART_EndTransmit_IT>
    return;
 8007bea:	e004      	b.n	8007bf6 <HAL_UART_IRQHandler+0x34a>
    return;
 8007bec:	bf00      	nop
 8007bee:	e002      	b.n	8007bf6 <HAL_UART_IRQHandler+0x34a>
      return;
 8007bf0:	bf00      	nop
 8007bf2:	e000      	b.n	8007bf6 <HAL_UART_IRQHandler+0x34a>
      return;
 8007bf4:	bf00      	nop
  }
}
 8007bf6:	3728      	adds	r7, #40	; 0x28
 8007bf8:	46bd      	mov	sp, r7
 8007bfa:	bd80      	pop	{r7, pc}
 8007bfc:	08007d39 	.word	0x08007d39

08007c00 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007c00:	b480      	push	{r7}
 8007c02:	b083      	sub	sp, #12
 8007c04:	af00      	add	r7, sp, #0
 8007c06:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007c08:	bf00      	nop
 8007c0a:	370c      	adds	r7, #12
 8007c0c:	46bd      	mov	sp, r7
 8007c0e:	bc80      	pop	{r7}
 8007c10:	4770      	bx	lr

08007c12 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007c12:	b480      	push	{r7}
 8007c14:	b083      	sub	sp, #12
 8007c16:	af00      	add	r7, sp, #0
 8007c18:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8007c1a:	bf00      	nop
 8007c1c:	370c      	adds	r7, #12
 8007c1e:	46bd      	mov	sp, r7
 8007c20:	bc80      	pop	{r7}
 8007c22:	4770      	bx	lr

08007c24 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007c24:	b480      	push	{r7}
 8007c26:	b083      	sub	sp, #12
 8007c28:	af00      	add	r7, sp, #0
 8007c2a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007c2c:	bf00      	nop
 8007c2e:	370c      	adds	r7, #12
 8007c30:	46bd      	mov	sp, r7
 8007c32:	bc80      	pop	{r7}
 8007c34:	4770      	bx	lr

08007c36 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007c36:	b480      	push	{r7}
 8007c38:	b083      	sub	sp, #12
 8007c3a:	af00      	add	r7, sp, #0
 8007c3c:	6078      	str	r0, [r7, #4]
 8007c3e:	460b      	mov	r3, r1
 8007c40:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007c42:	bf00      	nop
 8007c44:	370c      	adds	r7, #12
 8007c46:	46bd      	mov	sp, r7
 8007c48:	bc80      	pop	{r7}
 8007c4a:	4770      	bx	lr

08007c4c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8007c4c:	b580      	push	{r7, lr}
 8007c4e:	b084      	sub	sp, #16
 8007c50:	af00      	add	r7, sp, #0
 8007c52:	60f8      	str	r0, [r7, #12]
 8007c54:	60b9      	str	r1, [r7, #8]
 8007c56:	603b      	str	r3, [r7, #0]
 8007c58:	4613      	mov	r3, r2
 8007c5a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007c5c:	e02c      	b.n	8007cb8 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007c5e:	69bb      	ldr	r3, [r7, #24]
 8007c60:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007c64:	d028      	beq.n	8007cb8 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8007c66:	69bb      	ldr	r3, [r7, #24]
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d007      	beq.n	8007c7c <UART_WaitOnFlagUntilTimeout+0x30>
 8007c6c:	f7fc f84e 	bl	8003d0c <HAL_GetTick>
 8007c70:	4602      	mov	r2, r0
 8007c72:	683b      	ldr	r3, [r7, #0]
 8007c74:	1ad3      	subs	r3, r2, r3
 8007c76:	69ba      	ldr	r2, [r7, #24]
 8007c78:	429a      	cmp	r2, r3
 8007c7a:	d21d      	bcs.n	8007cb8 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	68da      	ldr	r2, [r3, #12]
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007c8a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	695a      	ldr	r2, [r3, #20]
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	f022 0201 	bic.w	r2, r2, #1
 8007c9a:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	2220      	movs	r2, #32
 8007ca0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	2220      	movs	r2, #32
 8007ca8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	2200      	movs	r2, #0
 8007cb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8007cb4:	2303      	movs	r3, #3
 8007cb6:	e00f      	b.n	8007cd8 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	681a      	ldr	r2, [r3, #0]
 8007cbe:	68bb      	ldr	r3, [r7, #8]
 8007cc0:	4013      	ands	r3, r2
 8007cc2:	68ba      	ldr	r2, [r7, #8]
 8007cc4:	429a      	cmp	r2, r3
 8007cc6:	bf0c      	ite	eq
 8007cc8:	2301      	moveq	r3, #1
 8007cca:	2300      	movne	r3, #0
 8007ccc:	b2db      	uxtb	r3, r3
 8007cce:	461a      	mov	r2, r3
 8007cd0:	79fb      	ldrb	r3, [r7, #7]
 8007cd2:	429a      	cmp	r2, r3
 8007cd4:	d0c3      	beq.n	8007c5e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007cd6:	2300      	movs	r3, #0
}
 8007cd8:	4618      	mov	r0, r3
 8007cda:	3710      	adds	r7, #16
 8007cdc:	46bd      	mov	sp, r7
 8007cde:	bd80      	pop	{r7, pc}

08007ce0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007ce0:	b480      	push	{r7}
 8007ce2:	b083      	sub	sp, #12
 8007ce4:	af00      	add	r7, sp, #0
 8007ce6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	68da      	ldr	r2, [r3, #12]
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007cf6:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	695a      	ldr	r2, [r3, #20]
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	f022 0201 	bic.w	r2, r2, #1
 8007d06:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d0c:	2b01      	cmp	r3, #1
 8007d0e:	d107      	bne.n	8007d20 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	68da      	ldr	r2, [r3, #12]
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	f022 0210 	bic.w	r2, r2, #16
 8007d1e:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	2220      	movs	r2, #32
 8007d24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	2200      	movs	r2, #0
 8007d2c:	631a      	str	r2, [r3, #48]	; 0x30
}
 8007d2e:	bf00      	nop
 8007d30:	370c      	adds	r7, #12
 8007d32:	46bd      	mov	sp, r7
 8007d34:	bc80      	pop	{r7}
 8007d36:	4770      	bx	lr

08007d38 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007d38:	b580      	push	{r7, lr}
 8007d3a:	b084      	sub	sp, #16
 8007d3c:	af00      	add	r7, sp, #0
 8007d3e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d44:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	2200      	movs	r2, #0
 8007d4a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	2200      	movs	r2, #0
 8007d50:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007d52:	68f8      	ldr	r0, [r7, #12]
 8007d54:	f7ff ff66 	bl	8007c24 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007d58:	bf00      	nop
 8007d5a:	3710      	adds	r7, #16
 8007d5c:	46bd      	mov	sp, r7
 8007d5e:	bd80      	pop	{r7, pc}

08007d60 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007d60:	b480      	push	{r7}
 8007d62:	b085      	sub	sp, #20
 8007d64:	af00      	add	r7, sp, #0
 8007d66:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007d6e:	b2db      	uxtb	r3, r3
 8007d70:	2b21      	cmp	r3, #33	; 0x21
 8007d72:	d13e      	bne.n	8007df2 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	689b      	ldr	r3, [r3, #8]
 8007d78:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007d7c:	d114      	bne.n	8007da8 <UART_Transmit_IT+0x48>
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	691b      	ldr	r3, [r3, #16]
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d110      	bne.n	8007da8 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	6a1b      	ldr	r3, [r3, #32]
 8007d8a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	881b      	ldrh	r3, [r3, #0]
 8007d90:	461a      	mov	r2, r3
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007d9a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	6a1b      	ldr	r3, [r3, #32]
 8007da0:	1c9a      	adds	r2, r3, #2
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	621a      	str	r2, [r3, #32]
 8007da6:	e008      	b.n	8007dba <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	6a1b      	ldr	r3, [r3, #32]
 8007dac:	1c59      	adds	r1, r3, #1
 8007dae:	687a      	ldr	r2, [r7, #4]
 8007db0:	6211      	str	r1, [r2, #32]
 8007db2:	781a      	ldrb	r2, [r3, #0]
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007dbe:	b29b      	uxth	r3, r3
 8007dc0:	3b01      	subs	r3, #1
 8007dc2:	b29b      	uxth	r3, r3
 8007dc4:	687a      	ldr	r2, [r7, #4]
 8007dc6:	4619      	mov	r1, r3
 8007dc8:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d10f      	bne.n	8007dee <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	68da      	ldr	r2, [r3, #12]
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007ddc:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	68da      	ldr	r2, [r3, #12]
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007dec:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007dee:	2300      	movs	r3, #0
 8007df0:	e000      	b.n	8007df4 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007df2:	2302      	movs	r3, #2
  }
}
 8007df4:	4618      	mov	r0, r3
 8007df6:	3714      	adds	r7, #20
 8007df8:	46bd      	mov	sp, r7
 8007dfa:	bc80      	pop	{r7}
 8007dfc:	4770      	bx	lr

08007dfe <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007dfe:	b580      	push	{r7, lr}
 8007e00:	b082      	sub	sp, #8
 8007e02:	af00      	add	r7, sp, #0
 8007e04:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	68da      	ldr	r2, [r3, #12]
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007e14:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	2220      	movs	r2, #32
 8007e1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007e1e:	6878      	ldr	r0, [r7, #4]
 8007e20:	f7ff feee 	bl	8007c00 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007e24:	2300      	movs	r3, #0
}
 8007e26:	4618      	mov	r0, r3
 8007e28:	3708      	adds	r7, #8
 8007e2a:	46bd      	mov	sp, r7
 8007e2c:	bd80      	pop	{r7, pc}

08007e2e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007e2e:	b580      	push	{r7, lr}
 8007e30:	b086      	sub	sp, #24
 8007e32:	af00      	add	r7, sp, #0
 8007e34:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007e3c:	b2db      	uxtb	r3, r3
 8007e3e:	2b22      	cmp	r3, #34	; 0x22
 8007e40:	f040 8099 	bne.w	8007f76 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	689b      	ldr	r3, [r3, #8]
 8007e48:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007e4c:	d117      	bne.n	8007e7e <UART_Receive_IT+0x50>
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	691b      	ldr	r3, [r3, #16]
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d113      	bne.n	8007e7e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007e56:	2300      	movs	r3, #0
 8007e58:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e5e:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	685b      	ldr	r3, [r3, #4]
 8007e66:	b29b      	uxth	r3, r3
 8007e68:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e6c:	b29a      	uxth	r2, r3
 8007e6e:	693b      	ldr	r3, [r7, #16]
 8007e70:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e76:	1c9a      	adds	r2, r3, #2
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	629a      	str	r2, [r3, #40]	; 0x28
 8007e7c:	e026      	b.n	8007ecc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e82:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8007e84:	2300      	movs	r3, #0
 8007e86:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	689b      	ldr	r3, [r3, #8]
 8007e8c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007e90:	d007      	beq.n	8007ea2 <UART_Receive_IT+0x74>
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	689b      	ldr	r3, [r3, #8]
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d10a      	bne.n	8007eb0 <UART_Receive_IT+0x82>
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	691b      	ldr	r3, [r3, #16]
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d106      	bne.n	8007eb0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	685b      	ldr	r3, [r3, #4]
 8007ea8:	b2da      	uxtb	r2, r3
 8007eaa:	697b      	ldr	r3, [r7, #20]
 8007eac:	701a      	strb	r2, [r3, #0]
 8007eae:	e008      	b.n	8007ec2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	685b      	ldr	r3, [r3, #4]
 8007eb6:	b2db      	uxtb	r3, r3
 8007eb8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007ebc:	b2da      	uxtb	r2, r3
 8007ebe:	697b      	ldr	r3, [r7, #20]
 8007ec0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ec6:	1c5a      	adds	r2, r3, #1
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007ed0:	b29b      	uxth	r3, r3
 8007ed2:	3b01      	subs	r3, #1
 8007ed4:	b29b      	uxth	r3, r3
 8007ed6:	687a      	ldr	r2, [r7, #4]
 8007ed8:	4619      	mov	r1, r3
 8007eda:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d148      	bne.n	8007f72 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	68da      	ldr	r2, [r3, #12]
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	f022 0220 	bic.w	r2, r2, #32
 8007eee:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	68da      	ldr	r2, [r3, #12]
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007efe:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	695a      	ldr	r2, [r3, #20]
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	f022 0201 	bic.w	r2, r2, #1
 8007f0e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	2220      	movs	r2, #32
 8007f14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f1c:	2b01      	cmp	r3, #1
 8007f1e:	d123      	bne.n	8007f68 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	2200      	movs	r2, #0
 8007f24:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	68da      	ldr	r2, [r3, #12]
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	f022 0210 	bic.w	r2, r2, #16
 8007f34:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	f003 0310 	and.w	r3, r3, #16
 8007f40:	2b10      	cmp	r3, #16
 8007f42:	d10a      	bne.n	8007f5a <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007f44:	2300      	movs	r3, #0
 8007f46:	60fb      	str	r3, [r7, #12]
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	60fb      	str	r3, [r7, #12]
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	685b      	ldr	r3, [r3, #4]
 8007f56:	60fb      	str	r3, [r7, #12]
 8007f58:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007f5e:	4619      	mov	r1, r3
 8007f60:	6878      	ldr	r0, [r7, #4]
 8007f62:	f7ff fe68 	bl	8007c36 <HAL_UARTEx_RxEventCallback>
 8007f66:	e002      	b.n	8007f6e <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8007f68:	6878      	ldr	r0, [r7, #4]
 8007f6a:	f7ff fe52 	bl	8007c12 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007f6e:	2300      	movs	r3, #0
 8007f70:	e002      	b.n	8007f78 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8007f72:	2300      	movs	r3, #0
 8007f74:	e000      	b.n	8007f78 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8007f76:	2302      	movs	r3, #2
  }
}
 8007f78:	4618      	mov	r0, r3
 8007f7a:	3718      	adds	r7, #24
 8007f7c:	46bd      	mov	sp, r7
 8007f7e:	bd80      	pop	{r7, pc}

08007f80 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007f80:	b580      	push	{r7, lr}
 8007f82:	b084      	sub	sp, #16
 8007f84:	af00      	add	r7, sp, #0
 8007f86:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	691b      	ldr	r3, [r3, #16]
 8007f8e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	68da      	ldr	r2, [r3, #12]
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	430a      	orrs	r2, r1
 8007f9c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	689a      	ldr	r2, [r3, #8]
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	691b      	ldr	r3, [r3, #16]
 8007fa6:	431a      	orrs	r2, r3
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	695b      	ldr	r3, [r3, #20]
 8007fac:	4313      	orrs	r3, r2
 8007fae:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	68db      	ldr	r3, [r3, #12]
 8007fb6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8007fba:	f023 030c 	bic.w	r3, r3, #12
 8007fbe:	687a      	ldr	r2, [r7, #4]
 8007fc0:	6812      	ldr	r2, [r2, #0]
 8007fc2:	68b9      	ldr	r1, [r7, #8]
 8007fc4:	430b      	orrs	r3, r1
 8007fc6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	695b      	ldr	r3, [r3, #20]
 8007fce:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	699a      	ldr	r2, [r3, #24]
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	430a      	orrs	r2, r1
 8007fdc:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	4a2c      	ldr	r2, [pc, #176]	; (8008094 <UART_SetConfig+0x114>)
 8007fe4:	4293      	cmp	r3, r2
 8007fe6:	d103      	bne.n	8007ff0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8007fe8:	f7fe fd38 	bl	8006a5c <HAL_RCC_GetPCLK2Freq>
 8007fec:	60f8      	str	r0, [r7, #12]
 8007fee:	e002      	b.n	8007ff6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8007ff0:	f7fe fd20 	bl	8006a34 <HAL_RCC_GetPCLK1Freq>
 8007ff4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007ff6:	68fa      	ldr	r2, [r7, #12]
 8007ff8:	4613      	mov	r3, r2
 8007ffa:	009b      	lsls	r3, r3, #2
 8007ffc:	4413      	add	r3, r2
 8007ffe:	009a      	lsls	r2, r3, #2
 8008000:	441a      	add	r2, r3
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	685b      	ldr	r3, [r3, #4]
 8008006:	009b      	lsls	r3, r3, #2
 8008008:	fbb2 f3f3 	udiv	r3, r2, r3
 800800c:	4a22      	ldr	r2, [pc, #136]	; (8008098 <UART_SetConfig+0x118>)
 800800e:	fba2 2303 	umull	r2, r3, r2, r3
 8008012:	095b      	lsrs	r3, r3, #5
 8008014:	0119      	lsls	r1, r3, #4
 8008016:	68fa      	ldr	r2, [r7, #12]
 8008018:	4613      	mov	r3, r2
 800801a:	009b      	lsls	r3, r3, #2
 800801c:	4413      	add	r3, r2
 800801e:	009a      	lsls	r2, r3, #2
 8008020:	441a      	add	r2, r3
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	685b      	ldr	r3, [r3, #4]
 8008026:	009b      	lsls	r3, r3, #2
 8008028:	fbb2 f2f3 	udiv	r2, r2, r3
 800802c:	4b1a      	ldr	r3, [pc, #104]	; (8008098 <UART_SetConfig+0x118>)
 800802e:	fba3 0302 	umull	r0, r3, r3, r2
 8008032:	095b      	lsrs	r3, r3, #5
 8008034:	2064      	movs	r0, #100	; 0x64
 8008036:	fb00 f303 	mul.w	r3, r0, r3
 800803a:	1ad3      	subs	r3, r2, r3
 800803c:	011b      	lsls	r3, r3, #4
 800803e:	3332      	adds	r3, #50	; 0x32
 8008040:	4a15      	ldr	r2, [pc, #84]	; (8008098 <UART_SetConfig+0x118>)
 8008042:	fba2 2303 	umull	r2, r3, r2, r3
 8008046:	095b      	lsrs	r3, r3, #5
 8008048:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800804c:	4419      	add	r1, r3
 800804e:	68fa      	ldr	r2, [r7, #12]
 8008050:	4613      	mov	r3, r2
 8008052:	009b      	lsls	r3, r3, #2
 8008054:	4413      	add	r3, r2
 8008056:	009a      	lsls	r2, r3, #2
 8008058:	441a      	add	r2, r3
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	685b      	ldr	r3, [r3, #4]
 800805e:	009b      	lsls	r3, r3, #2
 8008060:	fbb2 f2f3 	udiv	r2, r2, r3
 8008064:	4b0c      	ldr	r3, [pc, #48]	; (8008098 <UART_SetConfig+0x118>)
 8008066:	fba3 0302 	umull	r0, r3, r3, r2
 800806a:	095b      	lsrs	r3, r3, #5
 800806c:	2064      	movs	r0, #100	; 0x64
 800806e:	fb00 f303 	mul.w	r3, r0, r3
 8008072:	1ad3      	subs	r3, r2, r3
 8008074:	011b      	lsls	r3, r3, #4
 8008076:	3332      	adds	r3, #50	; 0x32
 8008078:	4a07      	ldr	r2, [pc, #28]	; (8008098 <UART_SetConfig+0x118>)
 800807a:	fba2 2303 	umull	r2, r3, r2, r3
 800807e:	095b      	lsrs	r3, r3, #5
 8008080:	f003 020f 	and.w	r2, r3, #15
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	440a      	add	r2, r1
 800808a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800808c:	bf00      	nop
 800808e:	3710      	adds	r7, #16
 8008090:	46bd      	mov	sp, r7
 8008092:	bd80      	pop	{r7, pc}
 8008094:	40013800 	.word	0x40013800
 8008098:	51eb851f 	.word	0x51eb851f

0800809c <__errno>:
 800809c:	4b01      	ldr	r3, [pc, #4]	; (80080a4 <__errno+0x8>)
 800809e:	6818      	ldr	r0, [r3, #0]
 80080a0:	4770      	bx	lr
 80080a2:	bf00      	nop
 80080a4:	2000001c 	.word	0x2000001c

080080a8 <__libc_init_array>:
 80080a8:	b570      	push	{r4, r5, r6, lr}
 80080aa:	2600      	movs	r6, #0
 80080ac:	4d0c      	ldr	r5, [pc, #48]	; (80080e0 <__libc_init_array+0x38>)
 80080ae:	4c0d      	ldr	r4, [pc, #52]	; (80080e4 <__libc_init_array+0x3c>)
 80080b0:	1b64      	subs	r4, r4, r5
 80080b2:	10a4      	asrs	r4, r4, #2
 80080b4:	42a6      	cmp	r6, r4
 80080b6:	d109      	bne.n	80080cc <__libc_init_array+0x24>
 80080b8:	f002 febc 	bl	800ae34 <_init>
 80080bc:	2600      	movs	r6, #0
 80080be:	4d0a      	ldr	r5, [pc, #40]	; (80080e8 <__libc_init_array+0x40>)
 80080c0:	4c0a      	ldr	r4, [pc, #40]	; (80080ec <__libc_init_array+0x44>)
 80080c2:	1b64      	subs	r4, r4, r5
 80080c4:	10a4      	asrs	r4, r4, #2
 80080c6:	42a6      	cmp	r6, r4
 80080c8:	d105      	bne.n	80080d6 <__libc_init_array+0x2e>
 80080ca:	bd70      	pop	{r4, r5, r6, pc}
 80080cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80080d0:	4798      	blx	r3
 80080d2:	3601      	adds	r6, #1
 80080d4:	e7ee      	b.n	80080b4 <__libc_init_array+0xc>
 80080d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80080da:	4798      	blx	r3
 80080dc:	3601      	adds	r6, #1
 80080de:	e7f2      	b.n	80080c6 <__libc_init_array+0x1e>
 80080e0:	0800c874 	.word	0x0800c874
 80080e4:	0800c874 	.word	0x0800c874
 80080e8:	0800c874 	.word	0x0800c874
 80080ec:	0800c878 	.word	0x0800c878

080080f0 <memset>:
 80080f0:	4603      	mov	r3, r0
 80080f2:	4402      	add	r2, r0
 80080f4:	4293      	cmp	r3, r2
 80080f6:	d100      	bne.n	80080fa <memset+0xa>
 80080f8:	4770      	bx	lr
 80080fa:	f803 1b01 	strb.w	r1, [r3], #1
 80080fe:	e7f9      	b.n	80080f4 <memset+0x4>

08008100 <__cvt>:
 8008100:	2b00      	cmp	r3, #0
 8008102:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008106:	461f      	mov	r7, r3
 8008108:	bfbb      	ittet	lt
 800810a:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800810e:	461f      	movlt	r7, r3
 8008110:	2300      	movge	r3, #0
 8008112:	232d      	movlt	r3, #45	; 0x2d
 8008114:	b088      	sub	sp, #32
 8008116:	4614      	mov	r4, r2
 8008118:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800811a:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800811c:	7013      	strb	r3, [r2, #0]
 800811e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008120:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8008124:	f023 0820 	bic.w	r8, r3, #32
 8008128:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800812c:	d005      	beq.n	800813a <__cvt+0x3a>
 800812e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8008132:	d100      	bne.n	8008136 <__cvt+0x36>
 8008134:	3501      	adds	r5, #1
 8008136:	2302      	movs	r3, #2
 8008138:	e000      	b.n	800813c <__cvt+0x3c>
 800813a:	2303      	movs	r3, #3
 800813c:	aa07      	add	r2, sp, #28
 800813e:	9204      	str	r2, [sp, #16]
 8008140:	aa06      	add	r2, sp, #24
 8008142:	e9cd a202 	strd	sl, r2, [sp, #8]
 8008146:	e9cd 3500 	strd	r3, r5, [sp]
 800814a:	4622      	mov	r2, r4
 800814c:	463b      	mov	r3, r7
 800814e:	f000 fce7 	bl	8008b20 <_dtoa_r>
 8008152:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008156:	4606      	mov	r6, r0
 8008158:	d102      	bne.n	8008160 <__cvt+0x60>
 800815a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800815c:	07db      	lsls	r3, r3, #31
 800815e:	d522      	bpl.n	80081a6 <__cvt+0xa6>
 8008160:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008164:	eb06 0905 	add.w	r9, r6, r5
 8008168:	d110      	bne.n	800818c <__cvt+0x8c>
 800816a:	7833      	ldrb	r3, [r6, #0]
 800816c:	2b30      	cmp	r3, #48	; 0x30
 800816e:	d10a      	bne.n	8008186 <__cvt+0x86>
 8008170:	2200      	movs	r2, #0
 8008172:	2300      	movs	r3, #0
 8008174:	4620      	mov	r0, r4
 8008176:	4639      	mov	r1, r7
 8008178:	f7f8 fc16 	bl	80009a8 <__aeabi_dcmpeq>
 800817c:	b918      	cbnz	r0, 8008186 <__cvt+0x86>
 800817e:	f1c5 0501 	rsb	r5, r5, #1
 8008182:	f8ca 5000 	str.w	r5, [sl]
 8008186:	f8da 3000 	ldr.w	r3, [sl]
 800818a:	4499      	add	r9, r3
 800818c:	2200      	movs	r2, #0
 800818e:	2300      	movs	r3, #0
 8008190:	4620      	mov	r0, r4
 8008192:	4639      	mov	r1, r7
 8008194:	f7f8 fc08 	bl	80009a8 <__aeabi_dcmpeq>
 8008198:	b108      	cbz	r0, 800819e <__cvt+0x9e>
 800819a:	f8cd 901c 	str.w	r9, [sp, #28]
 800819e:	2230      	movs	r2, #48	; 0x30
 80081a0:	9b07      	ldr	r3, [sp, #28]
 80081a2:	454b      	cmp	r3, r9
 80081a4:	d307      	bcc.n	80081b6 <__cvt+0xb6>
 80081a6:	4630      	mov	r0, r6
 80081a8:	9b07      	ldr	r3, [sp, #28]
 80081aa:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80081ac:	1b9b      	subs	r3, r3, r6
 80081ae:	6013      	str	r3, [r2, #0]
 80081b0:	b008      	add	sp, #32
 80081b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80081b6:	1c59      	adds	r1, r3, #1
 80081b8:	9107      	str	r1, [sp, #28]
 80081ba:	701a      	strb	r2, [r3, #0]
 80081bc:	e7f0      	b.n	80081a0 <__cvt+0xa0>

080081be <__exponent>:
 80081be:	4603      	mov	r3, r0
 80081c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80081c2:	2900      	cmp	r1, #0
 80081c4:	f803 2b02 	strb.w	r2, [r3], #2
 80081c8:	bfb6      	itet	lt
 80081ca:	222d      	movlt	r2, #45	; 0x2d
 80081cc:	222b      	movge	r2, #43	; 0x2b
 80081ce:	4249      	neglt	r1, r1
 80081d0:	2909      	cmp	r1, #9
 80081d2:	7042      	strb	r2, [r0, #1]
 80081d4:	dd2b      	ble.n	800822e <__exponent+0x70>
 80081d6:	f10d 0407 	add.w	r4, sp, #7
 80081da:	46a4      	mov	ip, r4
 80081dc:	270a      	movs	r7, #10
 80081de:	fb91 f6f7 	sdiv	r6, r1, r7
 80081e2:	460a      	mov	r2, r1
 80081e4:	46a6      	mov	lr, r4
 80081e6:	fb07 1516 	mls	r5, r7, r6, r1
 80081ea:	2a63      	cmp	r2, #99	; 0x63
 80081ec:	f105 0530 	add.w	r5, r5, #48	; 0x30
 80081f0:	4631      	mov	r1, r6
 80081f2:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 80081f6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80081fa:	dcf0      	bgt.n	80081de <__exponent+0x20>
 80081fc:	3130      	adds	r1, #48	; 0x30
 80081fe:	f1ae 0502 	sub.w	r5, lr, #2
 8008202:	f804 1c01 	strb.w	r1, [r4, #-1]
 8008206:	4629      	mov	r1, r5
 8008208:	1c44      	adds	r4, r0, #1
 800820a:	4561      	cmp	r1, ip
 800820c:	d30a      	bcc.n	8008224 <__exponent+0x66>
 800820e:	f10d 0209 	add.w	r2, sp, #9
 8008212:	eba2 020e 	sub.w	r2, r2, lr
 8008216:	4565      	cmp	r5, ip
 8008218:	bf88      	it	hi
 800821a:	2200      	movhi	r2, #0
 800821c:	4413      	add	r3, r2
 800821e:	1a18      	subs	r0, r3, r0
 8008220:	b003      	add	sp, #12
 8008222:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008224:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008228:	f804 2f01 	strb.w	r2, [r4, #1]!
 800822c:	e7ed      	b.n	800820a <__exponent+0x4c>
 800822e:	2330      	movs	r3, #48	; 0x30
 8008230:	3130      	adds	r1, #48	; 0x30
 8008232:	7083      	strb	r3, [r0, #2]
 8008234:	70c1      	strb	r1, [r0, #3]
 8008236:	1d03      	adds	r3, r0, #4
 8008238:	e7f1      	b.n	800821e <__exponent+0x60>
	...

0800823c <_printf_float>:
 800823c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008240:	b091      	sub	sp, #68	; 0x44
 8008242:	460c      	mov	r4, r1
 8008244:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8008248:	4616      	mov	r6, r2
 800824a:	461f      	mov	r7, r3
 800824c:	4605      	mov	r5, r0
 800824e:	f001 fa55 	bl	80096fc <_localeconv_r>
 8008252:	6803      	ldr	r3, [r0, #0]
 8008254:	4618      	mov	r0, r3
 8008256:	9309      	str	r3, [sp, #36]	; 0x24
 8008258:	f7f7 ff7a 	bl	8000150 <strlen>
 800825c:	2300      	movs	r3, #0
 800825e:	930e      	str	r3, [sp, #56]	; 0x38
 8008260:	f8d8 3000 	ldr.w	r3, [r8]
 8008264:	900a      	str	r0, [sp, #40]	; 0x28
 8008266:	3307      	adds	r3, #7
 8008268:	f023 0307 	bic.w	r3, r3, #7
 800826c:	f103 0208 	add.w	r2, r3, #8
 8008270:	f894 9018 	ldrb.w	r9, [r4, #24]
 8008274:	f8d4 b000 	ldr.w	fp, [r4]
 8008278:	f8c8 2000 	str.w	r2, [r8]
 800827c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008280:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8008284:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8008288:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 800828c:	930b      	str	r3, [sp, #44]	; 0x2c
 800828e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008292:	4640      	mov	r0, r8
 8008294:	4b9c      	ldr	r3, [pc, #624]	; (8008508 <_printf_float+0x2cc>)
 8008296:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008298:	f7f8 fbb8 	bl	8000a0c <__aeabi_dcmpun>
 800829c:	bb70      	cbnz	r0, 80082fc <_printf_float+0xc0>
 800829e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80082a2:	4640      	mov	r0, r8
 80082a4:	4b98      	ldr	r3, [pc, #608]	; (8008508 <_printf_float+0x2cc>)
 80082a6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80082a8:	f7f8 fb92 	bl	80009d0 <__aeabi_dcmple>
 80082ac:	bb30      	cbnz	r0, 80082fc <_printf_float+0xc0>
 80082ae:	2200      	movs	r2, #0
 80082b0:	2300      	movs	r3, #0
 80082b2:	4640      	mov	r0, r8
 80082b4:	4651      	mov	r1, sl
 80082b6:	f7f8 fb81 	bl	80009bc <__aeabi_dcmplt>
 80082ba:	b110      	cbz	r0, 80082c2 <_printf_float+0x86>
 80082bc:	232d      	movs	r3, #45	; 0x2d
 80082be:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80082c2:	4b92      	ldr	r3, [pc, #584]	; (800850c <_printf_float+0x2d0>)
 80082c4:	4892      	ldr	r0, [pc, #584]	; (8008510 <_printf_float+0x2d4>)
 80082c6:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80082ca:	bf94      	ite	ls
 80082cc:	4698      	movls	r8, r3
 80082ce:	4680      	movhi	r8, r0
 80082d0:	2303      	movs	r3, #3
 80082d2:	f04f 0a00 	mov.w	sl, #0
 80082d6:	6123      	str	r3, [r4, #16]
 80082d8:	f02b 0304 	bic.w	r3, fp, #4
 80082dc:	6023      	str	r3, [r4, #0]
 80082de:	4633      	mov	r3, r6
 80082e0:	4621      	mov	r1, r4
 80082e2:	4628      	mov	r0, r5
 80082e4:	9700      	str	r7, [sp, #0]
 80082e6:	aa0f      	add	r2, sp, #60	; 0x3c
 80082e8:	f000 f9d4 	bl	8008694 <_printf_common>
 80082ec:	3001      	adds	r0, #1
 80082ee:	f040 8090 	bne.w	8008412 <_printf_float+0x1d6>
 80082f2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80082f6:	b011      	add	sp, #68	; 0x44
 80082f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80082fc:	4642      	mov	r2, r8
 80082fe:	4653      	mov	r3, sl
 8008300:	4640      	mov	r0, r8
 8008302:	4651      	mov	r1, sl
 8008304:	f7f8 fb82 	bl	8000a0c <__aeabi_dcmpun>
 8008308:	b148      	cbz	r0, 800831e <_printf_float+0xe2>
 800830a:	f1ba 0f00 	cmp.w	sl, #0
 800830e:	bfb8      	it	lt
 8008310:	232d      	movlt	r3, #45	; 0x2d
 8008312:	4880      	ldr	r0, [pc, #512]	; (8008514 <_printf_float+0x2d8>)
 8008314:	bfb8      	it	lt
 8008316:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800831a:	4b7f      	ldr	r3, [pc, #508]	; (8008518 <_printf_float+0x2dc>)
 800831c:	e7d3      	b.n	80082c6 <_printf_float+0x8a>
 800831e:	6863      	ldr	r3, [r4, #4]
 8008320:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8008324:	1c5a      	adds	r2, r3, #1
 8008326:	d142      	bne.n	80083ae <_printf_float+0x172>
 8008328:	2306      	movs	r3, #6
 800832a:	6063      	str	r3, [r4, #4]
 800832c:	2200      	movs	r2, #0
 800832e:	9206      	str	r2, [sp, #24]
 8008330:	aa0e      	add	r2, sp, #56	; 0x38
 8008332:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8008336:	aa0d      	add	r2, sp, #52	; 0x34
 8008338:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 800833c:	9203      	str	r2, [sp, #12]
 800833e:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8008342:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8008346:	6023      	str	r3, [r4, #0]
 8008348:	6863      	ldr	r3, [r4, #4]
 800834a:	4642      	mov	r2, r8
 800834c:	9300      	str	r3, [sp, #0]
 800834e:	4628      	mov	r0, r5
 8008350:	4653      	mov	r3, sl
 8008352:	910b      	str	r1, [sp, #44]	; 0x2c
 8008354:	f7ff fed4 	bl	8008100 <__cvt>
 8008358:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800835a:	4680      	mov	r8, r0
 800835c:	2947      	cmp	r1, #71	; 0x47
 800835e:	990d      	ldr	r1, [sp, #52]	; 0x34
 8008360:	d108      	bne.n	8008374 <_printf_float+0x138>
 8008362:	1cc8      	adds	r0, r1, #3
 8008364:	db02      	blt.n	800836c <_printf_float+0x130>
 8008366:	6863      	ldr	r3, [r4, #4]
 8008368:	4299      	cmp	r1, r3
 800836a:	dd40      	ble.n	80083ee <_printf_float+0x1b2>
 800836c:	f1a9 0902 	sub.w	r9, r9, #2
 8008370:	fa5f f989 	uxtb.w	r9, r9
 8008374:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8008378:	d81f      	bhi.n	80083ba <_printf_float+0x17e>
 800837a:	464a      	mov	r2, r9
 800837c:	3901      	subs	r1, #1
 800837e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008382:	910d      	str	r1, [sp, #52]	; 0x34
 8008384:	f7ff ff1b 	bl	80081be <__exponent>
 8008388:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800838a:	4682      	mov	sl, r0
 800838c:	1813      	adds	r3, r2, r0
 800838e:	2a01      	cmp	r2, #1
 8008390:	6123      	str	r3, [r4, #16]
 8008392:	dc02      	bgt.n	800839a <_printf_float+0x15e>
 8008394:	6822      	ldr	r2, [r4, #0]
 8008396:	07d2      	lsls	r2, r2, #31
 8008398:	d501      	bpl.n	800839e <_printf_float+0x162>
 800839a:	3301      	adds	r3, #1
 800839c:	6123      	str	r3, [r4, #16]
 800839e:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d09b      	beq.n	80082de <_printf_float+0xa2>
 80083a6:	232d      	movs	r3, #45	; 0x2d
 80083a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80083ac:	e797      	b.n	80082de <_printf_float+0xa2>
 80083ae:	2947      	cmp	r1, #71	; 0x47
 80083b0:	d1bc      	bne.n	800832c <_printf_float+0xf0>
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d1ba      	bne.n	800832c <_printf_float+0xf0>
 80083b6:	2301      	movs	r3, #1
 80083b8:	e7b7      	b.n	800832a <_printf_float+0xee>
 80083ba:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80083be:	d118      	bne.n	80083f2 <_printf_float+0x1b6>
 80083c0:	2900      	cmp	r1, #0
 80083c2:	6863      	ldr	r3, [r4, #4]
 80083c4:	dd0b      	ble.n	80083de <_printf_float+0x1a2>
 80083c6:	6121      	str	r1, [r4, #16]
 80083c8:	b913      	cbnz	r3, 80083d0 <_printf_float+0x194>
 80083ca:	6822      	ldr	r2, [r4, #0]
 80083cc:	07d0      	lsls	r0, r2, #31
 80083ce:	d502      	bpl.n	80083d6 <_printf_float+0x19a>
 80083d0:	3301      	adds	r3, #1
 80083d2:	440b      	add	r3, r1
 80083d4:	6123      	str	r3, [r4, #16]
 80083d6:	f04f 0a00 	mov.w	sl, #0
 80083da:	65a1      	str	r1, [r4, #88]	; 0x58
 80083dc:	e7df      	b.n	800839e <_printf_float+0x162>
 80083de:	b913      	cbnz	r3, 80083e6 <_printf_float+0x1aa>
 80083e0:	6822      	ldr	r2, [r4, #0]
 80083e2:	07d2      	lsls	r2, r2, #31
 80083e4:	d501      	bpl.n	80083ea <_printf_float+0x1ae>
 80083e6:	3302      	adds	r3, #2
 80083e8:	e7f4      	b.n	80083d4 <_printf_float+0x198>
 80083ea:	2301      	movs	r3, #1
 80083ec:	e7f2      	b.n	80083d4 <_printf_float+0x198>
 80083ee:	f04f 0967 	mov.w	r9, #103	; 0x67
 80083f2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80083f4:	4299      	cmp	r1, r3
 80083f6:	db05      	blt.n	8008404 <_printf_float+0x1c8>
 80083f8:	6823      	ldr	r3, [r4, #0]
 80083fa:	6121      	str	r1, [r4, #16]
 80083fc:	07d8      	lsls	r0, r3, #31
 80083fe:	d5ea      	bpl.n	80083d6 <_printf_float+0x19a>
 8008400:	1c4b      	adds	r3, r1, #1
 8008402:	e7e7      	b.n	80083d4 <_printf_float+0x198>
 8008404:	2900      	cmp	r1, #0
 8008406:	bfcc      	ite	gt
 8008408:	2201      	movgt	r2, #1
 800840a:	f1c1 0202 	rsble	r2, r1, #2
 800840e:	4413      	add	r3, r2
 8008410:	e7e0      	b.n	80083d4 <_printf_float+0x198>
 8008412:	6823      	ldr	r3, [r4, #0]
 8008414:	055a      	lsls	r2, r3, #21
 8008416:	d407      	bmi.n	8008428 <_printf_float+0x1ec>
 8008418:	6923      	ldr	r3, [r4, #16]
 800841a:	4642      	mov	r2, r8
 800841c:	4631      	mov	r1, r6
 800841e:	4628      	mov	r0, r5
 8008420:	47b8      	blx	r7
 8008422:	3001      	adds	r0, #1
 8008424:	d12b      	bne.n	800847e <_printf_float+0x242>
 8008426:	e764      	b.n	80082f2 <_printf_float+0xb6>
 8008428:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800842c:	f240 80dd 	bls.w	80085ea <_printf_float+0x3ae>
 8008430:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008434:	2200      	movs	r2, #0
 8008436:	2300      	movs	r3, #0
 8008438:	f7f8 fab6 	bl	80009a8 <__aeabi_dcmpeq>
 800843c:	2800      	cmp	r0, #0
 800843e:	d033      	beq.n	80084a8 <_printf_float+0x26c>
 8008440:	2301      	movs	r3, #1
 8008442:	4631      	mov	r1, r6
 8008444:	4628      	mov	r0, r5
 8008446:	4a35      	ldr	r2, [pc, #212]	; (800851c <_printf_float+0x2e0>)
 8008448:	47b8      	blx	r7
 800844a:	3001      	adds	r0, #1
 800844c:	f43f af51 	beq.w	80082f2 <_printf_float+0xb6>
 8008450:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8008454:	429a      	cmp	r2, r3
 8008456:	db02      	blt.n	800845e <_printf_float+0x222>
 8008458:	6823      	ldr	r3, [r4, #0]
 800845a:	07d8      	lsls	r0, r3, #31
 800845c:	d50f      	bpl.n	800847e <_printf_float+0x242>
 800845e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008462:	4631      	mov	r1, r6
 8008464:	4628      	mov	r0, r5
 8008466:	47b8      	blx	r7
 8008468:	3001      	adds	r0, #1
 800846a:	f43f af42 	beq.w	80082f2 <_printf_float+0xb6>
 800846e:	f04f 0800 	mov.w	r8, #0
 8008472:	f104 091a 	add.w	r9, r4, #26
 8008476:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008478:	3b01      	subs	r3, #1
 800847a:	4543      	cmp	r3, r8
 800847c:	dc09      	bgt.n	8008492 <_printf_float+0x256>
 800847e:	6823      	ldr	r3, [r4, #0]
 8008480:	079b      	lsls	r3, r3, #30
 8008482:	f100 8102 	bmi.w	800868a <_printf_float+0x44e>
 8008486:	68e0      	ldr	r0, [r4, #12]
 8008488:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800848a:	4298      	cmp	r0, r3
 800848c:	bfb8      	it	lt
 800848e:	4618      	movlt	r0, r3
 8008490:	e731      	b.n	80082f6 <_printf_float+0xba>
 8008492:	2301      	movs	r3, #1
 8008494:	464a      	mov	r2, r9
 8008496:	4631      	mov	r1, r6
 8008498:	4628      	mov	r0, r5
 800849a:	47b8      	blx	r7
 800849c:	3001      	adds	r0, #1
 800849e:	f43f af28 	beq.w	80082f2 <_printf_float+0xb6>
 80084a2:	f108 0801 	add.w	r8, r8, #1
 80084a6:	e7e6      	b.n	8008476 <_printf_float+0x23a>
 80084a8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	dc38      	bgt.n	8008520 <_printf_float+0x2e4>
 80084ae:	2301      	movs	r3, #1
 80084b0:	4631      	mov	r1, r6
 80084b2:	4628      	mov	r0, r5
 80084b4:	4a19      	ldr	r2, [pc, #100]	; (800851c <_printf_float+0x2e0>)
 80084b6:	47b8      	blx	r7
 80084b8:	3001      	adds	r0, #1
 80084ba:	f43f af1a 	beq.w	80082f2 <_printf_float+0xb6>
 80084be:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80084c2:	4313      	orrs	r3, r2
 80084c4:	d102      	bne.n	80084cc <_printf_float+0x290>
 80084c6:	6823      	ldr	r3, [r4, #0]
 80084c8:	07d9      	lsls	r1, r3, #31
 80084ca:	d5d8      	bpl.n	800847e <_printf_float+0x242>
 80084cc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80084d0:	4631      	mov	r1, r6
 80084d2:	4628      	mov	r0, r5
 80084d4:	47b8      	blx	r7
 80084d6:	3001      	adds	r0, #1
 80084d8:	f43f af0b 	beq.w	80082f2 <_printf_float+0xb6>
 80084dc:	f04f 0900 	mov.w	r9, #0
 80084e0:	f104 0a1a 	add.w	sl, r4, #26
 80084e4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80084e6:	425b      	negs	r3, r3
 80084e8:	454b      	cmp	r3, r9
 80084ea:	dc01      	bgt.n	80084f0 <_printf_float+0x2b4>
 80084ec:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80084ee:	e794      	b.n	800841a <_printf_float+0x1de>
 80084f0:	2301      	movs	r3, #1
 80084f2:	4652      	mov	r2, sl
 80084f4:	4631      	mov	r1, r6
 80084f6:	4628      	mov	r0, r5
 80084f8:	47b8      	blx	r7
 80084fa:	3001      	adds	r0, #1
 80084fc:	f43f aef9 	beq.w	80082f2 <_printf_float+0xb6>
 8008500:	f109 0901 	add.w	r9, r9, #1
 8008504:	e7ee      	b.n	80084e4 <_printf_float+0x2a8>
 8008506:	bf00      	nop
 8008508:	7fefffff 	.word	0x7fefffff
 800850c:	0800c498 	.word	0x0800c498
 8008510:	0800c49c 	.word	0x0800c49c
 8008514:	0800c4a4 	.word	0x0800c4a4
 8008518:	0800c4a0 	.word	0x0800c4a0
 800851c:	0800c4a8 	.word	0x0800c4a8
 8008520:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008522:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008524:	429a      	cmp	r2, r3
 8008526:	bfa8      	it	ge
 8008528:	461a      	movge	r2, r3
 800852a:	2a00      	cmp	r2, #0
 800852c:	4691      	mov	r9, r2
 800852e:	dc37      	bgt.n	80085a0 <_printf_float+0x364>
 8008530:	f04f 0b00 	mov.w	fp, #0
 8008534:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008538:	f104 021a 	add.w	r2, r4, #26
 800853c:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8008540:	ebaa 0309 	sub.w	r3, sl, r9
 8008544:	455b      	cmp	r3, fp
 8008546:	dc33      	bgt.n	80085b0 <_printf_float+0x374>
 8008548:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800854c:	429a      	cmp	r2, r3
 800854e:	db3b      	blt.n	80085c8 <_printf_float+0x38c>
 8008550:	6823      	ldr	r3, [r4, #0]
 8008552:	07da      	lsls	r2, r3, #31
 8008554:	d438      	bmi.n	80085c8 <_printf_float+0x38c>
 8008556:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008558:	990d      	ldr	r1, [sp, #52]	; 0x34
 800855a:	eba2 030a 	sub.w	r3, r2, sl
 800855e:	eba2 0901 	sub.w	r9, r2, r1
 8008562:	4599      	cmp	r9, r3
 8008564:	bfa8      	it	ge
 8008566:	4699      	movge	r9, r3
 8008568:	f1b9 0f00 	cmp.w	r9, #0
 800856c:	dc34      	bgt.n	80085d8 <_printf_float+0x39c>
 800856e:	f04f 0800 	mov.w	r8, #0
 8008572:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008576:	f104 0a1a 	add.w	sl, r4, #26
 800857a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800857e:	1a9b      	subs	r3, r3, r2
 8008580:	eba3 0309 	sub.w	r3, r3, r9
 8008584:	4543      	cmp	r3, r8
 8008586:	f77f af7a 	ble.w	800847e <_printf_float+0x242>
 800858a:	2301      	movs	r3, #1
 800858c:	4652      	mov	r2, sl
 800858e:	4631      	mov	r1, r6
 8008590:	4628      	mov	r0, r5
 8008592:	47b8      	blx	r7
 8008594:	3001      	adds	r0, #1
 8008596:	f43f aeac 	beq.w	80082f2 <_printf_float+0xb6>
 800859a:	f108 0801 	add.w	r8, r8, #1
 800859e:	e7ec      	b.n	800857a <_printf_float+0x33e>
 80085a0:	4613      	mov	r3, r2
 80085a2:	4631      	mov	r1, r6
 80085a4:	4642      	mov	r2, r8
 80085a6:	4628      	mov	r0, r5
 80085a8:	47b8      	blx	r7
 80085aa:	3001      	adds	r0, #1
 80085ac:	d1c0      	bne.n	8008530 <_printf_float+0x2f4>
 80085ae:	e6a0      	b.n	80082f2 <_printf_float+0xb6>
 80085b0:	2301      	movs	r3, #1
 80085b2:	4631      	mov	r1, r6
 80085b4:	4628      	mov	r0, r5
 80085b6:	920b      	str	r2, [sp, #44]	; 0x2c
 80085b8:	47b8      	blx	r7
 80085ba:	3001      	adds	r0, #1
 80085bc:	f43f ae99 	beq.w	80082f2 <_printf_float+0xb6>
 80085c0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80085c2:	f10b 0b01 	add.w	fp, fp, #1
 80085c6:	e7b9      	b.n	800853c <_printf_float+0x300>
 80085c8:	4631      	mov	r1, r6
 80085ca:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80085ce:	4628      	mov	r0, r5
 80085d0:	47b8      	blx	r7
 80085d2:	3001      	adds	r0, #1
 80085d4:	d1bf      	bne.n	8008556 <_printf_float+0x31a>
 80085d6:	e68c      	b.n	80082f2 <_printf_float+0xb6>
 80085d8:	464b      	mov	r3, r9
 80085da:	4631      	mov	r1, r6
 80085dc:	4628      	mov	r0, r5
 80085de:	eb08 020a 	add.w	r2, r8, sl
 80085e2:	47b8      	blx	r7
 80085e4:	3001      	adds	r0, #1
 80085e6:	d1c2      	bne.n	800856e <_printf_float+0x332>
 80085e8:	e683      	b.n	80082f2 <_printf_float+0xb6>
 80085ea:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80085ec:	2a01      	cmp	r2, #1
 80085ee:	dc01      	bgt.n	80085f4 <_printf_float+0x3b8>
 80085f0:	07db      	lsls	r3, r3, #31
 80085f2:	d537      	bpl.n	8008664 <_printf_float+0x428>
 80085f4:	2301      	movs	r3, #1
 80085f6:	4642      	mov	r2, r8
 80085f8:	4631      	mov	r1, r6
 80085fa:	4628      	mov	r0, r5
 80085fc:	47b8      	blx	r7
 80085fe:	3001      	adds	r0, #1
 8008600:	f43f ae77 	beq.w	80082f2 <_printf_float+0xb6>
 8008604:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008608:	4631      	mov	r1, r6
 800860a:	4628      	mov	r0, r5
 800860c:	47b8      	blx	r7
 800860e:	3001      	adds	r0, #1
 8008610:	f43f ae6f 	beq.w	80082f2 <_printf_float+0xb6>
 8008614:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008618:	2200      	movs	r2, #0
 800861a:	2300      	movs	r3, #0
 800861c:	f7f8 f9c4 	bl	80009a8 <__aeabi_dcmpeq>
 8008620:	b9d8      	cbnz	r0, 800865a <_printf_float+0x41e>
 8008622:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008624:	f108 0201 	add.w	r2, r8, #1
 8008628:	3b01      	subs	r3, #1
 800862a:	4631      	mov	r1, r6
 800862c:	4628      	mov	r0, r5
 800862e:	47b8      	blx	r7
 8008630:	3001      	adds	r0, #1
 8008632:	d10e      	bne.n	8008652 <_printf_float+0x416>
 8008634:	e65d      	b.n	80082f2 <_printf_float+0xb6>
 8008636:	2301      	movs	r3, #1
 8008638:	464a      	mov	r2, r9
 800863a:	4631      	mov	r1, r6
 800863c:	4628      	mov	r0, r5
 800863e:	47b8      	blx	r7
 8008640:	3001      	adds	r0, #1
 8008642:	f43f ae56 	beq.w	80082f2 <_printf_float+0xb6>
 8008646:	f108 0801 	add.w	r8, r8, #1
 800864a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800864c:	3b01      	subs	r3, #1
 800864e:	4543      	cmp	r3, r8
 8008650:	dcf1      	bgt.n	8008636 <_printf_float+0x3fa>
 8008652:	4653      	mov	r3, sl
 8008654:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008658:	e6e0      	b.n	800841c <_printf_float+0x1e0>
 800865a:	f04f 0800 	mov.w	r8, #0
 800865e:	f104 091a 	add.w	r9, r4, #26
 8008662:	e7f2      	b.n	800864a <_printf_float+0x40e>
 8008664:	2301      	movs	r3, #1
 8008666:	4642      	mov	r2, r8
 8008668:	e7df      	b.n	800862a <_printf_float+0x3ee>
 800866a:	2301      	movs	r3, #1
 800866c:	464a      	mov	r2, r9
 800866e:	4631      	mov	r1, r6
 8008670:	4628      	mov	r0, r5
 8008672:	47b8      	blx	r7
 8008674:	3001      	adds	r0, #1
 8008676:	f43f ae3c 	beq.w	80082f2 <_printf_float+0xb6>
 800867a:	f108 0801 	add.w	r8, r8, #1
 800867e:	68e3      	ldr	r3, [r4, #12]
 8008680:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8008682:	1a5b      	subs	r3, r3, r1
 8008684:	4543      	cmp	r3, r8
 8008686:	dcf0      	bgt.n	800866a <_printf_float+0x42e>
 8008688:	e6fd      	b.n	8008486 <_printf_float+0x24a>
 800868a:	f04f 0800 	mov.w	r8, #0
 800868e:	f104 0919 	add.w	r9, r4, #25
 8008692:	e7f4      	b.n	800867e <_printf_float+0x442>

08008694 <_printf_common>:
 8008694:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008698:	4616      	mov	r6, r2
 800869a:	4699      	mov	r9, r3
 800869c:	688a      	ldr	r2, [r1, #8]
 800869e:	690b      	ldr	r3, [r1, #16]
 80086a0:	4607      	mov	r7, r0
 80086a2:	4293      	cmp	r3, r2
 80086a4:	bfb8      	it	lt
 80086a6:	4613      	movlt	r3, r2
 80086a8:	6033      	str	r3, [r6, #0]
 80086aa:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80086ae:	460c      	mov	r4, r1
 80086b0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80086b4:	b10a      	cbz	r2, 80086ba <_printf_common+0x26>
 80086b6:	3301      	adds	r3, #1
 80086b8:	6033      	str	r3, [r6, #0]
 80086ba:	6823      	ldr	r3, [r4, #0]
 80086bc:	0699      	lsls	r1, r3, #26
 80086be:	bf42      	ittt	mi
 80086c0:	6833      	ldrmi	r3, [r6, #0]
 80086c2:	3302      	addmi	r3, #2
 80086c4:	6033      	strmi	r3, [r6, #0]
 80086c6:	6825      	ldr	r5, [r4, #0]
 80086c8:	f015 0506 	ands.w	r5, r5, #6
 80086cc:	d106      	bne.n	80086dc <_printf_common+0x48>
 80086ce:	f104 0a19 	add.w	sl, r4, #25
 80086d2:	68e3      	ldr	r3, [r4, #12]
 80086d4:	6832      	ldr	r2, [r6, #0]
 80086d6:	1a9b      	subs	r3, r3, r2
 80086d8:	42ab      	cmp	r3, r5
 80086da:	dc28      	bgt.n	800872e <_printf_common+0x9a>
 80086dc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80086e0:	1e13      	subs	r3, r2, #0
 80086e2:	6822      	ldr	r2, [r4, #0]
 80086e4:	bf18      	it	ne
 80086e6:	2301      	movne	r3, #1
 80086e8:	0692      	lsls	r2, r2, #26
 80086ea:	d42d      	bmi.n	8008748 <_printf_common+0xb4>
 80086ec:	4649      	mov	r1, r9
 80086ee:	4638      	mov	r0, r7
 80086f0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80086f4:	47c0      	blx	r8
 80086f6:	3001      	adds	r0, #1
 80086f8:	d020      	beq.n	800873c <_printf_common+0xa8>
 80086fa:	6823      	ldr	r3, [r4, #0]
 80086fc:	68e5      	ldr	r5, [r4, #12]
 80086fe:	f003 0306 	and.w	r3, r3, #6
 8008702:	2b04      	cmp	r3, #4
 8008704:	bf18      	it	ne
 8008706:	2500      	movne	r5, #0
 8008708:	6832      	ldr	r2, [r6, #0]
 800870a:	f04f 0600 	mov.w	r6, #0
 800870e:	68a3      	ldr	r3, [r4, #8]
 8008710:	bf08      	it	eq
 8008712:	1aad      	subeq	r5, r5, r2
 8008714:	6922      	ldr	r2, [r4, #16]
 8008716:	bf08      	it	eq
 8008718:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800871c:	4293      	cmp	r3, r2
 800871e:	bfc4      	itt	gt
 8008720:	1a9b      	subgt	r3, r3, r2
 8008722:	18ed      	addgt	r5, r5, r3
 8008724:	341a      	adds	r4, #26
 8008726:	42b5      	cmp	r5, r6
 8008728:	d11a      	bne.n	8008760 <_printf_common+0xcc>
 800872a:	2000      	movs	r0, #0
 800872c:	e008      	b.n	8008740 <_printf_common+0xac>
 800872e:	2301      	movs	r3, #1
 8008730:	4652      	mov	r2, sl
 8008732:	4649      	mov	r1, r9
 8008734:	4638      	mov	r0, r7
 8008736:	47c0      	blx	r8
 8008738:	3001      	adds	r0, #1
 800873a:	d103      	bne.n	8008744 <_printf_common+0xb0>
 800873c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008740:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008744:	3501      	adds	r5, #1
 8008746:	e7c4      	b.n	80086d2 <_printf_common+0x3e>
 8008748:	2030      	movs	r0, #48	; 0x30
 800874a:	18e1      	adds	r1, r4, r3
 800874c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008750:	1c5a      	adds	r2, r3, #1
 8008752:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008756:	4422      	add	r2, r4
 8008758:	3302      	adds	r3, #2
 800875a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800875e:	e7c5      	b.n	80086ec <_printf_common+0x58>
 8008760:	2301      	movs	r3, #1
 8008762:	4622      	mov	r2, r4
 8008764:	4649      	mov	r1, r9
 8008766:	4638      	mov	r0, r7
 8008768:	47c0      	blx	r8
 800876a:	3001      	adds	r0, #1
 800876c:	d0e6      	beq.n	800873c <_printf_common+0xa8>
 800876e:	3601      	adds	r6, #1
 8008770:	e7d9      	b.n	8008726 <_printf_common+0x92>
	...

08008774 <_printf_i>:
 8008774:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008778:	460c      	mov	r4, r1
 800877a:	7e27      	ldrb	r7, [r4, #24]
 800877c:	4691      	mov	r9, r2
 800877e:	2f78      	cmp	r7, #120	; 0x78
 8008780:	4680      	mov	r8, r0
 8008782:	469a      	mov	sl, r3
 8008784:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008786:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800878a:	d807      	bhi.n	800879c <_printf_i+0x28>
 800878c:	2f62      	cmp	r7, #98	; 0x62
 800878e:	d80a      	bhi.n	80087a6 <_printf_i+0x32>
 8008790:	2f00      	cmp	r7, #0
 8008792:	f000 80d9 	beq.w	8008948 <_printf_i+0x1d4>
 8008796:	2f58      	cmp	r7, #88	; 0x58
 8008798:	f000 80a4 	beq.w	80088e4 <_printf_i+0x170>
 800879c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80087a0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80087a4:	e03a      	b.n	800881c <_printf_i+0xa8>
 80087a6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80087aa:	2b15      	cmp	r3, #21
 80087ac:	d8f6      	bhi.n	800879c <_printf_i+0x28>
 80087ae:	a001      	add	r0, pc, #4	; (adr r0, 80087b4 <_printf_i+0x40>)
 80087b0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80087b4:	0800880d 	.word	0x0800880d
 80087b8:	08008821 	.word	0x08008821
 80087bc:	0800879d 	.word	0x0800879d
 80087c0:	0800879d 	.word	0x0800879d
 80087c4:	0800879d 	.word	0x0800879d
 80087c8:	0800879d 	.word	0x0800879d
 80087cc:	08008821 	.word	0x08008821
 80087d0:	0800879d 	.word	0x0800879d
 80087d4:	0800879d 	.word	0x0800879d
 80087d8:	0800879d 	.word	0x0800879d
 80087dc:	0800879d 	.word	0x0800879d
 80087e0:	0800892f 	.word	0x0800892f
 80087e4:	08008851 	.word	0x08008851
 80087e8:	08008911 	.word	0x08008911
 80087ec:	0800879d 	.word	0x0800879d
 80087f0:	0800879d 	.word	0x0800879d
 80087f4:	08008951 	.word	0x08008951
 80087f8:	0800879d 	.word	0x0800879d
 80087fc:	08008851 	.word	0x08008851
 8008800:	0800879d 	.word	0x0800879d
 8008804:	0800879d 	.word	0x0800879d
 8008808:	08008919 	.word	0x08008919
 800880c:	680b      	ldr	r3, [r1, #0]
 800880e:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008812:	1d1a      	adds	r2, r3, #4
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	600a      	str	r2, [r1, #0]
 8008818:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800881c:	2301      	movs	r3, #1
 800881e:	e0a4      	b.n	800896a <_printf_i+0x1f6>
 8008820:	6825      	ldr	r5, [r4, #0]
 8008822:	6808      	ldr	r0, [r1, #0]
 8008824:	062e      	lsls	r6, r5, #24
 8008826:	f100 0304 	add.w	r3, r0, #4
 800882a:	d50a      	bpl.n	8008842 <_printf_i+0xce>
 800882c:	6805      	ldr	r5, [r0, #0]
 800882e:	600b      	str	r3, [r1, #0]
 8008830:	2d00      	cmp	r5, #0
 8008832:	da03      	bge.n	800883c <_printf_i+0xc8>
 8008834:	232d      	movs	r3, #45	; 0x2d
 8008836:	426d      	negs	r5, r5
 8008838:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800883c:	230a      	movs	r3, #10
 800883e:	485e      	ldr	r0, [pc, #376]	; (80089b8 <_printf_i+0x244>)
 8008840:	e019      	b.n	8008876 <_printf_i+0x102>
 8008842:	f015 0f40 	tst.w	r5, #64	; 0x40
 8008846:	6805      	ldr	r5, [r0, #0]
 8008848:	600b      	str	r3, [r1, #0]
 800884a:	bf18      	it	ne
 800884c:	b22d      	sxthne	r5, r5
 800884e:	e7ef      	b.n	8008830 <_printf_i+0xbc>
 8008850:	680b      	ldr	r3, [r1, #0]
 8008852:	6825      	ldr	r5, [r4, #0]
 8008854:	1d18      	adds	r0, r3, #4
 8008856:	6008      	str	r0, [r1, #0]
 8008858:	0628      	lsls	r0, r5, #24
 800885a:	d501      	bpl.n	8008860 <_printf_i+0xec>
 800885c:	681d      	ldr	r5, [r3, #0]
 800885e:	e002      	b.n	8008866 <_printf_i+0xf2>
 8008860:	0669      	lsls	r1, r5, #25
 8008862:	d5fb      	bpl.n	800885c <_printf_i+0xe8>
 8008864:	881d      	ldrh	r5, [r3, #0]
 8008866:	2f6f      	cmp	r7, #111	; 0x6f
 8008868:	bf0c      	ite	eq
 800886a:	2308      	moveq	r3, #8
 800886c:	230a      	movne	r3, #10
 800886e:	4852      	ldr	r0, [pc, #328]	; (80089b8 <_printf_i+0x244>)
 8008870:	2100      	movs	r1, #0
 8008872:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008876:	6866      	ldr	r6, [r4, #4]
 8008878:	2e00      	cmp	r6, #0
 800887a:	bfa8      	it	ge
 800887c:	6821      	ldrge	r1, [r4, #0]
 800887e:	60a6      	str	r6, [r4, #8]
 8008880:	bfa4      	itt	ge
 8008882:	f021 0104 	bicge.w	r1, r1, #4
 8008886:	6021      	strge	r1, [r4, #0]
 8008888:	b90d      	cbnz	r5, 800888e <_printf_i+0x11a>
 800888a:	2e00      	cmp	r6, #0
 800888c:	d04d      	beq.n	800892a <_printf_i+0x1b6>
 800888e:	4616      	mov	r6, r2
 8008890:	fbb5 f1f3 	udiv	r1, r5, r3
 8008894:	fb03 5711 	mls	r7, r3, r1, r5
 8008898:	5dc7      	ldrb	r7, [r0, r7]
 800889a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800889e:	462f      	mov	r7, r5
 80088a0:	42bb      	cmp	r3, r7
 80088a2:	460d      	mov	r5, r1
 80088a4:	d9f4      	bls.n	8008890 <_printf_i+0x11c>
 80088a6:	2b08      	cmp	r3, #8
 80088a8:	d10b      	bne.n	80088c2 <_printf_i+0x14e>
 80088aa:	6823      	ldr	r3, [r4, #0]
 80088ac:	07df      	lsls	r7, r3, #31
 80088ae:	d508      	bpl.n	80088c2 <_printf_i+0x14e>
 80088b0:	6923      	ldr	r3, [r4, #16]
 80088b2:	6861      	ldr	r1, [r4, #4]
 80088b4:	4299      	cmp	r1, r3
 80088b6:	bfde      	ittt	le
 80088b8:	2330      	movle	r3, #48	; 0x30
 80088ba:	f806 3c01 	strble.w	r3, [r6, #-1]
 80088be:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 80088c2:	1b92      	subs	r2, r2, r6
 80088c4:	6122      	str	r2, [r4, #16]
 80088c6:	464b      	mov	r3, r9
 80088c8:	4621      	mov	r1, r4
 80088ca:	4640      	mov	r0, r8
 80088cc:	f8cd a000 	str.w	sl, [sp]
 80088d0:	aa03      	add	r2, sp, #12
 80088d2:	f7ff fedf 	bl	8008694 <_printf_common>
 80088d6:	3001      	adds	r0, #1
 80088d8:	d14c      	bne.n	8008974 <_printf_i+0x200>
 80088da:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80088de:	b004      	add	sp, #16
 80088e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80088e4:	4834      	ldr	r0, [pc, #208]	; (80089b8 <_printf_i+0x244>)
 80088e6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80088ea:	680e      	ldr	r6, [r1, #0]
 80088ec:	6823      	ldr	r3, [r4, #0]
 80088ee:	f856 5b04 	ldr.w	r5, [r6], #4
 80088f2:	061f      	lsls	r7, r3, #24
 80088f4:	600e      	str	r6, [r1, #0]
 80088f6:	d514      	bpl.n	8008922 <_printf_i+0x1ae>
 80088f8:	07d9      	lsls	r1, r3, #31
 80088fa:	bf44      	itt	mi
 80088fc:	f043 0320 	orrmi.w	r3, r3, #32
 8008900:	6023      	strmi	r3, [r4, #0]
 8008902:	b91d      	cbnz	r5, 800890c <_printf_i+0x198>
 8008904:	6823      	ldr	r3, [r4, #0]
 8008906:	f023 0320 	bic.w	r3, r3, #32
 800890a:	6023      	str	r3, [r4, #0]
 800890c:	2310      	movs	r3, #16
 800890e:	e7af      	b.n	8008870 <_printf_i+0xfc>
 8008910:	6823      	ldr	r3, [r4, #0]
 8008912:	f043 0320 	orr.w	r3, r3, #32
 8008916:	6023      	str	r3, [r4, #0]
 8008918:	2378      	movs	r3, #120	; 0x78
 800891a:	4828      	ldr	r0, [pc, #160]	; (80089bc <_printf_i+0x248>)
 800891c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008920:	e7e3      	b.n	80088ea <_printf_i+0x176>
 8008922:	065e      	lsls	r6, r3, #25
 8008924:	bf48      	it	mi
 8008926:	b2ad      	uxthmi	r5, r5
 8008928:	e7e6      	b.n	80088f8 <_printf_i+0x184>
 800892a:	4616      	mov	r6, r2
 800892c:	e7bb      	b.n	80088a6 <_printf_i+0x132>
 800892e:	680b      	ldr	r3, [r1, #0]
 8008930:	6826      	ldr	r6, [r4, #0]
 8008932:	1d1d      	adds	r5, r3, #4
 8008934:	6960      	ldr	r0, [r4, #20]
 8008936:	600d      	str	r5, [r1, #0]
 8008938:	0635      	lsls	r5, r6, #24
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	d501      	bpl.n	8008942 <_printf_i+0x1ce>
 800893e:	6018      	str	r0, [r3, #0]
 8008940:	e002      	b.n	8008948 <_printf_i+0x1d4>
 8008942:	0671      	lsls	r1, r6, #25
 8008944:	d5fb      	bpl.n	800893e <_printf_i+0x1ca>
 8008946:	8018      	strh	r0, [r3, #0]
 8008948:	2300      	movs	r3, #0
 800894a:	4616      	mov	r6, r2
 800894c:	6123      	str	r3, [r4, #16]
 800894e:	e7ba      	b.n	80088c6 <_printf_i+0x152>
 8008950:	680b      	ldr	r3, [r1, #0]
 8008952:	1d1a      	adds	r2, r3, #4
 8008954:	600a      	str	r2, [r1, #0]
 8008956:	681e      	ldr	r6, [r3, #0]
 8008958:	2100      	movs	r1, #0
 800895a:	4630      	mov	r0, r6
 800895c:	6862      	ldr	r2, [r4, #4]
 800895e:	f000 fed9 	bl	8009714 <memchr>
 8008962:	b108      	cbz	r0, 8008968 <_printf_i+0x1f4>
 8008964:	1b80      	subs	r0, r0, r6
 8008966:	6060      	str	r0, [r4, #4]
 8008968:	6863      	ldr	r3, [r4, #4]
 800896a:	6123      	str	r3, [r4, #16]
 800896c:	2300      	movs	r3, #0
 800896e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008972:	e7a8      	b.n	80088c6 <_printf_i+0x152>
 8008974:	4632      	mov	r2, r6
 8008976:	4649      	mov	r1, r9
 8008978:	4640      	mov	r0, r8
 800897a:	6923      	ldr	r3, [r4, #16]
 800897c:	47d0      	blx	sl
 800897e:	3001      	adds	r0, #1
 8008980:	d0ab      	beq.n	80088da <_printf_i+0x166>
 8008982:	6823      	ldr	r3, [r4, #0]
 8008984:	079b      	lsls	r3, r3, #30
 8008986:	d413      	bmi.n	80089b0 <_printf_i+0x23c>
 8008988:	68e0      	ldr	r0, [r4, #12]
 800898a:	9b03      	ldr	r3, [sp, #12]
 800898c:	4298      	cmp	r0, r3
 800898e:	bfb8      	it	lt
 8008990:	4618      	movlt	r0, r3
 8008992:	e7a4      	b.n	80088de <_printf_i+0x16a>
 8008994:	2301      	movs	r3, #1
 8008996:	4632      	mov	r2, r6
 8008998:	4649      	mov	r1, r9
 800899a:	4640      	mov	r0, r8
 800899c:	47d0      	blx	sl
 800899e:	3001      	adds	r0, #1
 80089a0:	d09b      	beq.n	80088da <_printf_i+0x166>
 80089a2:	3501      	adds	r5, #1
 80089a4:	68e3      	ldr	r3, [r4, #12]
 80089a6:	9903      	ldr	r1, [sp, #12]
 80089a8:	1a5b      	subs	r3, r3, r1
 80089aa:	42ab      	cmp	r3, r5
 80089ac:	dcf2      	bgt.n	8008994 <_printf_i+0x220>
 80089ae:	e7eb      	b.n	8008988 <_printf_i+0x214>
 80089b0:	2500      	movs	r5, #0
 80089b2:	f104 0619 	add.w	r6, r4, #25
 80089b6:	e7f5      	b.n	80089a4 <_printf_i+0x230>
 80089b8:	0800c4aa 	.word	0x0800c4aa
 80089bc:	0800c4bb 	.word	0x0800c4bb

080089c0 <siprintf>:
 80089c0:	b40e      	push	{r1, r2, r3}
 80089c2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80089c6:	b500      	push	{lr}
 80089c8:	b09c      	sub	sp, #112	; 0x70
 80089ca:	ab1d      	add	r3, sp, #116	; 0x74
 80089cc:	9002      	str	r0, [sp, #8]
 80089ce:	9006      	str	r0, [sp, #24]
 80089d0:	9107      	str	r1, [sp, #28]
 80089d2:	9104      	str	r1, [sp, #16]
 80089d4:	4808      	ldr	r0, [pc, #32]	; (80089f8 <siprintf+0x38>)
 80089d6:	4909      	ldr	r1, [pc, #36]	; (80089fc <siprintf+0x3c>)
 80089d8:	f853 2b04 	ldr.w	r2, [r3], #4
 80089dc:	9105      	str	r1, [sp, #20]
 80089de:	6800      	ldr	r0, [r0, #0]
 80089e0:	a902      	add	r1, sp, #8
 80089e2:	9301      	str	r3, [sp, #4]
 80089e4:	f001 fb44 	bl	800a070 <_svfiprintf_r>
 80089e8:	2200      	movs	r2, #0
 80089ea:	9b02      	ldr	r3, [sp, #8]
 80089ec:	701a      	strb	r2, [r3, #0]
 80089ee:	b01c      	add	sp, #112	; 0x70
 80089f0:	f85d eb04 	ldr.w	lr, [sp], #4
 80089f4:	b003      	add	sp, #12
 80089f6:	4770      	bx	lr
 80089f8:	2000001c 	.word	0x2000001c
 80089fc:	ffff0208 	.word	0xffff0208

08008a00 <quorem>:
 8008a00:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a04:	6903      	ldr	r3, [r0, #16]
 8008a06:	690c      	ldr	r4, [r1, #16]
 8008a08:	4607      	mov	r7, r0
 8008a0a:	42a3      	cmp	r3, r4
 8008a0c:	f2c0 8083 	blt.w	8008b16 <quorem+0x116>
 8008a10:	3c01      	subs	r4, #1
 8008a12:	f100 0514 	add.w	r5, r0, #20
 8008a16:	f101 0814 	add.w	r8, r1, #20
 8008a1a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008a1e:	9301      	str	r3, [sp, #4]
 8008a20:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008a24:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008a28:	3301      	adds	r3, #1
 8008a2a:	429a      	cmp	r2, r3
 8008a2c:	fbb2 f6f3 	udiv	r6, r2, r3
 8008a30:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008a34:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008a38:	d332      	bcc.n	8008aa0 <quorem+0xa0>
 8008a3a:	f04f 0e00 	mov.w	lr, #0
 8008a3e:	4640      	mov	r0, r8
 8008a40:	46ac      	mov	ip, r5
 8008a42:	46f2      	mov	sl, lr
 8008a44:	f850 2b04 	ldr.w	r2, [r0], #4
 8008a48:	b293      	uxth	r3, r2
 8008a4a:	fb06 e303 	mla	r3, r6, r3, lr
 8008a4e:	0c12      	lsrs	r2, r2, #16
 8008a50:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8008a54:	fb06 e202 	mla	r2, r6, r2, lr
 8008a58:	b29b      	uxth	r3, r3
 8008a5a:	ebaa 0303 	sub.w	r3, sl, r3
 8008a5e:	f8dc a000 	ldr.w	sl, [ip]
 8008a62:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008a66:	fa1f fa8a 	uxth.w	sl, sl
 8008a6a:	4453      	add	r3, sl
 8008a6c:	fa1f fa82 	uxth.w	sl, r2
 8008a70:	f8dc 2000 	ldr.w	r2, [ip]
 8008a74:	4581      	cmp	r9, r0
 8008a76:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8008a7a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008a7e:	b29b      	uxth	r3, r3
 8008a80:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008a84:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008a88:	f84c 3b04 	str.w	r3, [ip], #4
 8008a8c:	d2da      	bcs.n	8008a44 <quorem+0x44>
 8008a8e:	f855 300b 	ldr.w	r3, [r5, fp]
 8008a92:	b92b      	cbnz	r3, 8008aa0 <quorem+0xa0>
 8008a94:	9b01      	ldr	r3, [sp, #4]
 8008a96:	3b04      	subs	r3, #4
 8008a98:	429d      	cmp	r5, r3
 8008a9a:	461a      	mov	r2, r3
 8008a9c:	d32f      	bcc.n	8008afe <quorem+0xfe>
 8008a9e:	613c      	str	r4, [r7, #16]
 8008aa0:	4638      	mov	r0, r7
 8008aa2:	f001 f8cd 	bl	8009c40 <__mcmp>
 8008aa6:	2800      	cmp	r0, #0
 8008aa8:	db25      	blt.n	8008af6 <quorem+0xf6>
 8008aaa:	4628      	mov	r0, r5
 8008aac:	f04f 0c00 	mov.w	ip, #0
 8008ab0:	3601      	adds	r6, #1
 8008ab2:	f858 1b04 	ldr.w	r1, [r8], #4
 8008ab6:	f8d0 e000 	ldr.w	lr, [r0]
 8008aba:	b28b      	uxth	r3, r1
 8008abc:	ebac 0303 	sub.w	r3, ip, r3
 8008ac0:	fa1f f28e 	uxth.w	r2, lr
 8008ac4:	4413      	add	r3, r2
 8008ac6:	0c0a      	lsrs	r2, r1, #16
 8008ac8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008acc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008ad0:	b29b      	uxth	r3, r3
 8008ad2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008ad6:	45c1      	cmp	r9, r8
 8008ad8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008adc:	f840 3b04 	str.w	r3, [r0], #4
 8008ae0:	d2e7      	bcs.n	8008ab2 <quorem+0xb2>
 8008ae2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008ae6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008aea:	b922      	cbnz	r2, 8008af6 <quorem+0xf6>
 8008aec:	3b04      	subs	r3, #4
 8008aee:	429d      	cmp	r5, r3
 8008af0:	461a      	mov	r2, r3
 8008af2:	d30a      	bcc.n	8008b0a <quorem+0x10a>
 8008af4:	613c      	str	r4, [r7, #16]
 8008af6:	4630      	mov	r0, r6
 8008af8:	b003      	add	sp, #12
 8008afa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008afe:	6812      	ldr	r2, [r2, #0]
 8008b00:	3b04      	subs	r3, #4
 8008b02:	2a00      	cmp	r2, #0
 8008b04:	d1cb      	bne.n	8008a9e <quorem+0x9e>
 8008b06:	3c01      	subs	r4, #1
 8008b08:	e7c6      	b.n	8008a98 <quorem+0x98>
 8008b0a:	6812      	ldr	r2, [r2, #0]
 8008b0c:	3b04      	subs	r3, #4
 8008b0e:	2a00      	cmp	r2, #0
 8008b10:	d1f0      	bne.n	8008af4 <quorem+0xf4>
 8008b12:	3c01      	subs	r4, #1
 8008b14:	e7eb      	b.n	8008aee <quorem+0xee>
 8008b16:	2000      	movs	r0, #0
 8008b18:	e7ee      	b.n	8008af8 <quorem+0xf8>
 8008b1a:	0000      	movs	r0, r0
 8008b1c:	0000      	movs	r0, r0
	...

08008b20 <_dtoa_r>:
 8008b20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b24:	4616      	mov	r6, r2
 8008b26:	461f      	mov	r7, r3
 8008b28:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8008b2a:	b099      	sub	sp, #100	; 0x64
 8008b2c:	4605      	mov	r5, r0
 8008b2e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8008b32:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8008b36:	b974      	cbnz	r4, 8008b56 <_dtoa_r+0x36>
 8008b38:	2010      	movs	r0, #16
 8008b3a:	f000 fde3 	bl	8009704 <malloc>
 8008b3e:	4602      	mov	r2, r0
 8008b40:	6268      	str	r0, [r5, #36]	; 0x24
 8008b42:	b920      	cbnz	r0, 8008b4e <_dtoa_r+0x2e>
 8008b44:	21ea      	movs	r1, #234	; 0xea
 8008b46:	4bae      	ldr	r3, [pc, #696]	; (8008e00 <_dtoa_r+0x2e0>)
 8008b48:	48ae      	ldr	r0, [pc, #696]	; (8008e04 <_dtoa_r+0x2e4>)
 8008b4a:	f001 fba1 	bl	800a290 <__assert_func>
 8008b4e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008b52:	6004      	str	r4, [r0, #0]
 8008b54:	60c4      	str	r4, [r0, #12]
 8008b56:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008b58:	6819      	ldr	r1, [r3, #0]
 8008b5a:	b151      	cbz	r1, 8008b72 <_dtoa_r+0x52>
 8008b5c:	685a      	ldr	r2, [r3, #4]
 8008b5e:	2301      	movs	r3, #1
 8008b60:	4093      	lsls	r3, r2
 8008b62:	604a      	str	r2, [r1, #4]
 8008b64:	608b      	str	r3, [r1, #8]
 8008b66:	4628      	mov	r0, r5
 8008b68:	f000 fe30 	bl	80097cc <_Bfree>
 8008b6c:	2200      	movs	r2, #0
 8008b6e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008b70:	601a      	str	r2, [r3, #0]
 8008b72:	1e3b      	subs	r3, r7, #0
 8008b74:	bfaf      	iteee	ge
 8008b76:	2300      	movge	r3, #0
 8008b78:	2201      	movlt	r2, #1
 8008b7a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8008b7e:	9305      	strlt	r3, [sp, #20]
 8008b80:	bfa8      	it	ge
 8008b82:	f8c8 3000 	strge.w	r3, [r8]
 8008b86:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8008b8a:	4b9f      	ldr	r3, [pc, #636]	; (8008e08 <_dtoa_r+0x2e8>)
 8008b8c:	bfb8      	it	lt
 8008b8e:	f8c8 2000 	strlt.w	r2, [r8]
 8008b92:	ea33 0309 	bics.w	r3, r3, r9
 8008b96:	d119      	bne.n	8008bcc <_dtoa_r+0xac>
 8008b98:	f242 730f 	movw	r3, #9999	; 0x270f
 8008b9c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8008b9e:	6013      	str	r3, [r2, #0]
 8008ba0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008ba4:	4333      	orrs	r3, r6
 8008ba6:	f000 8580 	beq.w	80096aa <_dtoa_r+0xb8a>
 8008baa:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008bac:	b953      	cbnz	r3, 8008bc4 <_dtoa_r+0xa4>
 8008bae:	4b97      	ldr	r3, [pc, #604]	; (8008e0c <_dtoa_r+0x2ec>)
 8008bb0:	e022      	b.n	8008bf8 <_dtoa_r+0xd8>
 8008bb2:	4b97      	ldr	r3, [pc, #604]	; (8008e10 <_dtoa_r+0x2f0>)
 8008bb4:	9308      	str	r3, [sp, #32]
 8008bb6:	3308      	adds	r3, #8
 8008bb8:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8008bba:	6013      	str	r3, [r2, #0]
 8008bbc:	9808      	ldr	r0, [sp, #32]
 8008bbe:	b019      	add	sp, #100	; 0x64
 8008bc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008bc4:	4b91      	ldr	r3, [pc, #580]	; (8008e0c <_dtoa_r+0x2ec>)
 8008bc6:	9308      	str	r3, [sp, #32]
 8008bc8:	3303      	adds	r3, #3
 8008bca:	e7f5      	b.n	8008bb8 <_dtoa_r+0x98>
 8008bcc:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8008bd0:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8008bd4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008bd8:	2200      	movs	r2, #0
 8008bda:	2300      	movs	r3, #0
 8008bdc:	f7f7 fee4 	bl	80009a8 <__aeabi_dcmpeq>
 8008be0:	4680      	mov	r8, r0
 8008be2:	b158      	cbz	r0, 8008bfc <_dtoa_r+0xdc>
 8008be4:	2301      	movs	r3, #1
 8008be6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8008be8:	6013      	str	r3, [r2, #0]
 8008bea:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	f000 8559 	beq.w	80096a4 <_dtoa_r+0xb84>
 8008bf2:	4888      	ldr	r0, [pc, #544]	; (8008e14 <_dtoa_r+0x2f4>)
 8008bf4:	6018      	str	r0, [r3, #0]
 8008bf6:	1e43      	subs	r3, r0, #1
 8008bf8:	9308      	str	r3, [sp, #32]
 8008bfa:	e7df      	b.n	8008bbc <_dtoa_r+0x9c>
 8008bfc:	ab16      	add	r3, sp, #88	; 0x58
 8008bfe:	9301      	str	r3, [sp, #4]
 8008c00:	ab17      	add	r3, sp, #92	; 0x5c
 8008c02:	9300      	str	r3, [sp, #0]
 8008c04:	4628      	mov	r0, r5
 8008c06:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8008c0a:	f001 f8c5 	bl	8009d98 <__d2b>
 8008c0e:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8008c12:	4682      	mov	sl, r0
 8008c14:	2c00      	cmp	r4, #0
 8008c16:	d07e      	beq.n	8008d16 <_dtoa_r+0x1f6>
 8008c18:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008c1c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008c1e:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8008c22:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008c26:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8008c2a:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8008c2e:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8008c32:	2200      	movs	r2, #0
 8008c34:	4b78      	ldr	r3, [pc, #480]	; (8008e18 <_dtoa_r+0x2f8>)
 8008c36:	f7f7 fa97 	bl	8000168 <__aeabi_dsub>
 8008c3a:	a36b      	add	r3, pc, #428	; (adr r3, 8008de8 <_dtoa_r+0x2c8>)
 8008c3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c40:	f7f7 fc4a 	bl	80004d8 <__aeabi_dmul>
 8008c44:	a36a      	add	r3, pc, #424	; (adr r3, 8008df0 <_dtoa_r+0x2d0>)
 8008c46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c4a:	f7f7 fa8f 	bl	800016c <__adddf3>
 8008c4e:	4606      	mov	r6, r0
 8008c50:	4620      	mov	r0, r4
 8008c52:	460f      	mov	r7, r1
 8008c54:	f7f7 fbd6 	bl	8000404 <__aeabi_i2d>
 8008c58:	a367      	add	r3, pc, #412	; (adr r3, 8008df8 <_dtoa_r+0x2d8>)
 8008c5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c5e:	f7f7 fc3b 	bl	80004d8 <__aeabi_dmul>
 8008c62:	4602      	mov	r2, r0
 8008c64:	460b      	mov	r3, r1
 8008c66:	4630      	mov	r0, r6
 8008c68:	4639      	mov	r1, r7
 8008c6a:	f7f7 fa7f 	bl	800016c <__adddf3>
 8008c6e:	4606      	mov	r6, r0
 8008c70:	460f      	mov	r7, r1
 8008c72:	f7f7 fee1 	bl	8000a38 <__aeabi_d2iz>
 8008c76:	2200      	movs	r2, #0
 8008c78:	4681      	mov	r9, r0
 8008c7a:	2300      	movs	r3, #0
 8008c7c:	4630      	mov	r0, r6
 8008c7e:	4639      	mov	r1, r7
 8008c80:	f7f7 fe9c 	bl	80009bc <__aeabi_dcmplt>
 8008c84:	b148      	cbz	r0, 8008c9a <_dtoa_r+0x17a>
 8008c86:	4648      	mov	r0, r9
 8008c88:	f7f7 fbbc 	bl	8000404 <__aeabi_i2d>
 8008c8c:	4632      	mov	r2, r6
 8008c8e:	463b      	mov	r3, r7
 8008c90:	f7f7 fe8a 	bl	80009a8 <__aeabi_dcmpeq>
 8008c94:	b908      	cbnz	r0, 8008c9a <_dtoa_r+0x17a>
 8008c96:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 8008c9a:	f1b9 0f16 	cmp.w	r9, #22
 8008c9e:	d857      	bhi.n	8008d50 <_dtoa_r+0x230>
 8008ca0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008ca4:	4b5d      	ldr	r3, [pc, #372]	; (8008e1c <_dtoa_r+0x2fc>)
 8008ca6:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8008caa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cae:	f7f7 fe85 	bl	80009bc <__aeabi_dcmplt>
 8008cb2:	2800      	cmp	r0, #0
 8008cb4:	d04e      	beq.n	8008d54 <_dtoa_r+0x234>
 8008cb6:	2300      	movs	r3, #0
 8008cb8:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 8008cbc:	930f      	str	r3, [sp, #60]	; 0x3c
 8008cbe:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8008cc0:	1b1c      	subs	r4, r3, r4
 8008cc2:	1e63      	subs	r3, r4, #1
 8008cc4:	9309      	str	r3, [sp, #36]	; 0x24
 8008cc6:	bf49      	itett	mi
 8008cc8:	f1c4 0301 	rsbmi	r3, r4, #1
 8008ccc:	2300      	movpl	r3, #0
 8008cce:	9306      	strmi	r3, [sp, #24]
 8008cd0:	2300      	movmi	r3, #0
 8008cd2:	bf54      	ite	pl
 8008cd4:	9306      	strpl	r3, [sp, #24]
 8008cd6:	9309      	strmi	r3, [sp, #36]	; 0x24
 8008cd8:	f1b9 0f00 	cmp.w	r9, #0
 8008cdc:	db3c      	blt.n	8008d58 <_dtoa_r+0x238>
 8008cde:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008ce0:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8008ce4:	444b      	add	r3, r9
 8008ce6:	9309      	str	r3, [sp, #36]	; 0x24
 8008ce8:	2300      	movs	r3, #0
 8008cea:	930a      	str	r3, [sp, #40]	; 0x28
 8008cec:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008cee:	2b09      	cmp	r3, #9
 8008cf0:	d86c      	bhi.n	8008dcc <_dtoa_r+0x2ac>
 8008cf2:	2b05      	cmp	r3, #5
 8008cf4:	bfc4      	itt	gt
 8008cf6:	3b04      	subgt	r3, #4
 8008cf8:	9322      	strgt	r3, [sp, #136]	; 0x88
 8008cfa:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008cfc:	bfc8      	it	gt
 8008cfe:	2400      	movgt	r4, #0
 8008d00:	f1a3 0302 	sub.w	r3, r3, #2
 8008d04:	bfd8      	it	le
 8008d06:	2401      	movle	r4, #1
 8008d08:	2b03      	cmp	r3, #3
 8008d0a:	f200 808b 	bhi.w	8008e24 <_dtoa_r+0x304>
 8008d0e:	e8df f003 	tbb	[pc, r3]
 8008d12:	4f2d      	.short	0x4f2d
 8008d14:	5b4d      	.short	0x5b4d
 8008d16:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8008d1a:	441c      	add	r4, r3
 8008d1c:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8008d20:	2b20      	cmp	r3, #32
 8008d22:	bfc3      	ittte	gt
 8008d24:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008d28:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8008d2c:	fa09 f303 	lslgt.w	r3, r9, r3
 8008d30:	f1c3 0320 	rsble	r3, r3, #32
 8008d34:	bfc6      	itte	gt
 8008d36:	fa26 f000 	lsrgt.w	r0, r6, r0
 8008d3a:	4318      	orrgt	r0, r3
 8008d3c:	fa06 f003 	lslle.w	r0, r6, r3
 8008d40:	f7f7 fb50 	bl	80003e4 <__aeabi_ui2d>
 8008d44:	2301      	movs	r3, #1
 8008d46:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8008d4a:	3c01      	subs	r4, #1
 8008d4c:	9313      	str	r3, [sp, #76]	; 0x4c
 8008d4e:	e770      	b.n	8008c32 <_dtoa_r+0x112>
 8008d50:	2301      	movs	r3, #1
 8008d52:	e7b3      	b.n	8008cbc <_dtoa_r+0x19c>
 8008d54:	900f      	str	r0, [sp, #60]	; 0x3c
 8008d56:	e7b2      	b.n	8008cbe <_dtoa_r+0x19e>
 8008d58:	9b06      	ldr	r3, [sp, #24]
 8008d5a:	eba3 0309 	sub.w	r3, r3, r9
 8008d5e:	9306      	str	r3, [sp, #24]
 8008d60:	f1c9 0300 	rsb	r3, r9, #0
 8008d64:	930a      	str	r3, [sp, #40]	; 0x28
 8008d66:	2300      	movs	r3, #0
 8008d68:	930e      	str	r3, [sp, #56]	; 0x38
 8008d6a:	e7bf      	b.n	8008cec <_dtoa_r+0x1cc>
 8008d6c:	2300      	movs	r3, #0
 8008d6e:	930b      	str	r3, [sp, #44]	; 0x2c
 8008d70:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	dc59      	bgt.n	8008e2a <_dtoa_r+0x30a>
 8008d76:	f04f 0b01 	mov.w	fp, #1
 8008d7a:	465b      	mov	r3, fp
 8008d7c:	f8cd b008 	str.w	fp, [sp, #8]
 8008d80:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 8008d84:	2200      	movs	r2, #0
 8008d86:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8008d88:	6042      	str	r2, [r0, #4]
 8008d8a:	2204      	movs	r2, #4
 8008d8c:	f102 0614 	add.w	r6, r2, #20
 8008d90:	429e      	cmp	r6, r3
 8008d92:	6841      	ldr	r1, [r0, #4]
 8008d94:	d94f      	bls.n	8008e36 <_dtoa_r+0x316>
 8008d96:	4628      	mov	r0, r5
 8008d98:	f000 fcd8 	bl	800974c <_Balloc>
 8008d9c:	9008      	str	r0, [sp, #32]
 8008d9e:	2800      	cmp	r0, #0
 8008da0:	d14d      	bne.n	8008e3e <_dtoa_r+0x31e>
 8008da2:	4602      	mov	r2, r0
 8008da4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8008da8:	4b1d      	ldr	r3, [pc, #116]	; (8008e20 <_dtoa_r+0x300>)
 8008daa:	e6cd      	b.n	8008b48 <_dtoa_r+0x28>
 8008dac:	2301      	movs	r3, #1
 8008dae:	e7de      	b.n	8008d6e <_dtoa_r+0x24e>
 8008db0:	2300      	movs	r3, #0
 8008db2:	930b      	str	r3, [sp, #44]	; 0x2c
 8008db4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008db6:	eb09 0b03 	add.w	fp, r9, r3
 8008dba:	f10b 0301 	add.w	r3, fp, #1
 8008dbe:	2b01      	cmp	r3, #1
 8008dc0:	9302      	str	r3, [sp, #8]
 8008dc2:	bfb8      	it	lt
 8008dc4:	2301      	movlt	r3, #1
 8008dc6:	e7dd      	b.n	8008d84 <_dtoa_r+0x264>
 8008dc8:	2301      	movs	r3, #1
 8008dca:	e7f2      	b.n	8008db2 <_dtoa_r+0x292>
 8008dcc:	2401      	movs	r4, #1
 8008dce:	2300      	movs	r3, #0
 8008dd0:	940b      	str	r4, [sp, #44]	; 0x2c
 8008dd2:	9322      	str	r3, [sp, #136]	; 0x88
 8008dd4:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 8008dd8:	2200      	movs	r2, #0
 8008dda:	2312      	movs	r3, #18
 8008ddc:	f8cd b008 	str.w	fp, [sp, #8]
 8008de0:	9223      	str	r2, [sp, #140]	; 0x8c
 8008de2:	e7cf      	b.n	8008d84 <_dtoa_r+0x264>
 8008de4:	f3af 8000 	nop.w
 8008de8:	636f4361 	.word	0x636f4361
 8008dec:	3fd287a7 	.word	0x3fd287a7
 8008df0:	8b60c8b3 	.word	0x8b60c8b3
 8008df4:	3fc68a28 	.word	0x3fc68a28
 8008df8:	509f79fb 	.word	0x509f79fb
 8008dfc:	3fd34413 	.word	0x3fd34413
 8008e00:	0800c4d9 	.word	0x0800c4d9
 8008e04:	0800c4f0 	.word	0x0800c4f0
 8008e08:	7ff00000 	.word	0x7ff00000
 8008e0c:	0800c4d5 	.word	0x0800c4d5
 8008e10:	0800c4cc 	.word	0x0800c4cc
 8008e14:	0800c4a9 	.word	0x0800c4a9
 8008e18:	3ff80000 	.word	0x3ff80000
 8008e1c:	0800c5e8 	.word	0x0800c5e8
 8008e20:	0800c54f 	.word	0x0800c54f
 8008e24:	2301      	movs	r3, #1
 8008e26:	930b      	str	r3, [sp, #44]	; 0x2c
 8008e28:	e7d4      	b.n	8008dd4 <_dtoa_r+0x2b4>
 8008e2a:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 8008e2e:	465b      	mov	r3, fp
 8008e30:	f8cd b008 	str.w	fp, [sp, #8]
 8008e34:	e7a6      	b.n	8008d84 <_dtoa_r+0x264>
 8008e36:	3101      	adds	r1, #1
 8008e38:	6041      	str	r1, [r0, #4]
 8008e3a:	0052      	lsls	r2, r2, #1
 8008e3c:	e7a6      	b.n	8008d8c <_dtoa_r+0x26c>
 8008e3e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008e40:	9a08      	ldr	r2, [sp, #32]
 8008e42:	601a      	str	r2, [r3, #0]
 8008e44:	9b02      	ldr	r3, [sp, #8]
 8008e46:	2b0e      	cmp	r3, #14
 8008e48:	f200 80a8 	bhi.w	8008f9c <_dtoa_r+0x47c>
 8008e4c:	2c00      	cmp	r4, #0
 8008e4e:	f000 80a5 	beq.w	8008f9c <_dtoa_r+0x47c>
 8008e52:	f1b9 0f00 	cmp.w	r9, #0
 8008e56:	dd34      	ble.n	8008ec2 <_dtoa_r+0x3a2>
 8008e58:	4a9a      	ldr	r2, [pc, #616]	; (80090c4 <_dtoa_r+0x5a4>)
 8008e5a:	f009 030f 	and.w	r3, r9, #15
 8008e5e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008e62:	f419 7f80 	tst.w	r9, #256	; 0x100
 8008e66:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008e6a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8008e6e:	ea4f 1429 	mov.w	r4, r9, asr #4
 8008e72:	d016      	beq.n	8008ea2 <_dtoa_r+0x382>
 8008e74:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008e78:	4b93      	ldr	r3, [pc, #588]	; (80090c8 <_dtoa_r+0x5a8>)
 8008e7a:	2703      	movs	r7, #3
 8008e7c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008e80:	f7f7 fc54 	bl	800072c <__aeabi_ddiv>
 8008e84:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008e88:	f004 040f 	and.w	r4, r4, #15
 8008e8c:	4e8e      	ldr	r6, [pc, #568]	; (80090c8 <_dtoa_r+0x5a8>)
 8008e8e:	b954      	cbnz	r4, 8008ea6 <_dtoa_r+0x386>
 8008e90:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008e94:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008e98:	f7f7 fc48 	bl	800072c <__aeabi_ddiv>
 8008e9c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008ea0:	e029      	b.n	8008ef6 <_dtoa_r+0x3d6>
 8008ea2:	2702      	movs	r7, #2
 8008ea4:	e7f2      	b.n	8008e8c <_dtoa_r+0x36c>
 8008ea6:	07e1      	lsls	r1, r4, #31
 8008ea8:	d508      	bpl.n	8008ebc <_dtoa_r+0x39c>
 8008eaa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008eae:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008eb2:	f7f7 fb11 	bl	80004d8 <__aeabi_dmul>
 8008eb6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008eba:	3701      	adds	r7, #1
 8008ebc:	1064      	asrs	r4, r4, #1
 8008ebe:	3608      	adds	r6, #8
 8008ec0:	e7e5      	b.n	8008e8e <_dtoa_r+0x36e>
 8008ec2:	f000 80a5 	beq.w	8009010 <_dtoa_r+0x4f0>
 8008ec6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008eca:	f1c9 0400 	rsb	r4, r9, #0
 8008ece:	4b7d      	ldr	r3, [pc, #500]	; (80090c4 <_dtoa_r+0x5a4>)
 8008ed0:	f004 020f 	and.w	r2, r4, #15
 8008ed4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008ed8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008edc:	f7f7 fafc 	bl	80004d8 <__aeabi_dmul>
 8008ee0:	2702      	movs	r7, #2
 8008ee2:	2300      	movs	r3, #0
 8008ee4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008ee8:	4e77      	ldr	r6, [pc, #476]	; (80090c8 <_dtoa_r+0x5a8>)
 8008eea:	1124      	asrs	r4, r4, #4
 8008eec:	2c00      	cmp	r4, #0
 8008eee:	f040 8084 	bne.w	8008ffa <_dtoa_r+0x4da>
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d1d2      	bne.n	8008e9c <_dtoa_r+0x37c>
 8008ef6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	f000 808b 	beq.w	8009014 <_dtoa_r+0x4f4>
 8008efe:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8008f02:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8008f06:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008f0a:	2200      	movs	r2, #0
 8008f0c:	4b6f      	ldr	r3, [pc, #444]	; (80090cc <_dtoa_r+0x5ac>)
 8008f0e:	f7f7 fd55 	bl	80009bc <__aeabi_dcmplt>
 8008f12:	2800      	cmp	r0, #0
 8008f14:	d07e      	beq.n	8009014 <_dtoa_r+0x4f4>
 8008f16:	9b02      	ldr	r3, [sp, #8]
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	d07b      	beq.n	8009014 <_dtoa_r+0x4f4>
 8008f1c:	f1bb 0f00 	cmp.w	fp, #0
 8008f20:	dd38      	ble.n	8008f94 <_dtoa_r+0x474>
 8008f22:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008f26:	2200      	movs	r2, #0
 8008f28:	4b69      	ldr	r3, [pc, #420]	; (80090d0 <_dtoa_r+0x5b0>)
 8008f2a:	f7f7 fad5 	bl	80004d8 <__aeabi_dmul>
 8008f2e:	465c      	mov	r4, fp
 8008f30:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008f34:	f109 38ff 	add.w	r8, r9, #4294967295	; 0xffffffff
 8008f38:	3701      	adds	r7, #1
 8008f3a:	4638      	mov	r0, r7
 8008f3c:	f7f7 fa62 	bl	8000404 <__aeabi_i2d>
 8008f40:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008f44:	f7f7 fac8 	bl	80004d8 <__aeabi_dmul>
 8008f48:	2200      	movs	r2, #0
 8008f4a:	4b62      	ldr	r3, [pc, #392]	; (80090d4 <_dtoa_r+0x5b4>)
 8008f4c:	f7f7 f90e 	bl	800016c <__adddf3>
 8008f50:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8008f54:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008f58:	9611      	str	r6, [sp, #68]	; 0x44
 8008f5a:	2c00      	cmp	r4, #0
 8008f5c:	d15d      	bne.n	800901a <_dtoa_r+0x4fa>
 8008f5e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008f62:	2200      	movs	r2, #0
 8008f64:	4b5c      	ldr	r3, [pc, #368]	; (80090d8 <_dtoa_r+0x5b8>)
 8008f66:	f7f7 f8ff 	bl	8000168 <__aeabi_dsub>
 8008f6a:	4602      	mov	r2, r0
 8008f6c:	460b      	mov	r3, r1
 8008f6e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008f72:	4633      	mov	r3, r6
 8008f74:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008f76:	f7f7 fd3f 	bl	80009f8 <__aeabi_dcmpgt>
 8008f7a:	2800      	cmp	r0, #0
 8008f7c:	f040 829e 	bne.w	80094bc <_dtoa_r+0x99c>
 8008f80:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008f84:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008f86:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8008f8a:	f7f7 fd17 	bl	80009bc <__aeabi_dcmplt>
 8008f8e:	2800      	cmp	r0, #0
 8008f90:	f040 8292 	bne.w	80094b8 <_dtoa_r+0x998>
 8008f94:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8008f98:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8008f9c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	f2c0 8153 	blt.w	800924a <_dtoa_r+0x72a>
 8008fa4:	f1b9 0f0e 	cmp.w	r9, #14
 8008fa8:	f300 814f 	bgt.w	800924a <_dtoa_r+0x72a>
 8008fac:	4b45      	ldr	r3, [pc, #276]	; (80090c4 <_dtoa_r+0x5a4>)
 8008fae:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8008fb2:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008fb6:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8008fba:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	f280 80db 	bge.w	8009178 <_dtoa_r+0x658>
 8008fc2:	9b02      	ldr	r3, [sp, #8]
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	f300 80d7 	bgt.w	8009178 <_dtoa_r+0x658>
 8008fca:	f040 8274 	bne.w	80094b6 <_dtoa_r+0x996>
 8008fce:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008fd2:	2200      	movs	r2, #0
 8008fd4:	4b40      	ldr	r3, [pc, #256]	; (80090d8 <_dtoa_r+0x5b8>)
 8008fd6:	f7f7 fa7f 	bl	80004d8 <__aeabi_dmul>
 8008fda:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008fde:	f7f7 fd01 	bl	80009e4 <__aeabi_dcmpge>
 8008fe2:	9c02      	ldr	r4, [sp, #8]
 8008fe4:	4626      	mov	r6, r4
 8008fe6:	2800      	cmp	r0, #0
 8008fe8:	f040 824a 	bne.w	8009480 <_dtoa_r+0x960>
 8008fec:	2331      	movs	r3, #49	; 0x31
 8008fee:	9f08      	ldr	r7, [sp, #32]
 8008ff0:	f109 0901 	add.w	r9, r9, #1
 8008ff4:	f807 3b01 	strb.w	r3, [r7], #1
 8008ff8:	e246      	b.n	8009488 <_dtoa_r+0x968>
 8008ffa:	07e2      	lsls	r2, r4, #31
 8008ffc:	d505      	bpl.n	800900a <_dtoa_r+0x4ea>
 8008ffe:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009002:	f7f7 fa69 	bl	80004d8 <__aeabi_dmul>
 8009006:	2301      	movs	r3, #1
 8009008:	3701      	adds	r7, #1
 800900a:	1064      	asrs	r4, r4, #1
 800900c:	3608      	adds	r6, #8
 800900e:	e76d      	b.n	8008eec <_dtoa_r+0x3cc>
 8009010:	2702      	movs	r7, #2
 8009012:	e770      	b.n	8008ef6 <_dtoa_r+0x3d6>
 8009014:	46c8      	mov	r8, r9
 8009016:	9c02      	ldr	r4, [sp, #8]
 8009018:	e78f      	b.n	8008f3a <_dtoa_r+0x41a>
 800901a:	9908      	ldr	r1, [sp, #32]
 800901c:	4b29      	ldr	r3, [pc, #164]	; (80090c4 <_dtoa_r+0x5a4>)
 800901e:	4421      	add	r1, r4
 8009020:	9112      	str	r1, [sp, #72]	; 0x48
 8009022:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009024:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009028:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800902c:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009030:	2900      	cmp	r1, #0
 8009032:	d055      	beq.n	80090e0 <_dtoa_r+0x5c0>
 8009034:	2000      	movs	r0, #0
 8009036:	4929      	ldr	r1, [pc, #164]	; (80090dc <_dtoa_r+0x5bc>)
 8009038:	f7f7 fb78 	bl	800072c <__aeabi_ddiv>
 800903c:	463b      	mov	r3, r7
 800903e:	4632      	mov	r2, r6
 8009040:	f7f7 f892 	bl	8000168 <__aeabi_dsub>
 8009044:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8009048:	9f08      	ldr	r7, [sp, #32]
 800904a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800904e:	f7f7 fcf3 	bl	8000a38 <__aeabi_d2iz>
 8009052:	4604      	mov	r4, r0
 8009054:	f7f7 f9d6 	bl	8000404 <__aeabi_i2d>
 8009058:	4602      	mov	r2, r0
 800905a:	460b      	mov	r3, r1
 800905c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009060:	f7f7 f882 	bl	8000168 <__aeabi_dsub>
 8009064:	4602      	mov	r2, r0
 8009066:	460b      	mov	r3, r1
 8009068:	3430      	adds	r4, #48	; 0x30
 800906a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800906e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009072:	f807 4b01 	strb.w	r4, [r7], #1
 8009076:	f7f7 fca1 	bl	80009bc <__aeabi_dcmplt>
 800907a:	2800      	cmp	r0, #0
 800907c:	d174      	bne.n	8009168 <_dtoa_r+0x648>
 800907e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009082:	2000      	movs	r0, #0
 8009084:	4911      	ldr	r1, [pc, #68]	; (80090cc <_dtoa_r+0x5ac>)
 8009086:	f7f7 f86f 	bl	8000168 <__aeabi_dsub>
 800908a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800908e:	f7f7 fc95 	bl	80009bc <__aeabi_dcmplt>
 8009092:	2800      	cmp	r0, #0
 8009094:	f040 80b6 	bne.w	8009204 <_dtoa_r+0x6e4>
 8009098:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800909a:	429f      	cmp	r7, r3
 800909c:	f43f af7a 	beq.w	8008f94 <_dtoa_r+0x474>
 80090a0:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80090a4:	2200      	movs	r2, #0
 80090a6:	4b0a      	ldr	r3, [pc, #40]	; (80090d0 <_dtoa_r+0x5b0>)
 80090a8:	f7f7 fa16 	bl	80004d8 <__aeabi_dmul>
 80090ac:	2200      	movs	r2, #0
 80090ae:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80090b2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80090b6:	4b06      	ldr	r3, [pc, #24]	; (80090d0 <_dtoa_r+0x5b0>)
 80090b8:	f7f7 fa0e 	bl	80004d8 <__aeabi_dmul>
 80090bc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80090c0:	e7c3      	b.n	800904a <_dtoa_r+0x52a>
 80090c2:	bf00      	nop
 80090c4:	0800c5e8 	.word	0x0800c5e8
 80090c8:	0800c5c0 	.word	0x0800c5c0
 80090cc:	3ff00000 	.word	0x3ff00000
 80090d0:	40240000 	.word	0x40240000
 80090d4:	401c0000 	.word	0x401c0000
 80090d8:	40140000 	.word	0x40140000
 80090dc:	3fe00000 	.word	0x3fe00000
 80090e0:	4630      	mov	r0, r6
 80090e2:	4639      	mov	r1, r7
 80090e4:	f7f7 f9f8 	bl	80004d8 <__aeabi_dmul>
 80090e8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80090ea:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80090ee:	9c08      	ldr	r4, [sp, #32]
 80090f0:	9314      	str	r3, [sp, #80]	; 0x50
 80090f2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80090f6:	f7f7 fc9f 	bl	8000a38 <__aeabi_d2iz>
 80090fa:	9015      	str	r0, [sp, #84]	; 0x54
 80090fc:	f7f7 f982 	bl	8000404 <__aeabi_i2d>
 8009100:	4602      	mov	r2, r0
 8009102:	460b      	mov	r3, r1
 8009104:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009108:	f7f7 f82e 	bl	8000168 <__aeabi_dsub>
 800910c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800910e:	4606      	mov	r6, r0
 8009110:	3330      	adds	r3, #48	; 0x30
 8009112:	f804 3b01 	strb.w	r3, [r4], #1
 8009116:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009118:	460f      	mov	r7, r1
 800911a:	429c      	cmp	r4, r3
 800911c:	f04f 0200 	mov.w	r2, #0
 8009120:	d124      	bne.n	800916c <_dtoa_r+0x64c>
 8009122:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009126:	4bb3      	ldr	r3, [pc, #716]	; (80093f4 <_dtoa_r+0x8d4>)
 8009128:	f7f7 f820 	bl	800016c <__adddf3>
 800912c:	4602      	mov	r2, r0
 800912e:	460b      	mov	r3, r1
 8009130:	4630      	mov	r0, r6
 8009132:	4639      	mov	r1, r7
 8009134:	f7f7 fc60 	bl	80009f8 <__aeabi_dcmpgt>
 8009138:	2800      	cmp	r0, #0
 800913a:	d162      	bne.n	8009202 <_dtoa_r+0x6e2>
 800913c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009140:	2000      	movs	r0, #0
 8009142:	49ac      	ldr	r1, [pc, #688]	; (80093f4 <_dtoa_r+0x8d4>)
 8009144:	f7f7 f810 	bl	8000168 <__aeabi_dsub>
 8009148:	4602      	mov	r2, r0
 800914a:	460b      	mov	r3, r1
 800914c:	4630      	mov	r0, r6
 800914e:	4639      	mov	r1, r7
 8009150:	f7f7 fc34 	bl	80009bc <__aeabi_dcmplt>
 8009154:	2800      	cmp	r0, #0
 8009156:	f43f af1d 	beq.w	8008f94 <_dtoa_r+0x474>
 800915a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800915c:	1e7b      	subs	r3, r7, #1
 800915e:	9314      	str	r3, [sp, #80]	; 0x50
 8009160:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8009164:	2b30      	cmp	r3, #48	; 0x30
 8009166:	d0f8      	beq.n	800915a <_dtoa_r+0x63a>
 8009168:	46c1      	mov	r9, r8
 800916a:	e03a      	b.n	80091e2 <_dtoa_r+0x6c2>
 800916c:	4ba2      	ldr	r3, [pc, #648]	; (80093f8 <_dtoa_r+0x8d8>)
 800916e:	f7f7 f9b3 	bl	80004d8 <__aeabi_dmul>
 8009172:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009176:	e7bc      	b.n	80090f2 <_dtoa_r+0x5d2>
 8009178:	9f08      	ldr	r7, [sp, #32]
 800917a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800917e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009182:	f7f7 fad3 	bl	800072c <__aeabi_ddiv>
 8009186:	f7f7 fc57 	bl	8000a38 <__aeabi_d2iz>
 800918a:	4604      	mov	r4, r0
 800918c:	f7f7 f93a 	bl	8000404 <__aeabi_i2d>
 8009190:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009194:	f7f7 f9a0 	bl	80004d8 <__aeabi_dmul>
 8009198:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800919c:	460b      	mov	r3, r1
 800919e:	4602      	mov	r2, r0
 80091a0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80091a4:	f7f6 ffe0 	bl	8000168 <__aeabi_dsub>
 80091a8:	f807 6b01 	strb.w	r6, [r7], #1
 80091ac:	9e08      	ldr	r6, [sp, #32]
 80091ae:	9b02      	ldr	r3, [sp, #8]
 80091b0:	1bbe      	subs	r6, r7, r6
 80091b2:	42b3      	cmp	r3, r6
 80091b4:	d13a      	bne.n	800922c <_dtoa_r+0x70c>
 80091b6:	4602      	mov	r2, r0
 80091b8:	460b      	mov	r3, r1
 80091ba:	f7f6 ffd7 	bl	800016c <__adddf3>
 80091be:	4602      	mov	r2, r0
 80091c0:	460b      	mov	r3, r1
 80091c2:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80091c6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80091ca:	f7f7 fc15 	bl	80009f8 <__aeabi_dcmpgt>
 80091ce:	bb58      	cbnz	r0, 8009228 <_dtoa_r+0x708>
 80091d0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80091d4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80091d8:	f7f7 fbe6 	bl	80009a8 <__aeabi_dcmpeq>
 80091dc:	b108      	cbz	r0, 80091e2 <_dtoa_r+0x6c2>
 80091de:	07e1      	lsls	r1, r4, #31
 80091e0:	d422      	bmi.n	8009228 <_dtoa_r+0x708>
 80091e2:	4628      	mov	r0, r5
 80091e4:	4651      	mov	r1, sl
 80091e6:	f000 faf1 	bl	80097cc <_Bfree>
 80091ea:	2300      	movs	r3, #0
 80091ec:	703b      	strb	r3, [r7, #0]
 80091ee:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80091f0:	f109 0001 	add.w	r0, r9, #1
 80091f4:	6018      	str	r0, [r3, #0]
 80091f6:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	f43f acdf 	beq.w	8008bbc <_dtoa_r+0x9c>
 80091fe:	601f      	str	r7, [r3, #0]
 8009200:	e4dc      	b.n	8008bbc <_dtoa_r+0x9c>
 8009202:	4627      	mov	r7, r4
 8009204:	463b      	mov	r3, r7
 8009206:	461f      	mov	r7, r3
 8009208:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800920c:	2a39      	cmp	r2, #57	; 0x39
 800920e:	d107      	bne.n	8009220 <_dtoa_r+0x700>
 8009210:	9a08      	ldr	r2, [sp, #32]
 8009212:	429a      	cmp	r2, r3
 8009214:	d1f7      	bne.n	8009206 <_dtoa_r+0x6e6>
 8009216:	2230      	movs	r2, #48	; 0x30
 8009218:	9908      	ldr	r1, [sp, #32]
 800921a:	f108 0801 	add.w	r8, r8, #1
 800921e:	700a      	strb	r2, [r1, #0]
 8009220:	781a      	ldrb	r2, [r3, #0]
 8009222:	3201      	adds	r2, #1
 8009224:	701a      	strb	r2, [r3, #0]
 8009226:	e79f      	b.n	8009168 <_dtoa_r+0x648>
 8009228:	46c8      	mov	r8, r9
 800922a:	e7eb      	b.n	8009204 <_dtoa_r+0x6e4>
 800922c:	2200      	movs	r2, #0
 800922e:	4b72      	ldr	r3, [pc, #456]	; (80093f8 <_dtoa_r+0x8d8>)
 8009230:	f7f7 f952 	bl	80004d8 <__aeabi_dmul>
 8009234:	4602      	mov	r2, r0
 8009236:	460b      	mov	r3, r1
 8009238:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800923c:	2200      	movs	r2, #0
 800923e:	2300      	movs	r3, #0
 8009240:	f7f7 fbb2 	bl	80009a8 <__aeabi_dcmpeq>
 8009244:	2800      	cmp	r0, #0
 8009246:	d098      	beq.n	800917a <_dtoa_r+0x65a>
 8009248:	e7cb      	b.n	80091e2 <_dtoa_r+0x6c2>
 800924a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800924c:	2a00      	cmp	r2, #0
 800924e:	f000 80cd 	beq.w	80093ec <_dtoa_r+0x8cc>
 8009252:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8009254:	2a01      	cmp	r2, #1
 8009256:	f300 80af 	bgt.w	80093b8 <_dtoa_r+0x898>
 800925a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800925c:	2a00      	cmp	r2, #0
 800925e:	f000 80a7 	beq.w	80093b0 <_dtoa_r+0x890>
 8009262:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009266:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8009268:	9f06      	ldr	r7, [sp, #24]
 800926a:	9a06      	ldr	r2, [sp, #24]
 800926c:	2101      	movs	r1, #1
 800926e:	441a      	add	r2, r3
 8009270:	9206      	str	r2, [sp, #24]
 8009272:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009274:	4628      	mov	r0, r5
 8009276:	441a      	add	r2, r3
 8009278:	9209      	str	r2, [sp, #36]	; 0x24
 800927a:	f000 fb61 	bl	8009940 <__i2b>
 800927e:	4606      	mov	r6, r0
 8009280:	2f00      	cmp	r7, #0
 8009282:	dd0c      	ble.n	800929e <_dtoa_r+0x77e>
 8009284:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009286:	2b00      	cmp	r3, #0
 8009288:	dd09      	ble.n	800929e <_dtoa_r+0x77e>
 800928a:	42bb      	cmp	r3, r7
 800928c:	bfa8      	it	ge
 800928e:	463b      	movge	r3, r7
 8009290:	9a06      	ldr	r2, [sp, #24]
 8009292:	1aff      	subs	r7, r7, r3
 8009294:	1ad2      	subs	r2, r2, r3
 8009296:	9206      	str	r2, [sp, #24]
 8009298:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800929a:	1ad3      	subs	r3, r2, r3
 800929c:	9309      	str	r3, [sp, #36]	; 0x24
 800929e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80092a0:	b1f3      	cbz	r3, 80092e0 <_dtoa_r+0x7c0>
 80092a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	f000 80a9 	beq.w	80093fc <_dtoa_r+0x8dc>
 80092aa:	2c00      	cmp	r4, #0
 80092ac:	dd10      	ble.n	80092d0 <_dtoa_r+0x7b0>
 80092ae:	4631      	mov	r1, r6
 80092b0:	4622      	mov	r2, r4
 80092b2:	4628      	mov	r0, r5
 80092b4:	f000 fbfe 	bl	8009ab4 <__pow5mult>
 80092b8:	4652      	mov	r2, sl
 80092ba:	4601      	mov	r1, r0
 80092bc:	4606      	mov	r6, r0
 80092be:	4628      	mov	r0, r5
 80092c0:	f000 fb54 	bl	800996c <__multiply>
 80092c4:	4680      	mov	r8, r0
 80092c6:	4651      	mov	r1, sl
 80092c8:	4628      	mov	r0, r5
 80092ca:	f000 fa7f 	bl	80097cc <_Bfree>
 80092ce:	46c2      	mov	sl, r8
 80092d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80092d2:	1b1a      	subs	r2, r3, r4
 80092d4:	d004      	beq.n	80092e0 <_dtoa_r+0x7c0>
 80092d6:	4651      	mov	r1, sl
 80092d8:	4628      	mov	r0, r5
 80092da:	f000 fbeb 	bl	8009ab4 <__pow5mult>
 80092de:	4682      	mov	sl, r0
 80092e0:	2101      	movs	r1, #1
 80092e2:	4628      	mov	r0, r5
 80092e4:	f000 fb2c 	bl	8009940 <__i2b>
 80092e8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80092ea:	4604      	mov	r4, r0
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	f340 8087 	ble.w	8009400 <_dtoa_r+0x8e0>
 80092f2:	461a      	mov	r2, r3
 80092f4:	4601      	mov	r1, r0
 80092f6:	4628      	mov	r0, r5
 80092f8:	f000 fbdc 	bl	8009ab4 <__pow5mult>
 80092fc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80092fe:	4604      	mov	r4, r0
 8009300:	2b01      	cmp	r3, #1
 8009302:	f340 8080 	ble.w	8009406 <_dtoa_r+0x8e6>
 8009306:	f04f 0800 	mov.w	r8, #0
 800930a:	6923      	ldr	r3, [r4, #16]
 800930c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009310:	6918      	ldr	r0, [r3, #16]
 8009312:	f000 fac7 	bl	80098a4 <__hi0bits>
 8009316:	f1c0 0020 	rsb	r0, r0, #32
 800931a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800931c:	4418      	add	r0, r3
 800931e:	f010 001f 	ands.w	r0, r0, #31
 8009322:	f000 8092 	beq.w	800944a <_dtoa_r+0x92a>
 8009326:	f1c0 0320 	rsb	r3, r0, #32
 800932a:	2b04      	cmp	r3, #4
 800932c:	f340 808a 	ble.w	8009444 <_dtoa_r+0x924>
 8009330:	f1c0 001c 	rsb	r0, r0, #28
 8009334:	9b06      	ldr	r3, [sp, #24]
 8009336:	4407      	add	r7, r0
 8009338:	4403      	add	r3, r0
 800933a:	9306      	str	r3, [sp, #24]
 800933c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800933e:	4403      	add	r3, r0
 8009340:	9309      	str	r3, [sp, #36]	; 0x24
 8009342:	9b06      	ldr	r3, [sp, #24]
 8009344:	2b00      	cmp	r3, #0
 8009346:	dd05      	ble.n	8009354 <_dtoa_r+0x834>
 8009348:	4651      	mov	r1, sl
 800934a:	461a      	mov	r2, r3
 800934c:	4628      	mov	r0, r5
 800934e:	f000 fc0b 	bl	8009b68 <__lshift>
 8009352:	4682      	mov	sl, r0
 8009354:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009356:	2b00      	cmp	r3, #0
 8009358:	dd05      	ble.n	8009366 <_dtoa_r+0x846>
 800935a:	4621      	mov	r1, r4
 800935c:	461a      	mov	r2, r3
 800935e:	4628      	mov	r0, r5
 8009360:	f000 fc02 	bl	8009b68 <__lshift>
 8009364:	4604      	mov	r4, r0
 8009366:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009368:	2b00      	cmp	r3, #0
 800936a:	d070      	beq.n	800944e <_dtoa_r+0x92e>
 800936c:	4621      	mov	r1, r4
 800936e:	4650      	mov	r0, sl
 8009370:	f000 fc66 	bl	8009c40 <__mcmp>
 8009374:	2800      	cmp	r0, #0
 8009376:	da6a      	bge.n	800944e <_dtoa_r+0x92e>
 8009378:	2300      	movs	r3, #0
 800937a:	4651      	mov	r1, sl
 800937c:	220a      	movs	r2, #10
 800937e:	4628      	mov	r0, r5
 8009380:	f000 fa46 	bl	8009810 <__multadd>
 8009384:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009386:	4682      	mov	sl, r0
 8009388:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 800938c:	2b00      	cmp	r3, #0
 800938e:	f000 8193 	beq.w	80096b8 <_dtoa_r+0xb98>
 8009392:	4631      	mov	r1, r6
 8009394:	2300      	movs	r3, #0
 8009396:	220a      	movs	r2, #10
 8009398:	4628      	mov	r0, r5
 800939a:	f000 fa39 	bl	8009810 <__multadd>
 800939e:	f1bb 0f00 	cmp.w	fp, #0
 80093a2:	4606      	mov	r6, r0
 80093a4:	f300 8093 	bgt.w	80094ce <_dtoa_r+0x9ae>
 80093a8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80093aa:	2b02      	cmp	r3, #2
 80093ac:	dc57      	bgt.n	800945e <_dtoa_r+0x93e>
 80093ae:	e08e      	b.n	80094ce <_dtoa_r+0x9ae>
 80093b0:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80093b2:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80093b6:	e756      	b.n	8009266 <_dtoa_r+0x746>
 80093b8:	9b02      	ldr	r3, [sp, #8]
 80093ba:	1e5c      	subs	r4, r3, #1
 80093bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80093be:	42a3      	cmp	r3, r4
 80093c0:	bfb7      	itett	lt
 80093c2:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80093c4:	1b1c      	subge	r4, r3, r4
 80093c6:	1ae2      	sublt	r2, r4, r3
 80093c8:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 80093ca:	bfbe      	ittt	lt
 80093cc:	940a      	strlt	r4, [sp, #40]	; 0x28
 80093ce:	189b      	addlt	r3, r3, r2
 80093d0:	930e      	strlt	r3, [sp, #56]	; 0x38
 80093d2:	9b02      	ldr	r3, [sp, #8]
 80093d4:	bfb8      	it	lt
 80093d6:	2400      	movlt	r4, #0
 80093d8:	2b00      	cmp	r3, #0
 80093da:	bfbb      	ittet	lt
 80093dc:	9b06      	ldrlt	r3, [sp, #24]
 80093de:	9a02      	ldrlt	r2, [sp, #8]
 80093e0:	9f06      	ldrge	r7, [sp, #24]
 80093e2:	1a9f      	sublt	r7, r3, r2
 80093e4:	bfac      	ite	ge
 80093e6:	9b02      	ldrge	r3, [sp, #8]
 80093e8:	2300      	movlt	r3, #0
 80093ea:	e73e      	b.n	800926a <_dtoa_r+0x74a>
 80093ec:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80093ee:	9f06      	ldr	r7, [sp, #24]
 80093f0:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80093f2:	e745      	b.n	8009280 <_dtoa_r+0x760>
 80093f4:	3fe00000 	.word	0x3fe00000
 80093f8:	40240000 	.word	0x40240000
 80093fc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80093fe:	e76a      	b.n	80092d6 <_dtoa_r+0x7b6>
 8009400:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009402:	2b01      	cmp	r3, #1
 8009404:	dc19      	bgt.n	800943a <_dtoa_r+0x91a>
 8009406:	9b04      	ldr	r3, [sp, #16]
 8009408:	b9bb      	cbnz	r3, 800943a <_dtoa_r+0x91a>
 800940a:	9b05      	ldr	r3, [sp, #20]
 800940c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009410:	b99b      	cbnz	r3, 800943a <_dtoa_r+0x91a>
 8009412:	9b05      	ldr	r3, [sp, #20]
 8009414:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009418:	0d1b      	lsrs	r3, r3, #20
 800941a:	051b      	lsls	r3, r3, #20
 800941c:	b183      	cbz	r3, 8009440 <_dtoa_r+0x920>
 800941e:	f04f 0801 	mov.w	r8, #1
 8009422:	9b06      	ldr	r3, [sp, #24]
 8009424:	3301      	adds	r3, #1
 8009426:	9306      	str	r3, [sp, #24]
 8009428:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800942a:	3301      	adds	r3, #1
 800942c:	9309      	str	r3, [sp, #36]	; 0x24
 800942e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009430:	2b00      	cmp	r3, #0
 8009432:	f47f af6a 	bne.w	800930a <_dtoa_r+0x7ea>
 8009436:	2001      	movs	r0, #1
 8009438:	e76f      	b.n	800931a <_dtoa_r+0x7fa>
 800943a:	f04f 0800 	mov.w	r8, #0
 800943e:	e7f6      	b.n	800942e <_dtoa_r+0x90e>
 8009440:	4698      	mov	r8, r3
 8009442:	e7f4      	b.n	800942e <_dtoa_r+0x90e>
 8009444:	f43f af7d 	beq.w	8009342 <_dtoa_r+0x822>
 8009448:	4618      	mov	r0, r3
 800944a:	301c      	adds	r0, #28
 800944c:	e772      	b.n	8009334 <_dtoa_r+0x814>
 800944e:	9b02      	ldr	r3, [sp, #8]
 8009450:	2b00      	cmp	r3, #0
 8009452:	dc36      	bgt.n	80094c2 <_dtoa_r+0x9a2>
 8009454:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009456:	2b02      	cmp	r3, #2
 8009458:	dd33      	ble.n	80094c2 <_dtoa_r+0x9a2>
 800945a:	f8dd b008 	ldr.w	fp, [sp, #8]
 800945e:	f1bb 0f00 	cmp.w	fp, #0
 8009462:	d10d      	bne.n	8009480 <_dtoa_r+0x960>
 8009464:	4621      	mov	r1, r4
 8009466:	465b      	mov	r3, fp
 8009468:	2205      	movs	r2, #5
 800946a:	4628      	mov	r0, r5
 800946c:	f000 f9d0 	bl	8009810 <__multadd>
 8009470:	4601      	mov	r1, r0
 8009472:	4604      	mov	r4, r0
 8009474:	4650      	mov	r0, sl
 8009476:	f000 fbe3 	bl	8009c40 <__mcmp>
 800947a:	2800      	cmp	r0, #0
 800947c:	f73f adb6 	bgt.w	8008fec <_dtoa_r+0x4cc>
 8009480:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009482:	9f08      	ldr	r7, [sp, #32]
 8009484:	ea6f 0903 	mvn.w	r9, r3
 8009488:	f04f 0800 	mov.w	r8, #0
 800948c:	4621      	mov	r1, r4
 800948e:	4628      	mov	r0, r5
 8009490:	f000 f99c 	bl	80097cc <_Bfree>
 8009494:	2e00      	cmp	r6, #0
 8009496:	f43f aea4 	beq.w	80091e2 <_dtoa_r+0x6c2>
 800949a:	f1b8 0f00 	cmp.w	r8, #0
 800949e:	d005      	beq.n	80094ac <_dtoa_r+0x98c>
 80094a0:	45b0      	cmp	r8, r6
 80094a2:	d003      	beq.n	80094ac <_dtoa_r+0x98c>
 80094a4:	4641      	mov	r1, r8
 80094a6:	4628      	mov	r0, r5
 80094a8:	f000 f990 	bl	80097cc <_Bfree>
 80094ac:	4631      	mov	r1, r6
 80094ae:	4628      	mov	r0, r5
 80094b0:	f000 f98c 	bl	80097cc <_Bfree>
 80094b4:	e695      	b.n	80091e2 <_dtoa_r+0x6c2>
 80094b6:	2400      	movs	r4, #0
 80094b8:	4626      	mov	r6, r4
 80094ba:	e7e1      	b.n	8009480 <_dtoa_r+0x960>
 80094bc:	46c1      	mov	r9, r8
 80094be:	4626      	mov	r6, r4
 80094c0:	e594      	b.n	8008fec <_dtoa_r+0x4cc>
 80094c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80094c4:	f8dd b008 	ldr.w	fp, [sp, #8]
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	f000 80fc 	beq.w	80096c6 <_dtoa_r+0xba6>
 80094ce:	2f00      	cmp	r7, #0
 80094d0:	dd05      	ble.n	80094de <_dtoa_r+0x9be>
 80094d2:	4631      	mov	r1, r6
 80094d4:	463a      	mov	r2, r7
 80094d6:	4628      	mov	r0, r5
 80094d8:	f000 fb46 	bl	8009b68 <__lshift>
 80094dc:	4606      	mov	r6, r0
 80094de:	f1b8 0f00 	cmp.w	r8, #0
 80094e2:	d05c      	beq.n	800959e <_dtoa_r+0xa7e>
 80094e4:	4628      	mov	r0, r5
 80094e6:	6871      	ldr	r1, [r6, #4]
 80094e8:	f000 f930 	bl	800974c <_Balloc>
 80094ec:	4607      	mov	r7, r0
 80094ee:	b928      	cbnz	r0, 80094fc <_dtoa_r+0x9dc>
 80094f0:	4602      	mov	r2, r0
 80094f2:	f240 21ea 	movw	r1, #746	; 0x2ea
 80094f6:	4b7e      	ldr	r3, [pc, #504]	; (80096f0 <_dtoa_r+0xbd0>)
 80094f8:	f7ff bb26 	b.w	8008b48 <_dtoa_r+0x28>
 80094fc:	6932      	ldr	r2, [r6, #16]
 80094fe:	f106 010c 	add.w	r1, r6, #12
 8009502:	3202      	adds	r2, #2
 8009504:	0092      	lsls	r2, r2, #2
 8009506:	300c      	adds	r0, #12
 8009508:	f000 f912 	bl	8009730 <memcpy>
 800950c:	2201      	movs	r2, #1
 800950e:	4639      	mov	r1, r7
 8009510:	4628      	mov	r0, r5
 8009512:	f000 fb29 	bl	8009b68 <__lshift>
 8009516:	46b0      	mov	r8, r6
 8009518:	4606      	mov	r6, r0
 800951a:	9b08      	ldr	r3, [sp, #32]
 800951c:	3301      	adds	r3, #1
 800951e:	9302      	str	r3, [sp, #8]
 8009520:	9b08      	ldr	r3, [sp, #32]
 8009522:	445b      	add	r3, fp
 8009524:	930a      	str	r3, [sp, #40]	; 0x28
 8009526:	9b04      	ldr	r3, [sp, #16]
 8009528:	f003 0301 	and.w	r3, r3, #1
 800952c:	9309      	str	r3, [sp, #36]	; 0x24
 800952e:	9b02      	ldr	r3, [sp, #8]
 8009530:	4621      	mov	r1, r4
 8009532:	4650      	mov	r0, sl
 8009534:	f103 3bff 	add.w	fp, r3, #4294967295	; 0xffffffff
 8009538:	f7ff fa62 	bl	8008a00 <quorem>
 800953c:	4603      	mov	r3, r0
 800953e:	4641      	mov	r1, r8
 8009540:	3330      	adds	r3, #48	; 0x30
 8009542:	9004      	str	r0, [sp, #16]
 8009544:	4650      	mov	r0, sl
 8009546:	930b      	str	r3, [sp, #44]	; 0x2c
 8009548:	f000 fb7a 	bl	8009c40 <__mcmp>
 800954c:	4632      	mov	r2, r6
 800954e:	9006      	str	r0, [sp, #24]
 8009550:	4621      	mov	r1, r4
 8009552:	4628      	mov	r0, r5
 8009554:	f000 fb90 	bl	8009c78 <__mdiff>
 8009558:	68c2      	ldr	r2, [r0, #12]
 800955a:	4607      	mov	r7, r0
 800955c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800955e:	bb02      	cbnz	r2, 80095a2 <_dtoa_r+0xa82>
 8009560:	4601      	mov	r1, r0
 8009562:	4650      	mov	r0, sl
 8009564:	f000 fb6c 	bl	8009c40 <__mcmp>
 8009568:	4602      	mov	r2, r0
 800956a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800956c:	4639      	mov	r1, r7
 800956e:	4628      	mov	r0, r5
 8009570:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8009574:	f000 f92a 	bl	80097cc <_Bfree>
 8009578:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800957a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800957c:	9f02      	ldr	r7, [sp, #8]
 800957e:	ea43 0102 	orr.w	r1, r3, r2
 8009582:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009584:	430b      	orrs	r3, r1
 8009586:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009588:	d10d      	bne.n	80095a6 <_dtoa_r+0xa86>
 800958a:	2b39      	cmp	r3, #57	; 0x39
 800958c:	d027      	beq.n	80095de <_dtoa_r+0xabe>
 800958e:	9a06      	ldr	r2, [sp, #24]
 8009590:	2a00      	cmp	r2, #0
 8009592:	dd01      	ble.n	8009598 <_dtoa_r+0xa78>
 8009594:	9b04      	ldr	r3, [sp, #16]
 8009596:	3331      	adds	r3, #49	; 0x31
 8009598:	f88b 3000 	strb.w	r3, [fp]
 800959c:	e776      	b.n	800948c <_dtoa_r+0x96c>
 800959e:	4630      	mov	r0, r6
 80095a0:	e7b9      	b.n	8009516 <_dtoa_r+0x9f6>
 80095a2:	2201      	movs	r2, #1
 80095a4:	e7e2      	b.n	800956c <_dtoa_r+0xa4c>
 80095a6:	9906      	ldr	r1, [sp, #24]
 80095a8:	2900      	cmp	r1, #0
 80095aa:	db04      	blt.n	80095b6 <_dtoa_r+0xa96>
 80095ac:	9822      	ldr	r0, [sp, #136]	; 0x88
 80095ae:	4301      	orrs	r1, r0
 80095b0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80095b2:	4301      	orrs	r1, r0
 80095b4:	d120      	bne.n	80095f8 <_dtoa_r+0xad8>
 80095b6:	2a00      	cmp	r2, #0
 80095b8:	ddee      	ble.n	8009598 <_dtoa_r+0xa78>
 80095ba:	4651      	mov	r1, sl
 80095bc:	2201      	movs	r2, #1
 80095be:	4628      	mov	r0, r5
 80095c0:	9302      	str	r3, [sp, #8]
 80095c2:	f000 fad1 	bl	8009b68 <__lshift>
 80095c6:	4621      	mov	r1, r4
 80095c8:	4682      	mov	sl, r0
 80095ca:	f000 fb39 	bl	8009c40 <__mcmp>
 80095ce:	2800      	cmp	r0, #0
 80095d0:	9b02      	ldr	r3, [sp, #8]
 80095d2:	dc02      	bgt.n	80095da <_dtoa_r+0xaba>
 80095d4:	d1e0      	bne.n	8009598 <_dtoa_r+0xa78>
 80095d6:	07da      	lsls	r2, r3, #31
 80095d8:	d5de      	bpl.n	8009598 <_dtoa_r+0xa78>
 80095da:	2b39      	cmp	r3, #57	; 0x39
 80095dc:	d1da      	bne.n	8009594 <_dtoa_r+0xa74>
 80095de:	2339      	movs	r3, #57	; 0x39
 80095e0:	f88b 3000 	strb.w	r3, [fp]
 80095e4:	463b      	mov	r3, r7
 80095e6:	461f      	mov	r7, r3
 80095e8:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 80095ec:	3b01      	subs	r3, #1
 80095ee:	2a39      	cmp	r2, #57	; 0x39
 80095f0:	d050      	beq.n	8009694 <_dtoa_r+0xb74>
 80095f2:	3201      	adds	r2, #1
 80095f4:	701a      	strb	r2, [r3, #0]
 80095f6:	e749      	b.n	800948c <_dtoa_r+0x96c>
 80095f8:	2a00      	cmp	r2, #0
 80095fa:	dd03      	ble.n	8009604 <_dtoa_r+0xae4>
 80095fc:	2b39      	cmp	r3, #57	; 0x39
 80095fe:	d0ee      	beq.n	80095de <_dtoa_r+0xabe>
 8009600:	3301      	adds	r3, #1
 8009602:	e7c9      	b.n	8009598 <_dtoa_r+0xa78>
 8009604:	9a02      	ldr	r2, [sp, #8]
 8009606:	990a      	ldr	r1, [sp, #40]	; 0x28
 8009608:	f802 3c01 	strb.w	r3, [r2, #-1]
 800960c:	428a      	cmp	r2, r1
 800960e:	d02a      	beq.n	8009666 <_dtoa_r+0xb46>
 8009610:	4651      	mov	r1, sl
 8009612:	2300      	movs	r3, #0
 8009614:	220a      	movs	r2, #10
 8009616:	4628      	mov	r0, r5
 8009618:	f000 f8fa 	bl	8009810 <__multadd>
 800961c:	45b0      	cmp	r8, r6
 800961e:	4682      	mov	sl, r0
 8009620:	f04f 0300 	mov.w	r3, #0
 8009624:	f04f 020a 	mov.w	r2, #10
 8009628:	4641      	mov	r1, r8
 800962a:	4628      	mov	r0, r5
 800962c:	d107      	bne.n	800963e <_dtoa_r+0xb1e>
 800962e:	f000 f8ef 	bl	8009810 <__multadd>
 8009632:	4680      	mov	r8, r0
 8009634:	4606      	mov	r6, r0
 8009636:	9b02      	ldr	r3, [sp, #8]
 8009638:	3301      	adds	r3, #1
 800963a:	9302      	str	r3, [sp, #8]
 800963c:	e777      	b.n	800952e <_dtoa_r+0xa0e>
 800963e:	f000 f8e7 	bl	8009810 <__multadd>
 8009642:	4631      	mov	r1, r6
 8009644:	4680      	mov	r8, r0
 8009646:	2300      	movs	r3, #0
 8009648:	220a      	movs	r2, #10
 800964a:	4628      	mov	r0, r5
 800964c:	f000 f8e0 	bl	8009810 <__multadd>
 8009650:	4606      	mov	r6, r0
 8009652:	e7f0      	b.n	8009636 <_dtoa_r+0xb16>
 8009654:	f1bb 0f00 	cmp.w	fp, #0
 8009658:	bfcc      	ite	gt
 800965a:	465f      	movgt	r7, fp
 800965c:	2701      	movle	r7, #1
 800965e:	f04f 0800 	mov.w	r8, #0
 8009662:	9a08      	ldr	r2, [sp, #32]
 8009664:	4417      	add	r7, r2
 8009666:	4651      	mov	r1, sl
 8009668:	2201      	movs	r2, #1
 800966a:	4628      	mov	r0, r5
 800966c:	9302      	str	r3, [sp, #8]
 800966e:	f000 fa7b 	bl	8009b68 <__lshift>
 8009672:	4621      	mov	r1, r4
 8009674:	4682      	mov	sl, r0
 8009676:	f000 fae3 	bl	8009c40 <__mcmp>
 800967a:	2800      	cmp	r0, #0
 800967c:	dcb2      	bgt.n	80095e4 <_dtoa_r+0xac4>
 800967e:	d102      	bne.n	8009686 <_dtoa_r+0xb66>
 8009680:	9b02      	ldr	r3, [sp, #8]
 8009682:	07db      	lsls	r3, r3, #31
 8009684:	d4ae      	bmi.n	80095e4 <_dtoa_r+0xac4>
 8009686:	463b      	mov	r3, r7
 8009688:	461f      	mov	r7, r3
 800968a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800968e:	2a30      	cmp	r2, #48	; 0x30
 8009690:	d0fa      	beq.n	8009688 <_dtoa_r+0xb68>
 8009692:	e6fb      	b.n	800948c <_dtoa_r+0x96c>
 8009694:	9a08      	ldr	r2, [sp, #32]
 8009696:	429a      	cmp	r2, r3
 8009698:	d1a5      	bne.n	80095e6 <_dtoa_r+0xac6>
 800969a:	2331      	movs	r3, #49	; 0x31
 800969c:	f109 0901 	add.w	r9, r9, #1
 80096a0:	7013      	strb	r3, [r2, #0]
 80096a2:	e6f3      	b.n	800948c <_dtoa_r+0x96c>
 80096a4:	4b13      	ldr	r3, [pc, #76]	; (80096f4 <_dtoa_r+0xbd4>)
 80096a6:	f7ff baa7 	b.w	8008bf8 <_dtoa_r+0xd8>
 80096aa:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	f47f aa80 	bne.w	8008bb2 <_dtoa_r+0x92>
 80096b2:	4b11      	ldr	r3, [pc, #68]	; (80096f8 <_dtoa_r+0xbd8>)
 80096b4:	f7ff baa0 	b.w	8008bf8 <_dtoa_r+0xd8>
 80096b8:	f1bb 0f00 	cmp.w	fp, #0
 80096bc:	dc03      	bgt.n	80096c6 <_dtoa_r+0xba6>
 80096be:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80096c0:	2b02      	cmp	r3, #2
 80096c2:	f73f aecc 	bgt.w	800945e <_dtoa_r+0x93e>
 80096c6:	9f08      	ldr	r7, [sp, #32]
 80096c8:	4621      	mov	r1, r4
 80096ca:	4650      	mov	r0, sl
 80096cc:	f7ff f998 	bl	8008a00 <quorem>
 80096d0:	9a08      	ldr	r2, [sp, #32]
 80096d2:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80096d6:	f807 3b01 	strb.w	r3, [r7], #1
 80096da:	1aba      	subs	r2, r7, r2
 80096dc:	4593      	cmp	fp, r2
 80096de:	ddb9      	ble.n	8009654 <_dtoa_r+0xb34>
 80096e0:	4651      	mov	r1, sl
 80096e2:	2300      	movs	r3, #0
 80096e4:	220a      	movs	r2, #10
 80096e6:	4628      	mov	r0, r5
 80096e8:	f000 f892 	bl	8009810 <__multadd>
 80096ec:	4682      	mov	sl, r0
 80096ee:	e7eb      	b.n	80096c8 <_dtoa_r+0xba8>
 80096f0:	0800c54f 	.word	0x0800c54f
 80096f4:	0800c4a8 	.word	0x0800c4a8
 80096f8:	0800c4cc 	.word	0x0800c4cc

080096fc <_localeconv_r>:
 80096fc:	4800      	ldr	r0, [pc, #0]	; (8009700 <_localeconv_r+0x4>)
 80096fe:	4770      	bx	lr
 8009700:	20000170 	.word	0x20000170

08009704 <malloc>:
 8009704:	4b02      	ldr	r3, [pc, #8]	; (8009710 <malloc+0xc>)
 8009706:	4601      	mov	r1, r0
 8009708:	6818      	ldr	r0, [r3, #0]
 800970a:	f000 bbfb 	b.w	8009f04 <_malloc_r>
 800970e:	bf00      	nop
 8009710:	2000001c 	.word	0x2000001c

08009714 <memchr>:
 8009714:	4603      	mov	r3, r0
 8009716:	b510      	push	{r4, lr}
 8009718:	b2c9      	uxtb	r1, r1
 800971a:	4402      	add	r2, r0
 800971c:	4293      	cmp	r3, r2
 800971e:	4618      	mov	r0, r3
 8009720:	d101      	bne.n	8009726 <memchr+0x12>
 8009722:	2000      	movs	r0, #0
 8009724:	e003      	b.n	800972e <memchr+0x1a>
 8009726:	7804      	ldrb	r4, [r0, #0]
 8009728:	3301      	adds	r3, #1
 800972a:	428c      	cmp	r4, r1
 800972c:	d1f6      	bne.n	800971c <memchr+0x8>
 800972e:	bd10      	pop	{r4, pc}

08009730 <memcpy>:
 8009730:	440a      	add	r2, r1
 8009732:	4291      	cmp	r1, r2
 8009734:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8009738:	d100      	bne.n	800973c <memcpy+0xc>
 800973a:	4770      	bx	lr
 800973c:	b510      	push	{r4, lr}
 800973e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009742:	4291      	cmp	r1, r2
 8009744:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009748:	d1f9      	bne.n	800973e <memcpy+0xe>
 800974a:	bd10      	pop	{r4, pc}

0800974c <_Balloc>:
 800974c:	b570      	push	{r4, r5, r6, lr}
 800974e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009750:	4604      	mov	r4, r0
 8009752:	460d      	mov	r5, r1
 8009754:	b976      	cbnz	r6, 8009774 <_Balloc+0x28>
 8009756:	2010      	movs	r0, #16
 8009758:	f7ff ffd4 	bl	8009704 <malloc>
 800975c:	4602      	mov	r2, r0
 800975e:	6260      	str	r0, [r4, #36]	; 0x24
 8009760:	b920      	cbnz	r0, 800976c <_Balloc+0x20>
 8009762:	2166      	movs	r1, #102	; 0x66
 8009764:	4b17      	ldr	r3, [pc, #92]	; (80097c4 <_Balloc+0x78>)
 8009766:	4818      	ldr	r0, [pc, #96]	; (80097c8 <_Balloc+0x7c>)
 8009768:	f000 fd92 	bl	800a290 <__assert_func>
 800976c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009770:	6006      	str	r6, [r0, #0]
 8009772:	60c6      	str	r6, [r0, #12]
 8009774:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8009776:	68f3      	ldr	r3, [r6, #12]
 8009778:	b183      	cbz	r3, 800979c <_Balloc+0x50>
 800977a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800977c:	68db      	ldr	r3, [r3, #12]
 800977e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009782:	b9b8      	cbnz	r0, 80097b4 <_Balloc+0x68>
 8009784:	2101      	movs	r1, #1
 8009786:	fa01 f605 	lsl.w	r6, r1, r5
 800978a:	1d72      	adds	r2, r6, #5
 800978c:	4620      	mov	r0, r4
 800978e:	0092      	lsls	r2, r2, #2
 8009790:	f000 fb5e 	bl	8009e50 <_calloc_r>
 8009794:	b160      	cbz	r0, 80097b0 <_Balloc+0x64>
 8009796:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800979a:	e00e      	b.n	80097ba <_Balloc+0x6e>
 800979c:	2221      	movs	r2, #33	; 0x21
 800979e:	2104      	movs	r1, #4
 80097a0:	4620      	mov	r0, r4
 80097a2:	f000 fb55 	bl	8009e50 <_calloc_r>
 80097a6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80097a8:	60f0      	str	r0, [r6, #12]
 80097aa:	68db      	ldr	r3, [r3, #12]
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	d1e4      	bne.n	800977a <_Balloc+0x2e>
 80097b0:	2000      	movs	r0, #0
 80097b2:	bd70      	pop	{r4, r5, r6, pc}
 80097b4:	6802      	ldr	r2, [r0, #0]
 80097b6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80097ba:	2300      	movs	r3, #0
 80097bc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80097c0:	e7f7      	b.n	80097b2 <_Balloc+0x66>
 80097c2:	bf00      	nop
 80097c4:	0800c4d9 	.word	0x0800c4d9
 80097c8:	0800c560 	.word	0x0800c560

080097cc <_Bfree>:
 80097cc:	b570      	push	{r4, r5, r6, lr}
 80097ce:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80097d0:	4605      	mov	r5, r0
 80097d2:	460c      	mov	r4, r1
 80097d4:	b976      	cbnz	r6, 80097f4 <_Bfree+0x28>
 80097d6:	2010      	movs	r0, #16
 80097d8:	f7ff ff94 	bl	8009704 <malloc>
 80097dc:	4602      	mov	r2, r0
 80097de:	6268      	str	r0, [r5, #36]	; 0x24
 80097e0:	b920      	cbnz	r0, 80097ec <_Bfree+0x20>
 80097e2:	218a      	movs	r1, #138	; 0x8a
 80097e4:	4b08      	ldr	r3, [pc, #32]	; (8009808 <_Bfree+0x3c>)
 80097e6:	4809      	ldr	r0, [pc, #36]	; (800980c <_Bfree+0x40>)
 80097e8:	f000 fd52 	bl	800a290 <__assert_func>
 80097ec:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80097f0:	6006      	str	r6, [r0, #0]
 80097f2:	60c6      	str	r6, [r0, #12]
 80097f4:	b13c      	cbz	r4, 8009806 <_Bfree+0x3a>
 80097f6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80097f8:	6862      	ldr	r2, [r4, #4]
 80097fa:	68db      	ldr	r3, [r3, #12]
 80097fc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009800:	6021      	str	r1, [r4, #0]
 8009802:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009806:	bd70      	pop	{r4, r5, r6, pc}
 8009808:	0800c4d9 	.word	0x0800c4d9
 800980c:	0800c560 	.word	0x0800c560

08009810 <__multadd>:
 8009810:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009814:	4698      	mov	r8, r3
 8009816:	460c      	mov	r4, r1
 8009818:	2300      	movs	r3, #0
 800981a:	690e      	ldr	r6, [r1, #16]
 800981c:	4607      	mov	r7, r0
 800981e:	f101 0014 	add.w	r0, r1, #20
 8009822:	6805      	ldr	r5, [r0, #0]
 8009824:	3301      	adds	r3, #1
 8009826:	b2a9      	uxth	r1, r5
 8009828:	fb02 8101 	mla	r1, r2, r1, r8
 800982c:	0c2d      	lsrs	r5, r5, #16
 800982e:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8009832:	fb02 c505 	mla	r5, r2, r5, ip
 8009836:	b289      	uxth	r1, r1
 8009838:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800983c:	429e      	cmp	r6, r3
 800983e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8009842:	f840 1b04 	str.w	r1, [r0], #4
 8009846:	dcec      	bgt.n	8009822 <__multadd+0x12>
 8009848:	f1b8 0f00 	cmp.w	r8, #0
 800984c:	d022      	beq.n	8009894 <__multadd+0x84>
 800984e:	68a3      	ldr	r3, [r4, #8]
 8009850:	42b3      	cmp	r3, r6
 8009852:	dc19      	bgt.n	8009888 <__multadd+0x78>
 8009854:	6861      	ldr	r1, [r4, #4]
 8009856:	4638      	mov	r0, r7
 8009858:	3101      	adds	r1, #1
 800985a:	f7ff ff77 	bl	800974c <_Balloc>
 800985e:	4605      	mov	r5, r0
 8009860:	b928      	cbnz	r0, 800986e <__multadd+0x5e>
 8009862:	4602      	mov	r2, r0
 8009864:	21b5      	movs	r1, #181	; 0xb5
 8009866:	4b0d      	ldr	r3, [pc, #52]	; (800989c <__multadd+0x8c>)
 8009868:	480d      	ldr	r0, [pc, #52]	; (80098a0 <__multadd+0x90>)
 800986a:	f000 fd11 	bl	800a290 <__assert_func>
 800986e:	6922      	ldr	r2, [r4, #16]
 8009870:	f104 010c 	add.w	r1, r4, #12
 8009874:	3202      	adds	r2, #2
 8009876:	0092      	lsls	r2, r2, #2
 8009878:	300c      	adds	r0, #12
 800987a:	f7ff ff59 	bl	8009730 <memcpy>
 800987e:	4621      	mov	r1, r4
 8009880:	4638      	mov	r0, r7
 8009882:	f7ff ffa3 	bl	80097cc <_Bfree>
 8009886:	462c      	mov	r4, r5
 8009888:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800988c:	3601      	adds	r6, #1
 800988e:	f8c3 8014 	str.w	r8, [r3, #20]
 8009892:	6126      	str	r6, [r4, #16]
 8009894:	4620      	mov	r0, r4
 8009896:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800989a:	bf00      	nop
 800989c:	0800c54f 	.word	0x0800c54f
 80098a0:	0800c560 	.word	0x0800c560

080098a4 <__hi0bits>:
 80098a4:	0c02      	lsrs	r2, r0, #16
 80098a6:	0412      	lsls	r2, r2, #16
 80098a8:	4603      	mov	r3, r0
 80098aa:	b9ca      	cbnz	r2, 80098e0 <__hi0bits+0x3c>
 80098ac:	0403      	lsls	r3, r0, #16
 80098ae:	2010      	movs	r0, #16
 80098b0:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80098b4:	bf04      	itt	eq
 80098b6:	021b      	lsleq	r3, r3, #8
 80098b8:	3008      	addeq	r0, #8
 80098ba:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80098be:	bf04      	itt	eq
 80098c0:	011b      	lsleq	r3, r3, #4
 80098c2:	3004      	addeq	r0, #4
 80098c4:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80098c8:	bf04      	itt	eq
 80098ca:	009b      	lsleq	r3, r3, #2
 80098cc:	3002      	addeq	r0, #2
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	db05      	blt.n	80098de <__hi0bits+0x3a>
 80098d2:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 80098d6:	f100 0001 	add.w	r0, r0, #1
 80098da:	bf08      	it	eq
 80098dc:	2020      	moveq	r0, #32
 80098de:	4770      	bx	lr
 80098e0:	2000      	movs	r0, #0
 80098e2:	e7e5      	b.n	80098b0 <__hi0bits+0xc>

080098e4 <__lo0bits>:
 80098e4:	6803      	ldr	r3, [r0, #0]
 80098e6:	4602      	mov	r2, r0
 80098e8:	f013 0007 	ands.w	r0, r3, #7
 80098ec:	d00b      	beq.n	8009906 <__lo0bits+0x22>
 80098ee:	07d9      	lsls	r1, r3, #31
 80098f0:	d422      	bmi.n	8009938 <__lo0bits+0x54>
 80098f2:	0798      	lsls	r0, r3, #30
 80098f4:	bf49      	itett	mi
 80098f6:	085b      	lsrmi	r3, r3, #1
 80098f8:	089b      	lsrpl	r3, r3, #2
 80098fa:	2001      	movmi	r0, #1
 80098fc:	6013      	strmi	r3, [r2, #0]
 80098fe:	bf5c      	itt	pl
 8009900:	2002      	movpl	r0, #2
 8009902:	6013      	strpl	r3, [r2, #0]
 8009904:	4770      	bx	lr
 8009906:	b299      	uxth	r1, r3
 8009908:	b909      	cbnz	r1, 800990e <__lo0bits+0x2a>
 800990a:	2010      	movs	r0, #16
 800990c:	0c1b      	lsrs	r3, r3, #16
 800990e:	f013 0fff 	tst.w	r3, #255	; 0xff
 8009912:	bf04      	itt	eq
 8009914:	0a1b      	lsreq	r3, r3, #8
 8009916:	3008      	addeq	r0, #8
 8009918:	0719      	lsls	r1, r3, #28
 800991a:	bf04      	itt	eq
 800991c:	091b      	lsreq	r3, r3, #4
 800991e:	3004      	addeq	r0, #4
 8009920:	0799      	lsls	r1, r3, #30
 8009922:	bf04      	itt	eq
 8009924:	089b      	lsreq	r3, r3, #2
 8009926:	3002      	addeq	r0, #2
 8009928:	07d9      	lsls	r1, r3, #31
 800992a:	d403      	bmi.n	8009934 <__lo0bits+0x50>
 800992c:	085b      	lsrs	r3, r3, #1
 800992e:	f100 0001 	add.w	r0, r0, #1
 8009932:	d003      	beq.n	800993c <__lo0bits+0x58>
 8009934:	6013      	str	r3, [r2, #0]
 8009936:	4770      	bx	lr
 8009938:	2000      	movs	r0, #0
 800993a:	4770      	bx	lr
 800993c:	2020      	movs	r0, #32
 800993e:	4770      	bx	lr

08009940 <__i2b>:
 8009940:	b510      	push	{r4, lr}
 8009942:	460c      	mov	r4, r1
 8009944:	2101      	movs	r1, #1
 8009946:	f7ff ff01 	bl	800974c <_Balloc>
 800994a:	4602      	mov	r2, r0
 800994c:	b928      	cbnz	r0, 800995a <__i2b+0x1a>
 800994e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8009952:	4b04      	ldr	r3, [pc, #16]	; (8009964 <__i2b+0x24>)
 8009954:	4804      	ldr	r0, [pc, #16]	; (8009968 <__i2b+0x28>)
 8009956:	f000 fc9b 	bl	800a290 <__assert_func>
 800995a:	2301      	movs	r3, #1
 800995c:	6144      	str	r4, [r0, #20]
 800995e:	6103      	str	r3, [r0, #16]
 8009960:	bd10      	pop	{r4, pc}
 8009962:	bf00      	nop
 8009964:	0800c54f 	.word	0x0800c54f
 8009968:	0800c560 	.word	0x0800c560

0800996c <__multiply>:
 800996c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009970:	4614      	mov	r4, r2
 8009972:	690a      	ldr	r2, [r1, #16]
 8009974:	6923      	ldr	r3, [r4, #16]
 8009976:	460d      	mov	r5, r1
 8009978:	429a      	cmp	r2, r3
 800997a:	bfbe      	ittt	lt
 800997c:	460b      	movlt	r3, r1
 800997e:	4625      	movlt	r5, r4
 8009980:	461c      	movlt	r4, r3
 8009982:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8009986:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800998a:	68ab      	ldr	r3, [r5, #8]
 800998c:	6869      	ldr	r1, [r5, #4]
 800998e:	eb0a 0709 	add.w	r7, sl, r9
 8009992:	42bb      	cmp	r3, r7
 8009994:	b085      	sub	sp, #20
 8009996:	bfb8      	it	lt
 8009998:	3101      	addlt	r1, #1
 800999a:	f7ff fed7 	bl	800974c <_Balloc>
 800999e:	b930      	cbnz	r0, 80099ae <__multiply+0x42>
 80099a0:	4602      	mov	r2, r0
 80099a2:	f240 115d 	movw	r1, #349	; 0x15d
 80099a6:	4b41      	ldr	r3, [pc, #260]	; (8009aac <__multiply+0x140>)
 80099a8:	4841      	ldr	r0, [pc, #260]	; (8009ab0 <__multiply+0x144>)
 80099aa:	f000 fc71 	bl	800a290 <__assert_func>
 80099ae:	f100 0614 	add.w	r6, r0, #20
 80099b2:	4633      	mov	r3, r6
 80099b4:	2200      	movs	r2, #0
 80099b6:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 80099ba:	4543      	cmp	r3, r8
 80099bc:	d31e      	bcc.n	80099fc <__multiply+0x90>
 80099be:	f105 0c14 	add.w	ip, r5, #20
 80099c2:	f104 0314 	add.w	r3, r4, #20
 80099c6:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 80099ca:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 80099ce:	9202      	str	r2, [sp, #8]
 80099d0:	ebac 0205 	sub.w	r2, ip, r5
 80099d4:	3a15      	subs	r2, #21
 80099d6:	f022 0203 	bic.w	r2, r2, #3
 80099da:	3204      	adds	r2, #4
 80099dc:	f105 0115 	add.w	r1, r5, #21
 80099e0:	458c      	cmp	ip, r1
 80099e2:	bf38      	it	cc
 80099e4:	2204      	movcc	r2, #4
 80099e6:	9201      	str	r2, [sp, #4]
 80099e8:	9a02      	ldr	r2, [sp, #8]
 80099ea:	9303      	str	r3, [sp, #12]
 80099ec:	429a      	cmp	r2, r3
 80099ee:	d808      	bhi.n	8009a02 <__multiply+0x96>
 80099f0:	2f00      	cmp	r7, #0
 80099f2:	dc55      	bgt.n	8009aa0 <__multiply+0x134>
 80099f4:	6107      	str	r7, [r0, #16]
 80099f6:	b005      	add	sp, #20
 80099f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80099fc:	f843 2b04 	str.w	r2, [r3], #4
 8009a00:	e7db      	b.n	80099ba <__multiply+0x4e>
 8009a02:	f8b3 a000 	ldrh.w	sl, [r3]
 8009a06:	f1ba 0f00 	cmp.w	sl, #0
 8009a0a:	d020      	beq.n	8009a4e <__multiply+0xe2>
 8009a0c:	46b1      	mov	r9, r6
 8009a0e:	2200      	movs	r2, #0
 8009a10:	f105 0e14 	add.w	lr, r5, #20
 8009a14:	f85e 4b04 	ldr.w	r4, [lr], #4
 8009a18:	f8d9 b000 	ldr.w	fp, [r9]
 8009a1c:	b2a1      	uxth	r1, r4
 8009a1e:	fa1f fb8b 	uxth.w	fp, fp
 8009a22:	fb0a b101 	mla	r1, sl, r1, fp
 8009a26:	4411      	add	r1, r2
 8009a28:	f8d9 2000 	ldr.w	r2, [r9]
 8009a2c:	0c24      	lsrs	r4, r4, #16
 8009a2e:	0c12      	lsrs	r2, r2, #16
 8009a30:	fb0a 2404 	mla	r4, sl, r4, r2
 8009a34:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8009a38:	b289      	uxth	r1, r1
 8009a3a:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8009a3e:	45f4      	cmp	ip, lr
 8009a40:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8009a44:	f849 1b04 	str.w	r1, [r9], #4
 8009a48:	d8e4      	bhi.n	8009a14 <__multiply+0xa8>
 8009a4a:	9901      	ldr	r1, [sp, #4]
 8009a4c:	5072      	str	r2, [r6, r1]
 8009a4e:	9a03      	ldr	r2, [sp, #12]
 8009a50:	3304      	adds	r3, #4
 8009a52:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009a56:	f1b9 0f00 	cmp.w	r9, #0
 8009a5a:	d01f      	beq.n	8009a9c <__multiply+0x130>
 8009a5c:	46b6      	mov	lr, r6
 8009a5e:	f04f 0a00 	mov.w	sl, #0
 8009a62:	6834      	ldr	r4, [r6, #0]
 8009a64:	f105 0114 	add.w	r1, r5, #20
 8009a68:	880a      	ldrh	r2, [r1, #0]
 8009a6a:	f8be b002 	ldrh.w	fp, [lr, #2]
 8009a6e:	b2a4      	uxth	r4, r4
 8009a70:	fb09 b202 	mla	r2, r9, r2, fp
 8009a74:	4492      	add	sl, r2
 8009a76:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8009a7a:	f84e 4b04 	str.w	r4, [lr], #4
 8009a7e:	f851 4b04 	ldr.w	r4, [r1], #4
 8009a82:	f8be 2000 	ldrh.w	r2, [lr]
 8009a86:	0c24      	lsrs	r4, r4, #16
 8009a88:	fb09 2404 	mla	r4, r9, r4, r2
 8009a8c:	458c      	cmp	ip, r1
 8009a8e:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8009a92:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8009a96:	d8e7      	bhi.n	8009a68 <__multiply+0xfc>
 8009a98:	9a01      	ldr	r2, [sp, #4]
 8009a9a:	50b4      	str	r4, [r6, r2]
 8009a9c:	3604      	adds	r6, #4
 8009a9e:	e7a3      	b.n	80099e8 <__multiply+0x7c>
 8009aa0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009aa4:	2b00      	cmp	r3, #0
 8009aa6:	d1a5      	bne.n	80099f4 <__multiply+0x88>
 8009aa8:	3f01      	subs	r7, #1
 8009aaa:	e7a1      	b.n	80099f0 <__multiply+0x84>
 8009aac:	0800c54f 	.word	0x0800c54f
 8009ab0:	0800c560 	.word	0x0800c560

08009ab4 <__pow5mult>:
 8009ab4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009ab8:	4615      	mov	r5, r2
 8009aba:	f012 0203 	ands.w	r2, r2, #3
 8009abe:	4606      	mov	r6, r0
 8009ac0:	460f      	mov	r7, r1
 8009ac2:	d007      	beq.n	8009ad4 <__pow5mult+0x20>
 8009ac4:	4c25      	ldr	r4, [pc, #148]	; (8009b5c <__pow5mult+0xa8>)
 8009ac6:	3a01      	subs	r2, #1
 8009ac8:	2300      	movs	r3, #0
 8009aca:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009ace:	f7ff fe9f 	bl	8009810 <__multadd>
 8009ad2:	4607      	mov	r7, r0
 8009ad4:	10ad      	asrs	r5, r5, #2
 8009ad6:	d03d      	beq.n	8009b54 <__pow5mult+0xa0>
 8009ad8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009ada:	b97c      	cbnz	r4, 8009afc <__pow5mult+0x48>
 8009adc:	2010      	movs	r0, #16
 8009ade:	f7ff fe11 	bl	8009704 <malloc>
 8009ae2:	4602      	mov	r2, r0
 8009ae4:	6270      	str	r0, [r6, #36]	; 0x24
 8009ae6:	b928      	cbnz	r0, 8009af4 <__pow5mult+0x40>
 8009ae8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8009aec:	4b1c      	ldr	r3, [pc, #112]	; (8009b60 <__pow5mult+0xac>)
 8009aee:	481d      	ldr	r0, [pc, #116]	; (8009b64 <__pow5mult+0xb0>)
 8009af0:	f000 fbce 	bl	800a290 <__assert_func>
 8009af4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009af8:	6004      	str	r4, [r0, #0]
 8009afa:	60c4      	str	r4, [r0, #12]
 8009afc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009b00:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009b04:	b94c      	cbnz	r4, 8009b1a <__pow5mult+0x66>
 8009b06:	f240 2171 	movw	r1, #625	; 0x271
 8009b0a:	4630      	mov	r0, r6
 8009b0c:	f7ff ff18 	bl	8009940 <__i2b>
 8009b10:	2300      	movs	r3, #0
 8009b12:	4604      	mov	r4, r0
 8009b14:	f8c8 0008 	str.w	r0, [r8, #8]
 8009b18:	6003      	str	r3, [r0, #0]
 8009b1a:	f04f 0900 	mov.w	r9, #0
 8009b1e:	07eb      	lsls	r3, r5, #31
 8009b20:	d50a      	bpl.n	8009b38 <__pow5mult+0x84>
 8009b22:	4639      	mov	r1, r7
 8009b24:	4622      	mov	r2, r4
 8009b26:	4630      	mov	r0, r6
 8009b28:	f7ff ff20 	bl	800996c <__multiply>
 8009b2c:	4680      	mov	r8, r0
 8009b2e:	4639      	mov	r1, r7
 8009b30:	4630      	mov	r0, r6
 8009b32:	f7ff fe4b 	bl	80097cc <_Bfree>
 8009b36:	4647      	mov	r7, r8
 8009b38:	106d      	asrs	r5, r5, #1
 8009b3a:	d00b      	beq.n	8009b54 <__pow5mult+0xa0>
 8009b3c:	6820      	ldr	r0, [r4, #0]
 8009b3e:	b938      	cbnz	r0, 8009b50 <__pow5mult+0x9c>
 8009b40:	4622      	mov	r2, r4
 8009b42:	4621      	mov	r1, r4
 8009b44:	4630      	mov	r0, r6
 8009b46:	f7ff ff11 	bl	800996c <__multiply>
 8009b4a:	6020      	str	r0, [r4, #0]
 8009b4c:	f8c0 9000 	str.w	r9, [r0]
 8009b50:	4604      	mov	r4, r0
 8009b52:	e7e4      	b.n	8009b1e <__pow5mult+0x6a>
 8009b54:	4638      	mov	r0, r7
 8009b56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009b5a:	bf00      	nop
 8009b5c:	0800c6b0 	.word	0x0800c6b0
 8009b60:	0800c4d9 	.word	0x0800c4d9
 8009b64:	0800c560 	.word	0x0800c560

08009b68 <__lshift>:
 8009b68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009b6c:	460c      	mov	r4, r1
 8009b6e:	4607      	mov	r7, r0
 8009b70:	4691      	mov	r9, r2
 8009b72:	6923      	ldr	r3, [r4, #16]
 8009b74:	6849      	ldr	r1, [r1, #4]
 8009b76:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009b7a:	68a3      	ldr	r3, [r4, #8]
 8009b7c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009b80:	f108 0601 	add.w	r6, r8, #1
 8009b84:	42b3      	cmp	r3, r6
 8009b86:	db0b      	blt.n	8009ba0 <__lshift+0x38>
 8009b88:	4638      	mov	r0, r7
 8009b8a:	f7ff fddf 	bl	800974c <_Balloc>
 8009b8e:	4605      	mov	r5, r0
 8009b90:	b948      	cbnz	r0, 8009ba6 <__lshift+0x3e>
 8009b92:	4602      	mov	r2, r0
 8009b94:	f240 11d9 	movw	r1, #473	; 0x1d9
 8009b98:	4b27      	ldr	r3, [pc, #156]	; (8009c38 <__lshift+0xd0>)
 8009b9a:	4828      	ldr	r0, [pc, #160]	; (8009c3c <__lshift+0xd4>)
 8009b9c:	f000 fb78 	bl	800a290 <__assert_func>
 8009ba0:	3101      	adds	r1, #1
 8009ba2:	005b      	lsls	r3, r3, #1
 8009ba4:	e7ee      	b.n	8009b84 <__lshift+0x1c>
 8009ba6:	2300      	movs	r3, #0
 8009ba8:	f100 0114 	add.w	r1, r0, #20
 8009bac:	f100 0210 	add.w	r2, r0, #16
 8009bb0:	4618      	mov	r0, r3
 8009bb2:	4553      	cmp	r3, sl
 8009bb4:	db33      	blt.n	8009c1e <__lshift+0xb6>
 8009bb6:	6920      	ldr	r0, [r4, #16]
 8009bb8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009bbc:	f104 0314 	add.w	r3, r4, #20
 8009bc0:	f019 091f 	ands.w	r9, r9, #31
 8009bc4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009bc8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009bcc:	d02b      	beq.n	8009c26 <__lshift+0xbe>
 8009bce:	468a      	mov	sl, r1
 8009bd0:	2200      	movs	r2, #0
 8009bd2:	f1c9 0e20 	rsb	lr, r9, #32
 8009bd6:	6818      	ldr	r0, [r3, #0]
 8009bd8:	fa00 f009 	lsl.w	r0, r0, r9
 8009bdc:	4302      	orrs	r2, r0
 8009bde:	f84a 2b04 	str.w	r2, [sl], #4
 8009be2:	f853 2b04 	ldr.w	r2, [r3], #4
 8009be6:	459c      	cmp	ip, r3
 8009be8:	fa22 f20e 	lsr.w	r2, r2, lr
 8009bec:	d8f3      	bhi.n	8009bd6 <__lshift+0x6e>
 8009bee:	ebac 0304 	sub.w	r3, ip, r4
 8009bf2:	3b15      	subs	r3, #21
 8009bf4:	f023 0303 	bic.w	r3, r3, #3
 8009bf8:	3304      	adds	r3, #4
 8009bfa:	f104 0015 	add.w	r0, r4, #21
 8009bfe:	4584      	cmp	ip, r0
 8009c00:	bf38      	it	cc
 8009c02:	2304      	movcc	r3, #4
 8009c04:	50ca      	str	r2, [r1, r3]
 8009c06:	b10a      	cbz	r2, 8009c0c <__lshift+0xa4>
 8009c08:	f108 0602 	add.w	r6, r8, #2
 8009c0c:	3e01      	subs	r6, #1
 8009c0e:	4638      	mov	r0, r7
 8009c10:	4621      	mov	r1, r4
 8009c12:	612e      	str	r6, [r5, #16]
 8009c14:	f7ff fdda 	bl	80097cc <_Bfree>
 8009c18:	4628      	mov	r0, r5
 8009c1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009c1e:	f842 0f04 	str.w	r0, [r2, #4]!
 8009c22:	3301      	adds	r3, #1
 8009c24:	e7c5      	b.n	8009bb2 <__lshift+0x4a>
 8009c26:	3904      	subs	r1, #4
 8009c28:	f853 2b04 	ldr.w	r2, [r3], #4
 8009c2c:	459c      	cmp	ip, r3
 8009c2e:	f841 2f04 	str.w	r2, [r1, #4]!
 8009c32:	d8f9      	bhi.n	8009c28 <__lshift+0xc0>
 8009c34:	e7ea      	b.n	8009c0c <__lshift+0xa4>
 8009c36:	bf00      	nop
 8009c38:	0800c54f 	.word	0x0800c54f
 8009c3c:	0800c560 	.word	0x0800c560

08009c40 <__mcmp>:
 8009c40:	4603      	mov	r3, r0
 8009c42:	690a      	ldr	r2, [r1, #16]
 8009c44:	6900      	ldr	r0, [r0, #16]
 8009c46:	b530      	push	{r4, r5, lr}
 8009c48:	1a80      	subs	r0, r0, r2
 8009c4a:	d10d      	bne.n	8009c68 <__mcmp+0x28>
 8009c4c:	3314      	adds	r3, #20
 8009c4e:	3114      	adds	r1, #20
 8009c50:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8009c54:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8009c58:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009c5c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009c60:	4295      	cmp	r5, r2
 8009c62:	d002      	beq.n	8009c6a <__mcmp+0x2a>
 8009c64:	d304      	bcc.n	8009c70 <__mcmp+0x30>
 8009c66:	2001      	movs	r0, #1
 8009c68:	bd30      	pop	{r4, r5, pc}
 8009c6a:	42a3      	cmp	r3, r4
 8009c6c:	d3f4      	bcc.n	8009c58 <__mcmp+0x18>
 8009c6e:	e7fb      	b.n	8009c68 <__mcmp+0x28>
 8009c70:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009c74:	e7f8      	b.n	8009c68 <__mcmp+0x28>
	...

08009c78 <__mdiff>:
 8009c78:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c7c:	460c      	mov	r4, r1
 8009c7e:	4606      	mov	r6, r0
 8009c80:	4611      	mov	r1, r2
 8009c82:	4620      	mov	r0, r4
 8009c84:	4692      	mov	sl, r2
 8009c86:	f7ff ffdb 	bl	8009c40 <__mcmp>
 8009c8a:	1e05      	subs	r5, r0, #0
 8009c8c:	d111      	bne.n	8009cb2 <__mdiff+0x3a>
 8009c8e:	4629      	mov	r1, r5
 8009c90:	4630      	mov	r0, r6
 8009c92:	f7ff fd5b 	bl	800974c <_Balloc>
 8009c96:	4602      	mov	r2, r0
 8009c98:	b928      	cbnz	r0, 8009ca6 <__mdiff+0x2e>
 8009c9a:	f240 2132 	movw	r1, #562	; 0x232
 8009c9e:	4b3c      	ldr	r3, [pc, #240]	; (8009d90 <__mdiff+0x118>)
 8009ca0:	483c      	ldr	r0, [pc, #240]	; (8009d94 <__mdiff+0x11c>)
 8009ca2:	f000 faf5 	bl	800a290 <__assert_func>
 8009ca6:	2301      	movs	r3, #1
 8009ca8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009cac:	4610      	mov	r0, r2
 8009cae:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009cb2:	bfa4      	itt	ge
 8009cb4:	4653      	movge	r3, sl
 8009cb6:	46a2      	movge	sl, r4
 8009cb8:	4630      	mov	r0, r6
 8009cba:	f8da 1004 	ldr.w	r1, [sl, #4]
 8009cbe:	bfa6      	itte	ge
 8009cc0:	461c      	movge	r4, r3
 8009cc2:	2500      	movge	r5, #0
 8009cc4:	2501      	movlt	r5, #1
 8009cc6:	f7ff fd41 	bl	800974c <_Balloc>
 8009cca:	4602      	mov	r2, r0
 8009ccc:	b918      	cbnz	r0, 8009cd6 <__mdiff+0x5e>
 8009cce:	f44f 7110 	mov.w	r1, #576	; 0x240
 8009cd2:	4b2f      	ldr	r3, [pc, #188]	; (8009d90 <__mdiff+0x118>)
 8009cd4:	e7e4      	b.n	8009ca0 <__mdiff+0x28>
 8009cd6:	f100 0814 	add.w	r8, r0, #20
 8009cda:	f8da 7010 	ldr.w	r7, [sl, #16]
 8009cde:	60c5      	str	r5, [r0, #12]
 8009ce0:	f04f 0c00 	mov.w	ip, #0
 8009ce4:	f10a 0514 	add.w	r5, sl, #20
 8009ce8:	f10a 0010 	add.w	r0, sl, #16
 8009cec:	46c2      	mov	sl, r8
 8009cee:	6926      	ldr	r6, [r4, #16]
 8009cf0:	f104 0914 	add.w	r9, r4, #20
 8009cf4:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 8009cf8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8009cfc:	f850 bf04 	ldr.w	fp, [r0, #4]!
 8009d00:	f859 3b04 	ldr.w	r3, [r9], #4
 8009d04:	fa1f f18b 	uxth.w	r1, fp
 8009d08:	4461      	add	r1, ip
 8009d0a:	fa1f fc83 	uxth.w	ip, r3
 8009d0e:	0c1b      	lsrs	r3, r3, #16
 8009d10:	eba1 010c 	sub.w	r1, r1, ip
 8009d14:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009d18:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8009d1c:	b289      	uxth	r1, r1
 8009d1e:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8009d22:	454e      	cmp	r6, r9
 8009d24:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8009d28:	f84a 3b04 	str.w	r3, [sl], #4
 8009d2c:	d8e6      	bhi.n	8009cfc <__mdiff+0x84>
 8009d2e:	1b33      	subs	r3, r6, r4
 8009d30:	3b15      	subs	r3, #21
 8009d32:	f023 0303 	bic.w	r3, r3, #3
 8009d36:	3415      	adds	r4, #21
 8009d38:	3304      	adds	r3, #4
 8009d3a:	42a6      	cmp	r6, r4
 8009d3c:	bf38      	it	cc
 8009d3e:	2304      	movcc	r3, #4
 8009d40:	441d      	add	r5, r3
 8009d42:	4443      	add	r3, r8
 8009d44:	461e      	mov	r6, r3
 8009d46:	462c      	mov	r4, r5
 8009d48:	4574      	cmp	r4, lr
 8009d4a:	d30e      	bcc.n	8009d6a <__mdiff+0xf2>
 8009d4c:	f10e 0103 	add.w	r1, lr, #3
 8009d50:	1b49      	subs	r1, r1, r5
 8009d52:	f021 0103 	bic.w	r1, r1, #3
 8009d56:	3d03      	subs	r5, #3
 8009d58:	45ae      	cmp	lr, r5
 8009d5a:	bf38      	it	cc
 8009d5c:	2100      	movcc	r1, #0
 8009d5e:	4419      	add	r1, r3
 8009d60:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8009d64:	b18b      	cbz	r3, 8009d8a <__mdiff+0x112>
 8009d66:	6117      	str	r7, [r2, #16]
 8009d68:	e7a0      	b.n	8009cac <__mdiff+0x34>
 8009d6a:	f854 8b04 	ldr.w	r8, [r4], #4
 8009d6e:	fa1f f188 	uxth.w	r1, r8
 8009d72:	4461      	add	r1, ip
 8009d74:	1408      	asrs	r0, r1, #16
 8009d76:	eb00 4018 	add.w	r0, r0, r8, lsr #16
 8009d7a:	b289      	uxth	r1, r1
 8009d7c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8009d80:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009d84:	f846 1b04 	str.w	r1, [r6], #4
 8009d88:	e7de      	b.n	8009d48 <__mdiff+0xd0>
 8009d8a:	3f01      	subs	r7, #1
 8009d8c:	e7e8      	b.n	8009d60 <__mdiff+0xe8>
 8009d8e:	bf00      	nop
 8009d90:	0800c54f 	.word	0x0800c54f
 8009d94:	0800c560 	.word	0x0800c560

08009d98 <__d2b>:
 8009d98:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8009d9c:	2101      	movs	r1, #1
 8009d9e:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8009da2:	4690      	mov	r8, r2
 8009da4:	461d      	mov	r5, r3
 8009da6:	f7ff fcd1 	bl	800974c <_Balloc>
 8009daa:	4604      	mov	r4, r0
 8009dac:	b930      	cbnz	r0, 8009dbc <__d2b+0x24>
 8009dae:	4602      	mov	r2, r0
 8009db0:	f240 310a 	movw	r1, #778	; 0x30a
 8009db4:	4b24      	ldr	r3, [pc, #144]	; (8009e48 <__d2b+0xb0>)
 8009db6:	4825      	ldr	r0, [pc, #148]	; (8009e4c <__d2b+0xb4>)
 8009db8:	f000 fa6a 	bl	800a290 <__assert_func>
 8009dbc:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8009dc0:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8009dc4:	bb2d      	cbnz	r5, 8009e12 <__d2b+0x7a>
 8009dc6:	9301      	str	r3, [sp, #4]
 8009dc8:	f1b8 0300 	subs.w	r3, r8, #0
 8009dcc:	d026      	beq.n	8009e1c <__d2b+0x84>
 8009dce:	4668      	mov	r0, sp
 8009dd0:	9300      	str	r3, [sp, #0]
 8009dd2:	f7ff fd87 	bl	80098e4 <__lo0bits>
 8009dd6:	9900      	ldr	r1, [sp, #0]
 8009dd8:	b1f0      	cbz	r0, 8009e18 <__d2b+0x80>
 8009dda:	9a01      	ldr	r2, [sp, #4]
 8009ddc:	f1c0 0320 	rsb	r3, r0, #32
 8009de0:	fa02 f303 	lsl.w	r3, r2, r3
 8009de4:	430b      	orrs	r3, r1
 8009de6:	40c2      	lsrs	r2, r0
 8009de8:	6163      	str	r3, [r4, #20]
 8009dea:	9201      	str	r2, [sp, #4]
 8009dec:	9b01      	ldr	r3, [sp, #4]
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	bf14      	ite	ne
 8009df2:	2102      	movne	r1, #2
 8009df4:	2101      	moveq	r1, #1
 8009df6:	61a3      	str	r3, [r4, #24]
 8009df8:	6121      	str	r1, [r4, #16]
 8009dfa:	b1c5      	cbz	r5, 8009e2e <__d2b+0x96>
 8009dfc:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009e00:	4405      	add	r5, r0
 8009e02:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009e06:	603d      	str	r5, [r7, #0]
 8009e08:	6030      	str	r0, [r6, #0]
 8009e0a:	4620      	mov	r0, r4
 8009e0c:	b002      	add	sp, #8
 8009e0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009e12:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009e16:	e7d6      	b.n	8009dc6 <__d2b+0x2e>
 8009e18:	6161      	str	r1, [r4, #20]
 8009e1a:	e7e7      	b.n	8009dec <__d2b+0x54>
 8009e1c:	a801      	add	r0, sp, #4
 8009e1e:	f7ff fd61 	bl	80098e4 <__lo0bits>
 8009e22:	2101      	movs	r1, #1
 8009e24:	9b01      	ldr	r3, [sp, #4]
 8009e26:	6121      	str	r1, [r4, #16]
 8009e28:	6163      	str	r3, [r4, #20]
 8009e2a:	3020      	adds	r0, #32
 8009e2c:	e7e5      	b.n	8009dfa <__d2b+0x62>
 8009e2e:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8009e32:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009e36:	6038      	str	r0, [r7, #0]
 8009e38:	6918      	ldr	r0, [r3, #16]
 8009e3a:	f7ff fd33 	bl	80098a4 <__hi0bits>
 8009e3e:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8009e42:	6031      	str	r1, [r6, #0]
 8009e44:	e7e1      	b.n	8009e0a <__d2b+0x72>
 8009e46:	bf00      	nop
 8009e48:	0800c54f 	.word	0x0800c54f
 8009e4c:	0800c560 	.word	0x0800c560

08009e50 <_calloc_r>:
 8009e50:	b538      	push	{r3, r4, r5, lr}
 8009e52:	fb02 f501 	mul.w	r5, r2, r1
 8009e56:	4629      	mov	r1, r5
 8009e58:	f000 f854 	bl	8009f04 <_malloc_r>
 8009e5c:	4604      	mov	r4, r0
 8009e5e:	b118      	cbz	r0, 8009e68 <_calloc_r+0x18>
 8009e60:	462a      	mov	r2, r5
 8009e62:	2100      	movs	r1, #0
 8009e64:	f7fe f944 	bl	80080f0 <memset>
 8009e68:	4620      	mov	r0, r4
 8009e6a:	bd38      	pop	{r3, r4, r5, pc}

08009e6c <_free_r>:
 8009e6c:	b538      	push	{r3, r4, r5, lr}
 8009e6e:	4605      	mov	r5, r0
 8009e70:	2900      	cmp	r1, #0
 8009e72:	d043      	beq.n	8009efc <_free_r+0x90>
 8009e74:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009e78:	1f0c      	subs	r4, r1, #4
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	bfb8      	it	lt
 8009e7e:	18e4      	addlt	r4, r4, r3
 8009e80:	f000 fa62 	bl	800a348 <__malloc_lock>
 8009e84:	4a1e      	ldr	r2, [pc, #120]	; (8009f00 <_free_r+0x94>)
 8009e86:	6813      	ldr	r3, [r2, #0]
 8009e88:	4610      	mov	r0, r2
 8009e8a:	b933      	cbnz	r3, 8009e9a <_free_r+0x2e>
 8009e8c:	6063      	str	r3, [r4, #4]
 8009e8e:	6014      	str	r4, [r2, #0]
 8009e90:	4628      	mov	r0, r5
 8009e92:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009e96:	f000 ba5d 	b.w	800a354 <__malloc_unlock>
 8009e9a:	42a3      	cmp	r3, r4
 8009e9c:	d90a      	bls.n	8009eb4 <_free_r+0x48>
 8009e9e:	6821      	ldr	r1, [r4, #0]
 8009ea0:	1862      	adds	r2, r4, r1
 8009ea2:	4293      	cmp	r3, r2
 8009ea4:	bf01      	itttt	eq
 8009ea6:	681a      	ldreq	r2, [r3, #0]
 8009ea8:	685b      	ldreq	r3, [r3, #4]
 8009eaa:	1852      	addeq	r2, r2, r1
 8009eac:	6022      	streq	r2, [r4, #0]
 8009eae:	6063      	str	r3, [r4, #4]
 8009eb0:	6004      	str	r4, [r0, #0]
 8009eb2:	e7ed      	b.n	8009e90 <_free_r+0x24>
 8009eb4:	461a      	mov	r2, r3
 8009eb6:	685b      	ldr	r3, [r3, #4]
 8009eb8:	b10b      	cbz	r3, 8009ebe <_free_r+0x52>
 8009eba:	42a3      	cmp	r3, r4
 8009ebc:	d9fa      	bls.n	8009eb4 <_free_r+0x48>
 8009ebe:	6811      	ldr	r1, [r2, #0]
 8009ec0:	1850      	adds	r0, r2, r1
 8009ec2:	42a0      	cmp	r0, r4
 8009ec4:	d10b      	bne.n	8009ede <_free_r+0x72>
 8009ec6:	6820      	ldr	r0, [r4, #0]
 8009ec8:	4401      	add	r1, r0
 8009eca:	1850      	adds	r0, r2, r1
 8009ecc:	4283      	cmp	r3, r0
 8009ece:	6011      	str	r1, [r2, #0]
 8009ed0:	d1de      	bne.n	8009e90 <_free_r+0x24>
 8009ed2:	6818      	ldr	r0, [r3, #0]
 8009ed4:	685b      	ldr	r3, [r3, #4]
 8009ed6:	4401      	add	r1, r0
 8009ed8:	6011      	str	r1, [r2, #0]
 8009eda:	6053      	str	r3, [r2, #4]
 8009edc:	e7d8      	b.n	8009e90 <_free_r+0x24>
 8009ede:	d902      	bls.n	8009ee6 <_free_r+0x7a>
 8009ee0:	230c      	movs	r3, #12
 8009ee2:	602b      	str	r3, [r5, #0]
 8009ee4:	e7d4      	b.n	8009e90 <_free_r+0x24>
 8009ee6:	6820      	ldr	r0, [r4, #0]
 8009ee8:	1821      	adds	r1, r4, r0
 8009eea:	428b      	cmp	r3, r1
 8009eec:	bf01      	itttt	eq
 8009eee:	6819      	ldreq	r1, [r3, #0]
 8009ef0:	685b      	ldreq	r3, [r3, #4]
 8009ef2:	1809      	addeq	r1, r1, r0
 8009ef4:	6021      	streq	r1, [r4, #0]
 8009ef6:	6063      	str	r3, [r4, #4]
 8009ef8:	6054      	str	r4, [r2, #4]
 8009efa:	e7c9      	b.n	8009e90 <_free_r+0x24>
 8009efc:	bd38      	pop	{r3, r4, r5, pc}
 8009efe:	bf00      	nop
 8009f00:	200011c8 	.word	0x200011c8

08009f04 <_malloc_r>:
 8009f04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f06:	1ccd      	adds	r5, r1, #3
 8009f08:	f025 0503 	bic.w	r5, r5, #3
 8009f0c:	3508      	adds	r5, #8
 8009f0e:	2d0c      	cmp	r5, #12
 8009f10:	bf38      	it	cc
 8009f12:	250c      	movcc	r5, #12
 8009f14:	2d00      	cmp	r5, #0
 8009f16:	4606      	mov	r6, r0
 8009f18:	db01      	blt.n	8009f1e <_malloc_r+0x1a>
 8009f1a:	42a9      	cmp	r1, r5
 8009f1c:	d903      	bls.n	8009f26 <_malloc_r+0x22>
 8009f1e:	230c      	movs	r3, #12
 8009f20:	6033      	str	r3, [r6, #0]
 8009f22:	2000      	movs	r0, #0
 8009f24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009f26:	f000 fa0f 	bl	800a348 <__malloc_lock>
 8009f2a:	4921      	ldr	r1, [pc, #132]	; (8009fb0 <_malloc_r+0xac>)
 8009f2c:	680a      	ldr	r2, [r1, #0]
 8009f2e:	4614      	mov	r4, r2
 8009f30:	b99c      	cbnz	r4, 8009f5a <_malloc_r+0x56>
 8009f32:	4f20      	ldr	r7, [pc, #128]	; (8009fb4 <_malloc_r+0xb0>)
 8009f34:	683b      	ldr	r3, [r7, #0]
 8009f36:	b923      	cbnz	r3, 8009f42 <_malloc_r+0x3e>
 8009f38:	4621      	mov	r1, r4
 8009f3a:	4630      	mov	r0, r6
 8009f3c:	f000 f998 	bl	800a270 <_sbrk_r>
 8009f40:	6038      	str	r0, [r7, #0]
 8009f42:	4629      	mov	r1, r5
 8009f44:	4630      	mov	r0, r6
 8009f46:	f000 f993 	bl	800a270 <_sbrk_r>
 8009f4a:	1c43      	adds	r3, r0, #1
 8009f4c:	d123      	bne.n	8009f96 <_malloc_r+0x92>
 8009f4e:	230c      	movs	r3, #12
 8009f50:	4630      	mov	r0, r6
 8009f52:	6033      	str	r3, [r6, #0]
 8009f54:	f000 f9fe 	bl	800a354 <__malloc_unlock>
 8009f58:	e7e3      	b.n	8009f22 <_malloc_r+0x1e>
 8009f5a:	6823      	ldr	r3, [r4, #0]
 8009f5c:	1b5b      	subs	r3, r3, r5
 8009f5e:	d417      	bmi.n	8009f90 <_malloc_r+0x8c>
 8009f60:	2b0b      	cmp	r3, #11
 8009f62:	d903      	bls.n	8009f6c <_malloc_r+0x68>
 8009f64:	6023      	str	r3, [r4, #0]
 8009f66:	441c      	add	r4, r3
 8009f68:	6025      	str	r5, [r4, #0]
 8009f6a:	e004      	b.n	8009f76 <_malloc_r+0x72>
 8009f6c:	6863      	ldr	r3, [r4, #4]
 8009f6e:	42a2      	cmp	r2, r4
 8009f70:	bf0c      	ite	eq
 8009f72:	600b      	streq	r3, [r1, #0]
 8009f74:	6053      	strne	r3, [r2, #4]
 8009f76:	4630      	mov	r0, r6
 8009f78:	f000 f9ec 	bl	800a354 <__malloc_unlock>
 8009f7c:	f104 000b 	add.w	r0, r4, #11
 8009f80:	1d23      	adds	r3, r4, #4
 8009f82:	f020 0007 	bic.w	r0, r0, #7
 8009f86:	1ac2      	subs	r2, r0, r3
 8009f88:	d0cc      	beq.n	8009f24 <_malloc_r+0x20>
 8009f8a:	1a1b      	subs	r3, r3, r0
 8009f8c:	50a3      	str	r3, [r4, r2]
 8009f8e:	e7c9      	b.n	8009f24 <_malloc_r+0x20>
 8009f90:	4622      	mov	r2, r4
 8009f92:	6864      	ldr	r4, [r4, #4]
 8009f94:	e7cc      	b.n	8009f30 <_malloc_r+0x2c>
 8009f96:	1cc4      	adds	r4, r0, #3
 8009f98:	f024 0403 	bic.w	r4, r4, #3
 8009f9c:	42a0      	cmp	r0, r4
 8009f9e:	d0e3      	beq.n	8009f68 <_malloc_r+0x64>
 8009fa0:	1a21      	subs	r1, r4, r0
 8009fa2:	4630      	mov	r0, r6
 8009fa4:	f000 f964 	bl	800a270 <_sbrk_r>
 8009fa8:	3001      	adds	r0, #1
 8009faa:	d1dd      	bne.n	8009f68 <_malloc_r+0x64>
 8009fac:	e7cf      	b.n	8009f4e <_malloc_r+0x4a>
 8009fae:	bf00      	nop
 8009fb0:	200011c8 	.word	0x200011c8
 8009fb4:	200011cc 	.word	0x200011cc

08009fb8 <__ssputs_r>:
 8009fb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009fbc:	688e      	ldr	r6, [r1, #8]
 8009fbe:	4682      	mov	sl, r0
 8009fc0:	429e      	cmp	r6, r3
 8009fc2:	460c      	mov	r4, r1
 8009fc4:	4690      	mov	r8, r2
 8009fc6:	461f      	mov	r7, r3
 8009fc8:	d838      	bhi.n	800a03c <__ssputs_r+0x84>
 8009fca:	898a      	ldrh	r2, [r1, #12]
 8009fcc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009fd0:	d032      	beq.n	800a038 <__ssputs_r+0x80>
 8009fd2:	6825      	ldr	r5, [r4, #0]
 8009fd4:	6909      	ldr	r1, [r1, #16]
 8009fd6:	3301      	adds	r3, #1
 8009fd8:	eba5 0901 	sub.w	r9, r5, r1
 8009fdc:	6965      	ldr	r5, [r4, #20]
 8009fde:	444b      	add	r3, r9
 8009fe0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009fe4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009fe8:	106d      	asrs	r5, r5, #1
 8009fea:	429d      	cmp	r5, r3
 8009fec:	bf38      	it	cc
 8009fee:	461d      	movcc	r5, r3
 8009ff0:	0553      	lsls	r3, r2, #21
 8009ff2:	d531      	bpl.n	800a058 <__ssputs_r+0xa0>
 8009ff4:	4629      	mov	r1, r5
 8009ff6:	f7ff ff85 	bl	8009f04 <_malloc_r>
 8009ffa:	4606      	mov	r6, r0
 8009ffc:	b950      	cbnz	r0, 800a014 <__ssputs_r+0x5c>
 8009ffe:	230c      	movs	r3, #12
 800a000:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a004:	f8ca 3000 	str.w	r3, [sl]
 800a008:	89a3      	ldrh	r3, [r4, #12]
 800a00a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a00e:	81a3      	strh	r3, [r4, #12]
 800a010:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a014:	464a      	mov	r2, r9
 800a016:	6921      	ldr	r1, [r4, #16]
 800a018:	f7ff fb8a 	bl	8009730 <memcpy>
 800a01c:	89a3      	ldrh	r3, [r4, #12]
 800a01e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a022:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a026:	81a3      	strh	r3, [r4, #12]
 800a028:	6126      	str	r6, [r4, #16]
 800a02a:	444e      	add	r6, r9
 800a02c:	6026      	str	r6, [r4, #0]
 800a02e:	463e      	mov	r6, r7
 800a030:	6165      	str	r5, [r4, #20]
 800a032:	eba5 0509 	sub.w	r5, r5, r9
 800a036:	60a5      	str	r5, [r4, #8]
 800a038:	42be      	cmp	r6, r7
 800a03a:	d900      	bls.n	800a03e <__ssputs_r+0x86>
 800a03c:	463e      	mov	r6, r7
 800a03e:	4632      	mov	r2, r6
 800a040:	4641      	mov	r1, r8
 800a042:	6820      	ldr	r0, [r4, #0]
 800a044:	f000 f966 	bl	800a314 <memmove>
 800a048:	68a3      	ldr	r3, [r4, #8]
 800a04a:	6822      	ldr	r2, [r4, #0]
 800a04c:	1b9b      	subs	r3, r3, r6
 800a04e:	4432      	add	r2, r6
 800a050:	2000      	movs	r0, #0
 800a052:	60a3      	str	r3, [r4, #8]
 800a054:	6022      	str	r2, [r4, #0]
 800a056:	e7db      	b.n	800a010 <__ssputs_r+0x58>
 800a058:	462a      	mov	r2, r5
 800a05a:	f000 f981 	bl	800a360 <_realloc_r>
 800a05e:	4606      	mov	r6, r0
 800a060:	2800      	cmp	r0, #0
 800a062:	d1e1      	bne.n	800a028 <__ssputs_r+0x70>
 800a064:	4650      	mov	r0, sl
 800a066:	6921      	ldr	r1, [r4, #16]
 800a068:	f7ff ff00 	bl	8009e6c <_free_r>
 800a06c:	e7c7      	b.n	8009ffe <__ssputs_r+0x46>
	...

0800a070 <_svfiprintf_r>:
 800a070:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a074:	4698      	mov	r8, r3
 800a076:	898b      	ldrh	r3, [r1, #12]
 800a078:	4607      	mov	r7, r0
 800a07a:	061b      	lsls	r3, r3, #24
 800a07c:	460d      	mov	r5, r1
 800a07e:	4614      	mov	r4, r2
 800a080:	b09d      	sub	sp, #116	; 0x74
 800a082:	d50e      	bpl.n	800a0a2 <_svfiprintf_r+0x32>
 800a084:	690b      	ldr	r3, [r1, #16]
 800a086:	b963      	cbnz	r3, 800a0a2 <_svfiprintf_r+0x32>
 800a088:	2140      	movs	r1, #64	; 0x40
 800a08a:	f7ff ff3b 	bl	8009f04 <_malloc_r>
 800a08e:	6028      	str	r0, [r5, #0]
 800a090:	6128      	str	r0, [r5, #16]
 800a092:	b920      	cbnz	r0, 800a09e <_svfiprintf_r+0x2e>
 800a094:	230c      	movs	r3, #12
 800a096:	603b      	str	r3, [r7, #0]
 800a098:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a09c:	e0d1      	b.n	800a242 <_svfiprintf_r+0x1d2>
 800a09e:	2340      	movs	r3, #64	; 0x40
 800a0a0:	616b      	str	r3, [r5, #20]
 800a0a2:	2300      	movs	r3, #0
 800a0a4:	9309      	str	r3, [sp, #36]	; 0x24
 800a0a6:	2320      	movs	r3, #32
 800a0a8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a0ac:	2330      	movs	r3, #48	; 0x30
 800a0ae:	f04f 0901 	mov.w	r9, #1
 800a0b2:	f8cd 800c 	str.w	r8, [sp, #12]
 800a0b6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800a25c <_svfiprintf_r+0x1ec>
 800a0ba:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a0be:	4623      	mov	r3, r4
 800a0c0:	469a      	mov	sl, r3
 800a0c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a0c6:	b10a      	cbz	r2, 800a0cc <_svfiprintf_r+0x5c>
 800a0c8:	2a25      	cmp	r2, #37	; 0x25
 800a0ca:	d1f9      	bne.n	800a0c0 <_svfiprintf_r+0x50>
 800a0cc:	ebba 0b04 	subs.w	fp, sl, r4
 800a0d0:	d00b      	beq.n	800a0ea <_svfiprintf_r+0x7a>
 800a0d2:	465b      	mov	r3, fp
 800a0d4:	4622      	mov	r2, r4
 800a0d6:	4629      	mov	r1, r5
 800a0d8:	4638      	mov	r0, r7
 800a0da:	f7ff ff6d 	bl	8009fb8 <__ssputs_r>
 800a0de:	3001      	adds	r0, #1
 800a0e0:	f000 80aa 	beq.w	800a238 <_svfiprintf_r+0x1c8>
 800a0e4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a0e6:	445a      	add	r2, fp
 800a0e8:	9209      	str	r2, [sp, #36]	; 0x24
 800a0ea:	f89a 3000 	ldrb.w	r3, [sl]
 800a0ee:	2b00      	cmp	r3, #0
 800a0f0:	f000 80a2 	beq.w	800a238 <_svfiprintf_r+0x1c8>
 800a0f4:	2300      	movs	r3, #0
 800a0f6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a0fa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a0fe:	f10a 0a01 	add.w	sl, sl, #1
 800a102:	9304      	str	r3, [sp, #16]
 800a104:	9307      	str	r3, [sp, #28]
 800a106:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a10a:	931a      	str	r3, [sp, #104]	; 0x68
 800a10c:	4654      	mov	r4, sl
 800a10e:	2205      	movs	r2, #5
 800a110:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a114:	4851      	ldr	r0, [pc, #324]	; (800a25c <_svfiprintf_r+0x1ec>)
 800a116:	f7ff fafd 	bl	8009714 <memchr>
 800a11a:	9a04      	ldr	r2, [sp, #16]
 800a11c:	b9d8      	cbnz	r0, 800a156 <_svfiprintf_r+0xe6>
 800a11e:	06d0      	lsls	r0, r2, #27
 800a120:	bf44      	itt	mi
 800a122:	2320      	movmi	r3, #32
 800a124:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a128:	0711      	lsls	r1, r2, #28
 800a12a:	bf44      	itt	mi
 800a12c:	232b      	movmi	r3, #43	; 0x2b
 800a12e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a132:	f89a 3000 	ldrb.w	r3, [sl]
 800a136:	2b2a      	cmp	r3, #42	; 0x2a
 800a138:	d015      	beq.n	800a166 <_svfiprintf_r+0xf6>
 800a13a:	4654      	mov	r4, sl
 800a13c:	2000      	movs	r0, #0
 800a13e:	f04f 0c0a 	mov.w	ip, #10
 800a142:	9a07      	ldr	r2, [sp, #28]
 800a144:	4621      	mov	r1, r4
 800a146:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a14a:	3b30      	subs	r3, #48	; 0x30
 800a14c:	2b09      	cmp	r3, #9
 800a14e:	d94e      	bls.n	800a1ee <_svfiprintf_r+0x17e>
 800a150:	b1b0      	cbz	r0, 800a180 <_svfiprintf_r+0x110>
 800a152:	9207      	str	r2, [sp, #28]
 800a154:	e014      	b.n	800a180 <_svfiprintf_r+0x110>
 800a156:	eba0 0308 	sub.w	r3, r0, r8
 800a15a:	fa09 f303 	lsl.w	r3, r9, r3
 800a15e:	4313      	orrs	r3, r2
 800a160:	46a2      	mov	sl, r4
 800a162:	9304      	str	r3, [sp, #16]
 800a164:	e7d2      	b.n	800a10c <_svfiprintf_r+0x9c>
 800a166:	9b03      	ldr	r3, [sp, #12]
 800a168:	1d19      	adds	r1, r3, #4
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	9103      	str	r1, [sp, #12]
 800a16e:	2b00      	cmp	r3, #0
 800a170:	bfbb      	ittet	lt
 800a172:	425b      	neglt	r3, r3
 800a174:	f042 0202 	orrlt.w	r2, r2, #2
 800a178:	9307      	strge	r3, [sp, #28]
 800a17a:	9307      	strlt	r3, [sp, #28]
 800a17c:	bfb8      	it	lt
 800a17e:	9204      	strlt	r2, [sp, #16]
 800a180:	7823      	ldrb	r3, [r4, #0]
 800a182:	2b2e      	cmp	r3, #46	; 0x2e
 800a184:	d10c      	bne.n	800a1a0 <_svfiprintf_r+0x130>
 800a186:	7863      	ldrb	r3, [r4, #1]
 800a188:	2b2a      	cmp	r3, #42	; 0x2a
 800a18a:	d135      	bne.n	800a1f8 <_svfiprintf_r+0x188>
 800a18c:	9b03      	ldr	r3, [sp, #12]
 800a18e:	3402      	adds	r4, #2
 800a190:	1d1a      	adds	r2, r3, #4
 800a192:	681b      	ldr	r3, [r3, #0]
 800a194:	9203      	str	r2, [sp, #12]
 800a196:	2b00      	cmp	r3, #0
 800a198:	bfb8      	it	lt
 800a19a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800a19e:	9305      	str	r3, [sp, #20]
 800a1a0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a26c <_svfiprintf_r+0x1fc>
 800a1a4:	2203      	movs	r2, #3
 800a1a6:	4650      	mov	r0, sl
 800a1a8:	7821      	ldrb	r1, [r4, #0]
 800a1aa:	f7ff fab3 	bl	8009714 <memchr>
 800a1ae:	b140      	cbz	r0, 800a1c2 <_svfiprintf_r+0x152>
 800a1b0:	2340      	movs	r3, #64	; 0x40
 800a1b2:	eba0 000a 	sub.w	r0, r0, sl
 800a1b6:	fa03 f000 	lsl.w	r0, r3, r0
 800a1ba:	9b04      	ldr	r3, [sp, #16]
 800a1bc:	3401      	adds	r4, #1
 800a1be:	4303      	orrs	r3, r0
 800a1c0:	9304      	str	r3, [sp, #16]
 800a1c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a1c6:	2206      	movs	r2, #6
 800a1c8:	4825      	ldr	r0, [pc, #148]	; (800a260 <_svfiprintf_r+0x1f0>)
 800a1ca:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a1ce:	f7ff faa1 	bl	8009714 <memchr>
 800a1d2:	2800      	cmp	r0, #0
 800a1d4:	d038      	beq.n	800a248 <_svfiprintf_r+0x1d8>
 800a1d6:	4b23      	ldr	r3, [pc, #140]	; (800a264 <_svfiprintf_r+0x1f4>)
 800a1d8:	bb1b      	cbnz	r3, 800a222 <_svfiprintf_r+0x1b2>
 800a1da:	9b03      	ldr	r3, [sp, #12]
 800a1dc:	3307      	adds	r3, #7
 800a1de:	f023 0307 	bic.w	r3, r3, #7
 800a1e2:	3308      	adds	r3, #8
 800a1e4:	9303      	str	r3, [sp, #12]
 800a1e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a1e8:	4433      	add	r3, r6
 800a1ea:	9309      	str	r3, [sp, #36]	; 0x24
 800a1ec:	e767      	b.n	800a0be <_svfiprintf_r+0x4e>
 800a1ee:	460c      	mov	r4, r1
 800a1f0:	2001      	movs	r0, #1
 800a1f2:	fb0c 3202 	mla	r2, ip, r2, r3
 800a1f6:	e7a5      	b.n	800a144 <_svfiprintf_r+0xd4>
 800a1f8:	2300      	movs	r3, #0
 800a1fa:	f04f 0c0a 	mov.w	ip, #10
 800a1fe:	4619      	mov	r1, r3
 800a200:	3401      	adds	r4, #1
 800a202:	9305      	str	r3, [sp, #20]
 800a204:	4620      	mov	r0, r4
 800a206:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a20a:	3a30      	subs	r2, #48	; 0x30
 800a20c:	2a09      	cmp	r2, #9
 800a20e:	d903      	bls.n	800a218 <_svfiprintf_r+0x1a8>
 800a210:	2b00      	cmp	r3, #0
 800a212:	d0c5      	beq.n	800a1a0 <_svfiprintf_r+0x130>
 800a214:	9105      	str	r1, [sp, #20]
 800a216:	e7c3      	b.n	800a1a0 <_svfiprintf_r+0x130>
 800a218:	4604      	mov	r4, r0
 800a21a:	2301      	movs	r3, #1
 800a21c:	fb0c 2101 	mla	r1, ip, r1, r2
 800a220:	e7f0      	b.n	800a204 <_svfiprintf_r+0x194>
 800a222:	ab03      	add	r3, sp, #12
 800a224:	9300      	str	r3, [sp, #0]
 800a226:	462a      	mov	r2, r5
 800a228:	4638      	mov	r0, r7
 800a22a:	4b0f      	ldr	r3, [pc, #60]	; (800a268 <_svfiprintf_r+0x1f8>)
 800a22c:	a904      	add	r1, sp, #16
 800a22e:	f7fe f805 	bl	800823c <_printf_float>
 800a232:	1c42      	adds	r2, r0, #1
 800a234:	4606      	mov	r6, r0
 800a236:	d1d6      	bne.n	800a1e6 <_svfiprintf_r+0x176>
 800a238:	89ab      	ldrh	r3, [r5, #12]
 800a23a:	065b      	lsls	r3, r3, #25
 800a23c:	f53f af2c 	bmi.w	800a098 <_svfiprintf_r+0x28>
 800a240:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a242:	b01d      	add	sp, #116	; 0x74
 800a244:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a248:	ab03      	add	r3, sp, #12
 800a24a:	9300      	str	r3, [sp, #0]
 800a24c:	462a      	mov	r2, r5
 800a24e:	4638      	mov	r0, r7
 800a250:	4b05      	ldr	r3, [pc, #20]	; (800a268 <_svfiprintf_r+0x1f8>)
 800a252:	a904      	add	r1, sp, #16
 800a254:	f7fe fa8e 	bl	8008774 <_printf_i>
 800a258:	e7eb      	b.n	800a232 <_svfiprintf_r+0x1c2>
 800a25a:	bf00      	nop
 800a25c:	0800c6bc 	.word	0x0800c6bc
 800a260:	0800c6c6 	.word	0x0800c6c6
 800a264:	0800823d 	.word	0x0800823d
 800a268:	08009fb9 	.word	0x08009fb9
 800a26c:	0800c6c2 	.word	0x0800c6c2

0800a270 <_sbrk_r>:
 800a270:	b538      	push	{r3, r4, r5, lr}
 800a272:	2300      	movs	r3, #0
 800a274:	4d05      	ldr	r5, [pc, #20]	; (800a28c <_sbrk_r+0x1c>)
 800a276:	4604      	mov	r4, r0
 800a278:	4608      	mov	r0, r1
 800a27a:	602b      	str	r3, [r5, #0]
 800a27c:	f7f9 fc8c 	bl	8003b98 <_sbrk>
 800a280:	1c43      	adds	r3, r0, #1
 800a282:	d102      	bne.n	800a28a <_sbrk_r+0x1a>
 800a284:	682b      	ldr	r3, [r5, #0]
 800a286:	b103      	cbz	r3, 800a28a <_sbrk_r+0x1a>
 800a288:	6023      	str	r3, [r4, #0]
 800a28a:	bd38      	pop	{r3, r4, r5, pc}
 800a28c:	20001d08 	.word	0x20001d08

0800a290 <__assert_func>:
 800a290:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a292:	4614      	mov	r4, r2
 800a294:	461a      	mov	r2, r3
 800a296:	4b09      	ldr	r3, [pc, #36]	; (800a2bc <__assert_func+0x2c>)
 800a298:	4605      	mov	r5, r0
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	68d8      	ldr	r0, [r3, #12]
 800a29e:	b14c      	cbz	r4, 800a2b4 <__assert_func+0x24>
 800a2a0:	4b07      	ldr	r3, [pc, #28]	; (800a2c0 <__assert_func+0x30>)
 800a2a2:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a2a6:	9100      	str	r1, [sp, #0]
 800a2a8:	462b      	mov	r3, r5
 800a2aa:	4906      	ldr	r1, [pc, #24]	; (800a2c4 <__assert_func+0x34>)
 800a2ac:	f000 f80e 	bl	800a2cc <fiprintf>
 800a2b0:	f000 faa2 	bl	800a7f8 <abort>
 800a2b4:	4b04      	ldr	r3, [pc, #16]	; (800a2c8 <__assert_func+0x38>)
 800a2b6:	461c      	mov	r4, r3
 800a2b8:	e7f3      	b.n	800a2a2 <__assert_func+0x12>
 800a2ba:	bf00      	nop
 800a2bc:	2000001c 	.word	0x2000001c
 800a2c0:	0800c6cd 	.word	0x0800c6cd
 800a2c4:	0800c6da 	.word	0x0800c6da
 800a2c8:	0800c708 	.word	0x0800c708

0800a2cc <fiprintf>:
 800a2cc:	b40e      	push	{r1, r2, r3}
 800a2ce:	b503      	push	{r0, r1, lr}
 800a2d0:	4601      	mov	r1, r0
 800a2d2:	ab03      	add	r3, sp, #12
 800a2d4:	4805      	ldr	r0, [pc, #20]	; (800a2ec <fiprintf+0x20>)
 800a2d6:	f853 2b04 	ldr.w	r2, [r3], #4
 800a2da:	6800      	ldr	r0, [r0, #0]
 800a2dc:	9301      	str	r3, [sp, #4]
 800a2de:	f000 f88d 	bl	800a3fc <_vfiprintf_r>
 800a2e2:	b002      	add	sp, #8
 800a2e4:	f85d eb04 	ldr.w	lr, [sp], #4
 800a2e8:	b003      	add	sp, #12
 800a2ea:	4770      	bx	lr
 800a2ec:	2000001c 	.word	0x2000001c

0800a2f0 <__ascii_mbtowc>:
 800a2f0:	b082      	sub	sp, #8
 800a2f2:	b901      	cbnz	r1, 800a2f6 <__ascii_mbtowc+0x6>
 800a2f4:	a901      	add	r1, sp, #4
 800a2f6:	b142      	cbz	r2, 800a30a <__ascii_mbtowc+0x1a>
 800a2f8:	b14b      	cbz	r3, 800a30e <__ascii_mbtowc+0x1e>
 800a2fa:	7813      	ldrb	r3, [r2, #0]
 800a2fc:	600b      	str	r3, [r1, #0]
 800a2fe:	7812      	ldrb	r2, [r2, #0]
 800a300:	1e10      	subs	r0, r2, #0
 800a302:	bf18      	it	ne
 800a304:	2001      	movne	r0, #1
 800a306:	b002      	add	sp, #8
 800a308:	4770      	bx	lr
 800a30a:	4610      	mov	r0, r2
 800a30c:	e7fb      	b.n	800a306 <__ascii_mbtowc+0x16>
 800a30e:	f06f 0001 	mvn.w	r0, #1
 800a312:	e7f8      	b.n	800a306 <__ascii_mbtowc+0x16>

0800a314 <memmove>:
 800a314:	4288      	cmp	r0, r1
 800a316:	b510      	push	{r4, lr}
 800a318:	eb01 0402 	add.w	r4, r1, r2
 800a31c:	d902      	bls.n	800a324 <memmove+0x10>
 800a31e:	4284      	cmp	r4, r0
 800a320:	4623      	mov	r3, r4
 800a322:	d807      	bhi.n	800a334 <memmove+0x20>
 800a324:	1e43      	subs	r3, r0, #1
 800a326:	42a1      	cmp	r1, r4
 800a328:	d008      	beq.n	800a33c <memmove+0x28>
 800a32a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a32e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a332:	e7f8      	b.n	800a326 <memmove+0x12>
 800a334:	4601      	mov	r1, r0
 800a336:	4402      	add	r2, r0
 800a338:	428a      	cmp	r2, r1
 800a33a:	d100      	bne.n	800a33e <memmove+0x2a>
 800a33c:	bd10      	pop	{r4, pc}
 800a33e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a342:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a346:	e7f7      	b.n	800a338 <memmove+0x24>

0800a348 <__malloc_lock>:
 800a348:	4801      	ldr	r0, [pc, #4]	; (800a350 <__malloc_lock+0x8>)
 800a34a:	f000 bc15 	b.w	800ab78 <__retarget_lock_acquire_recursive>
 800a34e:	bf00      	nop
 800a350:	20001d10 	.word	0x20001d10

0800a354 <__malloc_unlock>:
 800a354:	4801      	ldr	r0, [pc, #4]	; (800a35c <__malloc_unlock+0x8>)
 800a356:	f000 bc10 	b.w	800ab7a <__retarget_lock_release_recursive>
 800a35a:	bf00      	nop
 800a35c:	20001d10 	.word	0x20001d10

0800a360 <_realloc_r>:
 800a360:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a362:	4607      	mov	r7, r0
 800a364:	4614      	mov	r4, r2
 800a366:	460e      	mov	r6, r1
 800a368:	b921      	cbnz	r1, 800a374 <_realloc_r+0x14>
 800a36a:	4611      	mov	r1, r2
 800a36c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800a370:	f7ff bdc8 	b.w	8009f04 <_malloc_r>
 800a374:	b922      	cbnz	r2, 800a380 <_realloc_r+0x20>
 800a376:	f7ff fd79 	bl	8009e6c <_free_r>
 800a37a:	4625      	mov	r5, r4
 800a37c:	4628      	mov	r0, r5
 800a37e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a380:	f000 fc60 	bl	800ac44 <_malloc_usable_size_r>
 800a384:	42a0      	cmp	r0, r4
 800a386:	d20f      	bcs.n	800a3a8 <_realloc_r+0x48>
 800a388:	4621      	mov	r1, r4
 800a38a:	4638      	mov	r0, r7
 800a38c:	f7ff fdba 	bl	8009f04 <_malloc_r>
 800a390:	4605      	mov	r5, r0
 800a392:	2800      	cmp	r0, #0
 800a394:	d0f2      	beq.n	800a37c <_realloc_r+0x1c>
 800a396:	4631      	mov	r1, r6
 800a398:	4622      	mov	r2, r4
 800a39a:	f7ff f9c9 	bl	8009730 <memcpy>
 800a39e:	4631      	mov	r1, r6
 800a3a0:	4638      	mov	r0, r7
 800a3a2:	f7ff fd63 	bl	8009e6c <_free_r>
 800a3a6:	e7e9      	b.n	800a37c <_realloc_r+0x1c>
 800a3a8:	4635      	mov	r5, r6
 800a3aa:	e7e7      	b.n	800a37c <_realloc_r+0x1c>

0800a3ac <__sfputc_r>:
 800a3ac:	6893      	ldr	r3, [r2, #8]
 800a3ae:	b410      	push	{r4}
 800a3b0:	3b01      	subs	r3, #1
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	6093      	str	r3, [r2, #8]
 800a3b6:	da07      	bge.n	800a3c8 <__sfputc_r+0x1c>
 800a3b8:	6994      	ldr	r4, [r2, #24]
 800a3ba:	42a3      	cmp	r3, r4
 800a3bc:	db01      	blt.n	800a3c2 <__sfputc_r+0x16>
 800a3be:	290a      	cmp	r1, #10
 800a3c0:	d102      	bne.n	800a3c8 <__sfputc_r+0x1c>
 800a3c2:	bc10      	pop	{r4}
 800a3c4:	f000 b94a 	b.w	800a65c <__swbuf_r>
 800a3c8:	6813      	ldr	r3, [r2, #0]
 800a3ca:	1c58      	adds	r0, r3, #1
 800a3cc:	6010      	str	r0, [r2, #0]
 800a3ce:	7019      	strb	r1, [r3, #0]
 800a3d0:	4608      	mov	r0, r1
 800a3d2:	bc10      	pop	{r4}
 800a3d4:	4770      	bx	lr

0800a3d6 <__sfputs_r>:
 800a3d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a3d8:	4606      	mov	r6, r0
 800a3da:	460f      	mov	r7, r1
 800a3dc:	4614      	mov	r4, r2
 800a3de:	18d5      	adds	r5, r2, r3
 800a3e0:	42ac      	cmp	r4, r5
 800a3e2:	d101      	bne.n	800a3e8 <__sfputs_r+0x12>
 800a3e4:	2000      	movs	r0, #0
 800a3e6:	e007      	b.n	800a3f8 <__sfputs_r+0x22>
 800a3e8:	463a      	mov	r2, r7
 800a3ea:	4630      	mov	r0, r6
 800a3ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a3f0:	f7ff ffdc 	bl	800a3ac <__sfputc_r>
 800a3f4:	1c43      	adds	r3, r0, #1
 800a3f6:	d1f3      	bne.n	800a3e0 <__sfputs_r+0xa>
 800a3f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a3fc <_vfiprintf_r>:
 800a3fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a400:	460d      	mov	r5, r1
 800a402:	4614      	mov	r4, r2
 800a404:	4698      	mov	r8, r3
 800a406:	4606      	mov	r6, r0
 800a408:	b09d      	sub	sp, #116	; 0x74
 800a40a:	b118      	cbz	r0, 800a414 <_vfiprintf_r+0x18>
 800a40c:	6983      	ldr	r3, [r0, #24]
 800a40e:	b90b      	cbnz	r3, 800a414 <_vfiprintf_r+0x18>
 800a410:	f000 fb14 	bl	800aa3c <__sinit>
 800a414:	4b89      	ldr	r3, [pc, #548]	; (800a63c <_vfiprintf_r+0x240>)
 800a416:	429d      	cmp	r5, r3
 800a418:	d11b      	bne.n	800a452 <_vfiprintf_r+0x56>
 800a41a:	6875      	ldr	r5, [r6, #4]
 800a41c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a41e:	07d9      	lsls	r1, r3, #31
 800a420:	d405      	bmi.n	800a42e <_vfiprintf_r+0x32>
 800a422:	89ab      	ldrh	r3, [r5, #12]
 800a424:	059a      	lsls	r2, r3, #22
 800a426:	d402      	bmi.n	800a42e <_vfiprintf_r+0x32>
 800a428:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a42a:	f000 fba5 	bl	800ab78 <__retarget_lock_acquire_recursive>
 800a42e:	89ab      	ldrh	r3, [r5, #12]
 800a430:	071b      	lsls	r3, r3, #28
 800a432:	d501      	bpl.n	800a438 <_vfiprintf_r+0x3c>
 800a434:	692b      	ldr	r3, [r5, #16]
 800a436:	b9eb      	cbnz	r3, 800a474 <_vfiprintf_r+0x78>
 800a438:	4629      	mov	r1, r5
 800a43a:	4630      	mov	r0, r6
 800a43c:	f000 f96e 	bl	800a71c <__swsetup_r>
 800a440:	b1c0      	cbz	r0, 800a474 <_vfiprintf_r+0x78>
 800a442:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a444:	07dc      	lsls	r4, r3, #31
 800a446:	d50e      	bpl.n	800a466 <_vfiprintf_r+0x6a>
 800a448:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a44c:	b01d      	add	sp, #116	; 0x74
 800a44e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a452:	4b7b      	ldr	r3, [pc, #492]	; (800a640 <_vfiprintf_r+0x244>)
 800a454:	429d      	cmp	r5, r3
 800a456:	d101      	bne.n	800a45c <_vfiprintf_r+0x60>
 800a458:	68b5      	ldr	r5, [r6, #8]
 800a45a:	e7df      	b.n	800a41c <_vfiprintf_r+0x20>
 800a45c:	4b79      	ldr	r3, [pc, #484]	; (800a644 <_vfiprintf_r+0x248>)
 800a45e:	429d      	cmp	r5, r3
 800a460:	bf08      	it	eq
 800a462:	68f5      	ldreq	r5, [r6, #12]
 800a464:	e7da      	b.n	800a41c <_vfiprintf_r+0x20>
 800a466:	89ab      	ldrh	r3, [r5, #12]
 800a468:	0598      	lsls	r0, r3, #22
 800a46a:	d4ed      	bmi.n	800a448 <_vfiprintf_r+0x4c>
 800a46c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a46e:	f000 fb84 	bl	800ab7a <__retarget_lock_release_recursive>
 800a472:	e7e9      	b.n	800a448 <_vfiprintf_r+0x4c>
 800a474:	2300      	movs	r3, #0
 800a476:	9309      	str	r3, [sp, #36]	; 0x24
 800a478:	2320      	movs	r3, #32
 800a47a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a47e:	2330      	movs	r3, #48	; 0x30
 800a480:	f04f 0901 	mov.w	r9, #1
 800a484:	f8cd 800c 	str.w	r8, [sp, #12]
 800a488:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800a648 <_vfiprintf_r+0x24c>
 800a48c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a490:	4623      	mov	r3, r4
 800a492:	469a      	mov	sl, r3
 800a494:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a498:	b10a      	cbz	r2, 800a49e <_vfiprintf_r+0xa2>
 800a49a:	2a25      	cmp	r2, #37	; 0x25
 800a49c:	d1f9      	bne.n	800a492 <_vfiprintf_r+0x96>
 800a49e:	ebba 0b04 	subs.w	fp, sl, r4
 800a4a2:	d00b      	beq.n	800a4bc <_vfiprintf_r+0xc0>
 800a4a4:	465b      	mov	r3, fp
 800a4a6:	4622      	mov	r2, r4
 800a4a8:	4629      	mov	r1, r5
 800a4aa:	4630      	mov	r0, r6
 800a4ac:	f7ff ff93 	bl	800a3d6 <__sfputs_r>
 800a4b0:	3001      	adds	r0, #1
 800a4b2:	f000 80aa 	beq.w	800a60a <_vfiprintf_r+0x20e>
 800a4b6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a4b8:	445a      	add	r2, fp
 800a4ba:	9209      	str	r2, [sp, #36]	; 0x24
 800a4bc:	f89a 3000 	ldrb.w	r3, [sl]
 800a4c0:	2b00      	cmp	r3, #0
 800a4c2:	f000 80a2 	beq.w	800a60a <_vfiprintf_r+0x20e>
 800a4c6:	2300      	movs	r3, #0
 800a4c8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a4cc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a4d0:	f10a 0a01 	add.w	sl, sl, #1
 800a4d4:	9304      	str	r3, [sp, #16]
 800a4d6:	9307      	str	r3, [sp, #28]
 800a4d8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a4dc:	931a      	str	r3, [sp, #104]	; 0x68
 800a4de:	4654      	mov	r4, sl
 800a4e0:	2205      	movs	r2, #5
 800a4e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a4e6:	4858      	ldr	r0, [pc, #352]	; (800a648 <_vfiprintf_r+0x24c>)
 800a4e8:	f7ff f914 	bl	8009714 <memchr>
 800a4ec:	9a04      	ldr	r2, [sp, #16]
 800a4ee:	b9d8      	cbnz	r0, 800a528 <_vfiprintf_r+0x12c>
 800a4f0:	06d1      	lsls	r1, r2, #27
 800a4f2:	bf44      	itt	mi
 800a4f4:	2320      	movmi	r3, #32
 800a4f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a4fa:	0713      	lsls	r3, r2, #28
 800a4fc:	bf44      	itt	mi
 800a4fe:	232b      	movmi	r3, #43	; 0x2b
 800a500:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a504:	f89a 3000 	ldrb.w	r3, [sl]
 800a508:	2b2a      	cmp	r3, #42	; 0x2a
 800a50a:	d015      	beq.n	800a538 <_vfiprintf_r+0x13c>
 800a50c:	4654      	mov	r4, sl
 800a50e:	2000      	movs	r0, #0
 800a510:	f04f 0c0a 	mov.w	ip, #10
 800a514:	9a07      	ldr	r2, [sp, #28]
 800a516:	4621      	mov	r1, r4
 800a518:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a51c:	3b30      	subs	r3, #48	; 0x30
 800a51e:	2b09      	cmp	r3, #9
 800a520:	d94e      	bls.n	800a5c0 <_vfiprintf_r+0x1c4>
 800a522:	b1b0      	cbz	r0, 800a552 <_vfiprintf_r+0x156>
 800a524:	9207      	str	r2, [sp, #28]
 800a526:	e014      	b.n	800a552 <_vfiprintf_r+0x156>
 800a528:	eba0 0308 	sub.w	r3, r0, r8
 800a52c:	fa09 f303 	lsl.w	r3, r9, r3
 800a530:	4313      	orrs	r3, r2
 800a532:	46a2      	mov	sl, r4
 800a534:	9304      	str	r3, [sp, #16]
 800a536:	e7d2      	b.n	800a4de <_vfiprintf_r+0xe2>
 800a538:	9b03      	ldr	r3, [sp, #12]
 800a53a:	1d19      	adds	r1, r3, #4
 800a53c:	681b      	ldr	r3, [r3, #0]
 800a53e:	9103      	str	r1, [sp, #12]
 800a540:	2b00      	cmp	r3, #0
 800a542:	bfbb      	ittet	lt
 800a544:	425b      	neglt	r3, r3
 800a546:	f042 0202 	orrlt.w	r2, r2, #2
 800a54a:	9307      	strge	r3, [sp, #28]
 800a54c:	9307      	strlt	r3, [sp, #28]
 800a54e:	bfb8      	it	lt
 800a550:	9204      	strlt	r2, [sp, #16]
 800a552:	7823      	ldrb	r3, [r4, #0]
 800a554:	2b2e      	cmp	r3, #46	; 0x2e
 800a556:	d10c      	bne.n	800a572 <_vfiprintf_r+0x176>
 800a558:	7863      	ldrb	r3, [r4, #1]
 800a55a:	2b2a      	cmp	r3, #42	; 0x2a
 800a55c:	d135      	bne.n	800a5ca <_vfiprintf_r+0x1ce>
 800a55e:	9b03      	ldr	r3, [sp, #12]
 800a560:	3402      	adds	r4, #2
 800a562:	1d1a      	adds	r2, r3, #4
 800a564:	681b      	ldr	r3, [r3, #0]
 800a566:	9203      	str	r2, [sp, #12]
 800a568:	2b00      	cmp	r3, #0
 800a56a:	bfb8      	it	lt
 800a56c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800a570:	9305      	str	r3, [sp, #20]
 800a572:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a658 <_vfiprintf_r+0x25c>
 800a576:	2203      	movs	r2, #3
 800a578:	4650      	mov	r0, sl
 800a57a:	7821      	ldrb	r1, [r4, #0]
 800a57c:	f7ff f8ca 	bl	8009714 <memchr>
 800a580:	b140      	cbz	r0, 800a594 <_vfiprintf_r+0x198>
 800a582:	2340      	movs	r3, #64	; 0x40
 800a584:	eba0 000a 	sub.w	r0, r0, sl
 800a588:	fa03 f000 	lsl.w	r0, r3, r0
 800a58c:	9b04      	ldr	r3, [sp, #16]
 800a58e:	3401      	adds	r4, #1
 800a590:	4303      	orrs	r3, r0
 800a592:	9304      	str	r3, [sp, #16]
 800a594:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a598:	2206      	movs	r2, #6
 800a59a:	482c      	ldr	r0, [pc, #176]	; (800a64c <_vfiprintf_r+0x250>)
 800a59c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a5a0:	f7ff f8b8 	bl	8009714 <memchr>
 800a5a4:	2800      	cmp	r0, #0
 800a5a6:	d03f      	beq.n	800a628 <_vfiprintf_r+0x22c>
 800a5a8:	4b29      	ldr	r3, [pc, #164]	; (800a650 <_vfiprintf_r+0x254>)
 800a5aa:	bb1b      	cbnz	r3, 800a5f4 <_vfiprintf_r+0x1f8>
 800a5ac:	9b03      	ldr	r3, [sp, #12]
 800a5ae:	3307      	adds	r3, #7
 800a5b0:	f023 0307 	bic.w	r3, r3, #7
 800a5b4:	3308      	adds	r3, #8
 800a5b6:	9303      	str	r3, [sp, #12]
 800a5b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a5ba:	443b      	add	r3, r7
 800a5bc:	9309      	str	r3, [sp, #36]	; 0x24
 800a5be:	e767      	b.n	800a490 <_vfiprintf_r+0x94>
 800a5c0:	460c      	mov	r4, r1
 800a5c2:	2001      	movs	r0, #1
 800a5c4:	fb0c 3202 	mla	r2, ip, r2, r3
 800a5c8:	e7a5      	b.n	800a516 <_vfiprintf_r+0x11a>
 800a5ca:	2300      	movs	r3, #0
 800a5cc:	f04f 0c0a 	mov.w	ip, #10
 800a5d0:	4619      	mov	r1, r3
 800a5d2:	3401      	adds	r4, #1
 800a5d4:	9305      	str	r3, [sp, #20]
 800a5d6:	4620      	mov	r0, r4
 800a5d8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a5dc:	3a30      	subs	r2, #48	; 0x30
 800a5de:	2a09      	cmp	r2, #9
 800a5e0:	d903      	bls.n	800a5ea <_vfiprintf_r+0x1ee>
 800a5e2:	2b00      	cmp	r3, #0
 800a5e4:	d0c5      	beq.n	800a572 <_vfiprintf_r+0x176>
 800a5e6:	9105      	str	r1, [sp, #20]
 800a5e8:	e7c3      	b.n	800a572 <_vfiprintf_r+0x176>
 800a5ea:	4604      	mov	r4, r0
 800a5ec:	2301      	movs	r3, #1
 800a5ee:	fb0c 2101 	mla	r1, ip, r1, r2
 800a5f2:	e7f0      	b.n	800a5d6 <_vfiprintf_r+0x1da>
 800a5f4:	ab03      	add	r3, sp, #12
 800a5f6:	9300      	str	r3, [sp, #0]
 800a5f8:	462a      	mov	r2, r5
 800a5fa:	4630      	mov	r0, r6
 800a5fc:	4b15      	ldr	r3, [pc, #84]	; (800a654 <_vfiprintf_r+0x258>)
 800a5fe:	a904      	add	r1, sp, #16
 800a600:	f7fd fe1c 	bl	800823c <_printf_float>
 800a604:	4607      	mov	r7, r0
 800a606:	1c78      	adds	r0, r7, #1
 800a608:	d1d6      	bne.n	800a5b8 <_vfiprintf_r+0x1bc>
 800a60a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a60c:	07d9      	lsls	r1, r3, #31
 800a60e:	d405      	bmi.n	800a61c <_vfiprintf_r+0x220>
 800a610:	89ab      	ldrh	r3, [r5, #12]
 800a612:	059a      	lsls	r2, r3, #22
 800a614:	d402      	bmi.n	800a61c <_vfiprintf_r+0x220>
 800a616:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a618:	f000 faaf 	bl	800ab7a <__retarget_lock_release_recursive>
 800a61c:	89ab      	ldrh	r3, [r5, #12]
 800a61e:	065b      	lsls	r3, r3, #25
 800a620:	f53f af12 	bmi.w	800a448 <_vfiprintf_r+0x4c>
 800a624:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a626:	e711      	b.n	800a44c <_vfiprintf_r+0x50>
 800a628:	ab03      	add	r3, sp, #12
 800a62a:	9300      	str	r3, [sp, #0]
 800a62c:	462a      	mov	r2, r5
 800a62e:	4630      	mov	r0, r6
 800a630:	4b08      	ldr	r3, [pc, #32]	; (800a654 <_vfiprintf_r+0x258>)
 800a632:	a904      	add	r1, sp, #16
 800a634:	f7fe f89e 	bl	8008774 <_printf_i>
 800a638:	e7e4      	b.n	800a604 <_vfiprintf_r+0x208>
 800a63a:	bf00      	nop
 800a63c:	0800c834 	.word	0x0800c834
 800a640:	0800c854 	.word	0x0800c854
 800a644:	0800c814 	.word	0x0800c814
 800a648:	0800c6bc 	.word	0x0800c6bc
 800a64c:	0800c6c6 	.word	0x0800c6c6
 800a650:	0800823d 	.word	0x0800823d
 800a654:	0800a3d7 	.word	0x0800a3d7
 800a658:	0800c6c2 	.word	0x0800c6c2

0800a65c <__swbuf_r>:
 800a65c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a65e:	460e      	mov	r6, r1
 800a660:	4614      	mov	r4, r2
 800a662:	4605      	mov	r5, r0
 800a664:	b118      	cbz	r0, 800a66e <__swbuf_r+0x12>
 800a666:	6983      	ldr	r3, [r0, #24]
 800a668:	b90b      	cbnz	r3, 800a66e <__swbuf_r+0x12>
 800a66a:	f000 f9e7 	bl	800aa3c <__sinit>
 800a66e:	4b21      	ldr	r3, [pc, #132]	; (800a6f4 <__swbuf_r+0x98>)
 800a670:	429c      	cmp	r4, r3
 800a672:	d12b      	bne.n	800a6cc <__swbuf_r+0x70>
 800a674:	686c      	ldr	r4, [r5, #4]
 800a676:	69a3      	ldr	r3, [r4, #24]
 800a678:	60a3      	str	r3, [r4, #8]
 800a67a:	89a3      	ldrh	r3, [r4, #12]
 800a67c:	071a      	lsls	r2, r3, #28
 800a67e:	d52f      	bpl.n	800a6e0 <__swbuf_r+0x84>
 800a680:	6923      	ldr	r3, [r4, #16]
 800a682:	b36b      	cbz	r3, 800a6e0 <__swbuf_r+0x84>
 800a684:	6923      	ldr	r3, [r4, #16]
 800a686:	6820      	ldr	r0, [r4, #0]
 800a688:	b2f6      	uxtb	r6, r6
 800a68a:	1ac0      	subs	r0, r0, r3
 800a68c:	6963      	ldr	r3, [r4, #20]
 800a68e:	4637      	mov	r7, r6
 800a690:	4283      	cmp	r3, r0
 800a692:	dc04      	bgt.n	800a69e <__swbuf_r+0x42>
 800a694:	4621      	mov	r1, r4
 800a696:	4628      	mov	r0, r5
 800a698:	f000 f93c 	bl	800a914 <_fflush_r>
 800a69c:	bb30      	cbnz	r0, 800a6ec <__swbuf_r+0x90>
 800a69e:	68a3      	ldr	r3, [r4, #8]
 800a6a0:	3001      	adds	r0, #1
 800a6a2:	3b01      	subs	r3, #1
 800a6a4:	60a3      	str	r3, [r4, #8]
 800a6a6:	6823      	ldr	r3, [r4, #0]
 800a6a8:	1c5a      	adds	r2, r3, #1
 800a6aa:	6022      	str	r2, [r4, #0]
 800a6ac:	701e      	strb	r6, [r3, #0]
 800a6ae:	6963      	ldr	r3, [r4, #20]
 800a6b0:	4283      	cmp	r3, r0
 800a6b2:	d004      	beq.n	800a6be <__swbuf_r+0x62>
 800a6b4:	89a3      	ldrh	r3, [r4, #12]
 800a6b6:	07db      	lsls	r3, r3, #31
 800a6b8:	d506      	bpl.n	800a6c8 <__swbuf_r+0x6c>
 800a6ba:	2e0a      	cmp	r6, #10
 800a6bc:	d104      	bne.n	800a6c8 <__swbuf_r+0x6c>
 800a6be:	4621      	mov	r1, r4
 800a6c0:	4628      	mov	r0, r5
 800a6c2:	f000 f927 	bl	800a914 <_fflush_r>
 800a6c6:	b988      	cbnz	r0, 800a6ec <__swbuf_r+0x90>
 800a6c8:	4638      	mov	r0, r7
 800a6ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a6cc:	4b0a      	ldr	r3, [pc, #40]	; (800a6f8 <__swbuf_r+0x9c>)
 800a6ce:	429c      	cmp	r4, r3
 800a6d0:	d101      	bne.n	800a6d6 <__swbuf_r+0x7a>
 800a6d2:	68ac      	ldr	r4, [r5, #8]
 800a6d4:	e7cf      	b.n	800a676 <__swbuf_r+0x1a>
 800a6d6:	4b09      	ldr	r3, [pc, #36]	; (800a6fc <__swbuf_r+0xa0>)
 800a6d8:	429c      	cmp	r4, r3
 800a6da:	bf08      	it	eq
 800a6dc:	68ec      	ldreq	r4, [r5, #12]
 800a6de:	e7ca      	b.n	800a676 <__swbuf_r+0x1a>
 800a6e0:	4621      	mov	r1, r4
 800a6e2:	4628      	mov	r0, r5
 800a6e4:	f000 f81a 	bl	800a71c <__swsetup_r>
 800a6e8:	2800      	cmp	r0, #0
 800a6ea:	d0cb      	beq.n	800a684 <__swbuf_r+0x28>
 800a6ec:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800a6f0:	e7ea      	b.n	800a6c8 <__swbuf_r+0x6c>
 800a6f2:	bf00      	nop
 800a6f4:	0800c834 	.word	0x0800c834
 800a6f8:	0800c854 	.word	0x0800c854
 800a6fc:	0800c814 	.word	0x0800c814

0800a700 <__ascii_wctomb>:
 800a700:	4603      	mov	r3, r0
 800a702:	4608      	mov	r0, r1
 800a704:	b141      	cbz	r1, 800a718 <__ascii_wctomb+0x18>
 800a706:	2aff      	cmp	r2, #255	; 0xff
 800a708:	d904      	bls.n	800a714 <__ascii_wctomb+0x14>
 800a70a:	228a      	movs	r2, #138	; 0x8a
 800a70c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a710:	601a      	str	r2, [r3, #0]
 800a712:	4770      	bx	lr
 800a714:	2001      	movs	r0, #1
 800a716:	700a      	strb	r2, [r1, #0]
 800a718:	4770      	bx	lr
	...

0800a71c <__swsetup_r>:
 800a71c:	4b32      	ldr	r3, [pc, #200]	; (800a7e8 <__swsetup_r+0xcc>)
 800a71e:	b570      	push	{r4, r5, r6, lr}
 800a720:	681d      	ldr	r5, [r3, #0]
 800a722:	4606      	mov	r6, r0
 800a724:	460c      	mov	r4, r1
 800a726:	b125      	cbz	r5, 800a732 <__swsetup_r+0x16>
 800a728:	69ab      	ldr	r3, [r5, #24]
 800a72a:	b913      	cbnz	r3, 800a732 <__swsetup_r+0x16>
 800a72c:	4628      	mov	r0, r5
 800a72e:	f000 f985 	bl	800aa3c <__sinit>
 800a732:	4b2e      	ldr	r3, [pc, #184]	; (800a7ec <__swsetup_r+0xd0>)
 800a734:	429c      	cmp	r4, r3
 800a736:	d10f      	bne.n	800a758 <__swsetup_r+0x3c>
 800a738:	686c      	ldr	r4, [r5, #4]
 800a73a:	89a3      	ldrh	r3, [r4, #12]
 800a73c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a740:	0719      	lsls	r1, r3, #28
 800a742:	d42c      	bmi.n	800a79e <__swsetup_r+0x82>
 800a744:	06dd      	lsls	r5, r3, #27
 800a746:	d411      	bmi.n	800a76c <__swsetup_r+0x50>
 800a748:	2309      	movs	r3, #9
 800a74a:	6033      	str	r3, [r6, #0]
 800a74c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a750:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a754:	81a3      	strh	r3, [r4, #12]
 800a756:	e03e      	b.n	800a7d6 <__swsetup_r+0xba>
 800a758:	4b25      	ldr	r3, [pc, #148]	; (800a7f0 <__swsetup_r+0xd4>)
 800a75a:	429c      	cmp	r4, r3
 800a75c:	d101      	bne.n	800a762 <__swsetup_r+0x46>
 800a75e:	68ac      	ldr	r4, [r5, #8]
 800a760:	e7eb      	b.n	800a73a <__swsetup_r+0x1e>
 800a762:	4b24      	ldr	r3, [pc, #144]	; (800a7f4 <__swsetup_r+0xd8>)
 800a764:	429c      	cmp	r4, r3
 800a766:	bf08      	it	eq
 800a768:	68ec      	ldreq	r4, [r5, #12]
 800a76a:	e7e6      	b.n	800a73a <__swsetup_r+0x1e>
 800a76c:	0758      	lsls	r0, r3, #29
 800a76e:	d512      	bpl.n	800a796 <__swsetup_r+0x7a>
 800a770:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a772:	b141      	cbz	r1, 800a786 <__swsetup_r+0x6a>
 800a774:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a778:	4299      	cmp	r1, r3
 800a77a:	d002      	beq.n	800a782 <__swsetup_r+0x66>
 800a77c:	4630      	mov	r0, r6
 800a77e:	f7ff fb75 	bl	8009e6c <_free_r>
 800a782:	2300      	movs	r3, #0
 800a784:	6363      	str	r3, [r4, #52]	; 0x34
 800a786:	89a3      	ldrh	r3, [r4, #12]
 800a788:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a78c:	81a3      	strh	r3, [r4, #12]
 800a78e:	2300      	movs	r3, #0
 800a790:	6063      	str	r3, [r4, #4]
 800a792:	6923      	ldr	r3, [r4, #16]
 800a794:	6023      	str	r3, [r4, #0]
 800a796:	89a3      	ldrh	r3, [r4, #12]
 800a798:	f043 0308 	orr.w	r3, r3, #8
 800a79c:	81a3      	strh	r3, [r4, #12]
 800a79e:	6923      	ldr	r3, [r4, #16]
 800a7a0:	b94b      	cbnz	r3, 800a7b6 <__swsetup_r+0x9a>
 800a7a2:	89a3      	ldrh	r3, [r4, #12]
 800a7a4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a7a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a7ac:	d003      	beq.n	800a7b6 <__swsetup_r+0x9a>
 800a7ae:	4621      	mov	r1, r4
 800a7b0:	4630      	mov	r0, r6
 800a7b2:	f000 fa07 	bl	800abc4 <__smakebuf_r>
 800a7b6:	89a0      	ldrh	r0, [r4, #12]
 800a7b8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a7bc:	f010 0301 	ands.w	r3, r0, #1
 800a7c0:	d00a      	beq.n	800a7d8 <__swsetup_r+0xbc>
 800a7c2:	2300      	movs	r3, #0
 800a7c4:	60a3      	str	r3, [r4, #8]
 800a7c6:	6963      	ldr	r3, [r4, #20]
 800a7c8:	425b      	negs	r3, r3
 800a7ca:	61a3      	str	r3, [r4, #24]
 800a7cc:	6923      	ldr	r3, [r4, #16]
 800a7ce:	b943      	cbnz	r3, 800a7e2 <__swsetup_r+0xc6>
 800a7d0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a7d4:	d1ba      	bne.n	800a74c <__swsetup_r+0x30>
 800a7d6:	bd70      	pop	{r4, r5, r6, pc}
 800a7d8:	0781      	lsls	r1, r0, #30
 800a7da:	bf58      	it	pl
 800a7dc:	6963      	ldrpl	r3, [r4, #20]
 800a7de:	60a3      	str	r3, [r4, #8]
 800a7e0:	e7f4      	b.n	800a7cc <__swsetup_r+0xb0>
 800a7e2:	2000      	movs	r0, #0
 800a7e4:	e7f7      	b.n	800a7d6 <__swsetup_r+0xba>
 800a7e6:	bf00      	nop
 800a7e8:	2000001c 	.word	0x2000001c
 800a7ec:	0800c834 	.word	0x0800c834
 800a7f0:	0800c854 	.word	0x0800c854
 800a7f4:	0800c814 	.word	0x0800c814

0800a7f8 <abort>:
 800a7f8:	2006      	movs	r0, #6
 800a7fa:	b508      	push	{r3, lr}
 800a7fc:	f000 fa52 	bl	800aca4 <raise>
 800a800:	2001      	movs	r0, #1
 800a802:	f7f9 f956 	bl	8003ab2 <_exit>
	...

0800a808 <__sflush_r>:
 800a808:	898a      	ldrh	r2, [r1, #12]
 800a80a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a80e:	4605      	mov	r5, r0
 800a810:	0710      	lsls	r0, r2, #28
 800a812:	460c      	mov	r4, r1
 800a814:	d458      	bmi.n	800a8c8 <__sflush_r+0xc0>
 800a816:	684b      	ldr	r3, [r1, #4]
 800a818:	2b00      	cmp	r3, #0
 800a81a:	dc05      	bgt.n	800a828 <__sflush_r+0x20>
 800a81c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a81e:	2b00      	cmp	r3, #0
 800a820:	dc02      	bgt.n	800a828 <__sflush_r+0x20>
 800a822:	2000      	movs	r0, #0
 800a824:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a828:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a82a:	2e00      	cmp	r6, #0
 800a82c:	d0f9      	beq.n	800a822 <__sflush_r+0x1a>
 800a82e:	2300      	movs	r3, #0
 800a830:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a834:	682f      	ldr	r7, [r5, #0]
 800a836:	602b      	str	r3, [r5, #0]
 800a838:	d032      	beq.n	800a8a0 <__sflush_r+0x98>
 800a83a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a83c:	89a3      	ldrh	r3, [r4, #12]
 800a83e:	075a      	lsls	r2, r3, #29
 800a840:	d505      	bpl.n	800a84e <__sflush_r+0x46>
 800a842:	6863      	ldr	r3, [r4, #4]
 800a844:	1ac0      	subs	r0, r0, r3
 800a846:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a848:	b10b      	cbz	r3, 800a84e <__sflush_r+0x46>
 800a84a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a84c:	1ac0      	subs	r0, r0, r3
 800a84e:	2300      	movs	r3, #0
 800a850:	4602      	mov	r2, r0
 800a852:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a854:	4628      	mov	r0, r5
 800a856:	6a21      	ldr	r1, [r4, #32]
 800a858:	47b0      	blx	r6
 800a85a:	1c43      	adds	r3, r0, #1
 800a85c:	89a3      	ldrh	r3, [r4, #12]
 800a85e:	d106      	bne.n	800a86e <__sflush_r+0x66>
 800a860:	6829      	ldr	r1, [r5, #0]
 800a862:	291d      	cmp	r1, #29
 800a864:	d82c      	bhi.n	800a8c0 <__sflush_r+0xb8>
 800a866:	4a2a      	ldr	r2, [pc, #168]	; (800a910 <__sflush_r+0x108>)
 800a868:	40ca      	lsrs	r2, r1
 800a86a:	07d6      	lsls	r6, r2, #31
 800a86c:	d528      	bpl.n	800a8c0 <__sflush_r+0xb8>
 800a86e:	2200      	movs	r2, #0
 800a870:	6062      	str	r2, [r4, #4]
 800a872:	6922      	ldr	r2, [r4, #16]
 800a874:	04d9      	lsls	r1, r3, #19
 800a876:	6022      	str	r2, [r4, #0]
 800a878:	d504      	bpl.n	800a884 <__sflush_r+0x7c>
 800a87a:	1c42      	adds	r2, r0, #1
 800a87c:	d101      	bne.n	800a882 <__sflush_r+0x7a>
 800a87e:	682b      	ldr	r3, [r5, #0]
 800a880:	b903      	cbnz	r3, 800a884 <__sflush_r+0x7c>
 800a882:	6560      	str	r0, [r4, #84]	; 0x54
 800a884:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a886:	602f      	str	r7, [r5, #0]
 800a888:	2900      	cmp	r1, #0
 800a88a:	d0ca      	beq.n	800a822 <__sflush_r+0x1a>
 800a88c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a890:	4299      	cmp	r1, r3
 800a892:	d002      	beq.n	800a89a <__sflush_r+0x92>
 800a894:	4628      	mov	r0, r5
 800a896:	f7ff fae9 	bl	8009e6c <_free_r>
 800a89a:	2000      	movs	r0, #0
 800a89c:	6360      	str	r0, [r4, #52]	; 0x34
 800a89e:	e7c1      	b.n	800a824 <__sflush_r+0x1c>
 800a8a0:	6a21      	ldr	r1, [r4, #32]
 800a8a2:	2301      	movs	r3, #1
 800a8a4:	4628      	mov	r0, r5
 800a8a6:	47b0      	blx	r6
 800a8a8:	1c41      	adds	r1, r0, #1
 800a8aa:	d1c7      	bne.n	800a83c <__sflush_r+0x34>
 800a8ac:	682b      	ldr	r3, [r5, #0]
 800a8ae:	2b00      	cmp	r3, #0
 800a8b0:	d0c4      	beq.n	800a83c <__sflush_r+0x34>
 800a8b2:	2b1d      	cmp	r3, #29
 800a8b4:	d001      	beq.n	800a8ba <__sflush_r+0xb2>
 800a8b6:	2b16      	cmp	r3, #22
 800a8b8:	d101      	bne.n	800a8be <__sflush_r+0xb6>
 800a8ba:	602f      	str	r7, [r5, #0]
 800a8bc:	e7b1      	b.n	800a822 <__sflush_r+0x1a>
 800a8be:	89a3      	ldrh	r3, [r4, #12]
 800a8c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a8c4:	81a3      	strh	r3, [r4, #12]
 800a8c6:	e7ad      	b.n	800a824 <__sflush_r+0x1c>
 800a8c8:	690f      	ldr	r7, [r1, #16]
 800a8ca:	2f00      	cmp	r7, #0
 800a8cc:	d0a9      	beq.n	800a822 <__sflush_r+0x1a>
 800a8ce:	0793      	lsls	r3, r2, #30
 800a8d0:	bf18      	it	ne
 800a8d2:	2300      	movne	r3, #0
 800a8d4:	680e      	ldr	r6, [r1, #0]
 800a8d6:	bf08      	it	eq
 800a8d8:	694b      	ldreq	r3, [r1, #20]
 800a8da:	eba6 0807 	sub.w	r8, r6, r7
 800a8de:	600f      	str	r7, [r1, #0]
 800a8e0:	608b      	str	r3, [r1, #8]
 800a8e2:	f1b8 0f00 	cmp.w	r8, #0
 800a8e6:	dd9c      	ble.n	800a822 <__sflush_r+0x1a>
 800a8e8:	4643      	mov	r3, r8
 800a8ea:	463a      	mov	r2, r7
 800a8ec:	4628      	mov	r0, r5
 800a8ee:	6a21      	ldr	r1, [r4, #32]
 800a8f0:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a8f2:	47b0      	blx	r6
 800a8f4:	2800      	cmp	r0, #0
 800a8f6:	dc06      	bgt.n	800a906 <__sflush_r+0xfe>
 800a8f8:	89a3      	ldrh	r3, [r4, #12]
 800a8fa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a8fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a902:	81a3      	strh	r3, [r4, #12]
 800a904:	e78e      	b.n	800a824 <__sflush_r+0x1c>
 800a906:	4407      	add	r7, r0
 800a908:	eba8 0800 	sub.w	r8, r8, r0
 800a90c:	e7e9      	b.n	800a8e2 <__sflush_r+0xda>
 800a90e:	bf00      	nop
 800a910:	20400001 	.word	0x20400001

0800a914 <_fflush_r>:
 800a914:	b538      	push	{r3, r4, r5, lr}
 800a916:	690b      	ldr	r3, [r1, #16]
 800a918:	4605      	mov	r5, r0
 800a91a:	460c      	mov	r4, r1
 800a91c:	b913      	cbnz	r3, 800a924 <_fflush_r+0x10>
 800a91e:	2500      	movs	r5, #0
 800a920:	4628      	mov	r0, r5
 800a922:	bd38      	pop	{r3, r4, r5, pc}
 800a924:	b118      	cbz	r0, 800a92e <_fflush_r+0x1a>
 800a926:	6983      	ldr	r3, [r0, #24]
 800a928:	b90b      	cbnz	r3, 800a92e <_fflush_r+0x1a>
 800a92a:	f000 f887 	bl	800aa3c <__sinit>
 800a92e:	4b14      	ldr	r3, [pc, #80]	; (800a980 <_fflush_r+0x6c>)
 800a930:	429c      	cmp	r4, r3
 800a932:	d11b      	bne.n	800a96c <_fflush_r+0x58>
 800a934:	686c      	ldr	r4, [r5, #4]
 800a936:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a93a:	2b00      	cmp	r3, #0
 800a93c:	d0ef      	beq.n	800a91e <_fflush_r+0xa>
 800a93e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a940:	07d0      	lsls	r0, r2, #31
 800a942:	d404      	bmi.n	800a94e <_fflush_r+0x3a>
 800a944:	0599      	lsls	r1, r3, #22
 800a946:	d402      	bmi.n	800a94e <_fflush_r+0x3a>
 800a948:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a94a:	f000 f915 	bl	800ab78 <__retarget_lock_acquire_recursive>
 800a94e:	4628      	mov	r0, r5
 800a950:	4621      	mov	r1, r4
 800a952:	f7ff ff59 	bl	800a808 <__sflush_r>
 800a956:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a958:	4605      	mov	r5, r0
 800a95a:	07da      	lsls	r2, r3, #31
 800a95c:	d4e0      	bmi.n	800a920 <_fflush_r+0xc>
 800a95e:	89a3      	ldrh	r3, [r4, #12]
 800a960:	059b      	lsls	r3, r3, #22
 800a962:	d4dd      	bmi.n	800a920 <_fflush_r+0xc>
 800a964:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a966:	f000 f908 	bl	800ab7a <__retarget_lock_release_recursive>
 800a96a:	e7d9      	b.n	800a920 <_fflush_r+0xc>
 800a96c:	4b05      	ldr	r3, [pc, #20]	; (800a984 <_fflush_r+0x70>)
 800a96e:	429c      	cmp	r4, r3
 800a970:	d101      	bne.n	800a976 <_fflush_r+0x62>
 800a972:	68ac      	ldr	r4, [r5, #8]
 800a974:	e7df      	b.n	800a936 <_fflush_r+0x22>
 800a976:	4b04      	ldr	r3, [pc, #16]	; (800a988 <_fflush_r+0x74>)
 800a978:	429c      	cmp	r4, r3
 800a97a:	bf08      	it	eq
 800a97c:	68ec      	ldreq	r4, [r5, #12]
 800a97e:	e7da      	b.n	800a936 <_fflush_r+0x22>
 800a980:	0800c834 	.word	0x0800c834
 800a984:	0800c854 	.word	0x0800c854
 800a988:	0800c814 	.word	0x0800c814

0800a98c <std>:
 800a98c:	2300      	movs	r3, #0
 800a98e:	b510      	push	{r4, lr}
 800a990:	4604      	mov	r4, r0
 800a992:	e9c0 3300 	strd	r3, r3, [r0]
 800a996:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a99a:	6083      	str	r3, [r0, #8]
 800a99c:	8181      	strh	r1, [r0, #12]
 800a99e:	6643      	str	r3, [r0, #100]	; 0x64
 800a9a0:	81c2      	strh	r2, [r0, #14]
 800a9a2:	6183      	str	r3, [r0, #24]
 800a9a4:	4619      	mov	r1, r3
 800a9a6:	2208      	movs	r2, #8
 800a9a8:	305c      	adds	r0, #92	; 0x5c
 800a9aa:	f7fd fba1 	bl	80080f0 <memset>
 800a9ae:	4b05      	ldr	r3, [pc, #20]	; (800a9c4 <std+0x38>)
 800a9b0:	6224      	str	r4, [r4, #32]
 800a9b2:	6263      	str	r3, [r4, #36]	; 0x24
 800a9b4:	4b04      	ldr	r3, [pc, #16]	; (800a9c8 <std+0x3c>)
 800a9b6:	62a3      	str	r3, [r4, #40]	; 0x28
 800a9b8:	4b04      	ldr	r3, [pc, #16]	; (800a9cc <std+0x40>)
 800a9ba:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a9bc:	4b04      	ldr	r3, [pc, #16]	; (800a9d0 <std+0x44>)
 800a9be:	6323      	str	r3, [r4, #48]	; 0x30
 800a9c0:	bd10      	pop	{r4, pc}
 800a9c2:	bf00      	nop
 800a9c4:	0800acdd 	.word	0x0800acdd
 800a9c8:	0800acff 	.word	0x0800acff
 800a9cc:	0800ad37 	.word	0x0800ad37
 800a9d0:	0800ad5b 	.word	0x0800ad5b

0800a9d4 <_cleanup_r>:
 800a9d4:	4901      	ldr	r1, [pc, #4]	; (800a9dc <_cleanup_r+0x8>)
 800a9d6:	f000 b8af 	b.w	800ab38 <_fwalk_reent>
 800a9da:	bf00      	nop
 800a9dc:	0800a915 	.word	0x0800a915

0800a9e0 <__sfmoreglue>:
 800a9e0:	b570      	push	{r4, r5, r6, lr}
 800a9e2:	2568      	movs	r5, #104	; 0x68
 800a9e4:	1e4a      	subs	r2, r1, #1
 800a9e6:	4355      	muls	r5, r2
 800a9e8:	460e      	mov	r6, r1
 800a9ea:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a9ee:	f7ff fa89 	bl	8009f04 <_malloc_r>
 800a9f2:	4604      	mov	r4, r0
 800a9f4:	b140      	cbz	r0, 800aa08 <__sfmoreglue+0x28>
 800a9f6:	2100      	movs	r1, #0
 800a9f8:	e9c0 1600 	strd	r1, r6, [r0]
 800a9fc:	300c      	adds	r0, #12
 800a9fe:	60a0      	str	r0, [r4, #8]
 800aa00:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800aa04:	f7fd fb74 	bl	80080f0 <memset>
 800aa08:	4620      	mov	r0, r4
 800aa0a:	bd70      	pop	{r4, r5, r6, pc}

0800aa0c <__sfp_lock_acquire>:
 800aa0c:	4801      	ldr	r0, [pc, #4]	; (800aa14 <__sfp_lock_acquire+0x8>)
 800aa0e:	f000 b8b3 	b.w	800ab78 <__retarget_lock_acquire_recursive>
 800aa12:	bf00      	nop
 800aa14:	20001d14 	.word	0x20001d14

0800aa18 <__sfp_lock_release>:
 800aa18:	4801      	ldr	r0, [pc, #4]	; (800aa20 <__sfp_lock_release+0x8>)
 800aa1a:	f000 b8ae 	b.w	800ab7a <__retarget_lock_release_recursive>
 800aa1e:	bf00      	nop
 800aa20:	20001d14 	.word	0x20001d14

0800aa24 <__sinit_lock_acquire>:
 800aa24:	4801      	ldr	r0, [pc, #4]	; (800aa2c <__sinit_lock_acquire+0x8>)
 800aa26:	f000 b8a7 	b.w	800ab78 <__retarget_lock_acquire_recursive>
 800aa2a:	bf00      	nop
 800aa2c:	20001d0f 	.word	0x20001d0f

0800aa30 <__sinit_lock_release>:
 800aa30:	4801      	ldr	r0, [pc, #4]	; (800aa38 <__sinit_lock_release+0x8>)
 800aa32:	f000 b8a2 	b.w	800ab7a <__retarget_lock_release_recursive>
 800aa36:	bf00      	nop
 800aa38:	20001d0f 	.word	0x20001d0f

0800aa3c <__sinit>:
 800aa3c:	b510      	push	{r4, lr}
 800aa3e:	4604      	mov	r4, r0
 800aa40:	f7ff fff0 	bl	800aa24 <__sinit_lock_acquire>
 800aa44:	69a3      	ldr	r3, [r4, #24]
 800aa46:	b11b      	cbz	r3, 800aa50 <__sinit+0x14>
 800aa48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aa4c:	f7ff bff0 	b.w	800aa30 <__sinit_lock_release>
 800aa50:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800aa54:	6523      	str	r3, [r4, #80]	; 0x50
 800aa56:	4b13      	ldr	r3, [pc, #76]	; (800aaa4 <__sinit+0x68>)
 800aa58:	4a13      	ldr	r2, [pc, #76]	; (800aaa8 <__sinit+0x6c>)
 800aa5a:	681b      	ldr	r3, [r3, #0]
 800aa5c:	62a2      	str	r2, [r4, #40]	; 0x28
 800aa5e:	42a3      	cmp	r3, r4
 800aa60:	bf08      	it	eq
 800aa62:	2301      	moveq	r3, #1
 800aa64:	4620      	mov	r0, r4
 800aa66:	bf08      	it	eq
 800aa68:	61a3      	streq	r3, [r4, #24]
 800aa6a:	f000 f81f 	bl	800aaac <__sfp>
 800aa6e:	6060      	str	r0, [r4, #4]
 800aa70:	4620      	mov	r0, r4
 800aa72:	f000 f81b 	bl	800aaac <__sfp>
 800aa76:	60a0      	str	r0, [r4, #8]
 800aa78:	4620      	mov	r0, r4
 800aa7a:	f000 f817 	bl	800aaac <__sfp>
 800aa7e:	2200      	movs	r2, #0
 800aa80:	2104      	movs	r1, #4
 800aa82:	60e0      	str	r0, [r4, #12]
 800aa84:	6860      	ldr	r0, [r4, #4]
 800aa86:	f7ff ff81 	bl	800a98c <std>
 800aa8a:	2201      	movs	r2, #1
 800aa8c:	2109      	movs	r1, #9
 800aa8e:	68a0      	ldr	r0, [r4, #8]
 800aa90:	f7ff ff7c 	bl	800a98c <std>
 800aa94:	2202      	movs	r2, #2
 800aa96:	2112      	movs	r1, #18
 800aa98:	68e0      	ldr	r0, [r4, #12]
 800aa9a:	f7ff ff77 	bl	800a98c <std>
 800aa9e:	2301      	movs	r3, #1
 800aaa0:	61a3      	str	r3, [r4, #24]
 800aaa2:	e7d1      	b.n	800aa48 <__sinit+0xc>
 800aaa4:	0800c494 	.word	0x0800c494
 800aaa8:	0800a9d5 	.word	0x0800a9d5

0800aaac <__sfp>:
 800aaac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aaae:	4607      	mov	r7, r0
 800aab0:	f7ff ffac 	bl	800aa0c <__sfp_lock_acquire>
 800aab4:	4b1e      	ldr	r3, [pc, #120]	; (800ab30 <__sfp+0x84>)
 800aab6:	681e      	ldr	r6, [r3, #0]
 800aab8:	69b3      	ldr	r3, [r6, #24]
 800aaba:	b913      	cbnz	r3, 800aac2 <__sfp+0x16>
 800aabc:	4630      	mov	r0, r6
 800aabe:	f7ff ffbd 	bl	800aa3c <__sinit>
 800aac2:	3648      	adds	r6, #72	; 0x48
 800aac4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800aac8:	3b01      	subs	r3, #1
 800aaca:	d503      	bpl.n	800aad4 <__sfp+0x28>
 800aacc:	6833      	ldr	r3, [r6, #0]
 800aace:	b30b      	cbz	r3, 800ab14 <__sfp+0x68>
 800aad0:	6836      	ldr	r6, [r6, #0]
 800aad2:	e7f7      	b.n	800aac4 <__sfp+0x18>
 800aad4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800aad8:	b9d5      	cbnz	r5, 800ab10 <__sfp+0x64>
 800aada:	4b16      	ldr	r3, [pc, #88]	; (800ab34 <__sfp+0x88>)
 800aadc:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800aae0:	60e3      	str	r3, [r4, #12]
 800aae2:	6665      	str	r5, [r4, #100]	; 0x64
 800aae4:	f000 f847 	bl	800ab76 <__retarget_lock_init_recursive>
 800aae8:	f7ff ff96 	bl	800aa18 <__sfp_lock_release>
 800aaec:	2208      	movs	r2, #8
 800aaee:	4629      	mov	r1, r5
 800aaf0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800aaf4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800aaf8:	6025      	str	r5, [r4, #0]
 800aafa:	61a5      	str	r5, [r4, #24]
 800aafc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800ab00:	f7fd faf6 	bl	80080f0 <memset>
 800ab04:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800ab08:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800ab0c:	4620      	mov	r0, r4
 800ab0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ab10:	3468      	adds	r4, #104	; 0x68
 800ab12:	e7d9      	b.n	800aac8 <__sfp+0x1c>
 800ab14:	2104      	movs	r1, #4
 800ab16:	4638      	mov	r0, r7
 800ab18:	f7ff ff62 	bl	800a9e0 <__sfmoreglue>
 800ab1c:	4604      	mov	r4, r0
 800ab1e:	6030      	str	r0, [r6, #0]
 800ab20:	2800      	cmp	r0, #0
 800ab22:	d1d5      	bne.n	800aad0 <__sfp+0x24>
 800ab24:	f7ff ff78 	bl	800aa18 <__sfp_lock_release>
 800ab28:	230c      	movs	r3, #12
 800ab2a:	603b      	str	r3, [r7, #0]
 800ab2c:	e7ee      	b.n	800ab0c <__sfp+0x60>
 800ab2e:	bf00      	nop
 800ab30:	0800c494 	.word	0x0800c494
 800ab34:	ffff0001 	.word	0xffff0001

0800ab38 <_fwalk_reent>:
 800ab38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ab3c:	4606      	mov	r6, r0
 800ab3e:	4688      	mov	r8, r1
 800ab40:	2700      	movs	r7, #0
 800ab42:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800ab46:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ab4a:	f1b9 0901 	subs.w	r9, r9, #1
 800ab4e:	d505      	bpl.n	800ab5c <_fwalk_reent+0x24>
 800ab50:	6824      	ldr	r4, [r4, #0]
 800ab52:	2c00      	cmp	r4, #0
 800ab54:	d1f7      	bne.n	800ab46 <_fwalk_reent+0xe>
 800ab56:	4638      	mov	r0, r7
 800ab58:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ab5c:	89ab      	ldrh	r3, [r5, #12]
 800ab5e:	2b01      	cmp	r3, #1
 800ab60:	d907      	bls.n	800ab72 <_fwalk_reent+0x3a>
 800ab62:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ab66:	3301      	adds	r3, #1
 800ab68:	d003      	beq.n	800ab72 <_fwalk_reent+0x3a>
 800ab6a:	4629      	mov	r1, r5
 800ab6c:	4630      	mov	r0, r6
 800ab6e:	47c0      	blx	r8
 800ab70:	4307      	orrs	r7, r0
 800ab72:	3568      	adds	r5, #104	; 0x68
 800ab74:	e7e9      	b.n	800ab4a <_fwalk_reent+0x12>

0800ab76 <__retarget_lock_init_recursive>:
 800ab76:	4770      	bx	lr

0800ab78 <__retarget_lock_acquire_recursive>:
 800ab78:	4770      	bx	lr

0800ab7a <__retarget_lock_release_recursive>:
 800ab7a:	4770      	bx	lr

0800ab7c <__swhatbuf_r>:
 800ab7c:	b570      	push	{r4, r5, r6, lr}
 800ab7e:	460e      	mov	r6, r1
 800ab80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ab84:	4614      	mov	r4, r2
 800ab86:	2900      	cmp	r1, #0
 800ab88:	461d      	mov	r5, r3
 800ab8a:	b096      	sub	sp, #88	; 0x58
 800ab8c:	da07      	bge.n	800ab9e <__swhatbuf_r+0x22>
 800ab8e:	2300      	movs	r3, #0
 800ab90:	602b      	str	r3, [r5, #0]
 800ab92:	89b3      	ldrh	r3, [r6, #12]
 800ab94:	061a      	lsls	r2, r3, #24
 800ab96:	d410      	bmi.n	800abba <__swhatbuf_r+0x3e>
 800ab98:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ab9c:	e00e      	b.n	800abbc <__swhatbuf_r+0x40>
 800ab9e:	466a      	mov	r2, sp
 800aba0:	f000 f902 	bl	800ada8 <_fstat_r>
 800aba4:	2800      	cmp	r0, #0
 800aba6:	dbf2      	blt.n	800ab8e <__swhatbuf_r+0x12>
 800aba8:	9a01      	ldr	r2, [sp, #4]
 800abaa:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800abae:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800abb2:	425a      	negs	r2, r3
 800abb4:	415a      	adcs	r2, r3
 800abb6:	602a      	str	r2, [r5, #0]
 800abb8:	e7ee      	b.n	800ab98 <__swhatbuf_r+0x1c>
 800abba:	2340      	movs	r3, #64	; 0x40
 800abbc:	2000      	movs	r0, #0
 800abbe:	6023      	str	r3, [r4, #0]
 800abc0:	b016      	add	sp, #88	; 0x58
 800abc2:	bd70      	pop	{r4, r5, r6, pc}

0800abc4 <__smakebuf_r>:
 800abc4:	898b      	ldrh	r3, [r1, #12]
 800abc6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800abc8:	079d      	lsls	r5, r3, #30
 800abca:	4606      	mov	r6, r0
 800abcc:	460c      	mov	r4, r1
 800abce:	d507      	bpl.n	800abe0 <__smakebuf_r+0x1c>
 800abd0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800abd4:	6023      	str	r3, [r4, #0]
 800abd6:	6123      	str	r3, [r4, #16]
 800abd8:	2301      	movs	r3, #1
 800abda:	6163      	str	r3, [r4, #20]
 800abdc:	b002      	add	sp, #8
 800abde:	bd70      	pop	{r4, r5, r6, pc}
 800abe0:	466a      	mov	r2, sp
 800abe2:	ab01      	add	r3, sp, #4
 800abe4:	f7ff ffca 	bl	800ab7c <__swhatbuf_r>
 800abe8:	9900      	ldr	r1, [sp, #0]
 800abea:	4605      	mov	r5, r0
 800abec:	4630      	mov	r0, r6
 800abee:	f7ff f989 	bl	8009f04 <_malloc_r>
 800abf2:	b948      	cbnz	r0, 800ac08 <__smakebuf_r+0x44>
 800abf4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800abf8:	059a      	lsls	r2, r3, #22
 800abfa:	d4ef      	bmi.n	800abdc <__smakebuf_r+0x18>
 800abfc:	f023 0303 	bic.w	r3, r3, #3
 800ac00:	f043 0302 	orr.w	r3, r3, #2
 800ac04:	81a3      	strh	r3, [r4, #12]
 800ac06:	e7e3      	b.n	800abd0 <__smakebuf_r+0xc>
 800ac08:	4b0d      	ldr	r3, [pc, #52]	; (800ac40 <__smakebuf_r+0x7c>)
 800ac0a:	62b3      	str	r3, [r6, #40]	; 0x28
 800ac0c:	89a3      	ldrh	r3, [r4, #12]
 800ac0e:	6020      	str	r0, [r4, #0]
 800ac10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ac14:	81a3      	strh	r3, [r4, #12]
 800ac16:	9b00      	ldr	r3, [sp, #0]
 800ac18:	6120      	str	r0, [r4, #16]
 800ac1a:	6163      	str	r3, [r4, #20]
 800ac1c:	9b01      	ldr	r3, [sp, #4]
 800ac1e:	b15b      	cbz	r3, 800ac38 <__smakebuf_r+0x74>
 800ac20:	4630      	mov	r0, r6
 800ac22:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ac26:	f000 f8d1 	bl	800adcc <_isatty_r>
 800ac2a:	b128      	cbz	r0, 800ac38 <__smakebuf_r+0x74>
 800ac2c:	89a3      	ldrh	r3, [r4, #12]
 800ac2e:	f023 0303 	bic.w	r3, r3, #3
 800ac32:	f043 0301 	orr.w	r3, r3, #1
 800ac36:	81a3      	strh	r3, [r4, #12]
 800ac38:	89a0      	ldrh	r0, [r4, #12]
 800ac3a:	4305      	orrs	r5, r0
 800ac3c:	81a5      	strh	r5, [r4, #12]
 800ac3e:	e7cd      	b.n	800abdc <__smakebuf_r+0x18>
 800ac40:	0800a9d5 	.word	0x0800a9d5

0800ac44 <_malloc_usable_size_r>:
 800ac44:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ac48:	1f18      	subs	r0, r3, #4
 800ac4a:	2b00      	cmp	r3, #0
 800ac4c:	bfbc      	itt	lt
 800ac4e:	580b      	ldrlt	r3, [r1, r0]
 800ac50:	18c0      	addlt	r0, r0, r3
 800ac52:	4770      	bx	lr

0800ac54 <_raise_r>:
 800ac54:	291f      	cmp	r1, #31
 800ac56:	b538      	push	{r3, r4, r5, lr}
 800ac58:	4604      	mov	r4, r0
 800ac5a:	460d      	mov	r5, r1
 800ac5c:	d904      	bls.n	800ac68 <_raise_r+0x14>
 800ac5e:	2316      	movs	r3, #22
 800ac60:	6003      	str	r3, [r0, #0]
 800ac62:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ac66:	bd38      	pop	{r3, r4, r5, pc}
 800ac68:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800ac6a:	b112      	cbz	r2, 800ac72 <_raise_r+0x1e>
 800ac6c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ac70:	b94b      	cbnz	r3, 800ac86 <_raise_r+0x32>
 800ac72:	4620      	mov	r0, r4
 800ac74:	f000 f830 	bl	800acd8 <_getpid_r>
 800ac78:	462a      	mov	r2, r5
 800ac7a:	4601      	mov	r1, r0
 800ac7c:	4620      	mov	r0, r4
 800ac7e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ac82:	f000 b817 	b.w	800acb4 <_kill_r>
 800ac86:	2b01      	cmp	r3, #1
 800ac88:	d00a      	beq.n	800aca0 <_raise_r+0x4c>
 800ac8a:	1c59      	adds	r1, r3, #1
 800ac8c:	d103      	bne.n	800ac96 <_raise_r+0x42>
 800ac8e:	2316      	movs	r3, #22
 800ac90:	6003      	str	r3, [r0, #0]
 800ac92:	2001      	movs	r0, #1
 800ac94:	e7e7      	b.n	800ac66 <_raise_r+0x12>
 800ac96:	2400      	movs	r4, #0
 800ac98:	4628      	mov	r0, r5
 800ac9a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800ac9e:	4798      	blx	r3
 800aca0:	2000      	movs	r0, #0
 800aca2:	e7e0      	b.n	800ac66 <_raise_r+0x12>

0800aca4 <raise>:
 800aca4:	4b02      	ldr	r3, [pc, #8]	; (800acb0 <raise+0xc>)
 800aca6:	4601      	mov	r1, r0
 800aca8:	6818      	ldr	r0, [r3, #0]
 800acaa:	f7ff bfd3 	b.w	800ac54 <_raise_r>
 800acae:	bf00      	nop
 800acb0:	2000001c 	.word	0x2000001c

0800acb4 <_kill_r>:
 800acb4:	b538      	push	{r3, r4, r5, lr}
 800acb6:	2300      	movs	r3, #0
 800acb8:	4d06      	ldr	r5, [pc, #24]	; (800acd4 <_kill_r+0x20>)
 800acba:	4604      	mov	r4, r0
 800acbc:	4608      	mov	r0, r1
 800acbe:	4611      	mov	r1, r2
 800acc0:	602b      	str	r3, [r5, #0]
 800acc2:	f7f8 fee6 	bl	8003a92 <_kill>
 800acc6:	1c43      	adds	r3, r0, #1
 800acc8:	d102      	bne.n	800acd0 <_kill_r+0x1c>
 800acca:	682b      	ldr	r3, [r5, #0]
 800accc:	b103      	cbz	r3, 800acd0 <_kill_r+0x1c>
 800acce:	6023      	str	r3, [r4, #0]
 800acd0:	bd38      	pop	{r3, r4, r5, pc}
 800acd2:	bf00      	nop
 800acd4:	20001d08 	.word	0x20001d08

0800acd8 <_getpid_r>:
 800acd8:	f7f8 bed4 	b.w	8003a84 <_getpid>

0800acdc <__sread>:
 800acdc:	b510      	push	{r4, lr}
 800acde:	460c      	mov	r4, r1
 800ace0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ace4:	f000 f894 	bl	800ae10 <_read_r>
 800ace8:	2800      	cmp	r0, #0
 800acea:	bfab      	itete	ge
 800acec:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800acee:	89a3      	ldrhlt	r3, [r4, #12]
 800acf0:	181b      	addge	r3, r3, r0
 800acf2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800acf6:	bfac      	ite	ge
 800acf8:	6563      	strge	r3, [r4, #84]	; 0x54
 800acfa:	81a3      	strhlt	r3, [r4, #12]
 800acfc:	bd10      	pop	{r4, pc}

0800acfe <__swrite>:
 800acfe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ad02:	461f      	mov	r7, r3
 800ad04:	898b      	ldrh	r3, [r1, #12]
 800ad06:	4605      	mov	r5, r0
 800ad08:	05db      	lsls	r3, r3, #23
 800ad0a:	460c      	mov	r4, r1
 800ad0c:	4616      	mov	r6, r2
 800ad0e:	d505      	bpl.n	800ad1c <__swrite+0x1e>
 800ad10:	2302      	movs	r3, #2
 800ad12:	2200      	movs	r2, #0
 800ad14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ad18:	f000 f868 	bl	800adec <_lseek_r>
 800ad1c:	89a3      	ldrh	r3, [r4, #12]
 800ad1e:	4632      	mov	r2, r6
 800ad20:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ad24:	81a3      	strh	r3, [r4, #12]
 800ad26:	4628      	mov	r0, r5
 800ad28:	463b      	mov	r3, r7
 800ad2a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ad2e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ad32:	f000 b817 	b.w	800ad64 <_write_r>

0800ad36 <__sseek>:
 800ad36:	b510      	push	{r4, lr}
 800ad38:	460c      	mov	r4, r1
 800ad3a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ad3e:	f000 f855 	bl	800adec <_lseek_r>
 800ad42:	1c43      	adds	r3, r0, #1
 800ad44:	89a3      	ldrh	r3, [r4, #12]
 800ad46:	bf15      	itete	ne
 800ad48:	6560      	strne	r0, [r4, #84]	; 0x54
 800ad4a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ad4e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ad52:	81a3      	strheq	r3, [r4, #12]
 800ad54:	bf18      	it	ne
 800ad56:	81a3      	strhne	r3, [r4, #12]
 800ad58:	bd10      	pop	{r4, pc}

0800ad5a <__sclose>:
 800ad5a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ad5e:	f000 b813 	b.w	800ad88 <_close_r>
	...

0800ad64 <_write_r>:
 800ad64:	b538      	push	{r3, r4, r5, lr}
 800ad66:	4604      	mov	r4, r0
 800ad68:	4608      	mov	r0, r1
 800ad6a:	4611      	mov	r1, r2
 800ad6c:	2200      	movs	r2, #0
 800ad6e:	4d05      	ldr	r5, [pc, #20]	; (800ad84 <_write_r+0x20>)
 800ad70:	602a      	str	r2, [r5, #0]
 800ad72:	461a      	mov	r2, r3
 800ad74:	f7f8 fec4 	bl	8003b00 <_write>
 800ad78:	1c43      	adds	r3, r0, #1
 800ad7a:	d102      	bne.n	800ad82 <_write_r+0x1e>
 800ad7c:	682b      	ldr	r3, [r5, #0]
 800ad7e:	b103      	cbz	r3, 800ad82 <_write_r+0x1e>
 800ad80:	6023      	str	r3, [r4, #0]
 800ad82:	bd38      	pop	{r3, r4, r5, pc}
 800ad84:	20001d08 	.word	0x20001d08

0800ad88 <_close_r>:
 800ad88:	b538      	push	{r3, r4, r5, lr}
 800ad8a:	2300      	movs	r3, #0
 800ad8c:	4d05      	ldr	r5, [pc, #20]	; (800ada4 <_close_r+0x1c>)
 800ad8e:	4604      	mov	r4, r0
 800ad90:	4608      	mov	r0, r1
 800ad92:	602b      	str	r3, [r5, #0]
 800ad94:	f7f8 fed0 	bl	8003b38 <_close>
 800ad98:	1c43      	adds	r3, r0, #1
 800ad9a:	d102      	bne.n	800ada2 <_close_r+0x1a>
 800ad9c:	682b      	ldr	r3, [r5, #0]
 800ad9e:	b103      	cbz	r3, 800ada2 <_close_r+0x1a>
 800ada0:	6023      	str	r3, [r4, #0]
 800ada2:	bd38      	pop	{r3, r4, r5, pc}
 800ada4:	20001d08 	.word	0x20001d08

0800ada8 <_fstat_r>:
 800ada8:	b538      	push	{r3, r4, r5, lr}
 800adaa:	2300      	movs	r3, #0
 800adac:	4d06      	ldr	r5, [pc, #24]	; (800adc8 <_fstat_r+0x20>)
 800adae:	4604      	mov	r4, r0
 800adb0:	4608      	mov	r0, r1
 800adb2:	4611      	mov	r1, r2
 800adb4:	602b      	str	r3, [r5, #0]
 800adb6:	f7f8 feca 	bl	8003b4e <_fstat>
 800adba:	1c43      	adds	r3, r0, #1
 800adbc:	d102      	bne.n	800adc4 <_fstat_r+0x1c>
 800adbe:	682b      	ldr	r3, [r5, #0]
 800adc0:	b103      	cbz	r3, 800adc4 <_fstat_r+0x1c>
 800adc2:	6023      	str	r3, [r4, #0]
 800adc4:	bd38      	pop	{r3, r4, r5, pc}
 800adc6:	bf00      	nop
 800adc8:	20001d08 	.word	0x20001d08

0800adcc <_isatty_r>:
 800adcc:	b538      	push	{r3, r4, r5, lr}
 800adce:	2300      	movs	r3, #0
 800add0:	4d05      	ldr	r5, [pc, #20]	; (800ade8 <_isatty_r+0x1c>)
 800add2:	4604      	mov	r4, r0
 800add4:	4608      	mov	r0, r1
 800add6:	602b      	str	r3, [r5, #0]
 800add8:	f7f8 fec8 	bl	8003b6c <_isatty>
 800addc:	1c43      	adds	r3, r0, #1
 800adde:	d102      	bne.n	800ade6 <_isatty_r+0x1a>
 800ade0:	682b      	ldr	r3, [r5, #0]
 800ade2:	b103      	cbz	r3, 800ade6 <_isatty_r+0x1a>
 800ade4:	6023      	str	r3, [r4, #0]
 800ade6:	bd38      	pop	{r3, r4, r5, pc}
 800ade8:	20001d08 	.word	0x20001d08

0800adec <_lseek_r>:
 800adec:	b538      	push	{r3, r4, r5, lr}
 800adee:	4604      	mov	r4, r0
 800adf0:	4608      	mov	r0, r1
 800adf2:	4611      	mov	r1, r2
 800adf4:	2200      	movs	r2, #0
 800adf6:	4d05      	ldr	r5, [pc, #20]	; (800ae0c <_lseek_r+0x20>)
 800adf8:	602a      	str	r2, [r5, #0]
 800adfa:	461a      	mov	r2, r3
 800adfc:	f7f8 fec0 	bl	8003b80 <_lseek>
 800ae00:	1c43      	adds	r3, r0, #1
 800ae02:	d102      	bne.n	800ae0a <_lseek_r+0x1e>
 800ae04:	682b      	ldr	r3, [r5, #0]
 800ae06:	b103      	cbz	r3, 800ae0a <_lseek_r+0x1e>
 800ae08:	6023      	str	r3, [r4, #0]
 800ae0a:	bd38      	pop	{r3, r4, r5, pc}
 800ae0c:	20001d08 	.word	0x20001d08

0800ae10 <_read_r>:
 800ae10:	b538      	push	{r3, r4, r5, lr}
 800ae12:	4604      	mov	r4, r0
 800ae14:	4608      	mov	r0, r1
 800ae16:	4611      	mov	r1, r2
 800ae18:	2200      	movs	r2, #0
 800ae1a:	4d05      	ldr	r5, [pc, #20]	; (800ae30 <_read_r+0x20>)
 800ae1c:	602a      	str	r2, [r5, #0]
 800ae1e:	461a      	mov	r2, r3
 800ae20:	f7f8 fe51 	bl	8003ac6 <_read>
 800ae24:	1c43      	adds	r3, r0, #1
 800ae26:	d102      	bne.n	800ae2e <_read_r+0x1e>
 800ae28:	682b      	ldr	r3, [r5, #0]
 800ae2a:	b103      	cbz	r3, 800ae2e <_read_r+0x1e>
 800ae2c:	6023      	str	r3, [r4, #0]
 800ae2e:	bd38      	pop	{r3, r4, r5, pc}
 800ae30:	20001d08 	.word	0x20001d08

0800ae34 <_init>:
 800ae34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae36:	bf00      	nop
 800ae38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ae3a:	bc08      	pop	{r3}
 800ae3c:	469e      	mov	lr, r3
 800ae3e:	4770      	bx	lr

0800ae40 <_fini>:
 800ae40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae42:	bf00      	nop
 800ae44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ae46:	bc08      	pop	{r3}
 800ae48:	469e      	mov	lr, r3
 800ae4a:	4770      	bx	lr
