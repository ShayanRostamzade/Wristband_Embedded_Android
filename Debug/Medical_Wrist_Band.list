
Medical_Wrist_Band.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000074cc  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b9c  080075e0  080075e0  000175e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800817c  0800817c  000201e4  2**0
                  CONTENTS
  4 .ARM          00000000  0800817c  0800817c  000201e4  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800817c  0800817c  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800817c  0800817c  0001817c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008180  08008180  00018180  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  08008184  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000554  200001e4  08008368  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000738  08008368  00020738  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012820  00000000  00000000  0002020d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002825  00000000  00000000  00032a2d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010d0  00000000  00000000  00035258  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001000  00000000  00000000  00036328  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019cff  00000000  00000000  00037328  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012d99  00000000  00000000  00051027  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00093644  00000000  00000000  00063dc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f7404  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005898  00000000  00000000  000f7458  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e4 	.word	0x200001e4
 800012c:	00000000 	.word	0x00000000
 8000130:	080075c4 	.word	0x080075c4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e8 	.word	0x200001e8
 800014c:	080075c4 	.word	0x080075c4

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <SSD1306_Init>:
  else SSD1306_WRITECOMMAND (SSD1306_NORMALDISPLAY);

}


uint8_t SSD1306_Init(void) {
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b082      	sub	sp, #8
 8000b2c:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 8000b2e:	f000 fa1f 	bl	8000f70 <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8000b32:	f644 6320 	movw	r3, #20000	; 0x4e20
 8000b36:	2201      	movs	r2, #1
 8000b38:	2178      	movs	r1, #120	; 0x78
 8000b3a:	485b      	ldr	r0, [pc, #364]	; (8000ca8 <SSD1306_Init+0x180>)
 8000b3c:	f002 f8d6 	bl	8002cec <HAL_I2C_IsDeviceReady>
 8000b40:	4603      	mov	r3, r0
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d001      	beq.n	8000b4a <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 8000b46:	2300      	movs	r3, #0
 8000b48:	e0a9      	b.n	8000c9e <SSD1306_Init+0x176>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 8000b4a:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8000b4e:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000b50:	e002      	b.n	8000b58 <SSD1306_Init+0x30>
		p--;
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	3b01      	subs	r3, #1
 8000b56:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d1f9      	bne.n	8000b52 <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8000b5e:	22ae      	movs	r2, #174	; 0xae
 8000b60:	2100      	movs	r1, #0
 8000b62:	2078      	movs	r0, #120	; 0x78
 8000b64:	f000 fa60 	bl	8001028 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 8000b68:	2220      	movs	r2, #32
 8000b6a:	2100      	movs	r1, #0
 8000b6c:	2078      	movs	r0, #120	; 0x78
 8000b6e:	f000 fa5b 	bl	8001028 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8000b72:	2210      	movs	r2, #16
 8000b74:	2100      	movs	r1, #0
 8000b76:	2078      	movs	r0, #120	; 0x78
 8000b78:	f000 fa56 	bl	8001028 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8000b7c:	22b0      	movs	r2, #176	; 0xb0
 8000b7e:	2100      	movs	r1, #0
 8000b80:	2078      	movs	r0, #120	; 0x78
 8000b82:	f000 fa51 	bl	8001028 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8000b86:	22c8      	movs	r2, #200	; 0xc8
 8000b88:	2100      	movs	r1, #0
 8000b8a:	2078      	movs	r0, #120	; 0x78
 8000b8c:	f000 fa4c 	bl	8001028 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8000b90:	2200      	movs	r2, #0
 8000b92:	2100      	movs	r1, #0
 8000b94:	2078      	movs	r0, #120	; 0x78
 8000b96:	f000 fa47 	bl	8001028 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8000b9a:	2210      	movs	r2, #16
 8000b9c:	2100      	movs	r1, #0
 8000b9e:	2078      	movs	r0, #120	; 0x78
 8000ba0:	f000 fa42 	bl	8001028 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8000ba4:	2240      	movs	r2, #64	; 0x40
 8000ba6:	2100      	movs	r1, #0
 8000ba8:	2078      	movs	r0, #120	; 0x78
 8000baa:	f000 fa3d 	bl	8001028 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8000bae:	2281      	movs	r2, #129	; 0x81
 8000bb0:	2100      	movs	r1, #0
 8000bb2:	2078      	movs	r0, #120	; 0x78
 8000bb4:	f000 fa38 	bl	8001028 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8000bb8:	22ff      	movs	r2, #255	; 0xff
 8000bba:	2100      	movs	r1, #0
 8000bbc:	2078      	movs	r0, #120	; 0x78
 8000bbe:	f000 fa33 	bl	8001028 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8000bc2:	22a1      	movs	r2, #161	; 0xa1
 8000bc4:	2100      	movs	r1, #0
 8000bc6:	2078      	movs	r0, #120	; 0x78
 8000bc8:	f000 fa2e 	bl	8001028 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8000bcc:	22a6      	movs	r2, #166	; 0xa6
 8000bce:	2100      	movs	r1, #0
 8000bd0:	2078      	movs	r0, #120	; 0x78
 8000bd2:	f000 fa29 	bl	8001028 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8000bd6:	22a8      	movs	r2, #168	; 0xa8
 8000bd8:	2100      	movs	r1, #0
 8000bda:	2078      	movs	r0, #120	; 0x78
 8000bdc:	f000 fa24 	bl	8001028 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8000be0:	223f      	movs	r2, #63	; 0x3f
 8000be2:	2100      	movs	r1, #0
 8000be4:	2078      	movs	r0, #120	; 0x78
 8000be6:	f000 fa1f 	bl	8001028 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8000bea:	22a4      	movs	r2, #164	; 0xa4
 8000bec:	2100      	movs	r1, #0
 8000bee:	2078      	movs	r0, #120	; 0x78
 8000bf0:	f000 fa1a 	bl	8001028 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8000bf4:	22d3      	movs	r2, #211	; 0xd3
 8000bf6:	2100      	movs	r1, #0
 8000bf8:	2078      	movs	r0, #120	; 0x78
 8000bfa:	f000 fa15 	bl	8001028 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8000bfe:	2200      	movs	r2, #0
 8000c00:	2100      	movs	r1, #0
 8000c02:	2078      	movs	r0, #120	; 0x78
 8000c04:	f000 fa10 	bl	8001028 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8000c08:	22d5      	movs	r2, #213	; 0xd5
 8000c0a:	2100      	movs	r1, #0
 8000c0c:	2078      	movs	r0, #120	; 0x78
 8000c0e:	f000 fa0b 	bl	8001028 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8000c12:	22f0      	movs	r2, #240	; 0xf0
 8000c14:	2100      	movs	r1, #0
 8000c16:	2078      	movs	r0, #120	; 0x78
 8000c18:	f000 fa06 	bl	8001028 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8000c1c:	22d9      	movs	r2, #217	; 0xd9
 8000c1e:	2100      	movs	r1, #0
 8000c20:	2078      	movs	r0, #120	; 0x78
 8000c22:	f000 fa01 	bl	8001028 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8000c26:	2222      	movs	r2, #34	; 0x22
 8000c28:	2100      	movs	r1, #0
 8000c2a:	2078      	movs	r0, #120	; 0x78
 8000c2c:	f000 f9fc 	bl	8001028 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8000c30:	22da      	movs	r2, #218	; 0xda
 8000c32:	2100      	movs	r1, #0
 8000c34:	2078      	movs	r0, #120	; 0x78
 8000c36:	f000 f9f7 	bl	8001028 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8000c3a:	2212      	movs	r2, #18
 8000c3c:	2100      	movs	r1, #0
 8000c3e:	2078      	movs	r0, #120	; 0x78
 8000c40:	f000 f9f2 	bl	8001028 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8000c44:	22db      	movs	r2, #219	; 0xdb
 8000c46:	2100      	movs	r1, #0
 8000c48:	2078      	movs	r0, #120	; 0x78
 8000c4a:	f000 f9ed 	bl	8001028 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8000c4e:	2220      	movs	r2, #32
 8000c50:	2100      	movs	r1, #0
 8000c52:	2078      	movs	r0, #120	; 0x78
 8000c54:	f000 f9e8 	bl	8001028 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8000c58:	228d      	movs	r2, #141	; 0x8d
 8000c5a:	2100      	movs	r1, #0
 8000c5c:	2078      	movs	r0, #120	; 0x78
 8000c5e:	f000 f9e3 	bl	8001028 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8000c62:	2214      	movs	r2, #20
 8000c64:	2100      	movs	r1, #0
 8000c66:	2078      	movs	r0, #120	; 0x78
 8000c68:	f000 f9de 	bl	8001028 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8000c6c:	22af      	movs	r2, #175	; 0xaf
 8000c6e:	2100      	movs	r1, #0
 8000c70:	2078      	movs	r0, #120	; 0x78
 8000c72:	f000 f9d9 	bl	8001028 <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8000c76:	222e      	movs	r2, #46	; 0x2e
 8000c78:	2100      	movs	r1, #0
 8000c7a:	2078      	movs	r0, #120	; 0x78
 8000c7c:	f000 f9d4 	bl	8001028 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8000c80:	2000      	movs	r0, #0
 8000c82:	f000 f843 	bl	8000d0c <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 8000c86:	f000 f813 	bl	8000cb0 <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 8000c8a:	4b08      	ldr	r3, [pc, #32]	; (8000cac <SSD1306_Init+0x184>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8000c90:	4b06      	ldr	r3, [pc, #24]	; (8000cac <SSD1306_Init+0x184>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 8000c96:	4b05      	ldr	r3, [pc, #20]	; (8000cac <SSD1306_Init+0x184>)
 8000c98:	2201      	movs	r2, #1
 8000c9a:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 8000c9c:	2301      	movs	r3, #1
}
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	3708      	adds	r7, #8
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}
 8000ca6:	bf00      	nop
 8000ca8:	20000614 	.word	0x20000614
 8000cac:	20000600 	.word	0x20000600

08000cb0 <SSD1306_UpdateScreen>:


void SSD1306_UpdateScreen(void) {
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b082      	sub	sp, #8
 8000cb4:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	71fb      	strb	r3, [r7, #7]
 8000cba:	e01d      	b.n	8000cf8 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8000cbc:	79fb      	ldrb	r3, [r7, #7]
 8000cbe:	3b50      	subs	r3, #80	; 0x50
 8000cc0:	b2db      	uxtb	r3, r3
 8000cc2:	461a      	mov	r2, r3
 8000cc4:	2100      	movs	r1, #0
 8000cc6:	2078      	movs	r0, #120	; 0x78
 8000cc8:	f000 f9ae 	bl	8001028 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8000ccc:	2200      	movs	r2, #0
 8000cce:	2100      	movs	r1, #0
 8000cd0:	2078      	movs	r0, #120	; 0x78
 8000cd2:	f000 f9a9 	bl	8001028 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8000cd6:	2210      	movs	r2, #16
 8000cd8:	2100      	movs	r1, #0
 8000cda:	2078      	movs	r0, #120	; 0x78
 8000cdc:	f000 f9a4 	bl	8001028 <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8000ce0:	79fb      	ldrb	r3, [r7, #7]
 8000ce2:	01db      	lsls	r3, r3, #7
 8000ce4:	4a08      	ldr	r2, [pc, #32]	; (8000d08 <SSD1306_UpdateScreen+0x58>)
 8000ce6:	441a      	add	r2, r3
 8000ce8:	2380      	movs	r3, #128	; 0x80
 8000cea:	2140      	movs	r1, #64	; 0x40
 8000cec:	2078      	movs	r0, #120	; 0x78
 8000cee:	f000 f953 	bl	8000f98 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8000cf2:	79fb      	ldrb	r3, [r7, #7]
 8000cf4:	3301      	adds	r3, #1
 8000cf6:	71fb      	strb	r3, [r7, #7]
 8000cf8:	79fb      	ldrb	r3, [r7, #7]
 8000cfa:	2b07      	cmp	r3, #7
 8000cfc:	d9de      	bls.n	8000cbc <SSD1306_UpdateScreen+0xc>
	}
}
 8000cfe:	bf00      	nop
 8000d00:	bf00      	nop
 8000d02:	3708      	adds	r7, #8
 8000d04:	46bd      	mov	sp, r7
 8000d06:	bd80      	pop	{r7, pc}
 8000d08:	20000200 	.word	0x20000200

08000d0c <SSD1306_Fill>:
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}


void SSD1306_Fill(SSD1306_COLOR_t color) {
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b082      	sub	sp, #8
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	4603      	mov	r3, r0
 8000d14:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8000d16:	79fb      	ldrb	r3, [r7, #7]
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d101      	bne.n	8000d20 <SSD1306_Fill+0x14>
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	e000      	b.n	8000d22 <SSD1306_Fill+0x16>
 8000d20:	23ff      	movs	r3, #255	; 0xff
 8000d22:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000d26:	4619      	mov	r1, r3
 8000d28:	4803      	ldr	r0, [pc, #12]	; (8000d38 <SSD1306_Fill+0x2c>)
 8000d2a:	f003 fda9 	bl	8004880 <memset>
}
 8000d2e:	bf00      	nop
 8000d30:	3708      	adds	r7, #8
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	bf00      	nop
 8000d38:	20000200 	.word	0x20000200

08000d3c <SSD1306_DrawPixel>:


void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8000d3c:	b480      	push	{r7}
 8000d3e:	b083      	sub	sp, #12
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	4603      	mov	r3, r0
 8000d44:	80fb      	strh	r3, [r7, #6]
 8000d46:	460b      	mov	r3, r1
 8000d48:	80bb      	strh	r3, [r7, #4]
 8000d4a:	4613      	mov	r3, r2
 8000d4c:	70fb      	strb	r3, [r7, #3]
	if (
 8000d4e:	88fb      	ldrh	r3, [r7, #6]
 8000d50:	2b7f      	cmp	r3, #127	; 0x7f
 8000d52:	d848      	bhi.n	8000de6 <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8000d54:	88bb      	ldrh	r3, [r7, #4]
 8000d56:	2b3f      	cmp	r3, #63	; 0x3f
 8000d58:	d845      	bhi.n	8000de6 <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8000d5a:	4b25      	ldr	r3, [pc, #148]	; (8000df0 <SSD1306_DrawPixel+0xb4>)
 8000d5c:	791b      	ldrb	r3, [r3, #4]
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d006      	beq.n	8000d70 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8000d62:	78fb      	ldrb	r3, [r7, #3]
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	bf0c      	ite	eq
 8000d68:	2301      	moveq	r3, #1
 8000d6a:	2300      	movne	r3, #0
 8000d6c:	b2db      	uxtb	r3, r3
 8000d6e:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8000d70:	78fb      	ldrb	r3, [r7, #3]
 8000d72:	2b01      	cmp	r3, #1
 8000d74:	d11a      	bne.n	8000dac <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8000d76:	88fa      	ldrh	r2, [r7, #6]
 8000d78:	88bb      	ldrh	r3, [r7, #4]
 8000d7a:	08db      	lsrs	r3, r3, #3
 8000d7c:	b298      	uxth	r0, r3
 8000d7e:	4603      	mov	r3, r0
 8000d80:	01db      	lsls	r3, r3, #7
 8000d82:	4413      	add	r3, r2
 8000d84:	4a1b      	ldr	r2, [pc, #108]	; (8000df4 <SSD1306_DrawPixel+0xb8>)
 8000d86:	5cd3      	ldrb	r3, [r2, r3]
 8000d88:	b25a      	sxtb	r2, r3
 8000d8a:	88bb      	ldrh	r3, [r7, #4]
 8000d8c:	f003 0307 	and.w	r3, r3, #7
 8000d90:	2101      	movs	r1, #1
 8000d92:	fa01 f303 	lsl.w	r3, r1, r3
 8000d96:	b25b      	sxtb	r3, r3
 8000d98:	4313      	orrs	r3, r2
 8000d9a:	b259      	sxtb	r1, r3
 8000d9c:	88fa      	ldrh	r2, [r7, #6]
 8000d9e:	4603      	mov	r3, r0
 8000da0:	01db      	lsls	r3, r3, #7
 8000da2:	4413      	add	r3, r2
 8000da4:	b2c9      	uxtb	r1, r1
 8000da6:	4a13      	ldr	r2, [pc, #76]	; (8000df4 <SSD1306_DrawPixel+0xb8>)
 8000da8:	54d1      	strb	r1, [r2, r3]
 8000daa:	e01d      	b.n	8000de8 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8000dac:	88fa      	ldrh	r2, [r7, #6]
 8000dae:	88bb      	ldrh	r3, [r7, #4]
 8000db0:	08db      	lsrs	r3, r3, #3
 8000db2:	b298      	uxth	r0, r3
 8000db4:	4603      	mov	r3, r0
 8000db6:	01db      	lsls	r3, r3, #7
 8000db8:	4413      	add	r3, r2
 8000dba:	4a0e      	ldr	r2, [pc, #56]	; (8000df4 <SSD1306_DrawPixel+0xb8>)
 8000dbc:	5cd3      	ldrb	r3, [r2, r3]
 8000dbe:	b25a      	sxtb	r2, r3
 8000dc0:	88bb      	ldrh	r3, [r7, #4]
 8000dc2:	f003 0307 	and.w	r3, r3, #7
 8000dc6:	2101      	movs	r1, #1
 8000dc8:	fa01 f303 	lsl.w	r3, r1, r3
 8000dcc:	b25b      	sxtb	r3, r3
 8000dce:	43db      	mvns	r3, r3
 8000dd0:	b25b      	sxtb	r3, r3
 8000dd2:	4013      	ands	r3, r2
 8000dd4:	b259      	sxtb	r1, r3
 8000dd6:	88fa      	ldrh	r2, [r7, #6]
 8000dd8:	4603      	mov	r3, r0
 8000dda:	01db      	lsls	r3, r3, #7
 8000ddc:	4413      	add	r3, r2
 8000dde:	b2c9      	uxtb	r1, r1
 8000de0:	4a04      	ldr	r2, [pc, #16]	; (8000df4 <SSD1306_DrawPixel+0xb8>)
 8000de2:	54d1      	strb	r1, [r2, r3]
 8000de4:	e000      	b.n	8000de8 <SSD1306_DrawPixel+0xac>
		return;
 8000de6:	bf00      	nop
	}
}
 8000de8:	370c      	adds	r7, #12
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bc80      	pop	{r7}
 8000dee:	4770      	bx	lr
 8000df0:	20000600 	.word	0x20000600
 8000df4:	20000200 	.word	0x20000200

08000df8 <SSD1306_SetPosition>:


void SSD1306_SetPosition(uint16_t x, uint16_t y) {
 8000df8:	b480      	push	{r7}
 8000dfa:	b083      	sub	sp, #12
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	4603      	mov	r3, r0
 8000e00:	460a      	mov	r2, r1
 8000e02:	80fb      	strh	r3, [r7, #6]
 8000e04:	4613      	mov	r3, r2
 8000e06:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8000e08:	4a05      	ldr	r2, [pc, #20]	; (8000e20 <SSD1306_SetPosition+0x28>)
 8000e0a:	88fb      	ldrh	r3, [r7, #6]
 8000e0c:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 8000e0e:	4a04      	ldr	r2, [pc, #16]	; (8000e20 <SSD1306_SetPosition+0x28>)
 8000e10:	88bb      	ldrh	r3, [r7, #4]
 8000e12:	8053      	strh	r3, [r2, #2]
}
 8000e14:	bf00      	nop
 8000e16:	370c      	adds	r7, #12
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	bc80      	pop	{r7}
 8000e1c:	4770      	bx	lr
 8000e1e:	bf00      	nop
 8000e20:	20000600 	.word	0x20000600

08000e24 <SSD1306_PrintCharacter>:


char SSD1306_PrintCharacter(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b086      	sub	sp, #24
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	6039      	str	r1, [r7, #0]
 8000e2e:	71fb      	strb	r3, [r7, #7]
 8000e30:	4613      	mov	r3, r2
 8000e32:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8000e34:	4b3a      	ldr	r3, [pc, #232]	; (8000f20 <SSD1306_PrintCharacter+0xfc>)
 8000e36:	881b      	ldrh	r3, [r3, #0]
 8000e38:	461a      	mov	r2, r3
 8000e3a:	683b      	ldr	r3, [r7, #0]
 8000e3c:	781b      	ldrb	r3, [r3, #0]
 8000e3e:	4413      	add	r3, r2
	if (
 8000e40:	2b7f      	cmp	r3, #127	; 0x7f
 8000e42:	dc07      	bgt.n	8000e54 <SSD1306_PrintCharacter+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8000e44:	4b36      	ldr	r3, [pc, #216]	; (8000f20 <SSD1306_PrintCharacter+0xfc>)
 8000e46:	885b      	ldrh	r3, [r3, #2]
 8000e48:	461a      	mov	r2, r3
 8000e4a:	683b      	ldr	r3, [r7, #0]
 8000e4c:	785b      	ldrb	r3, [r3, #1]
 8000e4e:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8000e50:	2b3f      	cmp	r3, #63	; 0x3f
 8000e52:	dd01      	ble.n	8000e58 <SSD1306_PrintCharacter+0x34>
	) {
		/* Error */
		return 0;
 8000e54:	2300      	movs	r3, #0
 8000e56:	e05e      	b.n	8000f16 <SSD1306_PrintCharacter+0xf2>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8000e58:	2300      	movs	r3, #0
 8000e5a:	617b      	str	r3, [r7, #20]
 8000e5c:	e04b      	b.n	8000ef6 <SSD1306_PrintCharacter+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8000e5e:	683b      	ldr	r3, [r7, #0]
 8000e60:	685a      	ldr	r2, [r3, #4]
 8000e62:	79fb      	ldrb	r3, [r7, #7]
 8000e64:	3b20      	subs	r3, #32
 8000e66:	6839      	ldr	r1, [r7, #0]
 8000e68:	7849      	ldrb	r1, [r1, #1]
 8000e6a:	fb01 f303 	mul.w	r3, r1, r3
 8000e6e:	4619      	mov	r1, r3
 8000e70:	697b      	ldr	r3, [r7, #20]
 8000e72:	440b      	add	r3, r1
 8000e74:	005b      	lsls	r3, r3, #1
 8000e76:	4413      	add	r3, r2
 8000e78:	881b      	ldrh	r3, [r3, #0]
 8000e7a:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	613b      	str	r3, [r7, #16]
 8000e80:	e030      	b.n	8000ee4 <SSD1306_PrintCharacter+0xc0>
			if ((b << j) & 0x8000) {
 8000e82:	68fa      	ldr	r2, [r7, #12]
 8000e84:	693b      	ldr	r3, [r7, #16]
 8000e86:	fa02 f303 	lsl.w	r3, r2, r3
 8000e8a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d010      	beq.n	8000eb4 <SSD1306_PrintCharacter+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8000e92:	4b23      	ldr	r3, [pc, #140]	; (8000f20 <SSD1306_PrintCharacter+0xfc>)
 8000e94:	881a      	ldrh	r2, [r3, #0]
 8000e96:	693b      	ldr	r3, [r7, #16]
 8000e98:	b29b      	uxth	r3, r3
 8000e9a:	4413      	add	r3, r2
 8000e9c:	b298      	uxth	r0, r3
 8000e9e:	4b20      	ldr	r3, [pc, #128]	; (8000f20 <SSD1306_PrintCharacter+0xfc>)
 8000ea0:	885a      	ldrh	r2, [r3, #2]
 8000ea2:	697b      	ldr	r3, [r7, #20]
 8000ea4:	b29b      	uxth	r3, r3
 8000ea6:	4413      	add	r3, r2
 8000ea8:	b29b      	uxth	r3, r3
 8000eaa:	79ba      	ldrb	r2, [r7, #6]
 8000eac:	4619      	mov	r1, r3
 8000eae:	f7ff ff45 	bl	8000d3c <SSD1306_DrawPixel>
 8000eb2:	e014      	b.n	8000ede <SSD1306_PrintCharacter+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8000eb4:	4b1a      	ldr	r3, [pc, #104]	; (8000f20 <SSD1306_PrintCharacter+0xfc>)
 8000eb6:	881a      	ldrh	r2, [r3, #0]
 8000eb8:	693b      	ldr	r3, [r7, #16]
 8000eba:	b29b      	uxth	r3, r3
 8000ebc:	4413      	add	r3, r2
 8000ebe:	b298      	uxth	r0, r3
 8000ec0:	4b17      	ldr	r3, [pc, #92]	; (8000f20 <SSD1306_PrintCharacter+0xfc>)
 8000ec2:	885a      	ldrh	r2, [r3, #2]
 8000ec4:	697b      	ldr	r3, [r7, #20]
 8000ec6:	b29b      	uxth	r3, r3
 8000ec8:	4413      	add	r3, r2
 8000eca:	b299      	uxth	r1, r3
 8000ecc:	79bb      	ldrb	r3, [r7, #6]
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	bf0c      	ite	eq
 8000ed2:	2301      	moveq	r3, #1
 8000ed4:	2300      	movne	r3, #0
 8000ed6:	b2db      	uxtb	r3, r3
 8000ed8:	461a      	mov	r2, r3
 8000eda:	f7ff ff2f 	bl	8000d3c <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8000ede:	693b      	ldr	r3, [r7, #16]
 8000ee0:	3301      	adds	r3, #1
 8000ee2:	613b      	str	r3, [r7, #16]
 8000ee4:	683b      	ldr	r3, [r7, #0]
 8000ee6:	781b      	ldrb	r3, [r3, #0]
 8000ee8:	461a      	mov	r2, r3
 8000eea:	693b      	ldr	r3, [r7, #16]
 8000eec:	4293      	cmp	r3, r2
 8000eee:	d3c8      	bcc.n	8000e82 <SSD1306_PrintCharacter+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8000ef0:	697b      	ldr	r3, [r7, #20]
 8000ef2:	3301      	adds	r3, #1
 8000ef4:	617b      	str	r3, [r7, #20]
 8000ef6:	683b      	ldr	r3, [r7, #0]
 8000ef8:	785b      	ldrb	r3, [r3, #1]
 8000efa:	461a      	mov	r2, r3
 8000efc:	697b      	ldr	r3, [r7, #20]
 8000efe:	4293      	cmp	r3, r2
 8000f00:	d3ad      	bcc.n	8000e5e <SSD1306_PrintCharacter+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8000f02:	4b07      	ldr	r3, [pc, #28]	; (8000f20 <SSD1306_PrintCharacter+0xfc>)
 8000f04:	881a      	ldrh	r2, [r3, #0]
 8000f06:	683b      	ldr	r3, [r7, #0]
 8000f08:	781b      	ldrb	r3, [r3, #0]
 8000f0a:	b29b      	uxth	r3, r3
 8000f0c:	4413      	add	r3, r2
 8000f0e:	b29a      	uxth	r2, r3
 8000f10:	4b03      	ldr	r3, [pc, #12]	; (8000f20 <SSD1306_PrintCharacter+0xfc>)
 8000f12:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 8000f14:	79fb      	ldrb	r3, [r7, #7]
}
 8000f16:	4618      	mov	r0, r3
 8000f18:	3718      	adds	r7, #24
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}
 8000f1e:	bf00      	nop
 8000f20:	20000600 	.word	0x20000600

08000f24 <SSD1306_PrintString>:


char SSD1306_PrintString(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b084      	sub	sp, #16
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	60f8      	str	r0, [r7, #12]
 8000f2c:	60b9      	str	r1, [r7, #8]
 8000f2e:	4613      	mov	r3, r2
 8000f30:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 8000f32:	e012      	b.n	8000f5a <SSD1306_PrintString+0x36>
		/* Write character by character */
		if (SSD1306_PrintCharacter(*str, Font, color) != *str) {
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	781b      	ldrb	r3, [r3, #0]
 8000f38:	79fa      	ldrb	r2, [r7, #7]
 8000f3a:	68b9      	ldr	r1, [r7, #8]
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	f7ff ff71 	bl	8000e24 <SSD1306_PrintCharacter>
 8000f42:	4603      	mov	r3, r0
 8000f44:	461a      	mov	r2, r3
 8000f46:	68fb      	ldr	r3, [r7, #12]
 8000f48:	781b      	ldrb	r3, [r3, #0]
 8000f4a:	429a      	cmp	r2, r3
 8000f4c:	d002      	beq.n	8000f54 <SSD1306_PrintString+0x30>
			/* Return error */
			return *str;
 8000f4e:	68fb      	ldr	r3, [r7, #12]
 8000f50:	781b      	ldrb	r3, [r3, #0]
 8000f52:	e008      	b.n	8000f66 <SSD1306_PrintString+0x42>
		}
		
		/* Increase string pointer */
		str++;
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	3301      	adds	r3, #1
 8000f58:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8000f5a:	68fb      	ldr	r3, [r7, #12]
 8000f5c:	781b      	ldrb	r3, [r3, #0]
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d1e8      	bne.n	8000f34 <SSD1306_PrintString+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 8000f62:	68fb      	ldr	r3, [r7, #12]
 8000f64:	781b      	ldrb	r3, [r3, #0]
}
 8000f66:	4618      	mov	r0, r3
 8000f68:	3710      	adds	r7, #16
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bd80      	pop	{r7, pc}
	...

08000f70 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8000f70:	b480      	push	{r7}
 8000f72:	b083      	sub	sp, #12
 8000f74:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8000f76:	4b07      	ldr	r3, [pc, #28]	; (8000f94 <ssd1306_I2C_Init+0x24>)
 8000f78:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000f7a:	e002      	b.n	8000f82 <ssd1306_I2C_Init+0x12>
		p--;
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	3b01      	subs	r3, #1
 8000f80:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d1f9      	bne.n	8000f7c <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8000f88:	bf00      	nop
 8000f8a:	bf00      	nop
 8000f8c:	370c      	adds	r7, #12
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bc80      	pop	{r7}
 8000f92:	4770      	bx	lr
 8000f94:	0003d090 	.word	0x0003d090

08000f98 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8000f98:	b590      	push	{r4, r7, lr}
 8000f9a:	b0c7      	sub	sp, #284	; 0x11c
 8000f9c:	af02      	add	r7, sp, #8
 8000f9e:	4604      	mov	r4, r0
 8000fa0:	4608      	mov	r0, r1
 8000fa2:	4639      	mov	r1, r7
 8000fa4:	600a      	str	r2, [r1, #0]
 8000fa6:	4619      	mov	r1, r3
 8000fa8:	1dfb      	adds	r3, r7, #7
 8000faa:	4622      	mov	r2, r4
 8000fac:	701a      	strb	r2, [r3, #0]
 8000fae:	1dbb      	adds	r3, r7, #6
 8000fb0:	4602      	mov	r2, r0
 8000fb2:	701a      	strb	r2, [r3, #0]
 8000fb4:	1d3b      	adds	r3, r7, #4
 8000fb6:	460a      	mov	r2, r1
 8000fb8:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8000fba:	f107 030c 	add.w	r3, r7, #12
 8000fbe:	1dba      	adds	r2, r7, #6
 8000fc0:	7812      	ldrb	r2, [r2, #0]
 8000fc2:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8000fca:	e010      	b.n	8000fee <ssd1306_I2C_WriteMulti+0x56>
dt[i+1] = data[i];
 8000fcc:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8000fd0:	463a      	mov	r2, r7
 8000fd2:	6812      	ldr	r2, [r2, #0]
 8000fd4:	441a      	add	r2, r3
 8000fd6:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8000fda:	3301      	adds	r3, #1
 8000fdc:	7811      	ldrb	r1, [r2, #0]
 8000fde:	f107 020c 	add.w	r2, r7, #12
 8000fe2:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8000fe4:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8000fe8:	3301      	adds	r3, #1
 8000fea:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8000fee:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8000ff2:	b29b      	uxth	r3, r3
 8000ff4:	1d3a      	adds	r2, r7, #4
 8000ff6:	8812      	ldrh	r2, [r2, #0]
 8000ff8:	429a      	cmp	r2, r3
 8000ffa:	d8e7      	bhi.n	8000fcc <ssd1306_I2C_WriteMulti+0x34>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 8000ffc:	1dfb      	adds	r3, r7, #7
 8000ffe:	781b      	ldrb	r3, [r3, #0]
 8001000:	b299      	uxth	r1, r3
 8001002:	1d3b      	adds	r3, r7, #4
 8001004:	881b      	ldrh	r3, [r3, #0]
 8001006:	3301      	adds	r3, #1
 8001008:	b29b      	uxth	r3, r3
 800100a:	f107 020c 	add.w	r2, r7, #12
 800100e:	200a      	movs	r0, #10
 8001010:	9000      	str	r0, [sp, #0]
 8001012:	4804      	ldr	r0, [pc, #16]	; (8001024 <ssd1306_I2C_WriteMulti+0x8c>)
 8001014:	f001 fd6c 	bl	8002af0 <HAL_I2C_Master_Transmit>
}
 8001018:	bf00      	nop
 800101a:	f507 778a 	add.w	r7, r7, #276	; 0x114
 800101e:	46bd      	mov	sp, r7
 8001020:	bd90      	pop	{r4, r7, pc}
 8001022:	bf00      	nop
 8001024:	20000614 	.word	0x20000614

08001028 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8001028:	b580      	push	{r7, lr}
 800102a:	b086      	sub	sp, #24
 800102c:	af02      	add	r7, sp, #8
 800102e:	4603      	mov	r3, r0
 8001030:	71fb      	strb	r3, [r7, #7]
 8001032:	460b      	mov	r3, r1
 8001034:	71bb      	strb	r3, [r7, #6]
 8001036:	4613      	mov	r3, r2
 8001038:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 800103a:	79bb      	ldrb	r3, [r7, #6]
 800103c:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 800103e:	797b      	ldrb	r3, [r7, #5]
 8001040:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 8001042:	79fb      	ldrb	r3, [r7, #7]
 8001044:	b299      	uxth	r1, r3
 8001046:	f107 020c 	add.w	r2, r7, #12
 800104a:	230a      	movs	r3, #10
 800104c:	9300      	str	r3, [sp, #0]
 800104e:	2302      	movs	r3, #2
 8001050:	4803      	ldr	r0, [pc, #12]	; (8001060 <ssd1306_I2C_Write+0x38>)
 8001052:	f001 fd4d 	bl	8002af0 <HAL_I2C_Master_Transmit>
}
 8001056:	bf00      	nop
 8001058:	3710      	adds	r7, #16
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}
 800105e:	bf00      	nop
 8001060:	20000614 	.word	0x20000614

08001064 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001068:	f000 fc8a 	bl	8001980 <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800106c:	f000 f812 	bl	8001094 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001070:	f000 f950 	bl	8001314 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001074:	f000 f8a8 	bl	80011c8 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8001078:	f000 f922 	bl	80012c0 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 800107c:	f000 f8d2 	bl	8001224 <MX_TIM2_Init>
  MX_ADC1_Init();
 8001080:	f000 f864 	bl	800114c <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start_IT(&htim2);
 8001084:	4802      	ldr	r0, [pc, #8]	; (8001090 <main+0x2c>)
 8001086:	f002 ff4b 	bl	8003f20 <HAL_TIM_Base_Start_IT>

  SSD1306_Init();
 800108a:	f7ff fd4d 	bl	8000b28 <SSD1306_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800108e:	e7fe      	b.n	800108e <main+0x2a>
 8001090:	200006dc 	.word	0x200006dc

08001094 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b094      	sub	sp, #80	; 0x50
 8001098:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800109a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800109e:	2228      	movs	r2, #40	; 0x28
 80010a0:	2100      	movs	r1, #0
 80010a2:	4618      	mov	r0, r3
 80010a4:	f003 fbec 	bl	8004880 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010a8:	f107 0314 	add.w	r3, r7, #20
 80010ac:	2200      	movs	r2, #0
 80010ae:	601a      	str	r2, [r3, #0]
 80010b0:	605a      	str	r2, [r3, #4]
 80010b2:	609a      	str	r2, [r3, #8]
 80010b4:	60da      	str	r2, [r3, #12]
 80010b6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80010b8:	1d3b      	adds	r3, r7, #4
 80010ba:	2200      	movs	r2, #0
 80010bc:	601a      	str	r2, [r3, #0]
 80010be:	605a      	str	r2, [r3, #4]
 80010c0:	609a      	str	r2, [r3, #8]
 80010c2:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80010c4:	2301      	movs	r3, #1
 80010c6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80010c8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80010cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80010ce:	2300      	movs	r3, #0
 80010d0:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010d2:	2301      	movs	r3, #1
 80010d4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010d6:	2302      	movs	r3, #2
 80010d8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80010da:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80010de:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80010e0:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80010e4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010e6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80010ea:	4618      	mov	r0, r3
 80010ec:	f002 f934 	bl	8003358 <HAL_RCC_OscConfig>
 80010f0:	4603      	mov	r3, r0
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d001      	beq.n	80010fa <SystemClock_Config+0x66>
  {
    Error_Handler();
 80010f6:	f000 f9fb 	bl	80014f0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010fa:	230f      	movs	r3, #15
 80010fc:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010fe:	2302      	movs	r3, #2
 8001100:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001102:	2300      	movs	r3, #0
 8001104:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001106:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800110a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800110c:	2300      	movs	r3, #0
 800110e:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001110:	f107 0314 	add.w	r3, r7, #20
 8001114:	2102      	movs	r1, #2
 8001116:	4618      	mov	r0, r3
 8001118:	f002 fb9e 	bl	8003858 <HAL_RCC_ClockConfig>
 800111c:	4603      	mov	r3, r0
 800111e:	2b00      	cmp	r3, #0
 8001120:	d001      	beq.n	8001126 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8001122:	f000 f9e5 	bl	80014f0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001126:	2302      	movs	r3, #2
 8001128:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 800112a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800112e:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001130:	1d3b      	adds	r3, r7, #4
 8001132:	4618      	mov	r0, r3
 8001134:	f002 fd2a 	bl	8003b8c <HAL_RCCEx_PeriphCLKConfig>
 8001138:	4603      	mov	r3, r0
 800113a:	2b00      	cmp	r3, #0
 800113c:	d001      	beq.n	8001142 <SystemClock_Config+0xae>
  {
    Error_Handler();
 800113e:	f000 f9d7 	bl	80014f0 <Error_Handler>
  }
}
 8001142:	bf00      	nop
 8001144:	3750      	adds	r7, #80	; 0x50
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}
	...

0800114c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b084      	sub	sp, #16
 8001150:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001152:	1d3b      	adds	r3, r7, #4
 8001154:	2200      	movs	r2, #0
 8001156:	601a      	str	r2, [r3, #0]
 8001158:	605a      	str	r2, [r3, #4]
 800115a:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 800115c:	4b18      	ldr	r3, [pc, #96]	; (80011c0 <MX_ADC1_Init+0x74>)
 800115e:	4a19      	ldr	r2, [pc, #100]	; (80011c4 <MX_ADC1_Init+0x78>)
 8001160:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001162:	4b17      	ldr	r3, [pc, #92]	; (80011c0 <MX_ADC1_Init+0x74>)
 8001164:	2200      	movs	r2, #0
 8001166:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001168:	4b15      	ldr	r3, [pc, #84]	; (80011c0 <MX_ADC1_Init+0x74>)
 800116a:	2200      	movs	r2, #0
 800116c:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800116e:	4b14      	ldr	r3, [pc, #80]	; (80011c0 <MX_ADC1_Init+0x74>)
 8001170:	2200      	movs	r2, #0
 8001172:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001174:	4b12      	ldr	r3, [pc, #72]	; (80011c0 <MX_ADC1_Init+0x74>)
 8001176:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800117a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800117c:	4b10      	ldr	r3, [pc, #64]	; (80011c0 <MX_ADC1_Init+0x74>)
 800117e:	2200      	movs	r2, #0
 8001180:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8001182:	4b0f      	ldr	r3, [pc, #60]	; (80011c0 <MX_ADC1_Init+0x74>)
 8001184:	2201      	movs	r2, #1
 8001186:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001188:	480d      	ldr	r0, [pc, #52]	; (80011c0 <MX_ADC1_Init+0x74>)
 800118a:	f000 fc5b 	bl	8001a44 <HAL_ADC_Init>
 800118e:	4603      	mov	r3, r0
 8001190:	2b00      	cmp	r3, #0
 8001192:	d001      	beq.n	8001198 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8001194:	f000 f9ac 	bl	80014f0 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001198:	2300      	movs	r3, #0
 800119a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800119c:	2301      	movs	r3, #1
 800119e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_55CYCLES_5;
 80011a0:	2305      	movs	r3, #5
 80011a2:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011a4:	1d3b      	adds	r3, r7, #4
 80011a6:	4619      	mov	r1, r3
 80011a8:	4805      	ldr	r0, [pc, #20]	; (80011c0 <MX_ADC1_Init+0x74>)
 80011aa:	f000 fee3 	bl	8001f74 <HAL_ADC_ConfigChannel>
 80011ae:	4603      	mov	r3, r0
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d001      	beq.n	80011b8 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80011b4:	f000 f99c 	bl	80014f0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80011b8:	bf00      	nop
 80011ba:	3710      	adds	r7, #16
 80011bc:	46bd      	mov	sp, r7
 80011be:	bd80      	pop	{r7, pc}
 80011c0:	20000668 	.word	0x20000668
 80011c4:	40012400 	.word	0x40012400

080011c8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80011cc:	4b12      	ldr	r3, [pc, #72]	; (8001218 <MX_I2C1_Init+0x50>)
 80011ce:	4a13      	ldr	r2, [pc, #76]	; (800121c <MX_I2C1_Init+0x54>)
 80011d0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80011d2:	4b11      	ldr	r3, [pc, #68]	; (8001218 <MX_I2C1_Init+0x50>)
 80011d4:	4a12      	ldr	r2, [pc, #72]	; (8001220 <MX_I2C1_Init+0x58>)
 80011d6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80011d8:	4b0f      	ldr	r3, [pc, #60]	; (8001218 <MX_I2C1_Init+0x50>)
 80011da:	2200      	movs	r2, #0
 80011dc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80011de:	4b0e      	ldr	r3, [pc, #56]	; (8001218 <MX_I2C1_Init+0x50>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80011e4:	4b0c      	ldr	r3, [pc, #48]	; (8001218 <MX_I2C1_Init+0x50>)
 80011e6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80011ea:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80011ec:	4b0a      	ldr	r3, [pc, #40]	; (8001218 <MX_I2C1_Init+0x50>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80011f2:	4b09      	ldr	r3, [pc, #36]	; (8001218 <MX_I2C1_Init+0x50>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80011f8:	4b07      	ldr	r3, [pc, #28]	; (8001218 <MX_I2C1_Init+0x50>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80011fe:	4b06      	ldr	r3, [pc, #24]	; (8001218 <MX_I2C1_Init+0x50>)
 8001200:	2200      	movs	r2, #0
 8001202:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001204:	4804      	ldr	r0, [pc, #16]	; (8001218 <MX_I2C1_Init+0x50>)
 8001206:	f001 fb2f 	bl	8002868 <HAL_I2C_Init>
 800120a:	4603      	mov	r3, r0
 800120c:	2b00      	cmp	r3, #0
 800120e:	d001      	beq.n	8001214 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001210:	f000 f96e 	bl	80014f0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001214:	bf00      	nop
 8001216:	bd80      	pop	{r7, pc}
 8001218:	20000614 	.word	0x20000614
 800121c:	40005400 	.word	0x40005400
 8001220:	00061a80 	.word	0x00061a80

08001224 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b086      	sub	sp, #24
 8001228:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800122a:	f107 0308 	add.w	r3, r7, #8
 800122e:	2200      	movs	r2, #0
 8001230:	601a      	str	r2, [r3, #0]
 8001232:	605a      	str	r2, [r3, #4]
 8001234:	609a      	str	r2, [r3, #8]
 8001236:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001238:	463b      	mov	r3, r7
 800123a:	2200      	movs	r2, #0
 800123c:	601a      	str	r2, [r3, #0]
 800123e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001240:	4b1e      	ldr	r3, [pc, #120]	; (80012bc <MX_TIM2_Init+0x98>)
 8001242:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001246:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 35999;
 8001248:	4b1c      	ldr	r3, [pc, #112]	; (80012bc <MX_TIM2_Init+0x98>)
 800124a:	f648 429f 	movw	r2, #35999	; 0x8c9f
 800124e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001250:	4b1a      	ldr	r3, [pc, #104]	; (80012bc <MX_TIM2_Init+0x98>)
 8001252:	2200      	movs	r2, #0
 8001254:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 800;
 8001256:	4b19      	ldr	r3, [pc, #100]	; (80012bc <MX_TIM2_Init+0x98>)
 8001258:	f44f 7248 	mov.w	r2, #800	; 0x320
 800125c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800125e:	4b17      	ldr	r3, [pc, #92]	; (80012bc <MX_TIM2_Init+0x98>)
 8001260:	2200      	movs	r2, #0
 8001262:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001264:	4b15      	ldr	r3, [pc, #84]	; (80012bc <MX_TIM2_Init+0x98>)
 8001266:	2200      	movs	r2, #0
 8001268:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800126a:	4814      	ldr	r0, [pc, #80]	; (80012bc <MX_TIM2_Init+0x98>)
 800126c:	f002 fe08 	bl	8003e80 <HAL_TIM_Base_Init>
 8001270:	4603      	mov	r3, r0
 8001272:	2b00      	cmp	r3, #0
 8001274:	d001      	beq.n	800127a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001276:	f000 f93b 	bl	80014f0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800127a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800127e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001280:	f107 0308 	add.w	r3, r7, #8
 8001284:	4619      	mov	r1, r3
 8001286:	480d      	ldr	r0, [pc, #52]	; (80012bc <MX_TIM2_Init+0x98>)
 8001288:	f002 ffa4 	bl	80041d4 <HAL_TIM_ConfigClockSource>
 800128c:	4603      	mov	r3, r0
 800128e:	2b00      	cmp	r3, #0
 8001290:	d001      	beq.n	8001296 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001292:	f000 f92d 	bl	80014f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001296:	2300      	movs	r3, #0
 8001298:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800129a:	2300      	movs	r3, #0
 800129c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800129e:	463b      	mov	r3, r7
 80012a0:	4619      	mov	r1, r3
 80012a2:	4806      	ldr	r0, [pc, #24]	; (80012bc <MX_TIM2_Init+0x98>)
 80012a4:	f003 f976 	bl	8004594 <HAL_TIMEx_MasterConfigSynchronization>
 80012a8:	4603      	mov	r3, r0
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d001      	beq.n	80012b2 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80012ae:	f000 f91f 	bl	80014f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80012b2:	bf00      	nop
 80012b4:	3718      	adds	r7, #24
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	bf00      	nop
 80012bc:	200006dc 	.word	0x200006dc

080012c0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80012c4:	4b11      	ldr	r3, [pc, #68]	; (800130c <MX_USART1_UART_Init+0x4c>)
 80012c6:	4a12      	ldr	r2, [pc, #72]	; (8001310 <MX_USART1_UART_Init+0x50>)
 80012c8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80012ca:	4b10      	ldr	r3, [pc, #64]	; (800130c <MX_USART1_UART_Init+0x4c>)
 80012cc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80012d0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80012d2:	4b0e      	ldr	r3, [pc, #56]	; (800130c <MX_USART1_UART_Init+0x4c>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80012d8:	4b0c      	ldr	r3, [pc, #48]	; (800130c <MX_USART1_UART_Init+0x4c>)
 80012da:	2200      	movs	r2, #0
 80012dc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80012de:	4b0b      	ldr	r3, [pc, #44]	; (800130c <MX_USART1_UART_Init+0x4c>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80012e4:	4b09      	ldr	r3, [pc, #36]	; (800130c <MX_USART1_UART_Init+0x4c>)
 80012e6:	220c      	movs	r2, #12
 80012e8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012ea:	4b08      	ldr	r3, [pc, #32]	; (800130c <MX_USART1_UART_Init+0x4c>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80012f0:	4b06      	ldr	r3, [pc, #24]	; (800130c <MX_USART1_UART_Init+0x4c>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80012f6:	4805      	ldr	r0, [pc, #20]	; (800130c <MX_USART1_UART_Init+0x4c>)
 80012f8:	f003 f9bc 	bl	8004674 <HAL_UART_Init>
 80012fc:	4603      	mov	r3, r0
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d001      	beq.n	8001306 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001302:	f000 f8f5 	bl	80014f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001306:	bf00      	nop
 8001308:	bd80      	pop	{r7, pc}
 800130a:	bf00      	nop
 800130c:	20000698 	.word	0x20000698
 8001310:	40013800 	.word	0x40013800

08001314 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b088      	sub	sp, #32
 8001318:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800131a:	f107 0310 	add.w	r3, r7, #16
 800131e:	2200      	movs	r2, #0
 8001320:	601a      	str	r2, [r3, #0]
 8001322:	605a      	str	r2, [r3, #4]
 8001324:	609a      	str	r2, [r3, #8]
 8001326:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001328:	4b2e      	ldr	r3, [pc, #184]	; (80013e4 <MX_GPIO_Init+0xd0>)
 800132a:	699b      	ldr	r3, [r3, #24]
 800132c:	4a2d      	ldr	r2, [pc, #180]	; (80013e4 <MX_GPIO_Init+0xd0>)
 800132e:	f043 0310 	orr.w	r3, r3, #16
 8001332:	6193      	str	r3, [r2, #24]
 8001334:	4b2b      	ldr	r3, [pc, #172]	; (80013e4 <MX_GPIO_Init+0xd0>)
 8001336:	699b      	ldr	r3, [r3, #24]
 8001338:	f003 0310 	and.w	r3, r3, #16
 800133c:	60fb      	str	r3, [r7, #12]
 800133e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001340:	4b28      	ldr	r3, [pc, #160]	; (80013e4 <MX_GPIO_Init+0xd0>)
 8001342:	699b      	ldr	r3, [r3, #24]
 8001344:	4a27      	ldr	r2, [pc, #156]	; (80013e4 <MX_GPIO_Init+0xd0>)
 8001346:	f043 0320 	orr.w	r3, r3, #32
 800134a:	6193      	str	r3, [r2, #24]
 800134c:	4b25      	ldr	r3, [pc, #148]	; (80013e4 <MX_GPIO_Init+0xd0>)
 800134e:	699b      	ldr	r3, [r3, #24]
 8001350:	f003 0320 	and.w	r3, r3, #32
 8001354:	60bb      	str	r3, [r7, #8]
 8001356:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001358:	4b22      	ldr	r3, [pc, #136]	; (80013e4 <MX_GPIO_Init+0xd0>)
 800135a:	699b      	ldr	r3, [r3, #24]
 800135c:	4a21      	ldr	r2, [pc, #132]	; (80013e4 <MX_GPIO_Init+0xd0>)
 800135e:	f043 0304 	orr.w	r3, r3, #4
 8001362:	6193      	str	r3, [r2, #24]
 8001364:	4b1f      	ldr	r3, [pc, #124]	; (80013e4 <MX_GPIO_Init+0xd0>)
 8001366:	699b      	ldr	r3, [r3, #24]
 8001368:	f003 0304 	and.w	r3, r3, #4
 800136c:	607b      	str	r3, [r7, #4]
 800136e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001370:	4b1c      	ldr	r3, [pc, #112]	; (80013e4 <MX_GPIO_Init+0xd0>)
 8001372:	699b      	ldr	r3, [r3, #24]
 8001374:	4a1b      	ldr	r2, [pc, #108]	; (80013e4 <MX_GPIO_Init+0xd0>)
 8001376:	f043 0308 	orr.w	r3, r3, #8
 800137a:	6193      	str	r3, [r2, #24]
 800137c:	4b19      	ldr	r3, [pc, #100]	; (80013e4 <MX_GPIO_Init+0xd0>)
 800137e:	699b      	ldr	r3, [r3, #24]
 8001380:	f003 0308 	and.w	r3, r3, #8
 8001384:	603b      	str	r3, [r7, #0]
 8001386:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(User_Led_GPIO_Port, User_Led_Pin, GPIO_PIN_RESET);
 8001388:	2200      	movs	r2, #0
 800138a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800138e:	4816      	ldr	r0, [pc, #88]	; (80013e8 <MX_GPIO_Init+0xd4>)
 8001390:	f001 fa16 	bl	80027c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : User_Led_Pin */
  GPIO_InitStruct.Pin = User_Led_Pin;
 8001394:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001398:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800139a:	2301      	movs	r3, #1
 800139c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800139e:	2300      	movs	r3, #0
 80013a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013a2:	2302      	movs	r3, #2
 80013a4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(User_Led_GPIO_Port, &GPIO_InitStruct);
 80013a6:	f107 0310 	add.w	r3, r7, #16
 80013aa:	4619      	mov	r1, r3
 80013ac:	480e      	ldr	r0, [pc, #56]	; (80013e8 <MX_GPIO_Init+0xd4>)
 80013ae:	f001 f883 	bl	80024b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 80013b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013b6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80013b8:	4b0c      	ldr	r3, [pc, #48]	; (80013ec <MX_GPIO_Init+0xd8>)
 80013ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013bc:	2300      	movs	r3, #0
 80013be:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013c0:	f107 0310 	add.w	r3, r7, #16
 80013c4:	4619      	mov	r1, r3
 80013c6:	480a      	ldr	r0, [pc, #40]	; (80013f0 <MX_GPIO_Init+0xdc>)
 80013c8:	f001 f876 	bl	80024b8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80013cc:	2200      	movs	r2, #0
 80013ce:	2100      	movs	r1, #0
 80013d0:	2028      	movs	r0, #40	; 0x28
 80013d2:	f001 f83a 	bl	800244a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80013d6:	2028      	movs	r0, #40	; 0x28
 80013d8:	f001 f853 	bl	8002482 <HAL_NVIC_EnableIRQ>

}
 80013dc:	bf00      	nop
 80013de:	3720      	adds	r7, #32
 80013e0:	46bd      	mov	sp, r7
 80013e2:	bd80      	pop	{r7, pc}
 80013e4:	40021000 	.word	0x40021000
 80013e8:	40011000 	.word	0x40011000
 80013ec:	10110000 	.word	0x10110000
 80013f0:	40010c00 	.word	0x40010c00
 80013f4:	00000000 	.word	0x00000000

080013f8 <_BatteryVoltage>:

/* USER CODE BEGIN 4 */


// Battery voltage reading
float _BatteryVoltage(void){
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b082      	sub	sp, #8
 80013fc:	af00      	add	r7, sp, #0
	uint16_t rawAnalogVal = 0;
 80013fe:	2300      	movs	r3, #0
 8001400:	80fb      	strh	r3, [r7, #6]
	float batteryVoltage = 0.0;
 8001402:	f04f 0300 	mov.w	r3, #0
 8001406:	603b      	str	r3, [r7, #0]

	// Initializing the ADC
	HAL_ADC_Start(&hadc1);
 8001408:	4819      	ldr	r0, [pc, #100]	; (8001470 <_BatteryVoltage+0x78>)
 800140a:	f000 fbf3 	bl	8001bf4 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 100);
 800140e:	2164      	movs	r1, #100	; 0x64
 8001410:	4817      	ldr	r0, [pc, #92]	; (8001470 <_BatteryVoltage+0x78>)
 8001412:	f000 fc9d 	bl	8001d50 <HAL_ADC_PollForConversion>

	// Reading ADC Value
	// NOTE: it is a 12-bit ADC
	rawAnalogVal = HAL_ADC_GetValue(&hadc1);
 8001416:	4816      	ldr	r0, [pc, #88]	; (8001470 <_BatteryVoltage+0x78>)
 8001418:	f000 fda0 	bl	8001f5c <HAL_ADC_GetValue>
 800141c:	4603      	mov	r3, r0
 800141e:	80fb      	strh	r3, [r7, #6]

	// Mapping the ADC value to readable voltage
	// NOTE: the value is multiplied by 2 because of the voltage divider circuit
	// which divides the voltage by 2
	batteryVoltage = (rawAnalogVal * 2  / 4095.00) * 3.30;
 8001420:	88fb      	ldrh	r3, [r7, #6]
 8001422:	005b      	lsls	r3, r3, #1
 8001424:	4618      	mov	r0, r3
 8001426:	f7fe ffed 	bl	8000404 <__aeabi_i2d>
 800142a:	a30d      	add	r3, pc, #52	; (adr r3, 8001460 <_BatteryVoltage+0x68>)
 800142c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001430:	f7ff f97c 	bl	800072c <__aeabi_ddiv>
 8001434:	4602      	mov	r2, r0
 8001436:	460b      	mov	r3, r1
 8001438:	4610      	mov	r0, r2
 800143a:	4619      	mov	r1, r3
 800143c:	a30a      	add	r3, pc, #40	; (adr r3, 8001468 <_BatteryVoltage+0x70>)
 800143e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001442:	f7ff f849 	bl	80004d8 <__aeabi_dmul>
 8001446:	4602      	mov	r2, r0
 8001448:	460b      	mov	r3, r1
 800144a:	4610      	mov	r0, r2
 800144c:	4619      	mov	r1, r3
 800144e:	f7ff fb1b 	bl	8000a88 <__aeabi_d2f>
 8001452:	4603      	mov	r3, r0
 8001454:	603b      	str	r3, [r7, #0]
	// Removing some inefficiency
	//batteryVoltage += 0.1;

	return batteryVoltage;
 8001456:	683b      	ldr	r3, [r7, #0]
}
 8001458:	4618      	mov	r0, r3
 800145a:	3708      	adds	r7, #8
 800145c:	46bd      	mov	sp, r7
 800145e:	bd80      	pop	{r7, pc}
 8001460:	00000000 	.word	0x00000000
 8001464:	40affe00 	.word	0x40affe00
 8001468:	66666666 	.word	0x66666666
 800146c:	400a6666 	.word	0x400a6666
 8001470:	20000668 	.word	0x20000668

08001474 <HAL_TIM_PeriodElapsedCallback>:


// Timer_2 ISR
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001474:	b580      	push	{r7, lr}
 8001476:	b086      	sub	sp, #24
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
  if(htim->Instance == TIM2){
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001484:	d127      	bne.n	80014d6 <HAL_TIM_PeriodElapsedCallback+0x62>
	  HAL_GPIO_TogglePin(User_Led_GPIO_Port, User_Led_Pin);
 8001486:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800148a:	4815      	ldr	r0, [pc, #84]	; (80014e0 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 800148c:	f001 f9b0 	bl	80027f0 <HAL_GPIO_TogglePin>

	  /*
	   * Battery voltage exhibition section
	   */
	  // Setting the position for battery voltage on the display
	  SSD1306_SetPosition(0, 0);
 8001490:	2100      	movs	r1, #0
 8001492:	2000      	movs	r0, #0
 8001494:	f7ff fcb0 	bl	8000df8 <SSD1306_SetPosition>
	  SSD1306_PrintString("Bat_Vol: ", &Font_7x10, SSD1306_COLOR_WHITE);
 8001498:	2201      	movs	r2, #1
 800149a:	4912      	ldr	r1, [pc, #72]	; (80014e4 <HAL_TIM_PeriodElapsedCallback+0x70>)
 800149c:	4812      	ldr	r0, [pc, #72]	; (80014e8 <HAL_TIM_PeriodElapsedCallback+0x74>)
 800149e:	f7ff fd41 	bl	8000f24 <SSD1306_PrintString>

	  // Preparing to convert the float value into string to be shown on display
	  char voltageText[10];
	  sprintf(voltageText, "%.2f", _BatteryVoltage());
 80014a2:	f7ff ffa9 	bl	80013f8 <_BatteryVoltage>
 80014a6:	4603      	mov	r3, r0
 80014a8:	4618      	mov	r0, r3
 80014aa:	f7fe ffbd 	bl	8000428 <__aeabi_f2d>
 80014ae:	4602      	mov	r2, r0
 80014b0:	460b      	mov	r3, r1
 80014b2:	f107 000c 	add.w	r0, r7, #12
 80014b6:	490d      	ldr	r1, [pc, #52]	; (80014ec <HAL_TIM_PeriodElapsedCallback+0x78>)
 80014b8:	f003 fe4a 	bl	8005150 <siprintf>

	  // Printing the battery voltage value on display
	  SSD1306_SetPosition(63, 0);
 80014bc:	2100      	movs	r1, #0
 80014be:	203f      	movs	r0, #63	; 0x3f
 80014c0:	f7ff fc9a 	bl	8000df8 <SSD1306_SetPosition>
	  SSD1306_PrintString(voltageText, &Font_7x10, SSD1306_COLOR_WHITE);
 80014c4:	f107 030c 	add.w	r3, r7, #12
 80014c8:	2201      	movs	r2, #1
 80014ca:	4906      	ldr	r1, [pc, #24]	; (80014e4 <HAL_TIM_PeriodElapsedCallback+0x70>)
 80014cc:	4618      	mov	r0, r3
 80014ce:	f7ff fd29 	bl	8000f24 <SSD1306_PrintString>
	  SSD1306_UpdateScreen();
 80014d2:	f7ff fbed 	bl	8000cb0 <SSD1306_UpdateScreen>

  }
}
 80014d6:	bf00      	nop
 80014d8:	3718      	adds	r7, #24
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}
 80014de:	bf00      	nop
 80014e0:	40011000 	.word	0x40011000
 80014e4:	20000000 	.word	0x20000000
 80014e8:	080075e0 	.word	0x080075e0
 80014ec:	080075ec 	.word	0x080075ec

080014f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014f0:	b480      	push	{r7}
 80014f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014f4:	b672      	cpsid	i
}
 80014f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014f8:	e7fe      	b.n	80014f8 <Error_Handler+0x8>
	...

080014fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014fc:	b480      	push	{r7}
 80014fe:	b085      	sub	sp, #20
 8001500:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001502:	4b15      	ldr	r3, [pc, #84]	; (8001558 <HAL_MspInit+0x5c>)
 8001504:	699b      	ldr	r3, [r3, #24]
 8001506:	4a14      	ldr	r2, [pc, #80]	; (8001558 <HAL_MspInit+0x5c>)
 8001508:	f043 0301 	orr.w	r3, r3, #1
 800150c:	6193      	str	r3, [r2, #24]
 800150e:	4b12      	ldr	r3, [pc, #72]	; (8001558 <HAL_MspInit+0x5c>)
 8001510:	699b      	ldr	r3, [r3, #24]
 8001512:	f003 0301 	and.w	r3, r3, #1
 8001516:	60bb      	str	r3, [r7, #8]
 8001518:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800151a:	4b0f      	ldr	r3, [pc, #60]	; (8001558 <HAL_MspInit+0x5c>)
 800151c:	69db      	ldr	r3, [r3, #28]
 800151e:	4a0e      	ldr	r2, [pc, #56]	; (8001558 <HAL_MspInit+0x5c>)
 8001520:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001524:	61d3      	str	r3, [r2, #28]
 8001526:	4b0c      	ldr	r3, [pc, #48]	; (8001558 <HAL_MspInit+0x5c>)
 8001528:	69db      	ldr	r3, [r3, #28]
 800152a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800152e:	607b      	str	r3, [r7, #4]
 8001530:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001532:	4b0a      	ldr	r3, [pc, #40]	; (800155c <HAL_MspInit+0x60>)
 8001534:	685b      	ldr	r3, [r3, #4]
 8001536:	60fb      	str	r3, [r7, #12]
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800153e:	60fb      	str	r3, [r7, #12]
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001546:	60fb      	str	r3, [r7, #12]
 8001548:	4a04      	ldr	r2, [pc, #16]	; (800155c <HAL_MspInit+0x60>)
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800154e:	bf00      	nop
 8001550:	3714      	adds	r7, #20
 8001552:	46bd      	mov	sp, r7
 8001554:	bc80      	pop	{r7}
 8001556:	4770      	bx	lr
 8001558:	40021000 	.word	0x40021000
 800155c:	40010000 	.word	0x40010000

08001560 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b088      	sub	sp, #32
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001568:	f107 0310 	add.w	r3, r7, #16
 800156c:	2200      	movs	r2, #0
 800156e:	601a      	str	r2, [r3, #0]
 8001570:	605a      	str	r2, [r3, #4]
 8001572:	609a      	str	r2, [r3, #8]
 8001574:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	4a14      	ldr	r2, [pc, #80]	; (80015cc <HAL_ADC_MspInit+0x6c>)
 800157c:	4293      	cmp	r3, r2
 800157e:	d121      	bne.n	80015c4 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001580:	4b13      	ldr	r3, [pc, #76]	; (80015d0 <HAL_ADC_MspInit+0x70>)
 8001582:	699b      	ldr	r3, [r3, #24]
 8001584:	4a12      	ldr	r2, [pc, #72]	; (80015d0 <HAL_ADC_MspInit+0x70>)
 8001586:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800158a:	6193      	str	r3, [r2, #24]
 800158c:	4b10      	ldr	r3, [pc, #64]	; (80015d0 <HAL_ADC_MspInit+0x70>)
 800158e:	699b      	ldr	r3, [r3, #24]
 8001590:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001594:	60fb      	str	r3, [r7, #12]
 8001596:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001598:	4b0d      	ldr	r3, [pc, #52]	; (80015d0 <HAL_ADC_MspInit+0x70>)
 800159a:	699b      	ldr	r3, [r3, #24]
 800159c:	4a0c      	ldr	r2, [pc, #48]	; (80015d0 <HAL_ADC_MspInit+0x70>)
 800159e:	f043 0304 	orr.w	r3, r3, #4
 80015a2:	6193      	str	r3, [r2, #24]
 80015a4:	4b0a      	ldr	r3, [pc, #40]	; (80015d0 <HAL_ADC_MspInit+0x70>)
 80015a6:	699b      	ldr	r3, [r3, #24]
 80015a8:	f003 0304 	and.w	r3, r3, #4
 80015ac:	60bb      	str	r3, [r7, #8]
 80015ae:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80015b0:	2301      	movs	r3, #1
 80015b2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80015b4:	2303      	movs	r3, #3
 80015b6:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015b8:	f107 0310 	add.w	r3, r7, #16
 80015bc:	4619      	mov	r1, r3
 80015be:	4805      	ldr	r0, [pc, #20]	; (80015d4 <HAL_ADC_MspInit+0x74>)
 80015c0:	f000 ff7a 	bl	80024b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80015c4:	bf00      	nop
 80015c6:	3720      	adds	r7, #32
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bd80      	pop	{r7, pc}
 80015cc:	40012400 	.word	0x40012400
 80015d0:	40021000 	.word	0x40021000
 80015d4:	40010800 	.word	0x40010800

080015d8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b088      	sub	sp, #32
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015e0:	f107 0310 	add.w	r3, r7, #16
 80015e4:	2200      	movs	r2, #0
 80015e6:	601a      	str	r2, [r3, #0]
 80015e8:	605a      	str	r2, [r3, #4]
 80015ea:	609a      	str	r2, [r3, #8]
 80015ec:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	4a15      	ldr	r2, [pc, #84]	; (8001648 <HAL_I2C_MspInit+0x70>)
 80015f4:	4293      	cmp	r3, r2
 80015f6:	d123      	bne.n	8001640 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015f8:	4b14      	ldr	r3, [pc, #80]	; (800164c <HAL_I2C_MspInit+0x74>)
 80015fa:	699b      	ldr	r3, [r3, #24]
 80015fc:	4a13      	ldr	r2, [pc, #76]	; (800164c <HAL_I2C_MspInit+0x74>)
 80015fe:	f043 0308 	orr.w	r3, r3, #8
 8001602:	6193      	str	r3, [r2, #24]
 8001604:	4b11      	ldr	r3, [pc, #68]	; (800164c <HAL_I2C_MspInit+0x74>)
 8001606:	699b      	ldr	r3, [r3, #24]
 8001608:	f003 0308 	and.w	r3, r3, #8
 800160c:	60fb      	str	r3, [r7, #12]
 800160e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001610:	23c0      	movs	r3, #192	; 0xc0
 8001612:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001614:	2312      	movs	r3, #18
 8001616:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001618:	2303      	movs	r3, #3
 800161a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800161c:	f107 0310 	add.w	r3, r7, #16
 8001620:	4619      	mov	r1, r3
 8001622:	480b      	ldr	r0, [pc, #44]	; (8001650 <HAL_I2C_MspInit+0x78>)
 8001624:	f000 ff48 	bl	80024b8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001628:	4b08      	ldr	r3, [pc, #32]	; (800164c <HAL_I2C_MspInit+0x74>)
 800162a:	69db      	ldr	r3, [r3, #28]
 800162c:	4a07      	ldr	r2, [pc, #28]	; (800164c <HAL_I2C_MspInit+0x74>)
 800162e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001632:	61d3      	str	r3, [r2, #28]
 8001634:	4b05      	ldr	r3, [pc, #20]	; (800164c <HAL_I2C_MspInit+0x74>)
 8001636:	69db      	ldr	r3, [r3, #28]
 8001638:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800163c:	60bb      	str	r3, [r7, #8]
 800163e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001640:	bf00      	nop
 8001642:	3720      	adds	r7, #32
 8001644:	46bd      	mov	sp, r7
 8001646:	bd80      	pop	{r7, pc}
 8001648:	40005400 	.word	0x40005400
 800164c:	40021000 	.word	0x40021000
 8001650:	40010c00 	.word	0x40010c00

08001654 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b084      	sub	sp, #16
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001664:	d113      	bne.n	800168e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001666:	4b0c      	ldr	r3, [pc, #48]	; (8001698 <HAL_TIM_Base_MspInit+0x44>)
 8001668:	69db      	ldr	r3, [r3, #28]
 800166a:	4a0b      	ldr	r2, [pc, #44]	; (8001698 <HAL_TIM_Base_MspInit+0x44>)
 800166c:	f043 0301 	orr.w	r3, r3, #1
 8001670:	61d3      	str	r3, [r2, #28]
 8001672:	4b09      	ldr	r3, [pc, #36]	; (8001698 <HAL_TIM_Base_MspInit+0x44>)
 8001674:	69db      	ldr	r3, [r3, #28]
 8001676:	f003 0301 	and.w	r3, r3, #1
 800167a:	60fb      	str	r3, [r7, #12]
 800167c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800167e:	2200      	movs	r2, #0
 8001680:	2100      	movs	r1, #0
 8001682:	201c      	movs	r0, #28
 8001684:	f000 fee1 	bl	800244a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001688:	201c      	movs	r0, #28
 800168a:	f000 fefa 	bl	8002482 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800168e:	bf00      	nop
 8001690:	3710      	adds	r7, #16
 8001692:	46bd      	mov	sp, r7
 8001694:	bd80      	pop	{r7, pc}
 8001696:	bf00      	nop
 8001698:	40021000 	.word	0x40021000

0800169c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b088      	sub	sp, #32
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016a4:	f107 0310 	add.w	r3, r7, #16
 80016a8:	2200      	movs	r2, #0
 80016aa:	601a      	str	r2, [r3, #0]
 80016ac:	605a      	str	r2, [r3, #4]
 80016ae:	609a      	str	r2, [r3, #8]
 80016b0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	4a1c      	ldr	r2, [pc, #112]	; (8001728 <HAL_UART_MspInit+0x8c>)
 80016b8:	4293      	cmp	r3, r2
 80016ba:	d131      	bne.n	8001720 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80016bc:	4b1b      	ldr	r3, [pc, #108]	; (800172c <HAL_UART_MspInit+0x90>)
 80016be:	699b      	ldr	r3, [r3, #24]
 80016c0:	4a1a      	ldr	r2, [pc, #104]	; (800172c <HAL_UART_MspInit+0x90>)
 80016c2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016c6:	6193      	str	r3, [r2, #24]
 80016c8:	4b18      	ldr	r3, [pc, #96]	; (800172c <HAL_UART_MspInit+0x90>)
 80016ca:	699b      	ldr	r3, [r3, #24]
 80016cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016d0:	60fb      	str	r3, [r7, #12]
 80016d2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016d4:	4b15      	ldr	r3, [pc, #84]	; (800172c <HAL_UART_MspInit+0x90>)
 80016d6:	699b      	ldr	r3, [r3, #24]
 80016d8:	4a14      	ldr	r2, [pc, #80]	; (800172c <HAL_UART_MspInit+0x90>)
 80016da:	f043 0304 	orr.w	r3, r3, #4
 80016de:	6193      	str	r3, [r2, #24]
 80016e0:	4b12      	ldr	r3, [pc, #72]	; (800172c <HAL_UART_MspInit+0x90>)
 80016e2:	699b      	ldr	r3, [r3, #24]
 80016e4:	f003 0304 	and.w	r3, r3, #4
 80016e8:	60bb      	str	r3, [r7, #8]
 80016ea:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80016ec:	f44f 7300 	mov.w	r3, #512	; 0x200
 80016f0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016f2:	2302      	movs	r3, #2
 80016f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80016f6:	2303      	movs	r3, #3
 80016f8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016fa:	f107 0310 	add.w	r3, r7, #16
 80016fe:	4619      	mov	r1, r3
 8001700:	480b      	ldr	r0, [pc, #44]	; (8001730 <HAL_UART_MspInit+0x94>)
 8001702:	f000 fed9 	bl	80024b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001706:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800170a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800170c:	2300      	movs	r3, #0
 800170e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001710:	2300      	movs	r3, #0
 8001712:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001714:	f107 0310 	add.w	r3, r7, #16
 8001718:	4619      	mov	r1, r3
 800171a:	4805      	ldr	r0, [pc, #20]	; (8001730 <HAL_UART_MspInit+0x94>)
 800171c:	f000 fecc 	bl	80024b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001720:	bf00      	nop
 8001722:	3720      	adds	r7, #32
 8001724:	46bd      	mov	sp, r7
 8001726:	bd80      	pop	{r7, pc}
 8001728:	40013800 	.word	0x40013800
 800172c:	40021000 	.word	0x40021000
 8001730:	40010800 	.word	0x40010800

08001734 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001734:	b480      	push	{r7}
 8001736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001738:	e7fe      	b.n	8001738 <NMI_Handler+0x4>

0800173a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800173a:	b480      	push	{r7}
 800173c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800173e:	e7fe      	b.n	800173e <HardFault_Handler+0x4>

08001740 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001740:	b480      	push	{r7}
 8001742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001744:	e7fe      	b.n	8001744 <MemManage_Handler+0x4>

08001746 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001746:	b480      	push	{r7}
 8001748:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800174a:	e7fe      	b.n	800174a <BusFault_Handler+0x4>

0800174c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800174c:	b480      	push	{r7}
 800174e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001750:	e7fe      	b.n	8001750 <UsageFault_Handler+0x4>

08001752 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001752:	b480      	push	{r7}
 8001754:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001756:	bf00      	nop
 8001758:	46bd      	mov	sp, r7
 800175a:	bc80      	pop	{r7}
 800175c:	4770      	bx	lr

0800175e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800175e:	b480      	push	{r7}
 8001760:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001762:	bf00      	nop
 8001764:	46bd      	mov	sp, r7
 8001766:	bc80      	pop	{r7}
 8001768:	4770      	bx	lr

0800176a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800176a:	b480      	push	{r7}
 800176c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800176e:	bf00      	nop
 8001770:	46bd      	mov	sp, r7
 8001772:	bc80      	pop	{r7}
 8001774:	4770      	bx	lr

08001776 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001776:	b580      	push	{r7, lr}
 8001778:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800177a:	f000 f947 	bl	8001a0c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800177e:	bf00      	nop
 8001780:	bd80      	pop	{r7, pc}
	...

08001784 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001788:	4802      	ldr	r0, [pc, #8]	; (8001794 <TIM2_IRQHandler+0x10>)
 800178a:	f002 fc1b 	bl	8003fc4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800178e:	bf00      	nop
 8001790:	bd80      	pop	{r7, pc}
 8001792:	bf00      	nop
 8001794:	200006dc 	.word	0x200006dc

08001798 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 800179c:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80017a0:	f001 f840 	bl	8002824 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80017a4:	bf00      	nop
 80017a6:	bd80      	pop	{r7, pc}

080017a8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80017a8:	b480      	push	{r7}
 80017aa:	af00      	add	r7, sp, #0
	return 1;
 80017ac:	2301      	movs	r3, #1
}
 80017ae:	4618      	mov	r0, r3
 80017b0:	46bd      	mov	sp, r7
 80017b2:	bc80      	pop	{r7}
 80017b4:	4770      	bx	lr

080017b6 <_kill>:

int _kill(int pid, int sig)
{
 80017b6:	b580      	push	{r7, lr}
 80017b8:	b082      	sub	sp, #8
 80017ba:	af00      	add	r7, sp, #0
 80017bc:	6078      	str	r0, [r7, #4]
 80017be:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80017c0:	f003 f834 	bl	800482c <__errno>
 80017c4:	4603      	mov	r3, r0
 80017c6:	2216      	movs	r2, #22
 80017c8:	601a      	str	r2, [r3, #0]
	return -1;
 80017ca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80017ce:	4618      	mov	r0, r3
 80017d0:	3708      	adds	r7, #8
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}

080017d6 <_exit>:

void _exit (int status)
{
 80017d6:	b580      	push	{r7, lr}
 80017d8:	b082      	sub	sp, #8
 80017da:	af00      	add	r7, sp, #0
 80017dc:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80017de:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80017e2:	6878      	ldr	r0, [r7, #4]
 80017e4:	f7ff ffe7 	bl	80017b6 <_kill>
	while (1) {}		/* Make sure we hang here */
 80017e8:	e7fe      	b.n	80017e8 <_exit+0x12>

080017ea <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80017ea:	b580      	push	{r7, lr}
 80017ec:	b086      	sub	sp, #24
 80017ee:	af00      	add	r7, sp, #0
 80017f0:	60f8      	str	r0, [r7, #12]
 80017f2:	60b9      	str	r1, [r7, #8]
 80017f4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017f6:	2300      	movs	r3, #0
 80017f8:	617b      	str	r3, [r7, #20]
 80017fa:	e00a      	b.n	8001812 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80017fc:	f3af 8000 	nop.w
 8001800:	4601      	mov	r1, r0
 8001802:	68bb      	ldr	r3, [r7, #8]
 8001804:	1c5a      	adds	r2, r3, #1
 8001806:	60ba      	str	r2, [r7, #8]
 8001808:	b2ca      	uxtb	r2, r1
 800180a:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800180c:	697b      	ldr	r3, [r7, #20]
 800180e:	3301      	adds	r3, #1
 8001810:	617b      	str	r3, [r7, #20]
 8001812:	697a      	ldr	r2, [r7, #20]
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	429a      	cmp	r2, r3
 8001818:	dbf0      	blt.n	80017fc <_read+0x12>
	}

return len;
 800181a:	687b      	ldr	r3, [r7, #4]
}
 800181c:	4618      	mov	r0, r3
 800181e:	3718      	adds	r7, #24
 8001820:	46bd      	mov	sp, r7
 8001822:	bd80      	pop	{r7, pc}

08001824 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b086      	sub	sp, #24
 8001828:	af00      	add	r7, sp, #0
 800182a:	60f8      	str	r0, [r7, #12]
 800182c:	60b9      	str	r1, [r7, #8]
 800182e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001830:	2300      	movs	r3, #0
 8001832:	617b      	str	r3, [r7, #20]
 8001834:	e009      	b.n	800184a <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001836:	68bb      	ldr	r3, [r7, #8]
 8001838:	1c5a      	adds	r2, r3, #1
 800183a:	60ba      	str	r2, [r7, #8]
 800183c:	781b      	ldrb	r3, [r3, #0]
 800183e:	4618      	mov	r0, r3
 8001840:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001844:	697b      	ldr	r3, [r7, #20]
 8001846:	3301      	adds	r3, #1
 8001848:	617b      	str	r3, [r7, #20]
 800184a:	697a      	ldr	r2, [r7, #20]
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	429a      	cmp	r2, r3
 8001850:	dbf1      	blt.n	8001836 <_write+0x12>
	}
	return len;
 8001852:	687b      	ldr	r3, [r7, #4]
}
 8001854:	4618      	mov	r0, r3
 8001856:	3718      	adds	r7, #24
 8001858:	46bd      	mov	sp, r7
 800185a:	bd80      	pop	{r7, pc}

0800185c <_close>:

int _close(int file)
{
 800185c:	b480      	push	{r7}
 800185e:	b083      	sub	sp, #12
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
	return -1;
 8001864:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001868:	4618      	mov	r0, r3
 800186a:	370c      	adds	r7, #12
 800186c:	46bd      	mov	sp, r7
 800186e:	bc80      	pop	{r7}
 8001870:	4770      	bx	lr

08001872 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001872:	b480      	push	{r7}
 8001874:	b083      	sub	sp, #12
 8001876:	af00      	add	r7, sp, #0
 8001878:	6078      	str	r0, [r7, #4]
 800187a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001882:	605a      	str	r2, [r3, #4]
	return 0;
 8001884:	2300      	movs	r3, #0
}
 8001886:	4618      	mov	r0, r3
 8001888:	370c      	adds	r7, #12
 800188a:	46bd      	mov	sp, r7
 800188c:	bc80      	pop	{r7}
 800188e:	4770      	bx	lr

08001890 <_isatty>:

int _isatty(int file)
{
 8001890:	b480      	push	{r7}
 8001892:	b083      	sub	sp, #12
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
	return 1;
 8001898:	2301      	movs	r3, #1
}
 800189a:	4618      	mov	r0, r3
 800189c:	370c      	adds	r7, #12
 800189e:	46bd      	mov	sp, r7
 80018a0:	bc80      	pop	{r7}
 80018a2:	4770      	bx	lr

080018a4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80018a4:	b480      	push	{r7}
 80018a6:	b085      	sub	sp, #20
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	60f8      	str	r0, [r7, #12]
 80018ac:	60b9      	str	r1, [r7, #8]
 80018ae:	607a      	str	r2, [r7, #4]
	return 0;
 80018b0:	2300      	movs	r3, #0
}
 80018b2:	4618      	mov	r0, r3
 80018b4:	3714      	adds	r7, #20
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bc80      	pop	{r7}
 80018ba:	4770      	bx	lr

080018bc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b086      	sub	sp, #24
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80018c4:	4a14      	ldr	r2, [pc, #80]	; (8001918 <_sbrk+0x5c>)
 80018c6:	4b15      	ldr	r3, [pc, #84]	; (800191c <_sbrk+0x60>)
 80018c8:	1ad3      	subs	r3, r2, r3
 80018ca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80018cc:	697b      	ldr	r3, [r7, #20]
 80018ce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80018d0:	4b13      	ldr	r3, [pc, #76]	; (8001920 <_sbrk+0x64>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d102      	bne.n	80018de <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80018d8:	4b11      	ldr	r3, [pc, #68]	; (8001920 <_sbrk+0x64>)
 80018da:	4a12      	ldr	r2, [pc, #72]	; (8001924 <_sbrk+0x68>)
 80018dc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80018de:	4b10      	ldr	r3, [pc, #64]	; (8001920 <_sbrk+0x64>)
 80018e0:	681a      	ldr	r2, [r3, #0]
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	4413      	add	r3, r2
 80018e6:	693a      	ldr	r2, [r7, #16]
 80018e8:	429a      	cmp	r2, r3
 80018ea:	d207      	bcs.n	80018fc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80018ec:	f002 ff9e 	bl	800482c <__errno>
 80018f0:	4603      	mov	r3, r0
 80018f2:	220c      	movs	r2, #12
 80018f4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80018f6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80018fa:	e009      	b.n	8001910 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80018fc:	4b08      	ldr	r3, [pc, #32]	; (8001920 <_sbrk+0x64>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001902:	4b07      	ldr	r3, [pc, #28]	; (8001920 <_sbrk+0x64>)
 8001904:	681a      	ldr	r2, [r3, #0]
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	4413      	add	r3, r2
 800190a:	4a05      	ldr	r2, [pc, #20]	; (8001920 <_sbrk+0x64>)
 800190c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800190e:	68fb      	ldr	r3, [r7, #12]
}
 8001910:	4618      	mov	r0, r3
 8001912:	3718      	adds	r7, #24
 8001914:	46bd      	mov	sp, r7
 8001916:	bd80      	pop	{r7, pc}
 8001918:	20005000 	.word	0x20005000
 800191c:	00000400 	.word	0x00000400
 8001920:	20000608 	.word	0x20000608
 8001924:	20000738 	.word	0x20000738

08001928 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001928:	b480      	push	{r7}
 800192a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800192c:	bf00      	nop
 800192e:	46bd      	mov	sp, r7
 8001930:	bc80      	pop	{r7}
 8001932:	4770      	bx	lr

08001934 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001934:	480c      	ldr	r0, [pc, #48]	; (8001968 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001936:	490d      	ldr	r1, [pc, #52]	; (800196c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001938:	4a0d      	ldr	r2, [pc, #52]	; (8001970 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800193a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800193c:	e002      	b.n	8001944 <LoopCopyDataInit>

0800193e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800193e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001940:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001942:	3304      	adds	r3, #4

08001944 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001944:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001946:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001948:	d3f9      	bcc.n	800193e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800194a:	4a0a      	ldr	r2, [pc, #40]	; (8001974 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800194c:	4c0a      	ldr	r4, [pc, #40]	; (8001978 <LoopFillZerobss+0x22>)
  movs r3, #0
 800194e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001950:	e001      	b.n	8001956 <LoopFillZerobss>

08001952 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001952:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001954:	3204      	adds	r2, #4

08001956 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001956:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001958:	d3fb      	bcc.n	8001952 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800195a:	f7ff ffe5 	bl	8001928 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800195e:	f002 ff6b 	bl	8004838 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001962:	f7ff fb7f 	bl	8001064 <main>
  bx lr
 8001966:	4770      	bx	lr
  ldr r0, =_sdata
 8001968:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800196c:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8001970:	08008184 	.word	0x08008184
  ldr r2, =_sbss
 8001974:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 8001978:	20000738 	.word	0x20000738

0800197c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800197c:	e7fe      	b.n	800197c <ADC1_2_IRQHandler>
	...

08001980 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001984:	4b08      	ldr	r3, [pc, #32]	; (80019a8 <HAL_Init+0x28>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	4a07      	ldr	r2, [pc, #28]	; (80019a8 <HAL_Init+0x28>)
 800198a:	f043 0310 	orr.w	r3, r3, #16
 800198e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001990:	2003      	movs	r0, #3
 8001992:	f000 fd4f 	bl	8002434 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001996:	2000      	movs	r0, #0
 8001998:	f000 f808 	bl	80019ac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800199c:	f7ff fdae 	bl	80014fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80019a0:	2300      	movs	r3, #0
}
 80019a2:	4618      	mov	r0, r3
 80019a4:	bd80      	pop	{r7, pc}
 80019a6:	bf00      	nop
 80019a8:	40022000 	.word	0x40022000

080019ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b082      	sub	sp, #8
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80019b4:	4b12      	ldr	r3, [pc, #72]	; (8001a00 <HAL_InitTick+0x54>)
 80019b6:	681a      	ldr	r2, [r3, #0]
 80019b8:	4b12      	ldr	r3, [pc, #72]	; (8001a04 <HAL_InitTick+0x58>)
 80019ba:	781b      	ldrb	r3, [r3, #0]
 80019bc:	4619      	mov	r1, r3
 80019be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80019c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80019ca:	4618      	mov	r0, r3
 80019cc:	f000 fd67 	bl	800249e <HAL_SYSTICK_Config>
 80019d0:	4603      	mov	r3, r0
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d001      	beq.n	80019da <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80019d6:	2301      	movs	r3, #1
 80019d8:	e00e      	b.n	80019f8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	2b0f      	cmp	r3, #15
 80019de:	d80a      	bhi.n	80019f6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019e0:	2200      	movs	r2, #0
 80019e2:	6879      	ldr	r1, [r7, #4]
 80019e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80019e8:	f000 fd2f 	bl	800244a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80019ec:	4a06      	ldr	r2, [pc, #24]	; (8001a08 <HAL_InitTick+0x5c>)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80019f2:	2300      	movs	r3, #0
 80019f4:	e000      	b.n	80019f8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80019f6:	2301      	movs	r3, #1
}
 80019f8:	4618      	mov	r0, r3
 80019fa:	3708      	adds	r7, #8
 80019fc:	46bd      	mov	sp, r7
 80019fe:	bd80      	pop	{r7, pc}
 8001a00:	20000008 	.word	0x20000008
 8001a04:	20000010 	.word	0x20000010
 8001a08:	2000000c 	.word	0x2000000c

08001a0c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a10:	4b05      	ldr	r3, [pc, #20]	; (8001a28 <HAL_IncTick+0x1c>)
 8001a12:	781b      	ldrb	r3, [r3, #0]
 8001a14:	461a      	mov	r2, r3
 8001a16:	4b05      	ldr	r3, [pc, #20]	; (8001a2c <HAL_IncTick+0x20>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	4413      	add	r3, r2
 8001a1c:	4a03      	ldr	r2, [pc, #12]	; (8001a2c <HAL_IncTick+0x20>)
 8001a1e:	6013      	str	r3, [r2, #0]
}
 8001a20:	bf00      	nop
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bc80      	pop	{r7}
 8001a26:	4770      	bx	lr
 8001a28:	20000010 	.word	0x20000010
 8001a2c:	20000724 	.word	0x20000724

08001a30 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a30:	b480      	push	{r7}
 8001a32:	af00      	add	r7, sp, #0
  return uwTick;
 8001a34:	4b02      	ldr	r3, [pc, #8]	; (8001a40 <HAL_GetTick+0x10>)
 8001a36:	681b      	ldr	r3, [r3, #0]
}
 8001a38:	4618      	mov	r0, r3
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bc80      	pop	{r7}
 8001a3e:	4770      	bx	lr
 8001a40:	20000724 	.word	0x20000724

08001a44 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b086      	sub	sp, #24
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001a50:	2300      	movs	r3, #0
 8001a52:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001a54:	2300      	movs	r3, #0
 8001a56:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001a58:	2300      	movs	r3, #0
 8001a5a:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d101      	bne.n	8001a66 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001a62:	2301      	movs	r3, #1
 8001a64:	e0be      	b.n	8001be4 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	689b      	ldr	r3, [r3, #8]
 8001a6a:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d109      	bne.n	8001a88 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	2200      	movs	r2, #0
 8001a78:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001a82:	6878      	ldr	r0, [r7, #4]
 8001a84:	f7ff fd6c 	bl	8001560 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001a88:	6878      	ldr	r0, [r7, #4]
 8001a8a:	f000 fbc5 	bl	8002218 <ADC_ConversionStop_Disable>
 8001a8e:	4603      	mov	r3, r0
 8001a90:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a96:	f003 0310 	and.w	r3, r3, #16
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	f040 8099 	bne.w	8001bd2 <HAL_ADC_Init+0x18e>
 8001aa0:	7dfb      	ldrb	r3, [r7, #23]
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	f040 8095 	bne.w	8001bd2 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001aac:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001ab0:	f023 0302 	bic.w	r3, r3, #2
 8001ab4:	f043 0202 	orr.w	r2, r3, #2
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001ac4:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	7b1b      	ldrb	r3, [r3, #12]
 8001aca:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001acc:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001ace:	68ba      	ldr	r2, [r7, #8]
 8001ad0:	4313      	orrs	r3, r2
 8001ad2:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	689b      	ldr	r3, [r3, #8]
 8001ad8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001adc:	d003      	beq.n	8001ae6 <HAL_ADC_Init+0xa2>
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	689b      	ldr	r3, [r3, #8]
 8001ae2:	2b01      	cmp	r3, #1
 8001ae4:	d102      	bne.n	8001aec <HAL_ADC_Init+0xa8>
 8001ae6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001aea:	e000      	b.n	8001aee <HAL_ADC_Init+0xaa>
 8001aec:	2300      	movs	r3, #0
 8001aee:	693a      	ldr	r2, [r7, #16]
 8001af0:	4313      	orrs	r3, r2
 8001af2:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	7d1b      	ldrb	r3, [r3, #20]
 8001af8:	2b01      	cmp	r3, #1
 8001afa:	d119      	bne.n	8001b30 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	7b1b      	ldrb	r3, [r3, #12]
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d109      	bne.n	8001b18 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	699b      	ldr	r3, [r3, #24]
 8001b08:	3b01      	subs	r3, #1
 8001b0a:	035a      	lsls	r2, r3, #13
 8001b0c:	693b      	ldr	r3, [r7, #16]
 8001b0e:	4313      	orrs	r3, r2
 8001b10:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001b14:	613b      	str	r3, [r7, #16]
 8001b16:	e00b      	b.n	8001b30 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b1c:	f043 0220 	orr.w	r2, r3, #32
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b28:	f043 0201 	orr.w	r2, r3, #1
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	685b      	ldr	r3, [r3, #4]
 8001b36:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	693a      	ldr	r2, [r7, #16]
 8001b40:	430a      	orrs	r2, r1
 8001b42:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	689a      	ldr	r2, [r3, #8]
 8001b4a:	4b28      	ldr	r3, [pc, #160]	; (8001bec <HAL_ADC_Init+0x1a8>)
 8001b4c:	4013      	ands	r3, r2
 8001b4e:	687a      	ldr	r2, [r7, #4]
 8001b50:	6812      	ldr	r2, [r2, #0]
 8001b52:	68b9      	ldr	r1, [r7, #8]
 8001b54:	430b      	orrs	r3, r1
 8001b56:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	689b      	ldr	r3, [r3, #8]
 8001b5c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001b60:	d003      	beq.n	8001b6a <HAL_ADC_Init+0x126>
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	689b      	ldr	r3, [r3, #8]
 8001b66:	2b01      	cmp	r3, #1
 8001b68:	d104      	bne.n	8001b74 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	691b      	ldr	r3, [r3, #16]
 8001b6e:	3b01      	subs	r3, #1
 8001b70:	051b      	lsls	r3, r3, #20
 8001b72:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b7a:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	68fa      	ldr	r2, [r7, #12]
 8001b84:	430a      	orrs	r2, r1
 8001b86:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	689a      	ldr	r2, [r3, #8]
 8001b8e:	4b18      	ldr	r3, [pc, #96]	; (8001bf0 <HAL_ADC_Init+0x1ac>)
 8001b90:	4013      	ands	r3, r2
 8001b92:	68ba      	ldr	r2, [r7, #8]
 8001b94:	429a      	cmp	r2, r3
 8001b96:	d10b      	bne.n	8001bb0 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ba2:	f023 0303 	bic.w	r3, r3, #3
 8001ba6:	f043 0201 	orr.w	r2, r3, #1
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001bae:	e018      	b.n	8001be2 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bb4:	f023 0312 	bic.w	r3, r3, #18
 8001bb8:	f043 0210 	orr.w	r2, r3, #16
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bc4:	f043 0201 	orr.w	r2, r3, #1
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001bcc:	2301      	movs	r3, #1
 8001bce:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001bd0:	e007      	b.n	8001be2 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bd6:	f043 0210 	orr.w	r2, r3, #16
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001bde:	2301      	movs	r3, #1
 8001be0:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001be2:	7dfb      	ldrb	r3, [r7, #23]
}
 8001be4:	4618      	mov	r0, r3
 8001be6:	3718      	adds	r7, #24
 8001be8:	46bd      	mov	sp, r7
 8001bea:	bd80      	pop	{r7, pc}
 8001bec:	ffe1f7fd 	.word	0xffe1f7fd
 8001bf0:	ff1f0efe 	.word	0xff1f0efe

08001bf4 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b084      	sub	sp, #16
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001c06:	2b01      	cmp	r3, #1
 8001c08:	d101      	bne.n	8001c0e <HAL_ADC_Start+0x1a>
 8001c0a:	2302      	movs	r3, #2
 8001c0c:	e098      	b.n	8001d40 <HAL_ADC_Start+0x14c>
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	2201      	movs	r2, #1
 8001c12:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8001c16:	6878      	ldr	r0, [r7, #4]
 8001c18:	f000 faa4 	bl	8002164 <ADC_Enable>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8001c20:	7bfb      	ldrb	r3, [r7, #15]
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	f040 8087 	bne.w	8001d36 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c2c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001c30:	f023 0301 	bic.w	r3, r3, #1
 8001c34:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	4a41      	ldr	r2, [pc, #260]	; (8001d48 <HAL_ADC_Start+0x154>)
 8001c42:	4293      	cmp	r3, r2
 8001c44:	d105      	bne.n	8001c52 <HAL_ADC_Start+0x5e>
 8001c46:	4b41      	ldr	r3, [pc, #260]	; (8001d4c <HAL_ADC_Start+0x158>)
 8001c48:	685b      	ldr	r3, [r3, #4]
 8001c4a:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d115      	bne.n	8001c7e <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c56:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	685b      	ldr	r3, [r3, #4]
 8001c64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d026      	beq.n	8001cba <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c70:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001c74:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001c7c:	e01d      	b.n	8001cba <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c82:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	4a2f      	ldr	r2, [pc, #188]	; (8001d4c <HAL_ADC_Start+0x158>)
 8001c90:	4293      	cmp	r3, r2
 8001c92:	d004      	beq.n	8001c9e <HAL_ADC_Start+0xaa>
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	4a2b      	ldr	r2, [pc, #172]	; (8001d48 <HAL_ADC_Start+0x154>)
 8001c9a:	4293      	cmp	r3, r2
 8001c9c:	d10d      	bne.n	8001cba <HAL_ADC_Start+0xc6>
 8001c9e:	4b2b      	ldr	r3, [pc, #172]	; (8001d4c <HAL_ADC_Start+0x158>)
 8001ca0:	685b      	ldr	r3, [r3, #4]
 8001ca2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d007      	beq.n	8001cba <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cae:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001cb2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cbe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d006      	beq.n	8001cd4 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cca:	f023 0206 	bic.w	r2, r3, #6
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	62da      	str	r2, [r3, #44]	; 0x2c
 8001cd2:	e002      	b.n	8001cda <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	2200      	movs	r2, #0
 8001cde:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f06f 0202 	mvn.w	r2, #2
 8001cea:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	689b      	ldr	r3, [r3, #8]
 8001cf2:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001cf6:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001cfa:	d113      	bne.n	8001d24 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001d00:	4a11      	ldr	r2, [pc, #68]	; (8001d48 <HAL_ADC_Start+0x154>)
 8001d02:	4293      	cmp	r3, r2
 8001d04:	d105      	bne.n	8001d12 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001d06:	4b11      	ldr	r3, [pc, #68]	; (8001d4c <HAL_ADC_Start+0x158>)
 8001d08:	685b      	ldr	r3, [r3, #4]
 8001d0a:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d108      	bne.n	8001d24 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	689a      	ldr	r2, [r3, #8]
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8001d20:	609a      	str	r2, [r3, #8]
 8001d22:	e00c      	b.n	8001d3e <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	689a      	ldr	r2, [r3, #8]
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001d32:	609a      	str	r2, [r3, #8]
 8001d34:	e003      	b.n	8001d3e <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	2200      	movs	r2, #0
 8001d3a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8001d3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d40:	4618      	mov	r0, r3
 8001d42:	3710      	adds	r7, #16
 8001d44:	46bd      	mov	sp, r7
 8001d46:	bd80      	pop	{r7, pc}
 8001d48:	40012800 	.word	0x40012800
 8001d4c:	40012400 	.word	0x40012400

08001d50 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001d50:	b590      	push	{r4, r7, lr}
 8001d52:	b087      	sub	sp, #28
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
 8001d58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8001d5e:	2300      	movs	r3, #0
 8001d60:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8001d62:	2300      	movs	r3, #0
 8001d64:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8001d66:	f7ff fe63 	bl	8001a30 <HAL_GetTick>
 8001d6a:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	689b      	ldr	r3, [r3, #8]
 8001d72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d00b      	beq.n	8001d92 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d7e:	f043 0220 	orr.w	r2, r3, #32
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	2200      	movs	r2, #0
 8001d8a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 8001d8e:	2301      	movs	r3, #1
 8001d90:	e0d3      	b.n	8001f3a <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	685b      	ldr	r3, [r3, #4]
 8001d98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d131      	bne.n	8001e04 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001da6:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d12a      	bne.n	8001e04 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001dae:	e021      	b.n	8001df4 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001db6:	d01d      	beq.n	8001df4 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d007      	beq.n	8001dce <HAL_ADC_PollForConversion+0x7e>
 8001dbe:	f7ff fe37 	bl	8001a30 <HAL_GetTick>
 8001dc2:	4602      	mov	r2, r0
 8001dc4:	697b      	ldr	r3, [r7, #20]
 8001dc6:	1ad3      	subs	r3, r2, r3
 8001dc8:	683a      	ldr	r2, [r7, #0]
 8001dca:	429a      	cmp	r2, r3
 8001dcc:	d212      	bcs.n	8001df4 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f003 0302 	and.w	r3, r3, #2
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d10b      	bne.n	8001df4 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001de0:	f043 0204 	orr.w	r2, r3, #4
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	2200      	movs	r2, #0
 8001dec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            
            return HAL_TIMEOUT;
 8001df0:	2303      	movs	r3, #3
 8001df2:	e0a2      	b.n	8001f3a <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f003 0302 	and.w	r3, r3, #2
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d0d6      	beq.n	8001db0 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001e02:	e070      	b.n	8001ee6 <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8001e04:	4b4f      	ldr	r3, [pc, #316]	; (8001f44 <HAL_ADC_PollForConversion+0x1f4>)
 8001e06:	681c      	ldr	r4, [r3, #0]
 8001e08:	2002      	movs	r0, #2
 8001e0a:	f001 ff75 	bl	8003cf8 <HAL_RCCEx_GetPeriphCLKFreq>
 8001e0e:	4603      	mov	r3, r0
 8001e10:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	6919      	ldr	r1, [r3, #16]
 8001e1a:	4b4b      	ldr	r3, [pc, #300]	; (8001f48 <HAL_ADC_PollForConversion+0x1f8>)
 8001e1c:	400b      	ands	r3, r1
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d118      	bne.n	8001e54 <HAL_ADC_PollForConversion+0x104>
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	68d9      	ldr	r1, [r3, #12]
 8001e28:	4b48      	ldr	r3, [pc, #288]	; (8001f4c <HAL_ADC_PollForConversion+0x1fc>)
 8001e2a:	400b      	ands	r3, r1
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d111      	bne.n	8001e54 <HAL_ADC_PollForConversion+0x104>
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	6919      	ldr	r1, [r3, #16]
 8001e36:	4b46      	ldr	r3, [pc, #280]	; (8001f50 <HAL_ADC_PollForConversion+0x200>)
 8001e38:	400b      	ands	r3, r1
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d108      	bne.n	8001e50 <HAL_ADC_PollForConversion+0x100>
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	68d9      	ldr	r1, [r3, #12]
 8001e44:	4b43      	ldr	r3, [pc, #268]	; (8001f54 <HAL_ADC_PollForConversion+0x204>)
 8001e46:	400b      	ands	r3, r1
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d101      	bne.n	8001e50 <HAL_ADC_PollForConversion+0x100>
 8001e4c:	2314      	movs	r3, #20
 8001e4e:	e020      	b.n	8001e92 <HAL_ADC_PollForConversion+0x142>
 8001e50:	2329      	movs	r3, #41	; 0x29
 8001e52:	e01e      	b.n	8001e92 <HAL_ADC_PollForConversion+0x142>
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	6919      	ldr	r1, [r3, #16]
 8001e5a:	4b3d      	ldr	r3, [pc, #244]	; (8001f50 <HAL_ADC_PollForConversion+0x200>)
 8001e5c:	400b      	ands	r3, r1
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d106      	bne.n	8001e70 <HAL_ADC_PollForConversion+0x120>
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	68d9      	ldr	r1, [r3, #12]
 8001e68:	4b3a      	ldr	r3, [pc, #232]	; (8001f54 <HAL_ADC_PollForConversion+0x204>)
 8001e6a:	400b      	ands	r3, r1
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d00d      	beq.n	8001e8c <HAL_ADC_PollForConversion+0x13c>
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	6919      	ldr	r1, [r3, #16]
 8001e76:	4b38      	ldr	r3, [pc, #224]	; (8001f58 <HAL_ADC_PollForConversion+0x208>)
 8001e78:	400b      	ands	r3, r1
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d108      	bne.n	8001e90 <HAL_ADC_PollForConversion+0x140>
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	68d9      	ldr	r1, [r3, #12]
 8001e84:	4b34      	ldr	r3, [pc, #208]	; (8001f58 <HAL_ADC_PollForConversion+0x208>)
 8001e86:	400b      	ands	r3, r1
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d101      	bne.n	8001e90 <HAL_ADC_PollForConversion+0x140>
 8001e8c:	2354      	movs	r3, #84	; 0x54
 8001e8e:	e000      	b.n	8001e92 <HAL_ADC_PollForConversion+0x142>
 8001e90:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8001e92:	fb02 f303 	mul.w	r3, r2, r3
 8001e96:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001e98:	e021      	b.n	8001ede <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001ea0:	d01a      	beq.n	8001ed8 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d007      	beq.n	8001eb8 <HAL_ADC_PollForConversion+0x168>
 8001ea8:	f7ff fdc2 	bl	8001a30 <HAL_GetTick>
 8001eac:	4602      	mov	r2, r0
 8001eae:	697b      	ldr	r3, [r7, #20]
 8001eb0:	1ad3      	subs	r3, r2, r3
 8001eb2:	683a      	ldr	r2, [r7, #0]
 8001eb4:	429a      	cmp	r2, r3
 8001eb6:	d20f      	bcs.n	8001ed8 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	693a      	ldr	r2, [r7, #16]
 8001ebc:	429a      	cmp	r2, r3
 8001ebe:	d90b      	bls.n	8001ed8 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ec4:	f043 0204 	orr.w	r2, r3, #4
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	629a      	str	r2, [r3, #40]	; 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	2200      	movs	r2, #0
 8001ed0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            return HAL_TIMEOUT;
 8001ed4:	2303      	movs	r3, #3
 8001ed6:	e030      	b.n	8001f3a <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	3301      	adds	r3, #1
 8001edc:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	693a      	ldr	r2, [r7, #16]
 8001ee2:	429a      	cmp	r2, r3
 8001ee4:	d8d9      	bhi.n	8001e9a <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f06f 0212 	mvn.w	r2, #18
 8001eee:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ef4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	689b      	ldr	r3, [r3, #8]
 8001f02:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001f06:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001f0a:	d115      	bne.n	8001f38 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d111      	bne.n	8001f38 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f18:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f24:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d105      	bne.n	8001f38 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f30:	f043 0201 	orr.w	r2, r3, #1
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001f38:	2300      	movs	r3, #0
}
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	371c      	adds	r7, #28
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bd90      	pop	{r4, r7, pc}
 8001f42:	bf00      	nop
 8001f44:	20000008 	.word	0x20000008
 8001f48:	24924924 	.word	0x24924924
 8001f4c:	00924924 	.word	0x00924924
 8001f50:	12492492 	.word	0x12492492
 8001f54:	00492492 	.word	0x00492492
 8001f58:	00249249 	.word	0x00249249

08001f5c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	b083      	sub	sp, #12
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	370c      	adds	r7, #12
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bc80      	pop	{r7}
 8001f72:	4770      	bx	lr

08001f74 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001f74:	b480      	push	{r7}
 8001f76:	b085      	sub	sp, #20
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
 8001f7c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f7e:	2300      	movs	r3, #0
 8001f80:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001f82:	2300      	movs	r3, #0
 8001f84:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001f8c:	2b01      	cmp	r3, #1
 8001f8e:	d101      	bne.n	8001f94 <HAL_ADC_ConfigChannel+0x20>
 8001f90:	2302      	movs	r3, #2
 8001f92:	e0dc      	b.n	800214e <HAL_ADC_ConfigChannel+0x1da>
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	2201      	movs	r2, #1
 8001f98:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	685b      	ldr	r3, [r3, #4]
 8001fa0:	2b06      	cmp	r3, #6
 8001fa2:	d81c      	bhi.n	8001fde <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	685a      	ldr	r2, [r3, #4]
 8001fae:	4613      	mov	r3, r2
 8001fb0:	009b      	lsls	r3, r3, #2
 8001fb2:	4413      	add	r3, r2
 8001fb4:	3b05      	subs	r3, #5
 8001fb6:	221f      	movs	r2, #31
 8001fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fbc:	43db      	mvns	r3, r3
 8001fbe:	4019      	ands	r1, r3
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	6818      	ldr	r0, [r3, #0]
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	685a      	ldr	r2, [r3, #4]
 8001fc8:	4613      	mov	r3, r2
 8001fca:	009b      	lsls	r3, r3, #2
 8001fcc:	4413      	add	r3, r2
 8001fce:	3b05      	subs	r3, #5
 8001fd0:	fa00 f203 	lsl.w	r2, r0, r3
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	430a      	orrs	r2, r1
 8001fda:	635a      	str	r2, [r3, #52]	; 0x34
 8001fdc:	e03c      	b.n	8002058 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	685b      	ldr	r3, [r3, #4]
 8001fe2:	2b0c      	cmp	r3, #12
 8001fe4:	d81c      	bhi.n	8002020 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	685a      	ldr	r2, [r3, #4]
 8001ff0:	4613      	mov	r3, r2
 8001ff2:	009b      	lsls	r3, r3, #2
 8001ff4:	4413      	add	r3, r2
 8001ff6:	3b23      	subs	r3, #35	; 0x23
 8001ff8:	221f      	movs	r2, #31
 8001ffa:	fa02 f303 	lsl.w	r3, r2, r3
 8001ffe:	43db      	mvns	r3, r3
 8002000:	4019      	ands	r1, r3
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	6818      	ldr	r0, [r3, #0]
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	685a      	ldr	r2, [r3, #4]
 800200a:	4613      	mov	r3, r2
 800200c:	009b      	lsls	r3, r3, #2
 800200e:	4413      	add	r3, r2
 8002010:	3b23      	subs	r3, #35	; 0x23
 8002012:	fa00 f203 	lsl.w	r2, r0, r3
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	430a      	orrs	r2, r1
 800201c:	631a      	str	r2, [r3, #48]	; 0x30
 800201e:	e01b      	b.n	8002058 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	685a      	ldr	r2, [r3, #4]
 800202a:	4613      	mov	r3, r2
 800202c:	009b      	lsls	r3, r3, #2
 800202e:	4413      	add	r3, r2
 8002030:	3b41      	subs	r3, #65	; 0x41
 8002032:	221f      	movs	r2, #31
 8002034:	fa02 f303 	lsl.w	r3, r2, r3
 8002038:	43db      	mvns	r3, r3
 800203a:	4019      	ands	r1, r3
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	6818      	ldr	r0, [r3, #0]
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	685a      	ldr	r2, [r3, #4]
 8002044:	4613      	mov	r3, r2
 8002046:	009b      	lsls	r3, r3, #2
 8002048:	4413      	add	r3, r2
 800204a:	3b41      	subs	r3, #65	; 0x41
 800204c:	fa00 f203 	lsl.w	r2, r0, r3
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	430a      	orrs	r2, r1
 8002056:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	2b09      	cmp	r3, #9
 800205e:	d91c      	bls.n	800209a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	68d9      	ldr	r1, [r3, #12]
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	681a      	ldr	r2, [r3, #0]
 800206a:	4613      	mov	r3, r2
 800206c:	005b      	lsls	r3, r3, #1
 800206e:	4413      	add	r3, r2
 8002070:	3b1e      	subs	r3, #30
 8002072:	2207      	movs	r2, #7
 8002074:	fa02 f303 	lsl.w	r3, r2, r3
 8002078:	43db      	mvns	r3, r3
 800207a:	4019      	ands	r1, r3
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	6898      	ldr	r0, [r3, #8]
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	681a      	ldr	r2, [r3, #0]
 8002084:	4613      	mov	r3, r2
 8002086:	005b      	lsls	r3, r3, #1
 8002088:	4413      	add	r3, r2
 800208a:	3b1e      	subs	r3, #30
 800208c:	fa00 f203 	lsl.w	r2, r0, r3
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	430a      	orrs	r2, r1
 8002096:	60da      	str	r2, [r3, #12]
 8002098:	e019      	b.n	80020ce <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	6919      	ldr	r1, [r3, #16]
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	681a      	ldr	r2, [r3, #0]
 80020a4:	4613      	mov	r3, r2
 80020a6:	005b      	lsls	r3, r3, #1
 80020a8:	4413      	add	r3, r2
 80020aa:	2207      	movs	r2, #7
 80020ac:	fa02 f303 	lsl.w	r3, r2, r3
 80020b0:	43db      	mvns	r3, r3
 80020b2:	4019      	ands	r1, r3
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	6898      	ldr	r0, [r3, #8]
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	681a      	ldr	r2, [r3, #0]
 80020bc:	4613      	mov	r3, r2
 80020be:	005b      	lsls	r3, r3, #1
 80020c0:	4413      	add	r3, r2
 80020c2:	fa00 f203 	lsl.w	r2, r0, r3
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	430a      	orrs	r2, r1
 80020cc:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	2b10      	cmp	r3, #16
 80020d4:	d003      	beq.n	80020de <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80020da:	2b11      	cmp	r3, #17
 80020dc:	d132      	bne.n	8002144 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	4a1d      	ldr	r2, [pc, #116]	; (8002158 <HAL_ADC_ConfigChannel+0x1e4>)
 80020e4:	4293      	cmp	r3, r2
 80020e6:	d125      	bne.n	8002134 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	689b      	ldr	r3, [r3, #8]
 80020ee:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d126      	bne.n	8002144 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	689a      	ldr	r2, [r3, #8]
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002104:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	2b10      	cmp	r3, #16
 800210c:	d11a      	bne.n	8002144 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800210e:	4b13      	ldr	r3, [pc, #76]	; (800215c <HAL_ADC_ConfigChannel+0x1e8>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	4a13      	ldr	r2, [pc, #76]	; (8002160 <HAL_ADC_ConfigChannel+0x1ec>)
 8002114:	fba2 2303 	umull	r2, r3, r2, r3
 8002118:	0c9a      	lsrs	r2, r3, #18
 800211a:	4613      	mov	r3, r2
 800211c:	009b      	lsls	r3, r3, #2
 800211e:	4413      	add	r3, r2
 8002120:	005b      	lsls	r3, r3, #1
 8002122:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002124:	e002      	b.n	800212c <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8002126:	68bb      	ldr	r3, [r7, #8]
 8002128:	3b01      	subs	r3, #1
 800212a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800212c:	68bb      	ldr	r3, [r7, #8]
 800212e:	2b00      	cmp	r3, #0
 8002130:	d1f9      	bne.n	8002126 <HAL_ADC_ConfigChannel+0x1b2>
 8002132:	e007      	b.n	8002144 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002138:	f043 0220 	orr.w	r2, r3, #32
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002140:	2301      	movs	r3, #1
 8002142:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	2200      	movs	r2, #0
 8002148:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800214c:	7bfb      	ldrb	r3, [r7, #15]
}
 800214e:	4618      	mov	r0, r3
 8002150:	3714      	adds	r7, #20
 8002152:	46bd      	mov	sp, r7
 8002154:	bc80      	pop	{r7}
 8002156:	4770      	bx	lr
 8002158:	40012400 	.word	0x40012400
 800215c:	20000008 	.word	0x20000008
 8002160:	431bde83 	.word	0x431bde83

08002164 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b084      	sub	sp, #16
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800216c:	2300      	movs	r3, #0
 800216e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002170:	2300      	movs	r3, #0
 8002172:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	689b      	ldr	r3, [r3, #8]
 800217a:	f003 0301 	and.w	r3, r3, #1
 800217e:	2b01      	cmp	r3, #1
 8002180:	d040      	beq.n	8002204 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	689a      	ldr	r2, [r3, #8]
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f042 0201 	orr.w	r2, r2, #1
 8002190:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002192:	4b1f      	ldr	r3, [pc, #124]	; (8002210 <ADC_Enable+0xac>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	4a1f      	ldr	r2, [pc, #124]	; (8002214 <ADC_Enable+0xb0>)
 8002198:	fba2 2303 	umull	r2, r3, r2, r3
 800219c:	0c9b      	lsrs	r3, r3, #18
 800219e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80021a0:	e002      	b.n	80021a8 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80021a2:	68bb      	ldr	r3, [r7, #8]
 80021a4:	3b01      	subs	r3, #1
 80021a6:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80021a8:	68bb      	ldr	r3, [r7, #8]
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d1f9      	bne.n	80021a2 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80021ae:	f7ff fc3f 	bl	8001a30 <HAL_GetTick>
 80021b2:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80021b4:	e01f      	b.n	80021f6 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80021b6:	f7ff fc3b 	bl	8001a30 <HAL_GetTick>
 80021ba:	4602      	mov	r2, r0
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	1ad3      	subs	r3, r2, r3
 80021c0:	2b02      	cmp	r3, #2
 80021c2:	d918      	bls.n	80021f6 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	689b      	ldr	r3, [r3, #8]
 80021ca:	f003 0301 	and.w	r3, r3, #1
 80021ce:	2b01      	cmp	r3, #1
 80021d0:	d011      	beq.n	80021f6 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021d6:	f043 0210 	orr.w	r2, r3, #16
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021e2:	f043 0201 	orr.w	r2, r3, #1
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	2200      	movs	r2, #0
 80021ee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 80021f2:	2301      	movs	r3, #1
 80021f4:	e007      	b.n	8002206 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	689b      	ldr	r3, [r3, #8]
 80021fc:	f003 0301 	and.w	r3, r3, #1
 8002200:	2b01      	cmp	r3, #1
 8002202:	d1d8      	bne.n	80021b6 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002204:	2300      	movs	r3, #0
}
 8002206:	4618      	mov	r0, r3
 8002208:	3710      	adds	r7, #16
 800220a:	46bd      	mov	sp, r7
 800220c:	bd80      	pop	{r7, pc}
 800220e:	bf00      	nop
 8002210:	20000008 	.word	0x20000008
 8002214:	431bde83 	.word	0x431bde83

08002218 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b084      	sub	sp, #16
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002220:	2300      	movs	r3, #0
 8002222:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	689b      	ldr	r3, [r3, #8]
 800222a:	f003 0301 	and.w	r3, r3, #1
 800222e:	2b01      	cmp	r3, #1
 8002230:	d12e      	bne.n	8002290 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	689a      	ldr	r2, [r3, #8]
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f022 0201 	bic.w	r2, r2, #1
 8002240:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002242:	f7ff fbf5 	bl	8001a30 <HAL_GetTick>
 8002246:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002248:	e01b      	b.n	8002282 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800224a:	f7ff fbf1 	bl	8001a30 <HAL_GetTick>
 800224e:	4602      	mov	r2, r0
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	1ad3      	subs	r3, r2, r3
 8002254:	2b02      	cmp	r3, #2
 8002256:	d914      	bls.n	8002282 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	689b      	ldr	r3, [r3, #8]
 800225e:	f003 0301 	and.w	r3, r3, #1
 8002262:	2b01      	cmp	r3, #1
 8002264:	d10d      	bne.n	8002282 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800226a:	f043 0210 	orr.w	r2, r3, #16
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002276:	f043 0201 	orr.w	r2, r3, #1
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 800227e:	2301      	movs	r3, #1
 8002280:	e007      	b.n	8002292 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	689b      	ldr	r3, [r3, #8]
 8002288:	f003 0301 	and.w	r3, r3, #1
 800228c:	2b01      	cmp	r3, #1
 800228e:	d0dc      	beq.n	800224a <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002290:	2300      	movs	r3, #0
}
 8002292:	4618      	mov	r0, r3
 8002294:	3710      	adds	r7, #16
 8002296:	46bd      	mov	sp, r7
 8002298:	bd80      	pop	{r7, pc}
	...

0800229c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800229c:	b480      	push	{r7}
 800229e:	b085      	sub	sp, #20
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	f003 0307 	and.w	r3, r3, #7
 80022aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80022ac:	4b0c      	ldr	r3, [pc, #48]	; (80022e0 <__NVIC_SetPriorityGrouping+0x44>)
 80022ae:	68db      	ldr	r3, [r3, #12]
 80022b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80022b2:	68ba      	ldr	r2, [r7, #8]
 80022b4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80022b8:	4013      	ands	r3, r2
 80022ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80022c0:	68bb      	ldr	r3, [r7, #8]
 80022c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80022c4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80022c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80022cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80022ce:	4a04      	ldr	r2, [pc, #16]	; (80022e0 <__NVIC_SetPriorityGrouping+0x44>)
 80022d0:	68bb      	ldr	r3, [r7, #8]
 80022d2:	60d3      	str	r3, [r2, #12]
}
 80022d4:	bf00      	nop
 80022d6:	3714      	adds	r7, #20
 80022d8:	46bd      	mov	sp, r7
 80022da:	bc80      	pop	{r7}
 80022dc:	4770      	bx	lr
 80022de:	bf00      	nop
 80022e0:	e000ed00 	.word	0xe000ed00

080022e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80022e4:	b480      	push	{r7}
 80022e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80022e8:	4b04      	ldr	r3, [pc, #16]	; (80022fc <__NVIC_GetPriorityGrouping+0x18>)
 80022ea:	68db      	ldr	r3, [r3, #12]
 80022ec:	0a1b      	lsrs	r3, r3, #8
 80022ee:	f003 0307 	and.w	r3, r3, #7
}
 80022f2:	4618      	mov	r0, r3
 80022f4:	46bd      	mov	sp, r7
 80022f6:	bc80      	pop	{r7}
 80022f8:	4770      	bx	lr
 80022fa:	bf00      	nop
 80022fc:	e000ed00 	.word	0xe000ed00

08002300 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002300:	b480      	push	{r7}
 8002302:	b083      	sub	sp, #12
 8002304:	af00      	add	r7, sp, #0
 8002306:	4603      	mov	r3, r0
 8002308:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800230a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800230e:	2b00      	cmp	r3, #0
 8002310:	db0b      	blt.n	800232a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002312:	79fb      	ldrb	r3, [r7, #7]
 8002314:	f003 021f 	and.w	r2, r3, #31
 8002318:	4906      	ldr	r1, [pc, #24]	; (8002334 <__NVIC_EnableIRQ+0x34>)
 800231a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800231e:	095b      	lsrs	r3, r3, #5
 8002320:	2001      	movs	r0, #1
 8002322:	fa00 f202 	lsl.w	r2, r0, r2
 8002326:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800232a:	bf00      	nop
 800232c:	370c      	adds	r7, #12
 800232e:	46bd      	mov	sp, r7
 8002330:	bc80      	pop	{r7}
 8002332:	4770      	bx	lr
 8002334:	e000e100 	.word	0xe000e100

08002338 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002338:	b480      	push	{r7}
 800233a:	b083      	sub	sp, #12
 800233c:	af00      	add	r7, sp, #0
 800233e:	4603      	mov	r3, r0
 8002340:	6039      	str	r1, [r7, #0]
 8002342:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002344:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002348:	2b00      	cmp	r3, #0
 800234a:	db0a      	blt.n	8002362 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	b2da      	uxtb	r2, r3
 8002350:	490c      	ldr	r1, [pc, #48]	; (8002384 <__NVIC_SetPriority+0x4c>)
 8002352:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002356:	0112      	lsls	r2, r2, #4
 8002358:	b2d2      	uxtb	r2, r2
 800235a:	440b      	add	r3, r1
 800235c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002360:	e00a      	b.n	8002378 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	b2da      	uxtb	r2, r3
 8002366:	4908      	ldr	r1, [pc, #32]	; (8002388 <__NVIC_SetPriority+0x50>)
 8002368:	79fb      	ldrb	r3, [r7, #7]
 800236a:	f003 030f 	and.w	r3, r3, #15
 800236e:	3b04      	subs	r3, #4
 8002370:	0112      	lsls	r2, r2, #4
 8002372:	b2d2      	uxtb	r2, r2
 8002374:	440b      	add	r3, r1
 8002376:	761a      	strb	r2, [r3, #24]
}
 8002378:	bf00      	nop
 800237a:	370c      	adds	r7, #12
 800237c:	46bd      	mov	sp, r7
 800237e:	bc80      	pop	{r7}
 8002380:	4770      	bx	lr
 8002382:	bf00      	nop
 8002384:	e000e100 	.word	0xe000e100
 8002388:	e000ed00 	.word	0xe000ed00

0800238c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800238c:	b480      	push	{r7}
 800238e:	b089      	sub	sp, #36	; 0x24
 8002390:	af00      	add	r7, sp, #0
 8002392:	60f8      	str	r0, [r7, #12]
 8002394:	60b9      	str	r1, [r7, #8]
 8002396:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	f003 0307 	and.w	r3, r3, #7
 800239e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80023a0:	69fb      	ldr	r3, [r7, #28]
 80023a2:	f1c3 0307 	rsb	r3, r3, #7
 80023a6:	2b04      	cmp	r3, #4
 80023a8:	bf28      	it	cs
 80023aa:	2304      	movcs	r3, #4
 80023ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80023ae:	69fb      	ldr	r3, [r7, #28]
 80023b0:	3304      	adds	r3, #4
 80023b2:	2b06      	cmp	r3, #6
 80023b4:	d902      	bls.n	80023bc <NVIC_EncodePriority+0x30>
 80023b6:	69fb      	ldr	r3, [r7, #28]
 80023b8:	3b03      	subs	r3, #3
 80023ba:	e000      	b.n	80023be <NVIC_EncodePriority+0x32>
 80023bc:	2300      	movs	r3, #0
 80023be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023c0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80023c4:	69bb      	ldr	r3, [r7, #24]
 80023c6:	fa02 f303 	lsl.w	r3, r2, r3
 80023ca:	43da      	mvns	r2, r3
 80023cc:	68bb      	ldr	r3, [r7, #8]
 80023ce:	401a      	ands	r2, r3
 80023d0:	697b      	ldr	r3, [r7, #20]
 80023d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80023d4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80023d8:	697b      	ldr	r3, [r7, #20]
 80023da:	fa01 f303 	lsl.w	r3, r1, r3
 80023de:	43d9      	mvns	r1, r3
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023e4:	4313      	orrs	r3, r2
         );
}
 80023e6:	4618      	mov	r0, r3
 80023e8:	3724      	adds	r7, #36	; 0x24
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bc80      	pop	{r7}
 80023ee:	4770      	bx	lr

080023f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b082      	sub	sp, #8
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	3b01      	subs	r3, #1
 80023fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002400:	d301      	bcc.n	8002406 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002402:	2301      	movs	r3, #1
 8002404:	e00f      	b.n	8002426 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002406:	4a0a      	ldr	r2, [pc, #40]	; (8002430 <SysTick_Config+0x40>)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	3b01      	subs	r3, #1
 800240c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800240e:	210f      	movs	r1, #15
 8002410:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002414:	f7ff ff90 	bl	8002338 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002418:	4b05      	ldr	r3, [pc, #20]	; (8002430 <SysTick_Config+0x40>)
 800241a:	2200      	movs	r2, #0
 800241c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800241e:	4b04      	ldr	r3, [pc, #16]	; (8002430 <SysTick_Config+0x40>)
 8002420:	2207      	movs	r2, #7
 8002422:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002424:	2300      	movs	r3, #0
}
 8002426:	4618      	mov	r0, r3
 8002428:	3708      	adds	r7, #8
 800242a:	46bd      	mov	sp, r7
 800242c:	bd80      	pop	{r7, pc}
 800242e:	bf00      	nop
 8002430:	e000e010 	.word	0xe000e010

08002434 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b082      	sub	sp, #8
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800243c:	6878      	ldr	r0, [r7, #4]
 800243e:	f7ff ff2d 	bl	800229c <__NVIC_SetPriorityGrouping>
}
 8002442:	bf00      	nop
 8002444:	3708      	adds	r7, #8
 8002446:	46bd      	mov	sp, r7
 8002448:	bd80      	pop	{r7, pc}

0800244a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800244a:	b580      	push	{r7, lr}
 800244c:	b086      	sub	sp, #24
 800244e:	af00      	add	r7, sp, #0
 8002450:	4603      	mov	r3, r0
 8002452:	60b9      	str	r1, [r7, #8]
 8002454:	607a      	str	r2, [r7, #4]
 8002456:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002458:	2300      	movs	r3, #0
 800245a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800245c:	f7ff ff42 	bl	80022e4 <__NVIC_GetPriorityGrouping>
 8002460:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002462:	687a      	ldr	r2, [r7, #4]
 8002464:	68b9      	ldr	r1, [r7, #8]
 8002466:	6978      	ldr	r0, [r7, #20]
 8002468:	f7ff ff90 	bl	800238c <NVIC_EncodePriority>
 800246c:	4602      	mov	r2, r0
 800246e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002472:	4611      	mov	r1, r2
 8002474:	4618      	mov	r0, r3
 8002476:	f7ff ff5f 	bl	8002338 <__NVIC_SetPriority>
}
 800247a:	bf00      	nop
 800247c:	3718      	adds	r7, #24
 800247e:	46bd      	mov	sp, r7
 8002480:	bd80      	pop	{r7, pc}

08002482 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002482:	b580      	push	{r7, lr}
 8002484:	b082      	sub	sp, #8
 8002486:	af00      	add	r7, sp, #0
 8002488:	4603      	mov	r3, r0
 800248a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800248c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002490:	4618      	mov	r0, r3
 8002492:	f7ff ff35 	bl	8002300 <__NVIC_EnableIRQ>
}
 8002496:	bf00      	nop
 8002498:	3708      	adds	r7, #8
 800249a:	46bd      	mov	sp, r7
 800249c:	bd80      	pop	{r7, pc}

0800249e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800249e:	b580      	push	{r7, lr}
 80024a0:	b082      	sub	sp, #8
 80024a2:	af00      	add	r7, sp, #0
 80024a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80024a6:	6878      	ldr	r0, [r7, #4]
 80024a8:	f7ff ffa2 	bl	80023f0 <SysTick_Config>
 80024ac:	4603      	mov	r3, r0
}
 80024ae:	4618      	mov	r0, r3
 80024b0:	3708      	adds	r7, #8
 80024b2:	46bd      	mov	sp, r7
 80024b4:	bd80      	pop	{r7, pc}
	...

080024b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80024b8:	b480      	push	{r7}
 80024ba:	b08b      	sub	sp, #44	; 0x2c
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
 80024c0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80024c2:	2300      	movs	r3, #0
 80024c4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80024c6:	2300      	movs	r3, #0
 80024c8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80024ca:	e169      	b.n	80027a0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80024cc:	2201      	movs	r2, #1
 80024ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024d0:	fa02 f303 	lsl.w	r3, r2, r3
 80024d4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	69fa      	ldr	r2, [r7, #28]
 80024dc:	4013      	ands	r3, r2
 80024de:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80024e0:	69ba      	ldr	r2, [r7, #24]
 80024e2:	69fb      	ldr	r3, [r7, #28]
 80024e4:	429a      	cmp	r2, r3
 80024e6:	f040 8158 	bne.w	800279a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	685b      	ldr	r3, [r3, #4]
 80024ee:	4a9a      	ldr	r2, [pc, #616]	; (8002758 <HAL_GPIO_Init+0x2a0>)
 80024f0:	4293      	cmp	r3, r2
 80024f2:	d05e      	beq.n	80025b2 <HAL_GPIO_Init+0xfa>
 80024f4:	4a98      	ldr	r2, [pc, #608]	; (8002758 <HAL_GPIO_Init+0x2a0>)
 80024f6:	4293      	cmp	r3, r2
 80024f8:	d875      	bhi.n	80025e6 <HAL_GPIO_Init+0x12e>
 80024fa:	4a98      	ldr	r2, [pc, #608]	; (800275c <HAL_GPIO_Init+0x2a4>)
 80024fc:	4293      	cmp	r3, r2
 80024fe:	d058      	beq.n	80025b2 <HAL_GPIO_Init+0xfa>
 8002500:	4a96      	ldr	r2, [pc, #600]	; (800275c <HAL_GPIO_Init+0x2a4>)
 8002502:	4293      	cmp	r3, r2
 8002504:	d86f      	bhi.n	80025e6 <HAL_GPIO_Init+0x12e>
 8002506:	4a96      	ldr	r2, [pc, #600]	; (8002760 <HAL_GPIO_Init+0x2a8>)
 8002508:	4293      	cmp	r3, r2
 800250a:	d052      	beq.n	80025b2 <HAL_GPIO_Init+0xfa>
 800250c:	4a94      	ldr	r2, [pc, #592]	; (8002760 <HAL_GPIO_Init+0x2a8>)
 800250e:	4293      	cmp	r3, r2
 8002510:	d869      	bhi.n	80025e6 <HAL_GPIO_Init+0x12e>
 8002512:	4a94      	ldr	r2, [pc, #592]	; (8002764 <HAL_GPIO_Init+0x2ac>)
 8002514:	4293      	cmp	r3, r2
 8002516:	d04c      	beq.n	80025b2 <HAL_GPIO_Init+0xfa>
 8002518:	4a92      	ldr	r2, [pc, #584]	; (8002764 <HAL_GPIO_Init+0x2ac>)
 800251a:	4293      	cmp	r3, r2
 800251c:	d863      	bhi.n	80025e6 <HAL_GPIO_Init+0x12e>
 800251e:	4a92      	ldr	r2, [pc, #584]	; (8002768 <HAL_GPIO_Init+0x2b0>)
 8002520:	4293      	cmp	r3, r2
 8002522:	d046      	beq.n	80025b2 <HAL_GPIO_Init+0xfa>
 8002524:	4a90      	ldr	r2, [pc, #576]	; (8002768 <HAL_GPIO_Init+0x2b0>)
 8002526:	4293      	cmp	r3, r2
 8002528:	d85d      	bhi.n	80025e6 <HAL_GPIO_Init+0x12e>
 800252a:	2b12      	cmp	r3, #18
 800252c:	d82a      	bhi.n	8002584 <HAL_GPIO_Init+0xcc>
 800252e:	2b12      	cmp	r3, #18
 8002530:	d859      	bhi.n	80025e6 <HAL_GPIO_Init+0x12e>
 8002532:	a201      	add	r2, pc, #4	; (adr r2, 8002538 <HAL_GPIO_Init+0x80>)
 8002534:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002538:	080025b3 	.word	0x080025b3
 800253c:	0800258d 	.word	0x0800258d
 8002540:	0800259f 	.word	0x0800259f
 8002544:	080025e1 	.word	0x080025e1
 8002548:	080025e7 	.word	0x080025e7
 800254c:	080025e7 	.word	0x080025e7
 8002550:	080025e7 	.word	0x080025e7
 8002554:	080025e7 	.word	0x080025e7
 8002558:	080025e7 	.word	0x080025e7
 800255c:	080025e7 	.word	0x080025e7
 8002560:	080025e7 	.word	0x080025e7
 8002564:	080025e7 	.word	0x080025e7
 8002568:	080025e7 	.word	0x080025e7
 800256c:	080025e7 	.word	0x080025e7
 8002570:	080025e7 	.word	0x080025e7
 8002574:	080025e7 	.word	0x080025e7
 8002578:	080025e7 	.word	0x080025e7
 800257c:	08002595 	.word	0x08002595
 8002580:	080025a9 	.word	0x080025a9
 8002584:	4a79      	ldr	r2, [pc, #484]	; (800276c <HAL_GPIO_Init+0x2b4>)
 8002586:	4293      	cmp	r3, r2
 8002588:	d013      	beq.n	80025b2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800258a:	e02c      	b.n	80025e6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	68db      	ldr	r3, [r3, #12]
 8002590:	623b      	str	r3, [r7, #32]
          break;
 8002592:	e029      	b.n	80025e8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	68db      	ldr	r3, [r3, #12]
 8002598:	3304      	adds	r3, #4
 800259a:	623b      	str	r3, [r7, #32]
          break;
 800259c:	e024      	b.n	80025e8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	68db      	ldr	r3, [r3, #12]
 80025a2:	3308      	adds	r3, #8
 80025a4:	623b      	str	r3, [r7, #32]
          break;
 80025a6:	e01f      	b.n	80025e8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	68db      	ldr	r3, [r3, #12]
 80025ac:	330c      	adds	r3, #12
 80025ae:	623b      	str	r3, [r7, #32]
          break;
 80025b0:	e01a      	b.n	80025e8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	689b      	ldr	r3, [r3, #8]
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d102      	bne.n	80025c0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80025ba:	2304      	movs	r3, #4
 80025bc:	623b      	str	r3, [r7, #32]
          break;
 80025be:	e013      	b.n	80025e8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	689b      	ldr	r3, [r3, #8]
 80025c4:	2b01      	cmp	r3, #1
 80025c6:	d105      	bne.n	80025d4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80025c8:	2308      	movs	r3, #8
 80025ca:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	69fa      	ldr	r2, [r7, #28]
 80025d0:	611a      	str	r2, [r3, #16]
          break;
 80025d2:	e009      	b.n	80025e8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80025d4:	2308      	movs	r3, #8
 80025d6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	69fa      	ldr	r2, [r7, #28]
 80025dc:	615a      	str	r2, [r3, #20]
          break;
 80025de:	e003      	b.n	80025e8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80025e0:	2300      	movs	r3, #0
 80025e2:	623b      	str	r3, [r7, #32]
          break;
 80025e4:	e000      	b.n	80025e8 <HAL_GPIO_Init+0x130>
          break;
 80025e6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80025e8:	69bb      	ldr	r3, [r7, #24]
 80025ea:	2bff      	cmp	r3, #255	; 0xff
 80025ec:	d801      	bhi.n	80025f2 <HAL_GPIO_Init+0x13a>
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	e001      	b.n	80025f6 <HAL_GPIO_Init+0x13e>
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	3304      	adds	r3, #4
 80025f6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80025f8:	69bb      	ldr	r3, [r7, #24]
 80025fa:	2bff      	cmp	r3, #255	; 0xff
 80025fc:	d802      	bhi.n	8002604 <HAL_GPIO_Init+0x14c>
 80025fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002600:	009b      	lsls	r3, r3, #2
 8002602:	e002      	b.n	800260a <HAL_GPIO_Init+0x152>
 8002604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002606:	3b08      	subs	r3, #8
 8002608:	009b      	lsls	r3, r3, #2
 800260a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800260c:	697b      	ldr	r3, [r7, #20]
 800260e:	681a      	ldr	r2, [r3, #0]
 8002610:	210f      	movs	r1, #15
 8002612:	693b      	ldr	r3, [r7, #16]
 8002614:	fa01 f303 	lsl.w	r3, r1, r3
 8002618:	43db      	mvns	r3, r3
 800261a:	401a      	ands	r2, r3
 800261c:	6a39      	ldr	r1, [r7, #32]
 800261e:	693b      	ldr	r3, [r7, #16]
 8002620:	fa01 f303 	lsl.w	r3, r1, r3
 8002624:	431a      	orrs	r2, r3
 8002626:	697b      	ldr	r3, [r7, #20]
 8002628:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	685b      	ldr	r3, [r3, #4]
 800262e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002632:	2b00      	cmp	r3, #0
 8002634:	f000 80b1 	beq.w	800279a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002638:	4b4d      	ldr	r3, [pc, #308]	; (8002770 <HAL_GPIO_Init+0x2b8>)
 800263a:	699b      	ldr	r3, [r3, #24]
 800263c:	4a4c      	ldr	r2, [pc, #304]	; (8002770 <HAL_GPIO_Init+0x2b8>)
 800263e:	f043 0301 	orr.w	r3, r3, #1
 8002642:	6193      	str	r3, [r2, #24]
 8002644:	4b4a      	ldr	r3, [pc, #296]	; (8002770 <HAL_GPIO_Init+0x2b8>)
 8002646:	699b      	ldr	r3, [r3, #24]
 8002648:	f003 0301 	and.w	r3, r3, #1
 800264c:	60bb      	str	r3, [r7, #8]
 800264e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002650:	4a48      	ldr	r2, [pc, #288]	; (8002774 <HAL_GPIO_Init+0x2bc>)
 8002652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002654:	089b      	lsrs	r3, r3, #2
 8002656:	3302      	adds	r3, #2
 8002658:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800265c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800265e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002660:	f003 0303 	and.w	r3, r3, #3
 8002664:	009b      	lsls	r3, r3, #2
 8002666:	220f      	movs	r2, #15
 8002668:	fa02 f303 	lsl.w	r3, r2, r3
 800266c:	43db      	mvns	r3, r3
 800266e:	68fa      	ldr	r2, [r7, #12]
 8002670:	4013      	ands	r3, r2
 8002672:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	4a40      	ldr	r2, [pc, #256]	; (8002778 <HAL_GPIO_Init+0x2c0>)
 8002678:	4293      	cmp	r3, r2
 800267a:	d013      	beq.n	80026a4 <HAL_GPIO_Init+0x1ec>
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	4a3f      	ldr	r2, [pc, #252]	; (800277c <HAL_GPIO_Init+0x2c4>)
 8002680:	4293      	cmp	r3, r2
 8002682:	d00d      	beq.n	80026a0 <HAL_GPIO_Init+0x1e8>
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	4a3e      	ldr	r2, [pc, #248]	; (8002780 <HAL_GPIO_Init+0x2c8>)
 8002688:	4293      	cmp	r3, r2
 800268a:	d007      	beq.n	800269c <HAL_GPIO_Init+0x1e4>
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	4a3d      	ldr	r2, [pc, #244]	; (8002784 <HAL_GPIO_Init+0x2cc>)
 8002690:	4293      	cmp	r3, r2
 8002692:	d101      	bne.n	8002698 <HAL_GPIO_Init+0x1e0>
 8002694:	2303      	movs	r3, #3
 8002696:	e006      	b.n	80026a6 <HAL_GPIO_Init+0x1ee>
 8002698:	2304      	movs	r3, #4
 800269a:	e004      	b.n	80026a6 <HAL_GPIO_Init+0x1ee>
 800269c:	2302      	movs	r3, #2
 800269e:	e002      	b.n	80026a6 <HAL_GPIO_Init+0x1ee>
 80026a0:	2301      	movs	r3, #1
 80026a2:	e000      	b.n	80026a6 <HAL_GPIO_Init+0x1ee>
 80026a4:	2300      	movs	r3, #0
 80026a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026a8:	f002 0203 	and.w	r2, r2, #3
 80026ac:	0092      	lsls	r2, r2, #2
 80026ae:	4093      	lsls	r3, r2
 80026b0:	68fa      	ldr	r2, [r7, #12]
 80026b2:	4313      	orrs	r3, r2
 80026b4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80026b6:	492f      	ldr	r1, [pc, #188]	; (8002774 <HAL_GPIO_Init+0x2bc>)
 80026b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ba:	089b      	lsrs	r3, r3, #2
 80026bc:	3302      	adds	r3, #2
 80026be:	68fa      	ldr	r2, [r7, #12]
 80026c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	685b      	ldr	r3, [r3, #4]
 80026c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d006      	beq.n	80026de <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80026d0:	4b2d      	ldr	r3, [pc, #180]	; (8002788 <HAL_GPIO_Init+0x2d0>)
 80026d2:	681a      	ldr	r2, [r3, #0]
 80026d4:	492c      	ldr	r1, [pc, #176]	; (8002788 <HAL_GPIO_Init+0x2d0>)
 80026d6:	69bb      	ldr	r3, [r7, #24]
 80026d8:	4313      	orrs	r3, r2
 80026da:	600b      	str	r3, [r1, #0]
 80026dc:	e006      	b.n	80026ec <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80026de:	4b2a      	ldr	r3, [pc, #168]	; (8002788 <HAL_GPIO_Init+0x2d0>)
 80026e0:	681a      	ldr	r2, [r3, #0]
 80026e2:	69bb      	ldr	r3, [r7, #24]
 80026e4:	43db      	mvns	r3, r3
 80026e6:	4928      	ldr	r1, [pc, #160]	; (8002788 <HAL_GPIO_Init+0x2d0>)
 80026e8:	4013      	ands	r3, r2
 80026ea:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	685b      	ldr	r3, [r3, #4]
 80026f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d006      	beq.n	8002706 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80026f8:	4b23      	ldr	r3, [pc, #140]	; (8002788 <HAL_GPIO_Init+0x2d0>)
 80026fa:	685a      	ldr	r2, [r3, #4]
 80026fc:	4922      	ldr	r1, [pc, #136]	; (8002788 <HAL_GPIO_Init+0x2d0>)
 80026fe:	69bb      	ldr	r3, [r7, #24]
 8002700:	4313      	orrs	r3, r2
 8002702:	604b      	str	r3, [r1, #4]
 8002704:	e006      	b.n	8002714 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002706:	4b20      	ldr	r3, [pc, #128]	; (8002788 <HAL_GPIO_Init+0x2d0>)
 8002708:	685a      	ldr	r2, [r3, #4]
 800270a:	69bb      	ldr	r3, [r7, #24]
 800270c:	43db      	mvns	r3, r3
 800270e:	491e      	ldr	r1, [pc, #120]	; (8002788 <HAL_GPIO_Init+0x2d0>)
 8002710:	4013      	ands	r3, r2
 8002712:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	685b      	ldr	r3, [r3, #4]
 8002718:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800271c:	2b00      	cmp	r3, #0
 800271e:	d006      	beq.n	800272e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002720:	4b19      	ldr	r3, [pc, #100]	; (8002788 <HAL_GPIO_Init+0x2d0>)
 8002722:	689a      	ldr	r2, [r3, #8]
 8002724:	4918      	ldr	r1, [pc, #96]	; (8002788 <HAL_GPIO_Init+0x2d0>)
 8002726:	69bb      	ldr	r3, [r7, #24]
 8002728:	4313      	orrs	r3, r2
 800272a:	608b      	str	r3, [r1, #8]
 800272c:	e006      	b.n	800273c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800272e:	4b16      	ldr	r3, [pc, #88]	; (8002788 <HAL_GPIO_Init+0x2d0>)
 8002730:	689a      	ldr	r2, [r3, #8]
 8002732:	69bb      	ldr	r3, [r7, #24]
 8002734:	43db      	mvns	r3, r3
 8002736:	4914      	ldr	r1, [pc, #80]	; (8002788 <HAL_GPIO_Init+0x2d0>)
 8002738:	4013      	ands	r3, r2
 800273a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	685b      	ldr	r3, [r3, #4]
 8002740:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002744:	2b00      	cmp	r3, #0
 8002746:	d021      	beq.n	800278c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002748:	4b0f      	ldr	r3, [pc, #60]	; (8002788 <HAL_GPIO_Init+0x2d0>)
 800274a:	68da      	ldr	r2, [r3, #12]
 800274c:	490e      	ldr	r1, [pc, #56]	; (8002788 <HAL_GPIO_Init+0x2d0>)
 800274e:	69bb      	ldr	r3, [r7, #24]
 8002750:	4313      	orrs	r3, r2
 8002752:	60cb      	str	r3, [r1, #12]
 8002754:	e021      	b.n	800279a <HAL_GPIO_Init+0x2e2>
 8002756:	bf00      	nop
 8002758:	10320000 	.word	0x10320000
 800275c:	10310000 	.word	0x10310000
 8002760:	10220000 	.word	0x10220000
 8002764:	10210000 	.word	0x10210000
 8002768:	10120000 	.word	0x10120000
 800276c:	10110000 	.word	0x10110000
 8002770:	40021000 	.word	0x40021000
 8002774:	40010000 	.word	0x40010000
 8002778:	40010800 	.word	0x40010800
 800277c:	40010c00 	.word	0x40010c00
 8002780:	40011000 	.word	0x40011000
 8002784:	40011400 	.word	0x40011400
 8002788:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800278c:	4b0b      	ldr	r3, [pc, #44]	; (80027bc <HAL_GPIO_Init+0x304>)
 800278e:	68da      	ldr	r2, [r3, #12]
 8002790:	69bb      	ldr	r3, [r7, #24]
 8002792:	43db      	mvns	r3, r3
 8002794:	4909      	ldr	r1, [pc, #36]	; (80027bc <HAL_GPIO_Init+0x304>)
 8002796:	4013      	ands	r3, r2
 8002798:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800279a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800279c:	3301      	adds	r3, #1
 800279e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	681a      	ldr	r2, [r3, #0]
 80027a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027a6:	fa22 f303 	lsr.w	r3, r2, r3
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	f47f ae8e 	bne.w	80024cc <HAL_GPIO_Init+0x14>
  }
}
 80027b0:	bf00      	nop
 80027b2:	bf00      	nop
 80027b4:	372c      	adds	r7, #44	; 0x2c
 80027b6:	46bd      	mov	sp, r7
 80027b8:	bc80      	pop	{r7}
 80027ba:	4770      	bx	lr
 80027bc:	40010400 	.word	0x40010400

080027c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80027c0:	b480      	push	{r7}
 80027c2:	b083      	sub	sp, #12
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
 80027c8:	460b      	mov	r3, r1
 80027ca:	807b      	strh	r3, [r7, #2]
 80027cc:	4613      	mov	r3, r2
 80027ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80027d0:	787b      	ldrb	r3, [r7, #1]
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d003      	beq.n	80027de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80027d6:	887a      	ldrh	r2, [r7, #2]
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80027dc:	e003      	b.n	80027e6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80027de:	887b      	ldrh	r3, [r7, #2]
 80027e0:	041a      	lsls	r2, r3, #16
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	611a      	str	r2, [r3, #16]
}
 80027e6:	bf00      	nop
 80027e8:	370c      	adds	r7, #12
 80027ea:	46bd      	mov	sp, r7
 80027ec:	bc80      	pop	{r7}
 80027ee:	4770      	bx	lr

080027f0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80027f0:	b480      	push	{r7}
 80027f2:	b085      	sub	sp, #20
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
 80027f8:	460b      	mov	r3, r1
 80027fa:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	68db      	ldr	r3, [r3, #12]
 8002800:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002802:	887a      	ldrh	r2, [r7, #2]
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	4013      	ands	r3, r2
 8002808:	041a      	lsls	r2, r3, #16
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	43d9      	mvns	r1, r3
 800280e:	887b      	ldrh	r3, [r7, #2]
 8002810:	400b      	ands	r3, r1
 8002812:	431a      	orrs	r2, r3
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	611a      	str	r2, [r3, #16]
}
 8002818:	bf00      	nop
 800281a:	3714      	adds	r7, #20
 800281c:	46bd      	mov	sp, r7
 800281e:	bc80      	pop	{r7}
 8002820:	4770      	bx	lr
	...

08002824 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	b082      	sub	sp, #8
 8002828:	af00      	add	r7, sp, #0
 800282a:	4603      	mov	r3, r0
 800282c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800282e:	4b08      	ldr	r3, [pc, #32]	; (8002850 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002830:	695a      	ldr	r2, [r3, #20]
 8002832:	88fb      	ldrh	r3, [r7, #6]
 8002834:	4013      	ands	r3, r2
 8002836:	2b00      	cmp	r3, #0
 8002838:	d006      	beq.n	8002848 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800283a:	4a05      	ldr	r2, [pc, #20]	; (8002850 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800283c:	88fb      	ldrh	r3, [r7, #6]
 800283e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002840:	88fb      	ldrh	r3, [r7, #6]
 8002842:	4618      	mov	r0, r3
 8002844:	f000 f806 	bl	8002854 <HAL_GPIO_EXTI_Callback>
  }
}
 8002848:	bf00      	nop
 800284a:	3708      	adds	r7, #8
 800284c:	46bd      	mov	sp, r7
 800284e:	bd80      	pop	{r7, pc}
 8002850:	40010400 	.word	0x40010400

08002854 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002854:	b480      	push	{r7}
 8002856:	b083      	sub	sp, #12
 8002858:	af00      	add	r7, sp, #0
 800285a:	4603      	mov	r3, r0
 800285c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800285e:	bf00      	nop
 8002860:	370c      	adds	r7, #12
 8002862:	46bd      	mov	sp, r7
 8002864:	bc80      	pop	{r7}
 8002866:	4770      	bx	lr

08002868 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b084      	sub	sp, #16
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2b00      	cmp	r3, #0
 8002874:	d101      	bne.n	800287a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002876:	2301      	movs	r3, #1
 8002878:	e12b      	b.n	8002ad2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002880:	b2db      	uxtb	r3, r3
 8002882:	2b00      	cmp	r3, #0
 8002884:	d106      	bne.n	8002894 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	2200      	movs	r2, #0
 800288a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800288e:	6878      	ldr	r0, [r7, #4]
 8002890:	f7fe fea2 	bl	80015d8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2224      	movs	r2, #36	; 0x24
 8002898:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	681a      	ldr	r2, [r3, #0]
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f022 0201 	bic.w	r2, r2, #1
 80028aa:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	681a      	ldr	r2, [r3, #0]
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80028ba:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	681a      	ldr	r2, [r3, #0]
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80028ca:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80028cc:	f001 f918 	bl	8003b00 <HAL_RCC_GetPCLK1Freq>
 80028d0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	685b      	ldr	r3, [r3, #4]
 80028d6:	4a81      	ldr	r2, [pc, #516]	; (8002adc <HAL_I2C_Init+0x274>)
 80028d8:	4293      	cmp	r3, r2
 80028da:	d807      	bhi.n	80028ec <HAL_I2C_Init+0x84>
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	4a80      	ldr	r2, [pc, #512]	; (8002ae0 <HAL_I2C_Init+0x278>)
 80028e0:	4293      	cmp	r3, r2
 80028e2:	bf94      	ite	ls
 80028e4:	2301      	movls	r3, #1
 80028e6:	2300      	movhi	r3, #0
 80028e8:	b2db      	uxtb	r3, r3
 80028ea:	e006      	b.n	80028fa <HAL_I2C_Init+0x92>
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	4a7d      	ldr	r2, [pc, #500]	; (8002ae4 <HAL_I2C_Init+0x27c>)
 80028f0:	4293      	cmp	r3, r2
 80028f2:	bf94      	ite	ls
 80028f4:	2301      	movls	r3, #1
 80028f6:	2300      	movhi	r3, #0
 80028f8:	b2db      	uxtb	r3, r3
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d001      	beq.n	8002902 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80028fe:	2301      	movs	r3, #1
 8002900:	e0e7      	b.n	8002ad2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	4a78      	ldr	r2, [pc, #480]	; (8002ae8 <HAL_I2C_Init+0x280>)
 8002906:	fba2 2303 	umull	r2, r3, r2, r3
 800290a:	0c9b      	lsrs	r3, r3, #18
 800290c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	685b      	ldr	r3, [r3, #4]
 8002914:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	68ba      	ldr	r2, [r7, #8]
 800291e:	430a      	orrs	r2, r1
 8002920:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	6a1b      	ldr	r3, [r3, #32]
 8002928:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	685b      	ldr	r3, [r3, #4]
 8002930:	4a6a      	ldr	r2, [pc, #424]	; (8002adc <HAL_I2C_Init+0x274>)
 8002932:	4293      	cmp	r3, r2
 8002934:	d802      	bhi.n	800293c <HAL_I2C_Init+0xd4>
 8002936:	68bb      	ldr	r3, [r7, #8]
 8002938:	3301      	adds	r3, #1
 800293a:	e009      	b.n	8002950 <HAL_I2C_Init+0xe8>
 800293c:	68bb      	ldr	r3, [r7, #8]
 800293e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002942:	fb02 f303 	mul.w	r3, r2, r3
 8002946:	4a69      	ldr	r2, [pc, #420]	; (8002aec <HAL_I2C_Init+0x284>)
 8002948:	fba2 2303 	umull	r2, r3, r2, r3
 800294c:	099b      	lsrs	r3, r3, #6
 800294e:	3301      	adds	r3, #1
 8002950:	687a      	ldr	r2, [r7, #4]
 8002952:	6812      	ldr	r2, [r2, #0]
 8002954:	430b      	orrs	r3, r1
 8002956:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	69db      	ldr	r3, [r3, #28]
 800295e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002962:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	685b      	ldr	r3, [r3, #4]
 800296a:	495c      	ldr	r1, [pc, #368]	; (8002adc <HAL_I2C_Init+0x274>)
 800296c:	428b      	cmp	r3, r1
 800296e:	d819      	bhi.n	80029a4 <HAL_I2C_Init+0x13c>
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	1e59      	subs	r1, r3, #1
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	685b      	ldr	r3, [r3, #4]
 8002978:	005b      	lsls	r3, r3, #1
 800297a:	fbb1 f3f3 	udiv	r3, r1, r3
 800297e:	1c59      	adds	r1, r3, #1
 8002980:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002984:	400b      	ands	r3, r1
 8002986:	2b00      	cmp	r3, #0
 8002988:	d00a      	beq.n	80029a0 <HAL_I2C_Init+0x138>
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	1e59      	subs	r1, r3, #1
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	685b      	ldr	r3, [r3, #4]
 8002992:	005b      	lsls	r3, r3, #1
 8002994:	fbb1 f3f3 	udiv	r3, r1, r3
 8002998:	3301      	adds	r3, #1
 800299a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800299e:	e051      	b.n	8002a44 <HAL_I2C_Init+0x1dc>
 80029a0:	2304      	movs	r3, #4
 80029a2:	e04f      	b.n	8002a44 <HAL_I2C_Init+0x1dc>
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	689b      	ldr	r3, [r3, #8]
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d111      	bne.n	80029d0 <HAL_I2C_Init+0x168>
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	1e58      	subs	r0, r3, #1
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6859      	ldr	r1, [r3, #4]
 80029b4:	460b      	mov	r3, r1
 80029b6:	005b      	lsls	r3, r3, #1
 80029b8:	440b      	add	r3, r1
 80029ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80029be:	3301      	adds	r3, #1
 80029c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	bf0c      	ite	eq
 80029c8:	2301      	moveq	r3, #1
 80029ca:	2300      	movne	r3, #0
 80029cc:	b2db      	uxtb	r3, r3
 80029ce:	e012      	b.n	80029f6 <HAL_I2C_Init+0x18e>
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	1e58      	subs	r0, r3, #1
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	6859      	ldr	r1, [r3, #4]
 80029d8:	460b      	mov	r3, r1
 80029da:	009b      	lsls	r3, r3, #2
 80029dc:	440b      	add	r3, r1
 80029de:	0099      	lsls	r1, r3, #2
 80029e0:	440b      	add	r3, r1
 80029e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80029e6:	3301      	adds	r3, #1
 80029e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	bf0c      	ite	eq
 80029f0:	2301      	moveq	r3, #1
 80029f2:	2300      	movne	r3, #0
 80029f4:	b2db      	uxtb	r3, r3
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d001      	beq.n	80029fe <HAL_I2C_Init+0x196>
 80029fa:	2301      	movs	r3, #1
 80029fc:	e022      	b.n	8002a44 <HAL_I2C_Init+0x1dc>
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	689b      	ldr	r3, [r3, #8]
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d10e      	bne.n	8002a24 <HAL_I2C_Init+0x1bc>
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	1e58      	subs	r0, r3, #1
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6859      	ldr	r1, [r3, #4]
 8002a0e:	460b      	mov	r3, r1
 8002a10:	005b      	lsls	r3, r3, #1
 8002a12:	440b      	add	r3, r1
 8002a14:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a18:	3301      	adds	r3, #1
 8002a1a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a1e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002a22:	e00f      	b.n	8002a44 <HAL_I2C_Init+0x1dc>
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	1e58      	subs	r0, r3, #1
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6859      	ldr	r1, [r3, #4]
 8002a2c:	460b      	mov	r3, r1
 8002a2e:	009b      	lsls	r3, r3, #2
 8002a30:	440b      	add	r3, r1
 8002a32:	0099      	lsls	r1, r3, #2
 8002a34:	440b      	add	r3, r1
 8002a36:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a3a:	3301      	adds	r3, #1
 8002a3c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a40:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002a44:	6879      	ldr	r1, [r7, #4]
 8002a46:	6809      	ldr	r1, [r1, #0]
 8002a48:	4313      	orrs	r3, r2
 8002a4a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	69da      	ldr	r2, [r3, #28]
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6a1b      	ldr	r3, [r3, #32]
 8002a5e:	431a      	orrs	r2, r3
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	430a      	orrs	r2, r1
 8002a66:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	689b      	ldr	r3, [r3, #8]
 8002a6e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002a72:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002a76:	687a      	ldr	r2, [r7, #4]
 8002a78:	6911      	ldr	r1, [r2, #16]
 8002a7a:	687a      	ldr	r2, [r7, #4]
 8002a7c:	68d2      	ldr	r2, [r2, #12]
 8002a7e:	4311      	orrs	r1, r2
 8002a80:	687a      	ldr	r2, [r7, #4]
 8002a82:	6812      	ldr	r2, [r2, #0]
 8002a84:	430b      	orrs	r3, r1
 8002a86:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	68db      	ldr	r3, [r3, #12]
 8002a8e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	695a      	ldr	r2, [r3, #20]
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	699b      	ldr	r3, [r3, #24]
 8002a9a:	431a      	orrs	r2, r3
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	430a      	orrs	r2, r1
 8002aa2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	681a      	ldr	r2, [r3, #0]
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f042 0201 	orr.w	r2, r2, #1
 8002ab2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	2220      	movs	r2, #32
 8002abe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	2200      	movs	r2, #0
 8002acc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002ad0:	2300      	movs	r3, #0
}
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	3710      	adds	r7, #16
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	bd80      	pop	{r7, pc}
 8002ada:	bf00      	nop
 8002adc:	000186a0 	.word	0x000186a0
 8002ae0:	001e847f 	.word	0x001e847f
 8002ae4:	003d08ff 	.word	0x003d08ff
 8002ae8:	431bde83 	.word	0x431bde83
 8002aec:	10624dd3 	.word	0x10624dd3

08002af0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b088      	sub	sp, #32
 8002af4:	af02      	add	r7, sp, #8
 8002af6:	60f8      	str	r0, [r7, #12]
 8002af8:	607a      	str	r2, [r7, #4]
 8002afa:	461a      	mov	r2, r3
 8002afc:	460b      	mov	r3, r1
 8002afe:	817b      	strh	r3, [r7, #10]
 8002b00:	4613      	mov	r3, r2
 8002b02:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002b04:	f7fe ff94 	bl	8001a30 <HAL_GetTick>
 8002b08:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b10:	b2db      	uxtb	r3, r3
 8002b12:	2b20      	cmp	r3, #32
 8002b14:	f040 80e0 	bne.w	8002cd8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002b18:	697b      	ldr	r3, [r7, #20]
 8002b1a:	9300      	str	r3, [sp, #0]
 8002b1c:	2319      	movs	r3, #25
 8002b1e:	2201      	movs	r2, #1
 8002b20:	4970      	ldr	r1, [pc, #448]	; (8002ce4 <HAL_I2C_Master_Transmit+0x1f4>)
 8002b22:	68f8      	ldr	r0, [r7, #12]
 8002b24:	f000 fa92 	bl	800304c <I2C_WaitOnFlagUntilTimeout>
 8002b28:	4603      	mov	r3, r0
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d001      	beq.n	8002b32 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002b2e:	2302      	movs	r3, #2
 8002b30:	e0d3      	b.n	8002cda <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b38:	2b01      	cmp	r3, #1
 8002b3a:	d101      	bne.n	8002b40 <HAL_I2C_Master_Transmit+0x50>
 8002b3c:	2302      	movs	r3, #2
 8002b3e:	e0cc      	b.n	8002cda <HAL_I2C_Master_Transmit+0x1ea>
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	2201      	movs	r2, #1
 8002b44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f003 0301 	and.w	r3, r3, #1
 8002b52:	2b01      	cmp	r3, #1
 8002b54:	d007      	beq.n	8002b66 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	681a      	ldr	r2, [r3, #0]
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f042 0201 	orr.w	r2, r2, #1
 8002b64:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	681a      	ldr	r2, [r3, #0]
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002b74:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	2221      	movs	r2, #33	; 0x21
 8002b7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	2210      	movs	r2, #16
 8002b82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	2200      	movs	r2, #0
 8002b8a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	687a      	ldr	r2, [r7, #4]
 8002b90:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	893a      	ldrh	r2, [r7, #8]
 8002b96:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b9c:	b29a      	uxth	r2, r3
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	4a50      	ldr	r2, [pc, #320]	; (8002ce8 <HAL_I2C_Master_Transmit+0x1f8>)
 8002ba6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002ba8:	8979      	ldrh	r1, [r7, #10]
 8002baa:	697b      	ldr	r3, [r7, #20]
 8002bac:	6a3a      	ldr	r2, [r7, #32]
 8002bae:	68f8      	ldr	r0, [r7, #12]
 8002bb0:	f000 f9ca 	bl	8002f48 <I2C_MasterRequestWrite>
 8002bb4:	4603      	mov	r3, r0
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d001      	beq.n	8002bbe <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002bba:	2301      	movs	r3, #1
 8002bbc:	e08d      	b.n	8002cda <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	613b      	str	r3, [r7, #16]
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	695b      	ldr	r3, [r3, #20]
 8002bc8:	613b      	str	r3, [r7, #16]
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	699b      	ldr	r3, [r3, #24]
 8002bd0:	613b      	str	r3, [r7, #16]
 8002bd2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002bd4:	e066      	b.n	8002ca4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002bd6:	697a      	ldr	r2, [r7, #20]
 8002bd8:	6a39      	ldr	r1, [r7, #32]
 8002bda:	68f8      	ldr	r0, [r7, #12]
 8002bdc:	f000 fb0c 	bl	80031f8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002be0:	4603      	mov	r3, r0
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d00d      	beq.n	8002c02 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bea:	2b04      	cmp	r3, #4
 8002bec:	d107      	bne.n	8002bfe <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	681a      	ldr	r2, [r3, #0]
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002bfc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002bfe:	2301      	movs	r3, #1
 8002c00:	e06b      	b.n	8002cda <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c06:	781a      	ldrb	r2, [r3, #0]
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c12:	1c5a      	adds	r2, r3, #1
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c1c:	b29b      	uxth	r3, r3
 8002c1e:	3b01      	subs	r3, #1
 8002c20:	b29a      	uxth	r2, r3
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c2a:	3b01      	subs	r3, #1
 8002c2c:	b29a      	uxth	r2, r3
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	695b      	ldr	r3, [r3, #20]
 8002c38:	f003 0304 	and.w	r3, r3, #4
 8002c3c:	2b04      	cmp	r3, #4
 8002c3e:	d11b      	bne.n	8002c78 <HAL_I2C_Master_Transmit+0x188>
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d017      	beq.n	8002c78 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c4c:	781a      	ldrb	r2, [r3, #0]
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c58:	1c5a      	adds	r2, r3, #1
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c62:	b29b      	uxth	r3, r3
 8002c64:	3b01      	subs	r3, #1
 8002c66:	b29a      	uxth	r2, r3
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c70:	3b01      	subs	r3, #1
 8002c72:	b29a      	uxth	r2, r3
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c78:	697a      	ldr	r2, [r7, #20]
 8002c7a:	6a39      	ldr	r1, [r7, #32]
 8002c7c:	68f8      	ldr	r0, [r7, #12]
 8002c7e:	f000 fafc 	bl	800327a <I2C_WaitOnBTFFlagUntilTimeout>
 8002c82:	4603      	mov	r3, r0
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d00d      	beq.n	8002ca4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c8c:	2b04      	cmp	r3, #4
 8002c8e:	d107      	bne.n	8002ca0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	681a      	ldr	r2, [r3, #0]
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c9e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002ca0:	2301      	movs	r3, #1
 8002ca2:	e01a      	b.n	8002cda <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d194      	bne.n	8002bd6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	681a      	ldr	r2, [r3, #0]
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002cba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	2220      	movs	r2, #32
 8002cc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	2200      	movs	r2, #0
 8002cd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	e000      	b.n	8002cda <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002cd8:	2302      	movs	r3, #2
  }
}
 8002cda:	4618      	mov	r0, r3
 8002cdc:	3718      	adds	r7, #24
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	bd80      	pop	{r7, pc}
 8002ce2:	bf00      	nop
 8002ce4:	00100002 	.word	0x00100002
 8002ce8:	ffff0000 	.word	0xffff0000

08002cec <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b08a      	sub	sp, #40	; 0x28
 8002cf0:	af02      	add	r7, sp, #8
 8002cf2:	60f8      	str	r0, [r7, #12]
 8002cf4:	607a      	str	r2, [r7, #4]
 8002cf6:	603b      	str	r3, [r7, #0]
 8002cf8:	460b      	mov	r3, r1
 8002cfa:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8002cfc:	f7fe fe98 	bl	8001a30 <HAL_GetTick>
 8002d00:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8002d02:	2301      	movs	r3, #1
 8002d04:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d0c:	b2db      	uxtb	r3, r3
 8002d0e:	2b20      	cmp	r3, #32
 8002d10:	f040 8111 	bne.w	8002f36 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002d14:	69fb      	ldr	r3, [r7, #28]
 8002d16:	9300      	str	r3, [sp, #0]
 8002d18:	2319      	movs	r3, #25
 8002d1a:	2201      	movs	r2, #1
 8002d1c:	4988      	ldr	r1, [pc, #544]	; (8002f40 <HAL_I2C_IsDeviceReady+0x254>)
 8002d1e:	68f8      	ldr	r0, [r7, #12]
 8002d20:	f000 f994 	bl	800304c <I2C_WaitOnFlagUntilTimeout>
 8002d24:	4603      	mov	r3, r0
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d001      	beq.n	8002d2e <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8002d2a:	2302      	movs	r3, #2
 8002d2c:	e104      	b.n	8002f38 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d34:	2b01      	cmp	r3, #1
 8002d36:	d101      	bne.n	8002d3c <HAL_I2C_IsDeviceReady+0x50>
 8002d38:	2302      	movs	r3, #2
 8002d3a:	e0fd      	b.n	8002f38 <HAL_I2C_IsDeviceReady+0x24c>
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	2201      	movs	r2, #1
 8002d40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f003 0301 	and.w	r3, r3, #1
 8002d4e:	2b01      	cmp	r3, #1
 8002d50:	d007      	beq.n	8002d62 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	681a      	ldr	r2, [r3, #0]
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f042 0201 	orr.w	r2, r2, #1
 8002d60:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	681a      	ldr	r2, [r3, #0]
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002d70:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	2224      	movs	r2, #36	; 0x24
 8002d76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	4a70      	ldr	r2, [pc, #448]	; (8002f44 <HAL_I2C_IsDeviceReady+0x258>)
 8002d84:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	681a      	ldr	r2, [r3, #0]
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002d94:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8002d96:	69fb      	ldr	r3, [r7, #28]
 8002d98:	9300      	str	r3, [sp, #0]
 8002d9a:	683b      	ldr	r3, [r7, #0]
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002da2:	68f8      	ldr	r0, [r7, #12]
 8002da4:	f000 f952 	bl	800304c <I2C_WaitOnFlagUntilTimeout>
 8002da8:	4603      	mov	r3, r0
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d00d      	beq.n	8002dca <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002db8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002dbc:	d103      	bne.n	8002dc6 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002dc4:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8002dc6:	2303      	movs	r3, #3
 8002dc8:	e0b6      	b.n	8002f38 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002dca:	897b      	ldrh	r3, [r7, #10]
 8002dcc:	b2db      	uxtb	r3, r3
 8002dce:	461a      	mov	r2, r3
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002dd8:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8002dda:	f7fe fe29 	bl	8001a30 <HAL_GetTick>
 8002dde:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	695b      	ldr	r3, [r3, #20]
 8002de6:	f003 0302 	and.w	r3, r3, #2
 8002dea:	2b02      	cmp	r3, #2
 8002dec:	bf0c      	ite	eq
 8002dee:	2301      	moveq	r3, #1
 8002df0:	2300      	movne	r3, #0
 8002df2:	b2db      	uxtb	r3, r3
 8002df4:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	695b      	ldr	r3, [r3, #20]
 8002dfc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e00:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e04:	bf0c      	ite	eq
 8002e06:	2301      	moveq	r3, #1
 8002e08:	2300      	movne	r3, #0
 8002e0a:	b2db      	uxtb	r3, r3
 8002e0c:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002e0e:	e025      	b.n	8002e5c <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002e10:	f7fe fe0e 	bl	8001a30 <HAL_GetTick>
 8002e14:	4602      	mov	r2, r0
 8002e16:	69fb      	ldr	r3, [r7, #28]
 8002e18:	1ad3      	subs	r3, r2, r3
 8002e1a:	683a      	ldr	r2, [r7, #0]
 8002e1c:	429a      	cmp	r2, r3
 8002e1e:	d302      	bcc.n	8002e26 <HAL_I2C_IsDeviceReady+0x13a>
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d103      	bne.n	8002e2e <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	22a0      	movs	r2, #160	; 0xa0
 8002e2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	695b      	ldr	r3, [r3, #20]
 8002e34:	f003 0302 	and.w	r3, r3, #2
 8002e38:	2b02      	cmp	r3, #2
 8002e3a:	bf0c      	ite	eq
 8002e3c:	2301      	moveq	r3, #1
 8002e3e:	2300      	movne	r3, #0
 8002e40:	b2db      	uxtb	r3, r3
 8002e42:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	695b      	ldr	r3, [r3, #20]
 8002e4a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e4e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e52:	bf0c      	ite	eq
 8002e54:	2301      	moveq	r3, #1
 8002e56:	2300      	movne	r3, #0
 8002e58:	b2db      	uxtb	r3, r3
 8002e5a:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e62:	b2db      	uxtb	r3, r3
 8002e64:	2ba0      	cmp	r3, #160	; 0xa0
 8002e66:	d005      	beq.n	8002e74 <HAL_I2C_IsDeviceReady+0x188>
 8002e68:	7dfb      	ldrb	r3, [r7, #23]
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d102      	bne.n	8002e74 <HAL_I2C_IsDeviceReady+0x188>
 8002e6e:	7dbb      	ldrb	r3, [r7, #22]
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d0cd      	beq.n	8002e10 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	2220      	movs	r2, #32
 8002e78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	695b      	ldr	r3, [r3, #20]
 8002e82:	f003 0302 	and.w	r3, r3, #2
 8002e86:	2b02      	cmp	r3, #2
 8002e88:	d129      	bne.n	8002ede <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	681a      	ldr	r2, [r3, #0]
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e98:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	613b      	str	r3, [r7, #16]
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	695b      	ldr	r3, [r3, #20]
 8002ea4:	613b      	str	r3, [r7, #16]
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	699b      	ldr	r3, [r3, #24]
 8002eac:	613b      	str	r3, [r7, #16]
 8002eae:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002eb0:	69fb      	ldr	r3, [r7, #28]
 8002eb2:	9300      	str	r3, [sp, #0]
 8002eb4:	2319      	movs	r3, #25
 8002eb6:	2201      	movs	r2, #1
 8002eb8:	4921      	ldr	r1, [pc, #132]	; (8002f40 <HAL_I2C_IsDeviceReady+0x254>)
 8002eba:	68f8      	ldr	r0, [r7, #12]
 8002ebc:	f000 f8c6 	bl	800304c <I2C_WaitOnFlagUntilTimeout>
 8002ec0:	4603      	mov	r3, r0
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d001      	beq.n	8002eca <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8002ec6:	2301      	movs	r3, #1
 8002ec8:	e036      	b.n	8002f38 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	2220      	movs	r2, #32
 8002ece:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8002eda:	2300      	movs	r3, #0
 8002edc:	e02c      	b.n	8002f38 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	681a      	ldr	r2, [r3, #0]
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002eec:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002ef6:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002ef8:	69fb      	ldr	r3, [r7, #28]
 8002efa:	9300      	str	r3, [sp, #0]
 8002efc:	2319      	movs	r3, #25
 8002efe:	2201      	movs	r2, #1
 8002f00:	490f      	ldr	r1, [pc, #60]	; (8002f40 <HAL_I2C_IsDeviceReady+0x254>)
 8002f02:	68f8      	ldr	r0, [r7, #12]
 8002f04:	f000 f8a2 	bl	800304c <I2C_WaitOnFlagUntilTimeout>
 8002f08:	4603      	mov	r3, r0
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d001      	beq.n	8002f12 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8002f0e:	2301      	movs	r3, #1
 8002f10:	e012      	b.n	8002f38 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8002f12:	69bb      	ldr	r3, [r7, #24]
 8002f14:	3301      	adds	r3, #1
 8002f16:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8002f18:	69ba      	ldr	r2, [r7, #24]
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	429a      	cmp	r2, r3
 8002f1e:	f4ff af32 	bcc.w	8002d86 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	2220      	movs	r2, #32
 8002f26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002f32:	2301      	movs	r3, #1
 8002f34:	e000      	b.n	8002f38 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8002f36:	2302      	movs	r3, #2
  }
}
 8002f38:	4618      	mov	r0, r3
 8002f3a:	3720      	adds	r7, #32
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	bd80      	pop	{r7, pc}
 8002f40:	00100002 	.word	0x00100002
 8002f44:	ffff0000 	.word	0xffff0000

08002f48 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b088      	sub	sp, #32
 8002f4c:	af02      	add	r7, sp, #8
 8002f4e:	60f8      	str	r0, [r7, #12]
 8002f50:	607a      	str	r2, [r7, #4]
 8002f52:	603b      	str	r3, [r7, #0]
 8002f54:	460b      	mov	r3, r1
 8002f56:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f5c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002f5e:	697b      	ldr	r3, [r7, #20]
 8002f60:	2b08      	cmp	r3, #8
 8002f62:	d006      	beq.n	8002f72 <I2C_MasterRequestWrite+0x2a>
 8002f64:	697b      	ldr	r3, [r7, #20]
 8002f66:	2b01      	cmp	r3, #1
 8002f68:	d003      	beq.n	8002f72 <I2C_MasterRequestWrite+0x2a>
 8002f6a:	697b      	ldr	r3, [r7, #20]
 8002f6c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002f70:	d108      	bne.n	8002f84 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	681a      	ldr	r2, [r3, #0]
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002f80:	601a      	str	r2, [r3, #0]
 8002f82:	e00b      	b.n	8002f9c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f88:	2b12      	cmp	r3, #18
 8002f8a:	d107      	bne.n	8002f9c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	681a      	ldr	r2, [r3, #0]
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002f9a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	9300      	str	r3, [sp, #0]
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002fa8:	68f8      	ldr	r0, [r7, #12]
 8002faa:	f000 f84f 	bl	800304c <I2C_WaitOnFlagUntilTimeout>
 8002fae:	4603      	mov	r3, r0
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d00d      	beq.n	8002fd0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fbe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002fc2:	d103      	bne.n	8002fcc <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002fca:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002fcc:	2303      	movs	r3, #3
 8002fce:	e035      	b.n	800303c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	691b      	ldr	r3, [r3, #16]
 8002fd4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002fd8:	d108      	bne.n	8002fec <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002fda:	897b      	ldrh	r3, [r7, #10]
 8002fdc:	b2db      	uxtb	r3, r3
 8002fde:	461a      	mov	r2, r3
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002fe8:	611a      	str	r2, [r3, #16]
 8002fea:	e01b      	b.n	8003024 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002fec:	897b      	ldrh	r3, [r7, #10]
 8002fee:	11db      	asrs	r3, r3, #7
 8002ff0:	b2db      	uxtb	r3, r3
 8002ff2:	f003 0306 	and.w	r3, r3, #6
 8002ff6:	b2db      	uxtb	r3, r3
 8002ff8:	f063 030f 	orn	r3, r3, #15
 8002ffc:	b2da      	uxtb	r2, r3
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	687a      	ldr	r2, [r7, #4]
 8003008:	490e      	ldr	r1, [pc, #56]	; (8003044 <I2C_MasterRequestWrite+0xfc>)
 800300a:	68f8      	ldr	r0, [r7, #12]
 800300c:	f000 f875 	bl	80030fa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003010:	4603      	mov	r3, r0
 8003012:	2b00      	cmp	r3, #0
 8003014:	d001      	beq.n	800301a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003016:	2301      	movs	r3, #1
 8003018:	e010      	b.n	800303c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800301a:	897b      	ldrh	r3, [r7, #10]
 800301c:	b2da      	uxtb	r2, r3
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	687a      	ldr	r2, [r7, #4]
 8003028:	4907      	ldr	r1, [pc, #28]	; (8003048 <I2C_MasterRequestWrite+0x100>)
 800302a:	68f8      	ldr	r0, [r7, #12]
 800302c:	f000 f865 	bl	80030fa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003030:	4603      	mov	r3, r0
 8003032:	2b00      	cmp	r3, #0
 8003034:	d001      	beq.n	800303a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003036:	2301      	movs	r3, #1
 8003038:	e000      	b.n	800303c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800303a:	2300      	movs	r3, #0
}
 800303c:	4618      	mov	r0, r3
 800303e:	3718      	adds	r7, #24
 8003040:	46bd      	mov	sp, r7
 8003042:	bd80      	pop	{r7, pc}
 8003044:	00010008 	.word	0x00010008
 8003048:	00010002 	.word	0x00010002

0800304c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	b084      	sub	sp, #16
 8003050:	af00      	add	r7, sp, #0
 8003052:	60f8      	str	r0, [r7, #12]
 8003054:	60b9      	str	r1, [r7, #8]
 8003056:	603b      	str	r3, [r7, #0]
 8003058:	4613      	mov	r3, r2
 800305a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800305c:	e025      	b.n	80030aa <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003064:	d021      	beq.n	80030aa <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003066:	f7fe fce3 	bl	8001a30 <HAL_GetTick>
 800306a:	4602      	mov	r2, r0
 800306c:	69bb      	ldr	r3, [r7, #24]
 800306e:	1ad3      	subs	r3, r2, r3
 8003070:	683a      	ldr	r2, [r7, #0]
 8003072:	429a      	cmp	r2, r3
 8003074:	d302      	bcc.n	800307c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003076:	683b      	ldr	r3, [r7, #0]
 8003078:	2b00      	cmp	r3, #0
 800307a:	d116      	bne.n	80030aa <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	2200      	movs	r2, #0
 8003080:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	2220      	movs	r2, #32
 8003086:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	2200      	movs	r2, #0
 800308e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003096:	f043 0220 	orr.w	r2, r3, #32
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	2200      	movs	r2, #0
 80030a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80030a6:	2301      	movs	r3, #1
 80030a8:	e023      	b.n	80030f2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80030aa:	68bb      	ldr	r3, [r7, #8]
 80030ac:	0c1b      	lsrs	r3, r3, #16
 80030ae:	b2db      	uxtb	r3, r3
 80030b0:	2b01      	cmp	r3, #1
 80030b2:	d10d      	bne.n	80030d0 <I2C_WaitOnFlagUntilTimeout+0x84>
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	695b      	ldr	r3, [r3, #20]
 80030ba:	43da      	mvns	r2, r3
 80030bc:	68bb      	ldr	r3, [r7, #8]
 80030be:	4013      	ands	r3, r2
 80030c0:	b29b      	uxth	r3, r3
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	bf0c      	ite	eq
 80030c6:	2301      	moveq	r3, #1
 80030c8:	2300      	movne	r3, #0
 80030ca:	b2db      	uxtb	r3, r3
 80030cc:	461a      	mov	r2, r3
 80030ce:	e00c      	b.n	80030ea <I2C_WaitOnFlagUntilTimeout+0x9e>
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	699b      	ldr	r3, [r3, #24]
 80030d6:	43da      	mvns	r2, r3
 80030d8:	68bb      	ldr	r3, [r7, #8]
 80030da:	4013      	ands	r3, r2
 80030dc:	b29b      	uxth	r3, r3
 80030de:	2b00      	cmp	r3, #0
 80030e0:	bf0c      	ite	eq
 80030e2:	2301      	moveq	r3, #1
 80030e4:	2300      	movne	r3, #0
 80030e6:	b2db      	uxtb	r3, r3
 80030e8:	461a      	mov	r2, r3
 80030ea:	79fb      	ldrb	r3, [r7, #7]
 80030ec:	429a      	cmp	r2, r3
 80030ee:	d0b6      	beq.n	800305e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80030f0:	2300      	movs	r3, #0
}
 80030f2:	4618      	mov	r0, r3
 80030f4:	3710      	adds	r7, #16
 80030f6:	46bd      	mov	sp, r7
 80030f8:	bd80      	pop	{r7, pc}

080030fa <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80030fa:	b580      	push	{r7, lr}
 80030fc:	b084      	sub	sp, #16
 80030fe:	af00      	add	r7, sp, #0
 8003100:	60f8      	str	r0, [r7, #12]
 8003102:	60b9      	str	r1, [r7, #8]
 8003104:	607a      	str	r2, [r7, #4]
 8003106:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003108:	e051      	b.n	80031ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	695b      	ldr	r3, [r3, #20]
 8003110:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003114:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003118:	d123      	bne.n	8003162 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	681a      	ldr	r2, [r3, #0]
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003128:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003132:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	2200      	movs	r2, #0
 8003138:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	2220      	movs	r2, #32
 800313e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	2200      	movs	r2, #0
 8003146:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800314e:	f043 0204 	orr.w	r2, r3, #4
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	2200      	movs	r2, #0
 800315a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800315e:	2301      	movs	r3, #1
 8003160:	e046      	b.n	80031f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003168:	d021      	beq.n	80031ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800316a:	f7fe fc61 	bl	8001a30 <HAL_GetTick>
 800316e:	4602      	mov	r2, r0
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	1ad3      	subs	r3, r2, r3
 8003174:	687a      	ldr	r2, [r7, #4]
 8003176:	429a      	cmp	r2, r3
 8003178:	d302      	bcc.n	8003180 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	2b00      	cmp	r3, #0
 800317e:	d116      	bne.n	80031ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	2200      	movs	r2, #0
 8003184:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	2220      	movs	r2, #32
 800318a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	2200      	movs	r2, #0
 8003192:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800319a:	f043 0220 	orr.w	r2, r3, #32
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	2200      	movs	r2, #0
 80031a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80031aa:	2301      	movs	r3, #1
 80031ac:	e020      	b.n	80031f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80031ae:	68bb      	ldr	r3, [r7, #8]
 80031b0:	0c1b      	lsrs	r3, r3, #16
 80031b2:	b2db      	uxtb	r3, r3
 80031b4:	2b01      	cmp	r3, #1
 80031b6:	d10c      	bne.n	80031d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	695b      	ldr	r3, [r3, #20]
 80031be:	43da      	mvns	r2, r3
 80031c0:	68bb      	ldr	r3, [r7, #8]
 80031c2:	4013      	ands	r3, r2
 80031c4:	b29b      	uxth	r3, r3
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	bf14      	ite	ne
 80031ca:	2301      	movne	r3, #1
 80031cc:	2300      	moveq	r3, #0
 80031ce:	b2db      	uxtb	r3, r3
 80031d0:	e00b      	b.n	80031ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	699b      	ldr	r3, [r3, #24]
 80031d8:	43da      	mvns	r2, r3
 80031da:	68bb      	ldr	r3, [r7, #8]
 80031dc:	4013      	ands	r3, r2
 80031de:	b29b      	uxth	r3, r3
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	bf14      	ite	ne
 80031e4:	2301      	movne	r3, #1
 80031e6:	2300      	moveq	r3, #0
 80031e8:	b2db      	uxtb	r3, r3
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d18d      	bne.n	800310a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80031ee:	2300      	movs	r3, #0
}
 80031f0:	4618      	mov	r0, r3
 80031f2:	3710      	adds	r7, #16
 80031f4:	46bd      	mov	sp, r7
 80031f6:	bd80      	pop	{r7, pc}

080031f8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b084      	sub	sp, #16
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	60f8      	str	r0, [r7, #12]
 8003200:	60b9      	str	r1, [r7, #8]
 8003202:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003204:	e02d      	b.n	8003262 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003206:	68f8      	ldr	r0, [r7, #12]
 8003208:	f000 f878 	bl	80032fc <I2C_IsAcknowledgeFailed>
 800320c:	4603      	mov	r3, r0
 800320e:	2b00      	cmp	r3, #0
 8003210:	d001      	beq.n	8003216 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003212:	2301      	movs	r3, #1
 8003214:	e02d      	b.n	8003272 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003216:	68bb      	ldr	r3, [r7, #8]
 8003218:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800321c:	d021      	beq.n	8003262 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800321e:	f7fe fc07 	bl	8001a30 <HAL_GetTick>
 8003222:	4602      	mov	r2, r0
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	1ad3      	subs	r3, r2, r3
 8003228:	68ba      	ldr	r2, [r7, #8]
 800322a:	429a      	cmp	r2, r3
 800322c:	d302      	bcc.n	8003234 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800322e:	68bb      	ldr	r3, [r7, #8]
 8003230:	2b00      	cmp	r3, #0
 8003232:	d116      	bne.n	8003262 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	2200      	movs	r2, #0
 8003238:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	2220      	movs	r2, #32
 800323e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	2200      	movs	r2, #0
 8003246:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800324e:	f043 0220 	orr.w	r2, r3, #32
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	2200      	movs	r2, #0
 800325a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800325e:	2301      	movs	r3, #1
 8003260:	e007      	b.n	8003272 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	695b      	ldr	r3, [r3, #20]
 8003268:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800326c:	2b80      	cmp	r3, #128	; 0x80
 800326e:	d1ca      	bne.n	8003206 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003270:	2300      	movs	r3, #0
}
 8003272:	4618      	mov	r0, r3
 8003274:	3710      	adds	r7, #16
 8003276:	46bd      	mov	sp, r7
 8003278:	bd80      	pop	{r7, pc}

0800327a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800327a:	b580      	push	{r7, lr}
 800327c:	b084      	sub	sp, #16
 800327e:	af00      	add	r7, sp, #0
 8003280:	60f8      	str	r0, [r7, #12]
 8003282:	60b9      	str	r1, [r7, #8]
 8003284:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003286:	e02d      	b.n	80032e4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003288:	68f8      	ldr	r0, [r7, #12]
 800328a:	f000 f837 	bl	80032fc <I2C_IsAcknowledgeFailed>
 800328e:	4603      	mov	r3, r0
 8003290:	2b00      	cmp	r3, #0
 8003292:	d001      	beq.n	8003298 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003294:	2301      	movs	r3, #1
 8003296:	e02d      	b.n	80032f4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003298:	68bb      	ldr	r3, [r7, #8]
 800329a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800329e:	d021      	beq.n	80032e4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032a0:	f7fe fbc6 	bl	8001a30 <HAL_GetTick>
 80032a4:	4602      	mov	r2, r0
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	1ad3      	subs	r3, r2, r3
 80032aa:	68ba      	ldr	r2, [r7, #8]
 80032ac:	429a      	cmp	r2, r3
 80032ae:	d302      	bcc.n	80032b6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80032b0:	68bb      	ldr	r3, [r7, #8]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d116      	bne.n	80032e4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	2200      	movs	r2, #0
 80032ba:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	2220      	movs	r2, #32
 80032c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	2200      	movs	r2, #0
 80032c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032d0:	f043 0220 	orr.w	r2, r3, #32
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	2200      	movs	r2, #0
 80032dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80032e0:	2301      	movs	r3, #1
 80032e2:	e007      	b.n	80032f4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	695b      	ldr	r3, [r3, #20]
 80032ea:	f003 0304 	and.w	r3, r3, #4
 80032ee:	2b04      	cmp	r3, #4
 80032f0:	d1ca      	bne.n	8003288 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80032f2:	2300      	movs	r3, #0
}
 80032f4:	4618      	mov	r0, r3
 80032f6:	3710      	adds	r7, #16
 80032f8:	46bd      	mov	sp, r7
 80032fa:	bd80      	pop	{r7, pc}

080032fc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80032fc:	b480      	push	{r7}
 80032fe:	b083      	sub	sp, #12
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	695b      	ldr	r3, [r3, #20]
 800330a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800330e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003312:	d11b      	bne.n	800334c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800331c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	2200      	movs	r2, #0
 8003322:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2220      	movs	r2, #32
 8003328:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2200      	movs	r2, #0
 8003330:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003338:	f043 0204 	orr.w	r2, r3, #4
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2200      	movs	r2, #0
 8003344:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003348:	2301      	movs	r3, #1
 800334a:	e000      	b.n	800334e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800334c:	2300      	movs	r3, #0
}
 800334e:	4618      	mov	r0, r3
 8003350:	370c      	adds	r7, #12
 8003352:	46bd      	mov	sp, r7
 8003354:	bc80      	pop	{r7}
 8003356:	4770      	bx	lr

08003358 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003358:	b580      	push	{r7, lr}
 800335a:	b086      	sub	sp, #24
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2b00      	cmp	r3, #0
 8003364:	d101      	bne.n	800336a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003366:	2301      	movs	r3, #1
 8003368:	e26c      	b.n	8003844 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f003 0301 	and.w	r3, r3, #1
 8003372:	2b00      	cmp	r3, #0
 8003374:	f000 8087 	beq.w	8003486 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003378:	4b92      	ldr	r3, [pc, #584]	; (80035c4 <HAL_RCC_OscConfig+0x26c>)
 800337a:	685b      	ldr	r3, [r3, #4]
 800337c:	f003 030c 	and.w	r3, r3, #12
 8003380:	2b04      	cmp	r3, #4
 8003382:	d00c      	beq.n	800339e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003384:	4b8f      	ldr	r3, [pc, #572]	; (80035c4 <HAL_RCC_OscConfig+0x26c>)
 8003386:	685b      	ldr	r3, [r3, #4]
 8003388:	f003 030c 	and.w	r3, r3, #12
 800338c:	2b08      	cmp	r3, #8
 800338e:	d112      	bne.n	80033b6 <HAL_RCC_OscConfig+0x5e>
 8003390:	4b8c      	ldr	r3, [pc, #560]	; (80035c4 <HAL_RCC_OscConfig+0x26c>)
 8003392:	685b      	ldr	r3, [r3, #4]
 8003394:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003398:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800339c:	d10b      	bne.n	80033b6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800339e:	4b89      	ldr	r3, [pc, #548]	; (80035c4 <HAL_RCC_OscConfig+0x26c>)
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d06c      	beq.n	8003484 <HAL_RCC_OscConfig+0x12c>
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	685b      	ldr	r3, [r3, #4]
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d168      	bne.n	8003484 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80033b2:	2301      	movs	r3, #1
 80033b4:	e246      	b.n	8003844 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	685b      	ldr	r3, [r3, #4]
 80033ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033be:	d106      	bne.n	80033ce <HAL_RCC_OscConfig+0x76>
 80033c0:	4b80      	ldr	r3, [pc, #512]	; (80035c4 <HAL_RCC_OscConfig+0x26c>)
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	4a7f      	ldr	r2, [pc, #508]	; (80035c4 <HAL_RCC_OscConfig+0x26c>)
 80033c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033ca:	6013      	str	r3, [r2, #0]
 80033cc:	e02e      	b.n	800342c <HAL_RCC_OscConfig+0xd4>
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	685b      	ldr	r3, [r3, #4]
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d10c      	bne.n	80033f0 <HAL_RCC_OscConfig+0x98>
 80033d6:	4b7b      	ldr	r3, [pc, #492]	; (80035c4 <HAL_RCC_OscConfig+0x26c>)
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	4a7a      	ldr	r2, [pc, #488]	; (80035c4 <HAL_RCC_OscConfig+0x26c>)
 80033dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033e0:	6013      	str	r3, [r2, #0]
 80033e2:	4b78      	ldr	r3, [pc, #480]	; (80035c4 <HAL_RCC_OscConfig+0x26c>)
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	4a77      	ldr	r2, [pc, #476]	; (80035c4 <HAL_RCC_OscConfig+0x26c>)
 80033e8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80033ec:	6013      	str	r3, [r2, #0]
 80033ee:	e01d      	b.n	800342c <HAL_RCC_OscConfig+0xd4>
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	685b      	ldr	r3, [r3, #4]
 80033f4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80033f8:	d10c      	bne.n	8003414 <HAL_RCC_OscConfig+0xbc>
 80033fa:	4b72      	ldr	r3, [pc, #456]	; (80035c4 <HAL_RCC_OscConfig+0x26c>)
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	4a71      	ldr	r2, [pc, #452]	; (80035c4 <HAL_RCC_OscConfig+0x26c>)
 8003400:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003404:	6013      	str	r3, [r2, #0]
 8003406:	4b6f      	ldr	r3, [pc, #444]	; (80035c4 <HAL_RCC_OscConfig+0x26c>)
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	4a6e      	ldr	r2, [pc, #440]	; (80035c4 <HAL_RCC_OscConfig+0x26c>)
 800340c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003410:	6013      	str	r3, [r2, #0]
 8003412:	e00b      	b.n	800342c <HAL_RCC_OscConfig+0xd4>
 8003414:	4b6b      	ldr	r3, [pc, #428]	; (80035c4 <HAL_RCC_OscConfig+0x26c>)
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	4a6a      	ldr	r2, [pc, #424]	; (80035c4 <HAL_RCC_OscConfig+0x26c>)
 800341a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800341e:	6013      	str	r3, [r2, #0]
 8003420:	4b68      	ldr	r3, [pc, #416]	; (80035c4 <HAL_RCC_OscConfig+0x26c>)
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	4a67      	ldr	r2, [pc, #412]	; (80035c4 <HAL_RCC_OscConfig+0x26c>)
 8003426:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800342a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	685b      	ldr	r3, [r3, #4]
 8003430:	2b00      	cmp	r3, #0
 8003432:	d013      	beq.n	800345c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003434:	f7fe fafc 	bl	8001a30 <HAL_GetTick>
 8003438:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800343a:	e008      	b.n	800344e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800343c:	f7fe faf8 	bl	8001a30 <HAL_GetTick>
 8003440:	4602      	mov	r2, r0
 8003442:	693b      	ldr	r3, [r7, #16]
 8003444:	1ad3      	subs	r3, r2, r3
 8003446:	2b64      	cmp	r3, #100	; 0x64
 8003448:	d901      	bls.n	800344e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800344a:	2303      	movs	r3, #3
 800344c:	e1fa      	b.n	8003844 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800344e:	4b5d      	ldr	r3, [pc, #372]	; (80035c4 <HAL_RCC_OscConfig+0x26c>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003456:	2b00      	cmp	r3, #0
 8003458:	d0f0      	beq.n	800343c <HAL_RCC_OscConfig+0xe4>
 800345a:	e014      	b.n	8003486 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800345c:	f7fe fae8 	bl	8001a30 <HAL_GetTick>
 8003460:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003462:	e008      	b.n	8003476 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003464:	f7fe fae4 	bl	8001a30 <HAL_GetTick>
 8003468:	4602      	mov	r2, r0
 800346a:	693b      	ldr	r3, [r7, #16]
 800346c:	1ad3      	subs	r3, r2, r3
 800346e:	2b64      	cmp	r3, #100	; 0x64
 8003470:	d901      	bls.n	8003476 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003472:	2303      	movs	r3, #3
 8003474:	e1e6      	b.n	8003844 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003476:	4b53      	ldr	r3, [pc, #332]	; (80035c4 <HAL_RCC_OscConfig+0x26c>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800347e:	2b00      	cmp	r3, #0
 8003480:	d1f0      	bne.n	8003464 <HAL_RCC_OscConfig+0x10c>
 8003482:	e000      	b.n	8003486 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003484:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f003 0302 	and.w	r3, r3, #2
 800348e:	2b00      	cmp	r3, #0
 8003490:	d063      	beq.n	800355a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003492:	4b4c      	ldr	r3, [pc, #304]	; (80035c4 <HAL_RCC_OscConfig+0x26c>)
 8003494:	685b      	ldr	r3, [r3, #4]
 8003496:	f003 030c 	and.w	r3, r3, #12
 800349a:	2b00      	cmp	r3, #0
 800349c:	d00b      	beq.n	80034b6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800349e:	4b49      	ldr	r3, [pc, #292]	; (80035c4 <HAL_RCC_OscConfig+0x26c>)
 80034a0:	685b      	ldr	r3, [r3, #4]
 80034a2:	f003 030c 	and.w	r3, r3, #12
 80034a6:	2b08      	cmp	r3, #8
 80034a8:	d11c      	bne.n	80034e4 <HAL_RCC_OscConfig+0x18c>
 80034aa:	4b46      	ldr	r3, [pc, #280]	; (80035c4 <HAL_RCC_OscConfig+0x26c>)
 80034ac:	685b      	ldr	r3, [r3, #4]
 80034ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d116      	bne.n	80034e4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034b6:	4b43      	ldr	r3, [pc, #268]	; (80035c4 <HAL_RCC_OscConfig+0x26c>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f003 0302 	and.w	r3, r3, #2
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d005      	beq.n	80034ce <HAL_RCC_OscConfig+0x176>
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	691b      	ldr	r3, [r3, #16]
 80034c6:	2b01      	cmp	r3, #1
 80034c8:	d001      	beq.n	80034ce <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80034ca:	2301      	movs	r3, #1
 80034cc:	e1ba      	b.n	8003844 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034ce:	4b3d      	ldr	r3, [pc, #244]	; (80035c4 <HAL_RCC_OscConfig+0x26c>)
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	695b      	ldr	r3, [r3, #20]
 80034da:	00db      	lsls	r3, r3, #3
 80034dc:	4939      	ldr	r1, [pc, #228]	; (80035c4 <HAL_RCC_OscConfig+0x26c>)
 80034de:	4313      	orrs	r3, r2
 80034e0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034e2:	e03a      	b.n	800355a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	691b      	ldr	r3, [r3, #16]
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d020      	beq.n	800352e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80034ec:	4b36      	ldr	r3, [pc, #216]	; (80035c8 <HAL_RCC_OscConfig+0x270>)
 80034ee:	2201      	movs	r2, #1
 80034f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034f2:	f7fe fa9d 	bl	8001a30 <HAL_GetTick>
 80034f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034f8:	e008      	b.n	800350c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80034fa:	f7fe fa99 	bl	8001a30 <HAL_GetTick>
 80034fe:	4602      	mov	r2, r0
 8003500:	693b      	ldr	r3, [r7, #16]
 8003502:	1ad3      	subs	r3, r2, r3
 8003504:	2b02      	cmp	r3, #2
 8003506:	d901      	bls.n	800350c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003508:	2303      	movs	r3, #3
 800350a:	e19b      	b.n	8003844 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800350c:	4b2d      	ldr	r3, [pc, #180]	; (80035c4 <HAL_RCC_OscConfig+0x26c>)
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f003 0302 	and.w	r3, r3, #2
 8003514:	2b00      	cmp	r3, #0
 8003516:	d0f0      	beq.n	80034fa <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003518:	4b2a      	ldr	r3, [pc, #168]	; (80035c4 <HAL_RCC_OscConfig+0x26c>)
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	695b      	ldr	r3, [r3, #20]
 8003524:	00db      	lsls	r3, r3, #3
 8003526:	4927      	ldr	r1, [pc, #156]	; (80035c4 <HAL_RCC_OscConfig+0x26c>)
 8003528:	4313      	orrs	r3, r2
 800352a:	600b      	str	r3, [r1, #0]
 800352c:	e015      	b.n	800355a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800352e:	4b26      	ldr	r3, [pc, #152]	; (80035c8 <HAL_RCC_OscConfig+0x270>)
 8003530:	2200      	movs	r2, #0
 8003532:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003534:	f7fe fa7c 	bl	8001a30 <HAL_GetTick>
 8003538:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800353a:	e008      	b.n	800354e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800353c:	f7fe fa78 	bl	8001a30 <HAL_GetTick>
 8003540:	4602      	mov	r2, r0
 8003542:	693b      	ldr	r3, [r7, #16]
 8003544:	1ad3      	subs	r3, r2, r3
 8003546:	2b02      	cmp	r3, #2
 8003548:	d901      	bls.n	800354e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800354a:	2303      	movs	r3, #3
 800354c:	e17a      	b.n	8003844 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800354e:	4b1d      	ldr	r3, [pc, #116]	; (80035c4 <HAL_RCC_OscConfig+0x26c>)
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f003 0302 	and.w	r3, r3, #2
 8003556:	2b00      	cmp	r3, #0
 8003558:	d1f0      	bne.n	800353c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f003 0308 	and.w	r3, r3, #8
 8003562:	2b00      	cmp	r3, #0
 8003564:	d03a      	beq.n	80035dc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	699b      	ldr	r3, [r3, #24]
 800356a:	2b00      	cmp	r3, #0
 800356c:	d019      	beq.n	80035a2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800356e:	4b17      	ldr	r3, [pc, #92]	; (80035cc <HAL_RCC_OscConfig+0x274>)
 8003570:	2201      	movs	r2, #1
 8003572:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003574:	f7fe fa5c 	bl	8001a30 <HAL_GetTick>
 8003578:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800357a:	e008      	b.n	800358e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800357c:	f7fe fa58 	bl	8001a30 <HAL_GetTick>
 8003580:	4602      	mov	r2, r0
 8003582:	693b      	ldr	r3, [r7, #16]
 8003584:	1ad3      	subs	r3, r2, r3
 8003586:	2b02      	cmp	r3, #2
 8003588:	d901      	bls.n	800358e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800358a:	2303      	movs	r3, #3
 800358c:	e15a      	b.n	8003844 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800358e:	4b0d      	ldr	r3, [pc, #52]	; (80035c4 <HAL_RCC_OscConfig+0x26c>)
 8003590:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003592:	f003 0302 	and.w	r3, r3, #2
 8003596:	2b00      	cmp	r3, #0
 8003598:	d0f0      	beq.n	800357c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800359a:	2001      	movs	r0, #1
 800359c:	f000 fad8 	bl	8003b50 <RCC_Delay>
 80035a0:	e01c      	b.n	80035dc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80035a2:	4b0a      	ldr	r3, [pc, #40]	; (80035cc <HAL_RCC_OscConfig+0x274>)
 80035a4:	2200      	movs	r2, #0
 80035a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035a8:	f7fe fa42 	bl	8001a30 <HAL_GetTick>
 80035ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035ae:	e00f      	b.n	80035d0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80035b0:	f7fe fa3e 	bl	8001a30 <HAL_GetTick>
 80035b4:	4602      	mov	r2, r0
 80035b6:	693b      	ldr	r3, [r7, #16]
 80035b8:	1ad3      	subs	r3, r2, r3
 80035ba:	2b02      	cmp	r3, #2
 80035bc:	d908      	bls.n	80035d0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80035be:	2303      	movs	r3, #3
 80035c0:	e140      	b.n	8003844 <HAL_RCC_OscConfig+0x4ec>
 80035c2:	bf00      	nop
 80035c4:	40021000 	.word	0x40021000
 80035c8:	42420000 	.word	0x42420000
 80035cc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035d0:	4b9e      	ldr	r3, [pc, #632]	; (800384c <HAL_RCC_OscConfig+0x4f4>)
 80035d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035d4:	f003 0302 	and.w	r3, r3, #2
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d1e9      	bne.n	80035b0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f003 0304 	and.w	r3, r3, #4
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	f000 80a6 	beq.w	8003736 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80035ea:	2300      	movs	r3, #0
 80035ec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80035ee:	4b97      	ldr	r3, [pc, #604]	; (800384c <HAL_RCC_OscConfig+0x4f4>)
 80035f0:	69db      	ldr	r3, [r3, #28]
 80035f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d10d      	bne.n	8003616 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80035fa:	4b94      	ldr	r3, [pc, #592]	; (800384c <HAL_RCC_OscConfig+0x4f4>)
 80035fc:	69db      	ldr	r3, [r3, #28]
 80035fe:	4a93      	ldr	r2, [pc, #588]	; (800384c <HAL_RCC_OscConfig+0x4f4>)
 8003600:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003604:	61d3      	str	r3, [r2, #28]
 8003606:	4b91      	ldr	r3, [pc, #580]	; (800384c <HAL_RCC_OscConfig+0x4f4>)
 8003608:	69db      	ldr	r3, [r3, #28]
 800360a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800360e:	60bb      	str	r3, [r7, #8]
 8003610:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003612:	2301      	movs	r3, #1
 8003614:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003616:	4b8e      	ldr	r3, [pc, #568]	; (8003850 <HAL_RCC_OscConfig+0x4f8>)
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800361e:	2b00      	cmp	r3, #0
 8003620:	d118      	bne.n	8003654 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003622:	4b8b      	ldr	r3, [pc, #556]	; (8003850 <HAL_RCC_OscConfig+0x4f8>)
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	4a8a      	ldr	r2, [pc, #552]	; (8003850 <HAL_RCC_OscConfig+0x4f8>)
 8003628:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800362c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800362e:	f7fe f9ff 	bl	8001a30 <HAL_GetTick>
 8003632:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003634:	e008      	b.n	8003648 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003636:	f7fe f9fb 	bl	8001a30 <HAL_GetTick>
 800363a:	4602      	mov	r2, r0
 800363c:	693b      	ldr	r3, [r7, #16]
 800363e:	1ad3      	subs	r3, r2, r3
 8003640:	2b64      	cmp	r3, #100	; 0x64
 8003642:	d901      	bls.n	8003648 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003644:	2303      	movs	r3, #3
 8003646:	e0fd      	b.n	8003844 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003648:	4b81      	ldr	r3, [pc, #516]	; (8003850 <HAL_RCC_OscConfig+0x4f8>)
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003650:	2b00      	cmp	r3, #0
 8003652:	d0f0      	beq.n	8003636 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	68db      	ldr	r3, [r3, #12]
 8003658:	2b01      	cmp	r3, #1
 800365a:	d106      	bne.n	800366a <HAL_RCC_OscConfig+0x312>
 800365c:	4b7b      	ldr	r3, [pc, #492]	; (800384c <HAL_RCC_OscConfig+0x4f4>)
 800365e:	6a1b      	ldr	r3, [r3, #32]
 8003660:	4a7a      	ldr	r2, [pc, #488]	; (800384c <HAL_RCC_OscConfig+0x4f4>)
 8003662:	f043 0301 	orr.w	r3, r3, #1
 8003666:	6213      	str	r3, [r2, #32]
 8003668:	e02d      	b.n	80036c6 <HAL_RCC_OscConfig+0x36e>
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	68db      	ldr	r3, [r3, #12]
 800366e:	2b00      	cmp	r3, #0
 8003670:	d10c      	bne.n	800368c <HAL_RCC_OscConfig+0x334>
 8003672:	4b76      	ldr	r3, [pc, #472]	; (800384c <HAL_RCC_OscConfig+0x4f4>)
 8003674:	6a1b      	ldr	r3, [r3, #32]
 8003676:	4a75      	ldr	r2, [pc, #468]	; (800384c <HAL_RCC_OscConfig+0x4f4>)
 8003678:	f023 0301 	bic.w	r3, r3, #1
 800367c:	6213      	str	r3, [r2, #32]
 800367e:	4b73      	ldr	r3, [pc, #460]	; (800384c <HAL_RCC_OscConfig+0x4f4>)
 8003680:	6a1b      	ldr	r3, [r3, #32]
 8003682:	4a72      	ldr	r2, [pc, #456]	; (800384c <HAL_RCC_OscConfig+0x4f4>)
 8003684:	f023 0304 	bic.w	r3, r3, #4
 8003688:	6213      	str	r3, [r2, #32]
 800368a:	e01c      	b.n	80036c6 <HAL_RCC_OscConfig+0x36e>
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	68db      	ldr	r3, [r3, #12]
 8003690:	2b05      	cmp	r3, #5
 8003692:	d10c      	bne.n	80036ae <HAL_RCC_OscConfig+0x356>
 8003694:	4b6d      	ldr	r3, [pc, #436]	; (800384c <HAL_RCC_OscConfig+0x4f4>)
 8003696:	6a1b      	ldr	r3, [r3, #32]
 8003698:	4a6c      	ldr	r2, [pc, #432]	; (800384c <HAL_RCC_OscConfig+0x4f4>)
 800369a:	f043 0304 	orr.w	r3, r3, #4
 800369e:	6213      	str	r3, [r2, #32]
 80036a0:	4b6a      	ldr	r3, [pc, #424]	; (800384c <HAL_RCC_OscConfig+0x4f4>)
 80036a2:	6a1b      	ldr	r3, [r3, #32]
 80036a4:	4a69      	ldr	r2, [pc, #420]	; (800384c <HAL_RCC_OscConfig+0x4f4>)
 80036a6:	f043 0301 	orr.w	r3, r3, #1
 80036aa:	6213      	str	r3, [r2, #32]
 80036ac:	e00b      	b.n	80036c6 <HAL_RCC_OscConfig+0x36e>
 80036ae:	4b67      	ldr	r3, [pc, #412]	; (800384c <HAL_RCC_OscConfig+0x4f4>)
 80036b0:	6a1b      	ldr	r3, [r3, #32]
 80036b2:	4a66      	ldr	r2, [pc, #408]	; (800384c <HAL_RCC_OscConfig+0x4f4>)
 80036b4:	f023 0301 	bic.w	r3, r3, #1
 80036b8:	6213      	str	r3, [r2, #32]
 80036ba:	4b64      	ldr	r3, [pc, #400]	; (800384c <HAL_RCC_OscConfig+0x4f4>)
 80036bc:	6a1b      	ldr	r3, [r3, #32]
 80036be:	4a63      	ldr	r2, [pc, #396]	; (800384c <HAL_RCC_OscConfig+0x4f4>)
 80036c0:	f023 0304 	bic.w	r3, r3, #4
 80036c4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	68db      	ldr	r3, [r3, #12]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d015      	beq.n	80036fa <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036ce:	f7fe f9af 	bl	8001a30 <HAL_GetTick>
 80036d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036d4:	e00a      	b.n	80036ec <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036d6:	f7fe f9ab 	bl	8001a30 <HAL_GetTick>
 80036da:	4602      	mov	r2, r0
 80036dc:	693b      	ldr	r3, [r7, #16]
 80036de:	1ad3      	subs	r3, r2, r3
 80036e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80036e4:	4293      	cmp	r3, r2
 80036e6:	d901      	bls.n	80036ec <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80036e8:	2303      	movs	r3, #3
 80036ea:	e0ab      	b.n	8003844 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036ec:	4b57      	ldr	r3, [pc, #348]	; (800384c <HAL_RCC_OscConfig+0x4f4>)
 80036ee:	6a1b      	ldr	r3, [r3, #32]
 80036f0:	f003 0302 	and.w	r3, r3, #2
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d0ee      	beq.n	80036d6 <HAL_RCC_OscConfig+0x37e>
 80036f8:	e014      	b.n	8003724 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036fa:	f7fe f999 	bl	8001a30 <HAL_GetTick>
 80036fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003700:	e00a      	b.n	8003718 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003702:	f7fe f995 	bl	8001a30 <HAL_GetTick>
 8003706:	4602      	mov	r2, r0
 8003708:	693b      	ldr	r3, [r7, #16]
 800370a:	1ad3      	subs	r3, r2, r3
 800370c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003710:	4293      	cmp	r3, r2
 8003712:	d901      	bls.n	8003718 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003714:	2303      	movs	r3, #3
 8003716:	e095      	b.n	8003844 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003718:	4b4c      	ldr	r3, [pc, #304]	; (800384c <HAL_RCC_OscConfig+0x4f4>)
 800371a:	6a1b      	ldr	r3, [r3, #32]
 800371c:	f003 0302 	and.w	r3, r3, #2
 8003720:	2b00      	cmp	r3, #0
 8003722:	d1ee      	bne.n	8003702 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003724:	7dfb      	ldrb	r3, [r7, #23]
 8003726:	2b01      	cmp	r3, #1
 8003728:	d105      	bne.n	8003736 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800372a:	4b48      	ldr	r3, [pc, #288]	; (800384c <HAL_RCC_OscConfig+0x4f4>)
 800372c:	69db      	ldr	r3, [r3, #28]
 800372e:	4a47      	ldr	r2, [pc, #284]	; (800384c <HAL_RCC_OscConfig+0x4f4>)
 8003730:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003734:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	69db      	ldr	r3, [r3, #28]
 800373a:	2b00      	cmp	r3, #0
 800373c:	f000 8081 	beq.w	8003842 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003740:	4b42      	ldr	r3, [pc, #264]	; (800384c <HAL_RCC_OscConfig+0x4f4>)
 8003742:	685b      	ldr	r3, [r3, #4]
 8003744:	f003 030c 	and.w	r3, r3, #12
 8003748:	2b08      	cmp	r3, #8
 800374a:	d061      	beq.n	8003810 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	69db      	ldr	r3, [r3, #28]
 8003750:	2b02      	cmp	r3, #2
 8003752:	d146      	bne.n	80037e2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003754:	4b3f      	ldr	r3, [pc, #252]	; (8003854 <HAL_RCC_OscConfig+0x4fc>)
 8003756:	2200      	movs	r2, #0
 8003758:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800375a:	f7fe f969 	bl	8001a30 <HAL_GetTick>
 800375e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003760:	e008      	b.n	8003774 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003762:	f7fe f965 	bl	8001a30 <HAL_GetTick>
 8003766:	4602      	mov	r2, r0
 8003768:	693b      	ldr	r3, [r7, #16]
 800376a:	1ad3      	subs	r3, r2, r3
 800376c:	2b02      	cmp	r3, #2
 800376e:	d901      	bls.n	8003774 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003770:	2303      	movs	r3, #3
 8003772:	e067      	b.n	8003844 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003774:	4b35      	ldr	r3, [pc, #212]	; (800384c <HAL_RCC_OscConfig+0x4f4>)
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800377c:	2b00      	cmp	r3, #0
 800377e:	d1f0      	bne.n	8003762 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	6a1b      	ldr	r3, [r3, #32]
 8003784:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003788:	d108      	bne.n	800379c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800378a:	4b30      	ldr	r3, [pc, #192]	; (800384c <HAL_RCC_OscConfig+0x4f4>)
 800378c:	685b      	ldr	r3, [r3, #4]
 800378e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	689b      	ldr	r3, [r3, #8]
 8003796:	492d      	ldr	r1, [pc, #180]	; (800384c <HAL_RCC_OscConfig+0x4f4>)
 8003798:	4313      	orrs	r3, r2
 800379a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800379c:	4b2b      	ldr	r3, [pc, #172]	; (800384c <HAL_RCC_OscConfig+0x4f4>)
 800379e:	685b      	ldr	r3, [r3, #4]
 80037a0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6a19      	ldr	r1, [r3, #32]
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037ac:	430b      	orrs	r3, r1
 80037ae:	4927      	ldr	r1, [pc, #156]	; (800384c <HAL_RCC_OscConfig+0x4f4>)
 80037b0:	4313      	orrs	r3, r2
 80037b2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80037b4:	4b27      	ldr	r3, [pc, #156]	; (8003854 <HAL_RCC_OscConfig+0x4fc>)
 80037b6:	2201      	movs	r2, #1
 80037b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037ba:	f7fe f939 	bl	8001a30 <HAL_GetTick>
 80037be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80037c0:	e008      	b.n	80037d4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037c2:	f7fe f935 	bl	8001a30 <HAL_GetTick>
 80037c6:	4602      	mov	r2, r0
 80037c8:	693b      	ldr	r3, [r7, #16]
 80037ca:	1ad3      	subs	r3, r2, r3
 80037cc:	2b02      	cmp	r3, #2
 80037ce:	d901      	bls.n	80037d4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80037d0:	2303      	movs	r3, #3
 80037d2:	e037      	b.n	8003844 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80037d4:	4b1d      	ldr	r3, [pc, #116]	; (800384c <HAL_RCC_OscConfig+0x4f4>)
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d0f0      	beq.n	80037c2 <HAL_RCC_OscConfig+0x46a>
 80037e0:	e02f      	b.n	8003842 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037e2:	4b1c      	ldr	r3, [pc, #112]	; (8003854 <HAL_RCC_OscConfig+0x4fc>)
 80037e4:	2200      	movs	r2, #0
 80037e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037e8:	f7fe f922 	bl	8001a30 <HAL_GetTick>
 80037ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80037ee:	e008      	b.n	8003802 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037f0:	f7fe f91e 	bl	8001a30 <HAL_GetTick>
 80037f4:	4602      	mov	r2, r0
 80037f6:	693b      	ldr	r3, [r7, #16]
 80037f8:	1ad3      	subs	r3, r2, r3
 80037fa:	2b02      	cmp	r3, #2
 80037fc:	d901      	bls.n	8003802 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80037fe:	2303      	movs	r3, #3
 8003800:	e020      	b.n	8003844 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003802:	4b12      	ldr	r3, [pc, #72]	; (800384c <HAL_RCC_OscConfig+0x4f4>)
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800380a:	2b00      	cmp	r3, #0
 800380c:	d1f0      	bne.n	80037f0 <HAL_RCC_OscConfig+0x498>
 800380e:	e018      	b.n	8003842 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	69db      	ldr	r3, [r3, #28]
 8003814:	2b01      	cmp	r3, #1
 8003816:	d101      	bne.n	800381c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8003818:	2301      	movs	r3, #1
 800381a:	e013      	b.n	8003844 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800381c:	4b0b      	ldr	r3, [pc, #44]	; (800384c <HAL_RCC_OscConfig+0x4f4>)
 800381e:	685b      	ldr	r3, [r3, #4]
 8003820:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	6a1b      	ldr	r3, [r3, #32]
 800382c:	429a      	cmp	r2, r3
 800382e:	d106      	bne.n	800383e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800383a:	429a      	cmp	r2, r3
 800383c:	d001      	beq.n	8003842 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800383e:	2301      	movs	r3, #1
 8003840:	e000      	b.n	8003844 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8003842:	2300      	movs	r3, #0
}
 8003844:	4618      	mov	r0, r3
 8003846:	3718      	adds	r7, #24
 8003848:	46bd      	mov	sp, r7
 800384a:	bd80      	pop	{r7, pc}
 800384c:	40021000 	.word	0x40021000
 8003850:	40007000 	.word	0x40007000
 8003854:	42420060 	.word	0x42420060

08003858 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003858:	b580      	push	{r7, lr}
 800385a:	b084      	sub	sp, #16
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
 8003860:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	2b00      	cmp	r3, #0
 8003866:	d101      	bne.n	800386c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003868:	2301      	movs	r3, #1
 800386a:	e0d0      	b.n	8003a0e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800386c:	4b6a      	ldr	r3, [pc, #424]	; (8003a18 <HAL_RCC_ClockConfig+0x1c0>)
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f003 0307 	and.w	r3, r3, #7
 8003874:	683a      	ldr	r2, [r7, #0]
 8003876:	429a      	cmp	r2, r3
 8003878:	d910      	bls.n	800389c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800387a:	4b67      	ldr	r3, [pc, #412]	; (8003a18 <HAL_RCC_ClockConfig+0x1c0>)
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f023 0207 	bic.w	r2, r3, #7
 8003882:	4965      	ldr	r1, [pc, #404]	; (8003a18 <HAL_RCC_ClockConfig+0x1c0>)
 8003884:	683b      	ldr	r3, [r7, #0]
 8003886:	4313      	orrs	r3, r2
 8003888:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800388a:	4b63      	ldr	r3, [pc, #396]	; (8003a18 <HAL_RCC_ClockConfig+0x1c0>)
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f003 0307 	and.w	r3, r3, #7
 8003892:	683a      	ldr	r2, [r7, #0]
 8003894:	429a      	cmp	r2, r3
 8003896:	d001      	beq.n	800389c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003898:	2301      	movs	r3, #1
 800389a:	e0b8      	b.n	8003a0e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f003 0302 	and.w	r3, r3, #2
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d020      	beq.n	80038ea <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f003 0304 	and.w	r3, r3, #4
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d005      	beq.n	80038c0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80038b4:	4b59      	ldr	r3, [pc, #356]	; (8003a1c <HAL_RCC_ClockConfig+0x1c4>)
 80038b6:	685b      	ldr	r3, [r3, #4]
 80038b8:	4a58      	ldr	r2, [pc, #352]	; (8003a1c <HAL_RCC_ClockConfig+0x1c4>)
 80038ba:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80038be:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f003 0308 	and.w	r3, r3, #8
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d005      	beq.n	80038d8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80038cc:	4b53      	ldr	r3, [pc, #332]	; (8003a1c <HAL_RCC_ClockConfig+0x1c4>)
 80038ce:	685b      	ldr	r3, [r3, #4]
 80038d0:	4a52      	ldr	r2, [pc, #328]	; (8003a1c <HAL_RCC_ClockConfig+0x1c4>)
 80038d2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80038d6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80038d8:	4b50      	ldr	r3, [pc, #320]	; (8003a1c <HAL_RCC_ClockConfig+0x1c4>)
 80038da:	685b      	ldr	r3, [r3, #4]
 80038dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	689b      	ldr	r3, [r3, #8]
 80038e4:	494d      	ldr	r1, [pc, #308]	; (8003a1c <HAL_RCC_ClockConfig+0x1c4>)
 80038e6:	4313      	orrs	r3, r2
 80038e8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f003 0301 	and.w	r3, r3, #1
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d040      	beq.n	8003978 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	685b      	ldr	r3, [r3, #4]
 80038fa:	2b01      	cmp	r3, #1
 80038fc:	d107      	bne.n	800390e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038fe:	4b47      	ldr	r3, [pc, #284]	; (8003a1c <HAL_RCC_ClockConfig+0x1c4>)
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003906:	2b00      	cmp	r3, #0
 8003908:	d115      	bne.n	8003936 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800390a:	2301      	movs	r3, #1
 800390c:	e07f      	b.n	8003a0e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	685b      	ldr	r3, [r3, #4]
 8003912:	2b02      	cmp	r3, #2
 8003914:	d107      	bne.n	8003926 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003916:	4b41      	ldr	r3, [pc, #260]	; (8003a1c <HAL_RCC_ClockConfig+0x1c4>)
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800391e:	2b00      	cmp	r3, #0
 8003920:	d109      	bne.n	8003936 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003922:	2301      	movs	r3, #1
 8003924:	e073      	b.n	8003a0e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003926:	4b3d      	ldr	r3, [pc, #244]	; (8003a1c <HAL_RCC_ClockConfig+0x1c4>)
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f003 0302 	and.w	r3, r3, #2
 800392e:	2b00      	cmp	r3, #0
 8003930:	d101      	bne.n	8003936 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003932:	2301      	movs	r3, #1
 8003934:	e06b      	b.n	8003a0e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003936:	4b39      	ldr	r3, [pc, #228]	; (8003a1c <HAL_RCC_ClockConfig+0x1c4>)
 8003938:	685b      	ldr	r3, [r3, #4]
 800393a:	f023 0203 	bic.w	r2, r3, #3
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	685b      	ldr	r3, [r3, #4]
 8003942:	4936      	ldr	r1, [pc, #216]	; (8003a1c <HAL_RCC_ClockConfig+0x1c4>)
 8003944:	4313      	orrs	r3, r2
 8003946:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003948:	f7fe f872 	bl	8001a30 <HAL_GetTick>
 800394c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800394e:	e00a      	b.n	8003966 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003950:	f7fe f86e 	bl	8001a30 <HAL_GetTick>
 8003954:	4602      	mov	r2, r0
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	1ad3      	subs	r3, r2, r3
 800395a:	f241 3288 	movw	r2, #5000	; 0x1388
 800395e:	4293      	cmp	r3, r2
 8003960:	d901      	bls.n	8003966 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003962:	2303      	movs	r3, #3
 8003964:	e053      	b.n	8003a0e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003966:	4b2d      	ldr	r3, [pc, #180]	; (8003a1c <HAL_RCC_ClockConfig+0x1c4>)
 8003968:	685b      	ldr	r3, [r3, #4]
 800396a:	f003 020c 	and.w	r2, r3, #12
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	685b      	ldr	r3, [r3, #4]
 8003972:	009b      	lsls	r3, r3, #2
 8003974:	429a      	cmp	r2, r3
 8003976:	d1eb      	bne.n	8003950 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003978:	4b27      	ldr	r3, [pc, #156]	; (8003a18 <HAL_RCC_ClockConfig+0x1c0>)
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f003 0307 	and.w	r3, r3, #7
 8003980:	683a      	ldr	r2, [r7, #0]
 8003982:	429a      	cmp	r2, r3
 8003984:	d210      	bcs.n	80039a8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003986:	4b24      	ldr	r3, [pc, #144]	; (8003a18 <HAL_RCC_ClockConfig+0x1c0>)
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f023 0207 	bic.w	r2, r3, #7
 800398e:	4922      	ldr	r1, [pc, #136]	; (8003a18 <HAL_RCC_ClockConfig+0x1c0>)
 8003990:	683b      	ldr	r3, [r7, #0]
 8003992:	4313      	orrs	r3, r2
 8003994:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003996:	4b20      	ldr	r3, [pc, #128]	; (8003a18 <HAL_RCC_ClockConfig+0x1c0>)
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f003 0307 	and.w	r3, r3, #7
 800399e:	683a      	ldr	r2, [r7, #0]
 80039a0:	429a      	cmp	r2, r3
 80039a2:	d001      	beq.n	80039a8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80039a4:	2301      	movs	r3, #1
 80039a6:	e032      	b.n	8003a0e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f003 0304 	and.w	r3, r3, #4
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d008      	beq.n	80039c6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80039b4:	4b19      	ldr	r3, [pc, #100]	; (8003a1c <HAL_RCC_ClockConfig+0x1c4>)
 80039b6:	685b      	ldr	r3, [r3, #4]
 80039b8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	68db      	ldr	r3, [r3, #12]
 80039c0:	4916      	ldr	r1, [pc, #88]	; (8003a1c <HAL_RCC_ClockConfig+0x1c4>)
 80039c2:	4313      	orrs	r3, r2
 80039c4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f003 0308 	and.w	r3, r3, #8
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d009      	beq.n	80039e6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80039d2:	4b12      	ldr	r3, [pc, #72]	; (8003a1c <HAL_RCC_ClockConfig+0x1c4>)
 80039d4:	685b      	ldr	r3, [r3, #4]
 80039d6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	691b      	ldr	r3, [r3, #16]
 80039de:	00db      	lsls	r3, r3, #3
 80039e0:	490e      	ldr	r1, [pc, #56]	; (8003a1c <HAL_RCC_ClockConfig+0x1c4>)
 80039e2:	4313      	orrs	r3, r2
 80039e4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80039e6:	f000 f821 	bl	8003a2c <HAL_RCC_GetSysClockFreq>
 80039ea:	4602      	mov	r2, r0
 80039ec:	4b0b      	ldr	r3, [pc, #44]	; (8003a1c <HAL_RCC_ClockConfig+0x1c4>)
 80039ee:	685b      	ldr	r3, [r3, #4]
 80039f0:	091b      	lsrs	r3, r3, #4
 80039f2:	f003 030f 	and.w	r3, r3, #15
 80039f6:	490a      	ldr	r1, [pc, #40]	; (8003a20 <HAL_RCC_ClockConfig+0x1c8>)
 80039f8:	5ccb      	ldrb	r3, [r1, r3]
 80039fa:	fa22 f303 	lsr.w	r3, r2, r3
 80039fe:	4a09      	ldr	r2, [pc, #36]	; (8003a24 <HAL_RCC_ClockConfig+0x1cc>)
 8003a00:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003a02:	4b09      	ldr	r3, [pc, #36]	; (8003a28 <HAL_RCC_ClockConfig+0x1d0>)
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	4618      	mov	r0, r3
 8003a08:	f7fd ffd0 	bl	80019ac <HAL_InitTick>

  return HAL_OK;
 8003a0c:	2300      	movs	r3, #0
}
 8003a0e:	4618      	mov	r0, r3
 8003a10:	3710      	adds	r7, #16
 8003a12:	46bd      	mov	sp, r7
 8003a14:	bd80      	pop	{r7, pc}
 8003a16:	bf00      	nop
 8003a18:	40022000 	.word	0x40022000
 8003a1c:	40021000 	.word	0x40021000
 8003a20:	08007d80 	.word	0x08007d80
 8003a24:	20000008 	.word	0x20000008
 8003a28:	2000000c 	.word	0x2000000c

08003a2c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a2c:	b490      	push	{r4, r7}
 8003a2e:	b08a      	sub	sp, #40	; 0x28
 8003a30:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003a32:	4b2a      	ldr	r3, [pc, #168]	; (8003adc <HAL_RCC_GetSysClockFreq+0xb0>)
 8003a34:	1d3c      	adds	r4, r7, #4
 8003a36:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003a38:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003a3c:	f240 2301 	movw	r3, #513	; 0x201
 8003a40:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003a42:	2300      	movs	r3, #0
 8003a44:	61fb      	str	r3, [r7, #28]
 8003a46:	2300      	movs	r3, #0
 8003a48:	61bb      	str	r3, [r7, #24]
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	627b      	str	r3, [r7, #36]	; 0x24
 8003a4e:	2300      	movs	r3, #0
 8003a50:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003a52:	2300      	movs	r3, #0
 8003a54:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003a56:	4b22      	ldr	r3, [pc, #136]	; (8003ae0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003a58:	685b      	ldr	r3, [r3, #4]
 8003a5a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003a5c:	69fb      	ldr	r3, [r7, #28]
 8003a5e:	f003 030c 	and.w	r3, r3, #12
 8003a62:	2b04      	cmp	r3, #4
 8003a64:	d002      	beq.n	8003a6c <HAL_RCC_GetSysClockFreq+0x40>
 8003a66:	2b08      	cmp	r3, #8
 8003a68:	d003      	beq.n	8003a72 <HAL_RCC_GetSysClockFreq+0x46>
 8003a6a:	e02d      	b.n	8003ac8 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003a6c:	4b1d      	ldr	r3, [pc, #116]	; (8003ae4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003a6e:	623b      	str	r3, [r7, #32]
      break;
 8003a70:	e02d      	b.n	8003ace <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003a72:	69fb      	ldr	r3, [r7, #28]
 8003a74:	0c9b      	lsrs	r3, r3, #18
 8003a76:	f003 030f 	and.w	r3, r3, #15
 8003a7a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003a7e:	4413      	add	r3, r2
 8003a80:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003a84:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003a86:	69fb      	ldr	r3, [r7, #28]
 8003a88:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d013      	beq.n	8003ab8 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003a90:	4b13      	ldr	r3, [pc, #76]	; (8003ae0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003a92:	685b      	ldr	r3, [r3, #4]
 8003a94:	0c5b      	lsrs	r3, r3, #17
 8003a96:	f003 0301 	and.w	r3, r3, #1
 8003a9a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003a9e:	4413      	add	r3, r2
 8003aa0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003aa4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003aa6:	697b      	ldr	r3, [r7, #20]
 8003aa8:	4a0e      	ldr	r2, [pc, #56]	; (8003ae4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003aaa:	fb02 f203 	mul.w	r2, r2, r3
 8003aae:	69bb      	ldr	r3, [r7, #24]
 8003ab0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ab4:	627b      	str	r3, [r7, #36]	; 0x24
 8003ab6:	e004      	b.n	8003ac2 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003ab8:	697b      	ldr	r3, [r7, #20]
 8003aba:	4a0b      	ldr	r2, [pc, #44]	; (8003ae8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003abc:	fb02 f303 	mul.w	r3, r2, r3
 8003ac0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ac4:	623b      	str	r3, [r7, #32]
      break;
 8003ac6:	e002      	b.n	8003ace <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003ac8:	4b06      	ldr	r3, [pc, #24]	; (8003ae4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003aca:	623b      	str	r3, [r7, #32]
      break;
 8003acc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003ace:	6a3b      	ldr	r3, [r7, #32]
}
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	3728      	adds	r7, #40	; 0x28
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	bc90      	pop	{r4, r7}
 8003ad8:	4770      	bx	lr
 8003ada:	bf00      	nop
 8003adc:	080075f4 	.word	0x080075f4
 8003ae0:	40021000 	.word	0x40021000
 8003ae4:	007a1200 	.word	0x007a1200
 8003ae8:	003d0900 	.word	0x003d0900

08003aec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003aec:	b480      	push	{r7}
 8003aee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003af0:	4b02      	ldr	r3, [pc, #8]	; (8003afc <HAL_RCC_GetHCLKFreq+0x10>)
 8003af2:	681b      	ldr	r3, [r3, #0]
}
 8003af4:	4618      	mov	r0, r3
 8003af6:	46bd      	mov	sp, r7
 8003af8:	bc80      	pop	{r7}
 8003afa:	4770      	bx	lr
 8003afc:	20000008 	.word	0x20000008

08003b00 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003b04:	f7ff fff2 	bl	8003aec <HAL_RCC_GetHCLKFreq>
 8003b08:	4602      	mov	r2, r0
 8003b0a:	4b05      	ldr	r3, [pc, #20]	; (8003b20 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003b0c:	685b      	ldr	r3, [r3, #4]
 8003b0e:	0a1b      	lsrs	r3, r3, #8
 8003b10:	f003 0307 	and.w	r3, r3, #7
 8003b14:	4903      	ldr	r1, [pc, #12]	; (8003b24 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003b16:	5ccb      	ldrb	r3, [r1, r3]
 8003b18:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	bd80      	pop	{r7, pc}
 8003b20:	40021000 	.word	0x40021000
 8003b24:	08007d90 	.word	0x08007d90

08003b28 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003b2c:	f7ff ffde 	bl	8003aec <HAL_RCC_GetHCLKFreq>
 8003b30:	4602      	mov	r2, r0
 8003b32:	4b05      	ldr	r3, [pc, #20]	; (8003b48 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003b34:	685b      	ldr	r3, [r3, #4]
 8003b36:	0adb      	lsrs	r3, r3, #11
 8003b38:	f003 0307 	and.w	r3, r3, #7
 8003b3c:	4903      	ldr	r1, [pc, #12]	; (8003b4c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003b3e:	5ccb      	ldrb	r3, [r1, r3]
 8003b40:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b44:	4618      	mov	r0, r3
 8003b46:	bd80      	pop	{r7, pc}
 8003b48:	40021000 	.word	0x40021000
 8003b4c:	08007d90 	.word	0x08007d90

08003b50 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003b50:	b480      	push	{r7}
 8003b52:	b085      	sub	sp, #20
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003b58:	4b0a      	ldr	r3, [pc, #40]	; (8003b84 <RCC_Delay+0x34>)
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	4a0a      	ldr	r2, [pc, #40]	; (8003b88 <RCC_Delay+0x38>)
 8003b5e:	fba2 2303 	umull	r2, r3, r2, r3
 8003b62:	0a5b      	lsrs	r3, r3, #9
 8003b64:	687a      	ldr	r2, [r7, #4]
 8003b66:	fb02 f303 	mul.w	r3, r2, r3
 8003b6a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003b6c:	bf00      	nop
  }
  while (Delay --);
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	1e5a      	subs	r2, r3, #1
 8003b72:	60fa      	str	r2, [r7, #12]
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d1f9      	bne.n	8003b6c <RCC_Delay+0x1c>
}
 8003b78:	bf00      	nop
 8003b7a:	bf00      	nop
 8003b7c:	3714      	adds	r7, #20
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	bc80      	pop	{r7}
 8003b82:	4770      	bx	lr
 8003b84:	20000008 	.word	0x20000008
 8003b88:	10624dd3 	.word	0x10624dd3

08003b8c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003b8c:	b580      	push	{r7, lr}
 8003b8e:	b086      	sub	sp, #24
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003b94:	2300      	movs	r3, #0
 8003b96:	613b      	str	r3, [r7, #16]
 8003b98:	2300      	movs	r3, #0
 8003b9a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f003 0301 	and.w	r3, r3, #1
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d07d      	beq.n	8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003ba8:	2300      	movs	r3, #0
 8003baa:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003bac:	4b4f      	ldr	r3, [pc, #316]	; (8003cec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bae:	69db      	ldr	r3, [r3, #28]
 8003bb0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d10d      	bne.n	8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003bb8:	4b4c      	ldr	r3, [pc, #304]	; (8003cec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bba:	69db      	ldr	r3, [r3, #28]
 8003bbc:	4a4b      	ldr	r2, [pc, #300]	; (8003cec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bbe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003bc2:	61d3      	str	r3, [r2, #28]
 8003bc4:	4b49      	ldr	r3, [pc, #292]	; (8003cec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bc6:	69db      	ldr	r3, [r3, #28]
 8003bc8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bcc:	60bb      	str	r3, [r7, #8]
 8003bce:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003bd0:	2301      	movs	r3, #1
 8003bd2:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bd4:	4b46      	ldr	r3, [pc, #280]	; (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d118      	bne.n	8003c12 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003be0:	4b43      	ldr	r3, [pc, #268]	; (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	4a42      	ldr	r2, [pc, #264]	; (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003be6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003bea:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003bec:	f7fd ff20 	bl	8001a30 <HAL_GetTick>
 8003bf0:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bf2:	e008      	b.n	8003c06 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003bf4:	f7fd ff1c 	bl	8001a30 <HAL_GetTick>
 8003bf8:	4602      	mov	r2, r0
 8003bfa:	693b      	ldr	r3, [r7, #16]
 8003bfc:	1ad3      	subs	r3, r2, r3
 8003bfe:	2b64      	cmp	r3, #100	; 0x64
 8003c00:	d901      	bls.n	8003c06 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003c02:	2303      	movs	r3, #3
 8003c04:	e06d      	b.n	8003ce2 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c06:	4b3a      	ldr	r3, [pc, #232]	; (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d0f0      	beq.n	8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003c12:	4b36      	ldr	r3, [pc, #216]	; (8003cec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c14:	6a1b      	ldr	r3, [r3, #32]
 8003c16:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c1a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d02e      	beq.n	8003c80 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	685b      	ldr	r3, [r3, #4]
 8003c26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c2a:	68fa      	ldr	r2, [r7, #12]
 8003c2c:	429a      	cmp	r2, r3
 8003c2e:	d027      	beq.n	8003c80 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003c30:	4b2e      	ldr	r3, [pc, #184]	; (8003cec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c32:	6a1b      	ldr	r3, [r3, #32]
 8003c34:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c38:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003c3a:	4b2e      	ldr	r3, [pc, #184]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003c3c:	2201      	movs	r2, #1
 8003c3e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003c40:	4b2c      	ldr	r3, [pc, #176]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003c42:	2200      	movs	r2, #0
 8003c44:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003c46:	4a29      	ldr	r2, [pc, #164]	; (8003cec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	f003 0301 	and.w	r3, r3, #1
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d014      	beq.n	8003c80 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c56:	f7fd feeb 	bl	8001a30 <HAL_GetTick>
 8003c5a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c5c:	e00a      	b.n	8003c74 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c5e:	f7fd fee7 	bl	8001a30 <HAL_GetTick>
 8003c62:	4602      	mov	r2, r0
 8003c64:	693b      	ldr	r3, [r7, #16]
 8003c66:	1ad3      	subs	r3, r2, r3
 8003c68:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c6c:	4293      	cmp	r3, r2
 8003c6e:	d901      	bls.n	8003c74 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003c70:	2303      	movs	r3, #3
 8003c72:	e036      	b.n	8003ce2 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c74:	4b1d      	ldr	r3, [pc, #116]	; (8003cec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c76:	6a1b      	ldr	r3, [r3, #32]
 8003c78:	f003 0302 	and.w	r3, r3, #2
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d0ee      	beq.n	8003c5e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003c80:	4b1a      	ldr	r3, [pc, #104]	; (8003cec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c82:	6a1b      	ldr	r3, [r3, #32]
 8003c84:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	685b      	ldr	r3, [r3, #4]
 8003c8c:	4917      	ldr	r1, [pc, #92]	; (8003cec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c8e:	4313      	orrs	r3, r2
 8003c90:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003c92:	7dfb      	ldrb	r3, [r7, #23]
 8003c94:	2b01      	cmp	r3, #1
 8003c96:	d105      	bne.n	8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c98:	4b14      	ldr	r3, [pc, #80]	; (8003cec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c9a:	69db      	ldr	r3, [r3, #28]
 8003c9c:	4a13      	ldr	r2, [pc, #76]	; (8003cec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c9e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ca2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f003 0302 	and.w	r3, r3, #2
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d008      	beq.n	8003cc2 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003cb0:	4b0e      	ldr	r3, [pc, #56]	; (8003cec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003cb2:	685b      	ldr	r3, [r3, #4]
 8003cb4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	689b      	ldr	r3, [r3, #8]
 8003cbc:	490b      	ldr	r1, [pc, #44]	; (8003cec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003cbe:	4313      	orrs	r3, r2
 8003cc0:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f003 0310 	and.w	r3, r3, #16
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d008      	beq.n	8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003cce:	4b07      	ldr	r3, [pc, #28]	; (8003cec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003cd0:	685b      	ldr	r3, [r3, #4]
 8003cd2:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	68db      	ldr	r3, [r3, #12]
 8003cda:	4904      	ldr	r1, [pc, #16]	; (8003cec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003cdc:	4313      	orrs	r3, r2
 8003cde:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003ce0:	2300      	movs	r3, #0
}
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	3718      	adds	r7, #24
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	bd80      	pop	{r7, pc}
 8003cea:	bf00      	nop
 8003cec:	40021000 	.word	0x40021000
 8003cf0:	40007000 	.word	0x40007000
 8003cf4:	42420440 	.word	0x42420440

08003cf8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003cf8:	b590      	push	{r4, r7, lr}
 8003cfa:	b08d      	sub	sp, #52	; 0x34
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003d00:	4b5a      	ldr	r3, [pc, #360]	; (8003e6c <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8003d02:	f107 040c 	add.w	r4, r7, #12
 8003d06:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003d08:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003d0c:	f240 2301 	movw	r3, #513	; 0x201
 8003d10:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8003d12:	2300      	movs	r3, #0
 8003d14:	627b      	str	r3, [r7, #36]	; 0x24
 8003d16:	2300      	movs	r3, #0
 8003d18:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8003d1e:	2300      	movs	r3, #0
 8003d20:	61fb      	str	r3, [r7, #28]
 8003d22:	2300      	movs	r3, #0
 8003d24:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	2b10      	cmp	r3, #16
 8003d2a:	d00a      	beq.n	8003d42 <HAL_RCCEx_GetPeriphCLKFreq+0x4a>
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2b10      	cmp	r3, #16
 8003d30:	f200 8091 	bhi.w	8003e56 <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2b01      	cmp	r3, #1
 8003d38:	d04c      	beq.n	8003dd4 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	2b02      	cmp	r3, #2
 8003d3e:	d07c      	beq.n	8003e3a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8003d40:	e089      	b.n	8003e56 <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
      temp_reg = RCC->CFGR;
 8003d42:	4b4b      	ldr	r3, [pc, #300]	; (8003e70 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8003d44:	685b      	ldr	r3, [r3, #4]
 8003d46:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8003d48:	4b49      	ldr	r3, [pc, #292]	; (8003e70 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	f000 8082 	beq.w	8003e5a <HAL_RCCEx_GetPeriphCLKFreq+0x162>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003d56:	69fb      	ldr	r3, [r7, #28]
 8003d58:	0c9b      	lsrs	r3, r3, #18
 8003d5a:	f003 030f 	and.w	r3, r3, #15
 8003d5e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8003d62:	4413      	add	r3, r2
 8003d64:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003d68:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003d6a:	69fb      	ldr	r3, [r7, #28]
 8003d6c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d018      	beq.n	8003da6 <HAL_RCCEx_GetPeriphCLKFreq+0xae>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003d74:	4b3e      	ldr	r3, [pc, #248]	; (8003e70 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8003d76:	685b      	ldr	r3, [r3, #4]
 8003d78:	0c5b      	lsrs	r3, r3, #17
 8003d7a:	f003 0301 	and.w	r3, r3, #1
 8003d7e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8003d82:	4413      	add	r3, r2
 8003d84:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003d88:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003d8a:	69fb      	ldr	r3, [r7, #28]
 8003d8c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d00d      	beq.n	8003db0 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8003d94:	4a37      	ldr	r2, [pc, #220]	; (8003e74 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>)
 8003d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d98:	fbb2 f2f3 	udiv	r2, r2, r3
 8003d9c:	6a3b      	ldr	r3, [r7, #32]
 8003d9e:	fb02 f303 	mul.w	r3, r2, r3
 8003da2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003da4:	e004      	b.n	8003db0 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003da6:	6a3b      	ldr	r3, [r7, #32]
 8003da8:	4a33      	ldr	r2, [pc, #204]	; (8003e78 <HAL_RCCEx_GetPeriphCLKFreq+0x180>)
 8003daa:	fb02 f303 	mul.w	r3, r2, r3
 8003dae:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8003db0:	4b2f      	ldr	r3, [pc, #188]	; (8003e70 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8003db2:	685b      	ldr	r3, [r3, #4]
 8003db4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003db8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003dbc:	d102      	bne.n	8003dc4 <HAL_RCCEx_GetPeriphCLKFreq+0xcc>
          frequency = pllclk;
 8003dbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003dc0:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003dc2:	e04a      	b.n	8003e5a <HAL_RCCEx_GetPeriphCLKFreq+0x162>
          frequency = (pllclk * 2) / 3;
 8003dc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003dc6:	005b      	lsls	r3, r3, #1
 8003dc8:	4a2c      	ldr	r2, [pc, #176]	; (8003e7c <HAL_RCCEx_GetPeriphCLKFreq+0x184>)
 8003dca:	fba2 2303 	umull	r2, r3, r2, r3
 8003dce:	085b      	lsrs	r3, r3, #1
 8003dd0:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003dd2:	e042      	b.n	8003e5a <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      temp_reg = RCC->BDCR;
 8003dd4:	4b26      	ldr	r3, [pc, #152]	; (8003e70 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8003dd6:	6a1b      	ldr	r3, [r3, #32]
 8003dd8:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8003dda:	69fb      	ldr	r3, [r7, #28]
 8003ddc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003de0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003de4:	d108      	bne.n	8003df8 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8003de6:	69fb      	ldr	r3, [r7, #28]
 8003de8:	f003 0302 	and.w	r3, r3, #2
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d003      	beq.n	8003df8 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSE_VALUE;
 8003df0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003df4:	62bb      	str	r3, [r7, #40]	; 0x28
 8003df6:	e01f      	b.n	8003e38 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8003df8:	69fb      	ldr	r3, [r7, #28]
 8003dfa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003dfe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e02:	d109      	bne.n	8003e18 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 8003e04:	4b1a      	ldr	r3, [pc, #104]	; (8003e70 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8003e06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e08:	f003 0302 	and.w	r3, r3, #2
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d003      	beq.n	8003e18 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
        frequency = LSI_VALUE;
 8003e10:	f649 4340 	movw	r3, #40000	; 0x9c40
 8003e14:	62bb      	str	r3, [r7, #40]	; 0x28
 8003e16:	e00f      	b.n	8003e38 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8003e18:	69fb      	ldr	r3, [r7, #28]
 8003e1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e1e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003e22:	d11c      	bne.n	8003e5e <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 8003e24:	4b12      	ldr	r3, [pc, #72]	; (8003e70 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d016      	beq.n	8003e5e <HAL_RCCEx_GetPeriphCLKFreq+0x166>
        frequency = HSE_VALUE / 128U;
 8003e30:	f24f 4324 	movw	r3, #62500	; 0xf424
 8003e34:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003e36:	e012      	b.n	8003e5e <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 8003e38:	e011      	b.n	8003e5e <HAL_RCCEx_GetPeriphCLKFreq+0x166>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8003e3a:	f7ff fe75 	bl	8003b28 <HAL_RCC_GetPCLK2Freq>
 8003e3e:	4602      	mov	r2, r0
 8003e40:	4b0b      	ldr	r3, [pc, #44]	; (8003e70 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8003e42:	685b      	ldr	r3, [r3, #4]
 8003e44:	0b9b      	lsrs	r3, r3, #14
 8003e46:	f003 0303 	and.w	r3, r3, #3
 8003e4a:	3301      	adds	r3, #1
 8003e4c:	005b      	lsls	r3, r3, #1
 8003e4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e52:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003e54:	e004      	b.n	8003e60 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 8003e56:	bf00      	nop
 8003e58:	e002      	b.n	8003e60 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 8003e5a:	bf00      	nop
 8003e5c:	e000      	b.n	8003e60 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 8003e5e:	bf00      	nop
    }
  }
  return (frequency);
 8003e60:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8003e62:	4618      	mov	r0, r3
 8003e64:	3734      	adds	r7, #52	; 0x34
 8003e66:	46bd      	mov	sp, r7
 8003e68:	bd90      	pop	{r4, r7, pc}
 8003e6a:	bf00      	nop
 8003e6c:	08007604 	.word	0x08007604
 8003e70:	40021000 	.word	0x40021000
 8003e74:	007a1200 	.word	0x007a1200
 8003e78:	003d0900 	.word	0x003d0900
 8003e7c:	aaaaaaab 	.word	0xaaaaaaab

08003e80 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003e80:	b580      	push	{r7, lr}
 8003e82:	b082      	sub	sp, #8
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d101      	bne.n	8003e92 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003e8e:	2301      	movs	r3, #1
 8003e90:	e041      	b.n	8003f16 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e98:	b2db      	uxtb	r3, r3
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d106      	bne.n	8003eac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003ea6:	6878      	ldr	r0, [r7, #4]
 8003ea8:	f7fd fbd4 	bl	8001654 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2202      	movs	r2, #2
 8003eb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681a      	ldr	r2, [r3, #0]
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	3304      	adds	r3, #4
 8003ebc:	4619      	mov	r1, r3
 8003ebe:	4610      	mov	r0, r2
 8003ec0:	f000 fa70 	bl	80043a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2201      	movs	r2, #1
 8003ec8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2201      	movs	r2, #1
 8003ed0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2201      	movs	r2, #1
 8003ed8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2201      	movs	r2, #1
 8003ee0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2201      	movs	r2, #1
 8003ee8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2201      	movs	r2, #1
 8003ef0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2201      	movs	r2, #1
 8003ef8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2201      	movs	r2, #1
 8003f00:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2201      	movs	r2, #1
 8003f08:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	2201      	movs	r2, #1
 8003f10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003f14:	2300      	movs	r3, #0
}
 8003f16:	4618      	mov	r0, r3
 8003f18:	3708      	adds	r7, #8
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	bd80      	pop	{r7, pc}
	...

08003f20 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003f20:	b480      	push	{r7}
 8003f22:	b085      	sub	sp, #20
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f2e:	b2db      	uxtb	r3, r3
 8003f30:	2b01      	cmp	r3, #1
 8003f32:	d001      	beq.n	8003f38 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003f34:	2301      	movs	r3, #1
 8003f36:	e03a      	b.n	8003fae <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2202      	movs	r2, #2
 8003f3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	68da      	ldr	r2, [r3, #12]
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f042 0201 	orr.w	r2, r2, #1
 8003f4e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	4a18      	ldr	r2, [pc, #96]	; (8003fb8 <HAL_TIM_Base_Start_IT+0x98>)
 8003f56:	4293      	cmp	r3, r2
 8003f58:	d00e      	beq.n	8003f78 <HAL_TIM_Base_Start_IT+0x58>
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f62:	d009      	beq.n	8003f78 <HAL_TIM_Base_Start_IT+0x58>
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	4a14      	ldr	r2, [pc, #80]	; (8003fbc <HAL_TIM_Base_Start_IT+0x9c>)
 8003f6a:	4293      	cmp	r3, r2
 8003f6c:	d004      	beq.n	8003f78 <HAL_TIM_Base_Start_IT+0x58>
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	4a13      	ldr	r2, [pc, #76]	; (8003fc0 <HAL_TIM_Base_Start_IT+0xa0>)
 8003f74:	4293      	cmp	r3, r2
 8003f76:	d111      	bne.n	8003f9c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	689b      	ldr	r3, [r3, #8]
 8003f7e:	f003 0307 	and.w	r3, r3, #7
 8003f82:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	2b06      	cmp	r3, #6
 8003f88:	d010      	beq.n	8003fac <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	681a      	ldr	r2, [r3, #0]
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f042 0201 	orr.w	r2, r2, #1
 8003f98:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f9a:	e007      	b.n	8003fac <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	681a      	ldr	r2, [r3, #0]
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f042 0201 	orr.w	r2, r2, #1
 8003faa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003fac:	2300      	movs	r3, #0
}
 8003fae:	4618      	mov	r0, r3
 8003fb0:	3714      	adds	r7, #20
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	bc80      	pop	{r7}
 8003fb6:	4770      	bx	lr
 8003fb8:	40012c00 	.word	0x40012c00
 8003fbc:	40000400 	.word	0x40000400
 8003fc0:	40000800 	.word	0x40000800

08003fc4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	b082      	sub	sp, #8
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	691b      	ldr	r3, [r3, #16]
 8003fd2:	f003 0302 	and.w	r3, r3, #2
 8003fd6:	2b02      	cmp	r3, #2
 8003fd8:	d122      	bne.n	8004020 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	68db      	ldr	r3, [r3, #12]
 8003fe0:	f003 0302 	and.w	r3, r3, #2
 8003fe4:	2b02      	cmp	r3, #2
 8003fe6:	d11b      	bne.n	8004020 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f06f 0202 	mvn.w	r2, #2
 8003ff0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	2201      	movs	r2, #1
 8003ff6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	699b      	ldr	r3, [r3, #24]
 8003ffe:	f003 0303 	and.w	r3, r3, #3
 8004002:	2b00      	cmp	r3, #0
 8004004:	d003      	beq.n	800400e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004006:	6878      	ldr	r0, [r7, #4]
 8004008:	f000 f9b1 	bl	800436e <HAL_TIM_IC_CaptureCallback>
 800400c:	e005      	b.n	800401a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800400e:	6878      	ldr	r0, [r7, #4]
 8004010:	f000 f9a4 	bl	800435c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004014:	6878      	ldr	r0, [r7, #4]
 8004016:	f000 f9b3 	bl	8004380 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	2200      	movs	r2, #0
 800401e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	691b      	ldr	r3, [r3, #16]
 8004026:	f003 0304 	and.w	r3, r3, #4
 800402a:	2b04      	cmp	r3, #4
 800402c:	d122      	bne.n	8004074 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	68db      	ldr	r3, [r3, #12]
 8004034:	f003 0304 	and.w	r3, r3, #4
 8004038:	2b04      	cmp	r3, #4
 800403a:	d11b      	bne.n	8004074 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f06f 0204 	mvn.w	r2, #4
 8004044:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	2202      	movs	r2, #2
 800404a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	699b      	ldr	r3, [r3, #24]
 8004052:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004056:	2b00      	cmp	r3, #0
 8004058:	d003      	beq.n	8004062 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800405a:	6878      	ldr	r0, [r7, #4]
 800405c:	f000 f987 	bl	800436e <HAL_TIM_IC_CaptureCallback>
 8004060:	e005      	b.n	800406e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004062:	6878      	ldr	r0, [r7, #4]
 8004064:	f000 f97a 	bl	800435c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004068:	6878      	ldr	r0, [r7, #4]
 800406a:	f000 f989 	bl	8004380 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	2200      	movs	r2, #0
 8004072:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	691b      	ldr	r3, [r3, #16]
 800407a:	f003 0308 	and.w	r3, r3, #8
 800407e:	2b08      	cmp	r3, #8
 8004080:	d122      	bne.n	80040c8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	68db      	ldr	r3, [r3, #12]
 8004088:	f003 0308 	and.w	r3, r3, #8
 800408c:	2b08      	cmp	r3, #8
 800408e:	d11b      	bne.n	80040c8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f06f 0208 	mvn.w	r2, #8
 8004098:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	2204      	movs	r2, #4
 800409e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	69db      	ldr	r3, [r3, #28]
 80040a6:	f003 0303 	and.w	r3, r3, #3
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d003      	beq.n	80040b6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80040ae:	6878      	ldr	r0, [r7, #4]
 80040b0:	f000 f95d 	bl	800436e <HAL_TIM_IC_CaptureCallback>
 80040b4:	e005      	b.n	80040c2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80040b6:	6878      	ldr	r0, [r7, #4]
 80040b8:	f000 f950 	bl	800435c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040bc:	6878      	ldr	r0, [r7, #4]
 80040be:	f000 f95f 	bl	8004380 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	2200      	movs	r2, #0
 80040c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	691b      	ldr	r3, [r3, #16]
 80040ce:	f003 0310 	and.w	r3, r3, #16
 80040d2:	2b10      	cmp	r3, #16
 80040d4:	d122      	bne.n	800411c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	68db      	ldr	r3, [r3, #12]
 80040dc:	f003 0310 	and.w	r3, r3, #16
 80040e0:	2b10      	cmp	r3, #16
 80040e2:	d11b      	bne.n	800411c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f06f 0210 	mvn.w	r2, #16
 80040ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	2208      	movs	r2, #8
 80040f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	69db      	ldr	r3, [r3, #28]
 80040fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d003      	beq.n	800410a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004102:	6878      	ldr	r0, [r7, #4]
 8004104:	f000 f933 	bl	800436e <HAL_TIM_IC_CaptureCallback>
 8004108:	e005      	b.n	8004116 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800410a:	6878      	ldr	r0, [r7, #4]
 800410c:	f000 f926 	bl	800435c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004110:	6878      	ldr	r0, [r7, #4]
 8004112:	f000 f935 	bl	8004380 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	2200      	movs	r2, #0
 800411a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	691b      	ldr	r3, [r3, #16]
 8004122:	f003 0301 	and.w	r3, r3, #1
 8004126:	2b01      	cmp	r3, #1
 8004128:	d10e      	bne.n	8004148 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	68db      	ldr	r3, [r3, #12]
 8004130:	f003 0301 	and.w	r3, r3, #1
 8004134:	2b01      	cmp	r3, #1
 8004136:	d107      	bne.n	8004148 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f06f 0201 	mvn.w	r2, #1
 8004140:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004142:	6878      	ldr	r0, [r7, #4]
 8004144:	f7fd f996 	bl	8001474 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	691b      	ldr	r3, [r3, #16]
 800414e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004152:	2b80      	cmp	r3, #128	; 0x80
 8004154:	d10e      	bne.n	8004174 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	68db      	ldr	r3, [r3, #12]
 800415c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004160:	2b80      	cmp	r3, #128	; 0x80
 8004162:	d107      	bne.n	8004174 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800416c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800416e:	6878      	ldr	r0, [r7, #4]
 8004170:	f000 fa77 	bl	8004662 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	691b      	ldr	r3, [r3, #16]
 800417a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800417e:	2b40      	cmp	r3, #64	; 0x40
 8004180:	d10e      	bne.n	80041a0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	68db      	ldr	r3, [r3, #12]
 8004188:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800418c:	2b40      	cmp	r3, #64	; 0x40
 800418e:	d107      	bne.n	80041a0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004198:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800419a:	6878      	ldr	r0, [r7, #4]
 800419c:	f000 f8f9 	bl	8004392 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	691b      	ldr	r3, [r3, #16]
 80041a6:	f003 0320 	and.w	r3, r3, #32
 80041aa:	2b20      	cmp	r3, #32
 80041ac:	d10e      	bne.n	80041cc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	68db      	ldr	r3, [r3, #12]
 80041b4:	f003 0320 	and.w	r3, r3, #32
 80041b8:	2b20      	cmp	r3, #32
 80041ba:	d107      	bne.n	80041cc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f06f 0220 	mvn.w	r2, #32
 80041c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80041c6:	6878      	ldr	r0, [r7, #4]
 80041c8:	f000 fa42 	bl	8004650 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80041cc:	bf00      	nop
 80041ce:	3708      	adds	r7, #8
 80041d0:	46bd      	mov	sp, r7
 80041d2:	bd80      	pop	{r7, pc}

080041d4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80041d4:	b580      	push	{r7, lr}
 80041d6:	b084      	sub	sp, #16
 80041d8:	af00      	add	r7, sp, #0
 80041da:	6078      	str	r0, [r7, #4]
 80041dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80041e4:	2b01      	cmp	r3, #1
 80041e6:	d101      	bne.n	80041ec <HAL_TIM_ConfigClockSource+0x18>
 80041e8:	2302      	movs	r3, #2
 80041ea:	e0b3      	b.n	8004354 <HAL_TIM_ConfigClockSource+0x180>
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2201      	movs	r2, #1
 80041f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2202      	movs	r2, #2
 80041f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	689b      	ldr	r3, [r3, #8]
 8004202:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800420a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004212:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	68fa      	ldr	r2, [r7, #12]
 800421a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800421c:	683b      	ldr	r3, [r7, #0]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004224:	d03e      	beq.n	80042a4 <HAL_TIM_ConfigClockSource+0xd0>
 8004226:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800422a:	f200 8087 	bhi.w	800433c <HAL_TIM_ConfigClockSource+0x168>
 800422e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004232:	f000 8085 	beq.w	8004340 <HAL_TIM_ConfigClockSource+0x16c>
 8004236:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800423a:	d87f      	bhi.n	800433c <HAL_TIM_ConfigClockSource+0x168>
 800423c:	2b70      	cmp	r3, #112	; 0x70
 800423e:	d01a      	beq.n	8004276 <HAL_TIM_ConfigClockSource+0xa2>
 8004240:	2b70      	cmp	r3, #112	; 0x70
 8004242:	d87b      	bhi.n	800433c <HAL_TIM_ConfigClockSource+0x168>
 8004244:	2b60      	cmp	r3, #96	; 0x60
 8004246:	d050      	beq.n	80042ea <HAL_TIM_ConfigClockSource+0x116>
 8004248:	2b60      	cmp	r3, #96	; 0x60
 800424a:	d877      	bhi.n	800433c <HAL_TIM_ConfigClockSource+0x168>
 800424c:	2b50      	cmp	r3, #80	; 0x50
 800424e:	d03c      	beq.n	80042ca <HAL_TIM_ConfigClockSource+0xf6>
 8004250:	2b50      	cmp	r3, #80	; 0x50
 8004252:	d873      	bhi.n	800433c <HAL_TIM_ConfigClockSource+0x168>
 8004254:	2b40      	cmp	r3, #64	; 0x40
 8004256:	d058      	beq.n	800430a <HAL_TIM_ConfigClockSource+0x136>
 8004258:	2b40      	cmp	r3, #64	; 0x40
 800425a:	d86f      	bhi.n	800433c <HAL_TIM_ConfigClockSource+0x168>
 800425c:	2b30      	cmp	r3, #48	; 0x30
 800425e:	d064      	beq.n	800432a <HAL_TIM_ConfigClockSource+0x156>
 8004260:	2b30      	cmp	r3, #48	; 0x30
 8004262:	d86b      	bhi.n	800433c <HAL_TIM_ConfigClockSource+0x168>
 8004264:	2b20      	cmp	r3, #32
 8004266:	d060      	beq.n	800432a <HAL_TIM_ConfigClockSource+0x156>
 8004268:	2b20      	cmp	r3, #32
 800426a:	d867      	bhi.n	800433c <HAL_TIM_ConfigClockSource+0x168>
 800426c:	2b00      	cmp	r3, #0
 800426e:	d05c      	beq.n	800432a <HAL_TIM_ConfigClockSource+0x156>
 8004270:	2b10      	cmp	r3, #16
 8004272:	d05a      	beq.n	800432a <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8004274:	e062      	b.n	800433c <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6818      	ldr	r0, [r3, #0]
 800427a:	683b      	ldr	r3, [r7, #0]
 800427c:	6899      	ldr	r1, [r3, #8]
 800427e:	683b      	ldr	r3, [r7, #0]
 8004280:	685a      	ldr	r2, [r3, #4]
 8004282:	683b      	ldr	r3, [r7, #0]
 8004284:	68db      	ldr	r3, [r3, #12]
 8004286:	f000 f966 	bl	8004556 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	689b      	ldr	r3, [r3, #8]
 8004290:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004298:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	68fa      	ldr	r2, [r7, #12]
 80042a0:	609a      	str	r2, [r3, #8]
      break;
 80042a2:	e04e      	b.n	8004342 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	6818      	ldr	r0, [r3, #0]
 80042a8:	683b      	ldr	r3, [r7, #0]
 80042aa:	6899      	ldr	r1, [r3, #8]
 80042ac:	683b      	ldr	r3, [r7, #0]
 80042ae:	685a      	ldr	r2, [r3, #4]
 80042b0:	683b      	ldr	r3, [r7, #0]
 80042b2:	68db      	ldr	r3, [r3, #12]
 80042b4:	f000 f94f 	bl	8004556 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	689a      	ldr	r2, [r3, #8]
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80042c6:	609a      	str	r2, [r3, #8]
      break;
 80042c8:	e03b      	b.n	8004342 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	6818      	ldr	r0, [r3, #0]
 80042ce:	683b      	ldr	r3, [r7, #0]
 80042d0:	6859      	ldr	r1, [r3, #4]
 80042d2:	683b      	ldr	r3, [r7, #0]
 80042d4:	68db      	ldr	r3, [r3, #12]
 80042d6:	461a      	mov	r2, r3
 80042d8:	f000 f8c6 	bl	8004468 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	2150      	movs	r1, #80	; 0x50
 80042e2:	4618      	mov	r0, r3
 80042e4:	f000 f91d 	bl	8004522 <TIM_ITRx_SetConfig>
      break;
 80042e8:	e02b      	b.n	8004342 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6818      	ldr	r0, [r3, #0]
 80042ee:	683b      	ldr	r3, [r7, #0]
 80042f0:	6859      	ldr	r1, [r3, #4]
 80042f2:	683b      	ldr	r3, [r7, #0]
 80042f4:	68db      	ldr	r3, [r3, #12]
 80042f6:	461a      	mov	r2, r3
 80042f8:	f000 f8e4 	bl	80044c4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	2160      	movs	r1, #96	; 0x60
 8004302:	4618      	mov	r0, r3
 8004304:	f000 f90d 	bl	8004522 <TIM_ITRx_SetConfig>
      break;
 8004308:	e01b      	b.n	8004342 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	6818      	ldr	r0, [r3, #0]
 800430e:	683b      	ldr	r3, [r7, #0]
 8004310:	6859      	ldr	r1, [r3, #4]
 8004312:	683b      	ldr	r3, [r7, #0]
 8004314:	68db      	ldr	r3, [r3, #12]
 8004316:	461a      	mov	r2, r3
 8004318:	f000 f8a6 	bl	8004468 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	2140      	movs	r1, #64	; 0x40
 8004322:	4618      	mov	r0, r3
 8004324:	f000 f8fd 	bl	8004522 <TIM_ITRx_SetConfig>
      break;
 8004328:	e00b      	b.n	8004342 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681a      	ldr	r2, [r3, #0]
 800432e:	683b      	ldr	r3, [r7, #0]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	4619      	mov	r1, r3
 8004334:	4610      	mov	r0, r2
 8004336:	f000 f8f4 	bl	8004522 <TIM_ITRx_SetConfig>
        break;
 800433a:	e002      	b.n	8004342 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800433c:	bf00      	nop
 800433e:	e000      	b.n	8004342 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004340:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	2201      	movs	r2, #1
 8004346:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	2200      	movs	r2, #0
 800434e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004352:	2300      	movs	r3, #0
}
 8004354:	4618      	mov	r0, r3
 8004356:	3710      	adds	r7, #16
 8004358:	46bd      	mov	sp, r7
 800435a:	bd80      	pop	{r7, pc}

0800435c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800435c:	b480      	push	{r7}
 800435e:	b083      	sub	sp, #12
 8004360:	af00      	add	r7, sp, #0
 8004362:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004364:	bf00      	nop
 8004366:	370c      	adds	r7, #12
 8004368:	46bd      	mov	sp, r7
 800436a:	bc80      	pop	{r7}
 800436c:	4770      	bx	lr

0800436e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800436e:	b480      	push	{r7}
 8004370:	b083      	sub	sp, #12
 8004372:	af00      	add	r7, sp, #0
 8004374:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004376:	bf00      	nop
 8004378:	370c      	adds	r7, #12
 800437a:	46bd      	mov	sp, r7
 800437c:	bc80      	pop	{r7}
 800437e:	4770      	bx	lr

08004380 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004380:	b480      	push	{r7}
 8004382:	b083      	sub	sp, #12
 8004384:	af00      	add	r7, sp, #0
 8004386:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004388:	bf00      	nop
 800438a:	370c      	adds	r7, #12
 800438c:	46bd      	mov	sp, r7
 800438e:	bc80      	pop	{r7}
 8004390:	4770      	bx	lr

08004392 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004392:	b480      	push	{r7}
 8004394:	b083      	sub	sp, #12
 8004396:	af00      	add	r7, sp, #0
 8004398:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800439a:	bf00      	nop
 800439c:	370c      	adds	r7, #12
 800439e:	46bd      	mov	sp, r7
 80043a0:	bc80      	pop	{r7}
 80043a2:	4770      	bx	lr

080043a4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80043a4:	b480      	push	{r7}
 80043a6:	b085      	sub	sp, #20
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]
 80043ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	4a29      	ldr	r2, [pc, #164]	; (800445c <TIM_Base_SetConfig+0xb8>)
 80043b8:	4293      	cmp	r3, r2
 80043ba:	d00b      	beq.n	80043d4 <TIM_Base_SetConfig+0x30>
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043c2:	d007      	beq.n	80043d4 <TIM_Base_SetConfig+0x30>
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	4a26      	ldr	r2, [pc, #152]	; (8004460 <TIM_Base_SetConfig+0xbc>)
 80043c8:	4293      	cmp	r3, r2
 80043ca:	d003      	beq.n	80043d4 <TIM_Base_SetConfig+0x30>
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	4a25      	ldr	r2, [pc, #148]	; (8004464 <TIM_Base_SetConfig+0xc0>)
 80043d0:	4293      	cmp	r3, r2
 80043d2:	d108      	bne.n	80043e6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043da:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80043dc:	683b      	ldr	r3, [r7, #0]
 80043de:	685b      	ldr	r3, [r3, #4]
 80043e0:	68fa      	ldr	r2, [r7, #12]
 80043e2:	4313      	orrs	r3, r2
 80043e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	4a1c      	ldr	r2, [pc, #112]	; (800445c <TIM_Base_SetConfig+0xb8>)
 80043ea:	4293      	cmp	r3, r2
 80043ec:	d00b      	beq.n	8004406 <TIM_Base_SetConfig+0x62>
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043f4:	d007      	beq.n	8004406 <TIM_Base_SetConfig+0x62>
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	4a19      	ldr	r2, [pc, #100]	; (8004460 <TIM_Base_SetConfig+0xbc>)
 80043fa:	4293      	cmp	r3, r2
 80043fc:	d003      	beq.n	8004406 <TIM_Base_SetConfig+0x62>
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	4a18      	ldr	r2, [pc, #96]	; (8004464 <TIM_Base_SetConfig+0xc0>)
 8004402:	4293      	cmp	r3, r2
 8004404:	d108      	bne.n	8004418 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800440c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800440e:	683b      	ldr	r3, [r7, #0]
 8004410:	68db      	ldr	r3, [r3, #12]
 8004412:	68fa      	ldr	r2, [r7, #12]
 8004414:	4313      	orrs	r3, r2
 8004416:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800441e:	683b      	ldr	r3, [r7, #0]
 8004420:	695b      	ldr	r3, [r3, #20]
 8004422:	4313      	orrs	r3, r2
 8004424:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	68fa      	ldr	r2, [r7, #12]
 800442a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800442c:	683b      	ldr	r3, [r7, #0]
 800442e:	689a      	ldr	r2, [r3, #8]
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004434:	683b      	ldr	r3, [r7, #0]
 8004436:	681a      	ldr	r2, [r3, #0]
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	4a07      	ldr	r2, [pc, #28]	; (800445c <TIM_Base_SetConfig+0xb8>)
 8004440:	4293      	cmp	r3, r2
 8004442:	d103      	bne.n	800444c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004444:	683b      	ldr	r3, [r7, #0]
 8004446:	691a      	ldr	r2, [r3, #16]
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2201      	movs	r2, #1
 8004450:	615a      	str	r2, [r3, #20]
}
 8004452:	bf00      	nop
 8004454:	3714      	adds	r7, #20
 8004456:	46bd      	mov	sp, r7
 8004458:	bc80      	pop	{r7}
 800445a:	4770      	bx	lr
 800445c:	40012c00 	.word	0x40012c00
 8004460:	40000400 	.word	0x40000400
 8004464:	40000800 	.word	0x40000800

08004468 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004468:	b480      	push	{r7}
 800446a:	b087      	sub	sp, #28
 800446c:	af00      	add	r7, sp, #0
 800446e:	60f8      	str	r0, [r7, #12]
 8004470:	60b9      	str	r1, [r7, #8]
 8004472:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	6a1b      	ldr	r3, [r3, #32]
 8004478:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	6a1b      	ldr	r3, [r3, #32]
 800447e:	f023 0201 	bic.w	r2, r3, #1
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	699b      	ldr	r3, [r3, #24]
 800448a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800448c:	693b      	ldr	r3, [r7, #16]
 800448e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004492:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	011b      	lsls	r3, r3, #4
 8004498:	693a      	ldr	r2, [r7, #16]
 800449a:	4313      	orrs	r3, r2
 800449c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800449e:	697b      	ldr	r3, [r7, #20]
 80044a0:	f023 030a 	bic.w	r3, r3, #10
 80044a4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80044a6:	697a      	ldr	r2, [r7, #20]
 80044a8:	68bb      	ldr	r3, [r7, #8]
 80044aa:	4313      	orrs	r3, r2
 80044ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	693a      	ldr	r2, [r7, #16]
 80044b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	697a      	ldr	r2, [r7, #20]
 80044b8:	621a      	str	r2, [r3, #32]
}
 80044ba:	bf00      	nop
 80044bc:	371c      	adds	r7, #28
 80044be:	46bd      	mov	sp, r7
 80044c0:	bc80      	pop	{r7}
 80044c2:	4770      	bx	lr

080044c4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80044c4:	b480      	push	{r7}
 80044c6:	b087      	sub	sp, #28
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	60f8      	str	r0, [r7, #12]
 80044cc:	60b9      	str	r1, [r7, #8]
 80044ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	6a1b      	ldr	r3, [r3, #32]
 80044d4:	f023 0210 	bic.w	r2, r3, #16
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	699b      	ldr	r3, [r3, #24]
 80044e0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	6a1b      	ldr	r3, [r3, #32]
 80044e6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80044e8:	697b      	ldr	r3, [r7, #20]
 80044ea:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80044ee:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	031b      	lsls	r3, r3, #12
 80044f4:	697a      	ldr	r2, [r7, #20]
 80044f6:	4313      	orrs	r3, r2
 80044f8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80044fa:	693b      	ldr	r3, [r7, #16]
 80044fc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004500:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004502:	68bb      	ldr	r3, [r7, #8]
 8004504:	011b      	lsls	r3, r3, #4
 8004506:	693a      	ldr	r2, [r7, #16]
 8004508:	4313      	orrs	r3, r2
 800450a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	697a      	ldr	r2, [r7, #20]
 8004510:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	693a      	ldr	r2, [r7, #16]
 8004516:	621a      	str	r2, [r3, #32]
}
 8004518:	bf00      	nop
 800451a:	371c      	adds	r7, #28
 800451c:	46bd      	mov	sp, r7
 800451e:	bc80      	pop	{r7}
 8004520:	4770      	bx	lr

08004522 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004522:	b480      	push	{r7}
 8004524:	b085      	sub	sp, #20
 8004526:	af00      	add	r7, sp, #0
 8004528:	6078      	str	r0, [r7, #4]
 800452a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	689b      	ldr	r3, [r3, #8]
 8004530:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004538:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800453a:	683a      	ldr	r2, [r7, #0]
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	4313      	orrs	r3, r2
 8004540:	f043 0307 	orr.w	r3, r3, #7
 8004544:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	68fa      	ldr	r2, [r7, #12]
 800454a:	609a      	str	r2, [r3, #8]
}
 800454c:	bf00      	nop
 800454e:	3714      	adds	r7, #20
 8004550:	46bd      	mov	sp, r7
 8004552:	bc80      	pop	{r7}
 8004554:	4770      	bx	lr

08004556 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004556:	b480      	push	{r7}
 8004558:	b087      	sub	sp, #28
 800455a:	af00      	add	r7, sp, #0
 800455c:	60f8      	str	r0, [r7, #12]
 800455e:	60b9      	str	r1, [r7, #8]
 8004560:	607a      	str	r2, [r7, #4]
 8004562:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	689b      	ldr	r3, [r3, #8]
 8004568:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800456a:	697b      	ldr	r3, [r7, #20]
 800456c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004570:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004572:	683b      	ldr	r3, [r7, #0]
 8004574:	021a      	lsls	r2, r3, #8
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	431a      	orrs	r2, r3
 800457a:	68bb      	ldr	r3, [r7, #8]
 800457c:	4313      	orrs	r3, r2
 800457e:	697a      	ldr	r2, [r7, #20]
 8004580:	4313      	orrs	r3, r2
 8004582:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	697a      	ldr	r2, [r7, #20]
 8004588:	609a      	str	r2, [r3, #8]
}
 800458a:	bf00      	nop
 800458c:	371c      	adds	r7, #28
 800458e:	46bd      	mov	sp, r7
 8004590:	bc80      	pop	{r7}
 8004592:	4770      	bx	lr

08004594 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004594:	b480      	push	{r7}
 8004596:	b085      	sub	sp, #20
 8004598:	af00      	add	r7, sp, #0
 800459a:	6078      	str	r0, [r7, #4]
 800459c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80045a4:	2b01      	cmp	r3, #1
 80045a6:	d101      	bne.n	80045ac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80045a8:	2302      	movs	r3, #2
 80045aa:	e046      	b.n	800463a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2201      	movs	r2, #1
 80045b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2202      	movs	r2, #2
 80045b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	685b      	ldr	r3, [r3, #4]
 80045c2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	689b      	ldr	r3, [r3, #8]
 80045ca:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045d2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80045d4:	683b      	ldr	r3, [r7, #0]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	68fa      	ldr	r2, [r7, #12]
 80045da:	4313      	orrs	r3, r2
 80045dc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	68fa      	ldr	r2, [r7, #12]
 80045e4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	4a16      	ldr	r2, [pc, #88]	; (8004644 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80045ec:	4293      	cmp	r3, r2
 80045ee:	d00e      	beq.n	800460e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045f8:	d009      	beq.n	800460e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	4a12      	ldr	r2, [pc, #72]	; (8004648 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004600:	4293      	cmp	r3, r2
 8004602:	d004      	beq.n	800460e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	4a10      	ldr	r2, [pc, #64]	; (800464c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800460a:	4293      	cmp	r3, r2
 800460c:	d10c      	bne.n	8004628 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800460e:	68bb      	ldr	r3, [r7, #8]
 8004610:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004614:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004616:	683b      	ldr	r3, [r7, #0]
 8004618:	685b      	ldr	r3, [r3, #4]
 800461a:	68ba      	ldr	r2, [r7, #8]
 800461c:	4313      	orrs	r3, r2
 800461e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	68ba      	ldr	r2, [r7, #8]
 8004626:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2201      	movs	r2, #1
 800462c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2200      	movs	r2, #0
 8004634:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004638:	2300      	movs	r3, #0
}
 800463a:	4618      	mov	r0, r3
 800463c:	3714      	adds	r7, #20
 800463e:	46bd      	mov	sp, r7
 8004640:	bc80      	pop	{r7}
 8004642:	4770      	bx	lr
 8004644:	40012c00 	.word	0x40012c00
 8004648:	40000400 	.word	0x40000400
 800464c:	40000800 	.word	0x40000800

08004650 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004650:	b480      	push	{r7}
 8004652:	b083      	sub	sp, #12
 8004654:	af00      	add	r7, sp, #0
 8004656:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004658:	bf00      	nop
 800465a:	370c      	adds	r7, #12
 800465c:	46bd      	mov	sp, r7
 800465e:	bc80      	pop	{r7}
 8004660:	4770      	bx	lr

08004662 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004662:	b480      	push	{r7}
 8004664:	b083      	sub	sp, #12
 8004666:	af00      	add	r7, sp, #0
 8004668:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800466a:	bf00      	nop
 800466c:	370c      	adds	r7, #12
 800466e:	46bd      	mov	sp, r7
 8004670:	bc80      	pop	{r7}
 8004672:	4770      	bx	lr

08004674 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004674:	b580      	push	{r7, lr}
 8004676:	b082      	sub	sp, #8
 8004678:	af00      	add	r7, sp, #0
 800467a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2b00      	cmp	r3, #0
 8004680:	d101      	bne.n	8004686 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004682:	2301      	movs	r3, #1
 8004684:	e03f      	b.n	8004706 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800468c:	b2db      	uxtb	r3, r3
 800468e:	2b00      	cmp	r3, #0
 8004690:	d106      	bne.n	80046a0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	2200      	movs	r2, #0
 8004696:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800469a:	6878      	ldr	r0, [r7, #4]
 800469c:	f7fc fffe 	bl	800169c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2224      	movs	r2, #36	; 0x24
 80046a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	68da      	ldr	r2, [r3, #12]
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80046b6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80046b8:	6878      	ldr	r0, [r7, #4]
 80046ba:	f000 f829 	bl	8004710 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	691a      	ldr	r2, [r3, #16]
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80046cc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	695a      	ldr	r2, [r3, #20]
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80046dc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	68da      	ldr	r2, [r3, #12]
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80046ec:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	2200      	movs	r2, #0
 80046f2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2220      	movs	r2, #32
 80046f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	2220      	movs	r2, #32
 8004700:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004704:	2300      	movs	r3, #0
}
 8004706:	4618      	mov	r0, r3
 8004708:	3708      	adds	r7, #8
 800470a:	46bd      	mov	sp, r7
 800470c:	bd80      	pop	{r7, pc}
	...

08004710 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004710:	b580      	push	{r7, lr}
 8004712:	b084      	sub	sp, #16
 8004714:	af00      	add	r7, sp, #0
 8004716:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	691b      	ldr	r3, [r3, #16]
 800471e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	68da      	ldr	r2, [r3, #12]
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	430a      	orrs	r2, r1
 800472c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	689a      	ldr	r2, [r3, #8]
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	691b      	ldr	r3, [r3, #16]
 8004736:	431a      	orrs	r2, r3
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	695b      	ldr	r3, [r3, #20]
 800473c:	4313      	orrs	r3, r2
 800473e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	68db      	ldr	r3, [r3, #12]
 8004746:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800474a:	f023 030c 	bic.w	r3, r3, #12
 800474e:	687a      	ldr	r2, [r7, #4]
 8004750:	6812      	ldr	r2, [r2, #0]
 8004752:	68b9      	ldr	r1, [r7, #8]
 8004754:	430b      	orrs	r3, r1
 8004756:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	695b      	ldr	r3, [r3, #20]
 800475e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	699a      	ldr	r2, [r3, #24]
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	430a      	orrs	r2, r1
 800476c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	4a2c      	ldr	r2, [pc, #176]	; (8004824 <UART_SetConfig+0x114>)
 8004774:	4293      	cmp	r3, r2
 8004776:	d103      	bne.n	8004780 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004778:	f7ff f9d6 	bl	8003b28 <HAL_RCC_GetPCLK2Freq>
 800477c:	60f8      	str	r0, [r7, #12]
 800477e:	e002      	b.n	8004786 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004780:	f7ff f9be 	bl	8003b00 <HAL_RCC_GetPCLK1Freq>
 8004784:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004786:	68fa      	ldr	r2, [r7, #12]
 8004788:	4613      	mov	r3, r2
 800478a:	009b      	lsls	r3, r3, #2
 800478c:	4413      	add	r3, r2
 800478e:	009a      	lsls	r2, r3, #2
 8004790:	441a      	add	r2, r3
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	685b      	ldr	r3, [r3, #4]
 8004796:	009b      	lsls	r3, r3, #2
 8004798:	fbb2 f3f3 	udiv	r3, r2, r3
 800479c:	4a22      	ldr	r2, [pc, #136]	; (8004828 <UART_SetConfig+0x118>)
 800479e:	fba2 2303 	umull	r2, r3, r2, r3
 80047a2:	095b      	lsrs	r3, r3, #5
 80047a4:	0119      	lsls	r1, r3, #4
 80047a6:	68fa      	ldr	r2, [r7, #12]
 80047a8:	4613      	mov	r3, r2
 80047aa:	009b      	lsls	r3, r3, #2
 80047ac:	4413      	add	r3, r2
 80047ae:	009a      	lsls	r2, r3, #2
 80047b0:	441a      	add	r2, r3
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	685b      	ldr	r3, [r3, #4]
 80047b6:	009b      	lsls	r3, r3, #2
 80047b8:	fbb2 f2f3 	udiv	r2, r2, r3
 80047bc:	4b1a      	ldr	r3, [pc, #104]	; (8004828 <UART_SetConfig+0x118>)
 80047be:	fba3 0302 	umull	r0, r3, r3, r2
 80047c2:	095b      	lsrs	r3, r3, #5
 80047c4:	2064      	movs	r0, #100	; 0x64
 80047c6:	fb00 f303 	mul.w	r3, r0, r3
 80047ca:	1ad3      	subs	r3, r2, r3
 80047cc:	011b      	lsls	r3, r3, #4
 80047ce:	3332      	adds	r3, #50	; 0x32
 80047d0:	4a15      	ldr	r2, [pc, #84]	; (8004828 <UART_SetConfig+0x118>)
 80047d2:	fba2 2303 	umull	r2, r3, r2, r3
 80047d6:	095b      	lsrs	r3, r3, #5
 80047d8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80047dc:	4419      	add	r1, r3
 80047de:	68fa      	ldr	r2, [r7, #12]
 80047e0:	4613      	mov	r3, r2
 80047e2:	009b      	lsls	r3, r3, #2
 80047e4:	4413      	add	r3, r2
 80047e6:	009a      	lsls	r2, r3, #2
 80047e8:	441a      	add	r2, r3
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	685b      	ldr	r3, [r3, #4]
 80047ee:	009b      	lsls	r3, r3, #2
 80047f0:	fbb2 f2f3 	udiv	r2, r2, r3
 80047f4:	4b0c      	ldr	r3, [pc, #48]	; (8004828 <UART_SetConfig+0x118>)
 80047f6:	fba3 0302 	umull	r0, r3, r3, r2
 80047fa:	095b      	lsrs	r3, r3, #5
 80047fc:	2064      	movs	r0, #100	; 0x64
 80047fe:	fb00 f303 	mul.w	r3, r0, r3
 8004802:	1ad3      	subs	r3, r2, r3
 8004804:	011b      	lsls	r3, r3, #4
 8004806:	3332      	adds	r3, #50	; 0x32
 8004808:	4a07      	ldr	r2, [pc, #28]	; (8004828 <UART_SetConfig+0x118>)
 800480a:	fba2 2303 	umull	r2, r3, r2, r3
 800480e:	095b      	lsrs	r3, r3, #5
 8004810:	f003 020f 	and.w	r2, r3, #15
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	440a      	add	r2, r1
 800481a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800481c:	bf00      	nop
 800481e:	3710      	adds	r7, #16
 8004820:	46bd      	mov	sp, r7
 8004822:	bd80      	pop	{r7, pc}
 8004824:	40013800 	.word	0x40013800
 8004828:	51eb851f 	.word	0x51eb851f

0800482c <__errno>:
 800482c:	4b01      	ldr	r3, [pc, #4]	; (8004834 <__errno+0x8>)
 800482e:	6818      	ldr	r0, [r3, #0]
 8004830:	4770      	bx	lr
 8004832:	bf00      	nop
 8004834:	20000014 	.word	0x20000014

08004838 <__libc_init_array>:
 8004838:	b570      	push	{r4, r5, r6, lr}
 800483a:	2600      	movs	r6, #0
 800483c:	4d0c      	ldr	r5, [pc, #48]	; (8004870 <__libc_init_array+0x38>)
 800483e:	4c0d      	ldr	r4, [pc, #52]	; (8004874 <__libc_init_array+0x3c>)
 8004840:	1b64      	subs	r4, r4, r5
 8004842:	10a4      	asrs	r4, r4, #2
 8004844:	42a6      	cmp	r6, r4
 8004846:	d109      	bne.n	800485c <__libc_init_array+0x24>
 8004848:	f002 febc 	bl	80075c4 <_init>
 800484c:	2600      	movs	r6, #0
 800484e:	4d0a      	ldr	r5, [pc, #40]	; (8004878 <__libc_init_array+0x40>)
 8004850:	4c0a      	ldr	r4, [pc, #40]	; (800487c <__libc_init_array+0x44>)
 8004852:	1b64      	subs	r4, r4, r5
 8004854:	10a4      	asrs	r4, r4, #2
 8004856:	42a6      	cmp	r6, r4
 8004858:	d105      	bne.n	8004866 <__libc_init_array+0x2e>
 800485a:	bd70      	pop	{r4, r5, r6, pc}
 800485c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004860:	4798      	blx	r3
 8004862:	3601      	adds	r6, #1
 8004864:	e7ee      	b.n	8004844 <__libc_init_array+0xc>
 8004866:	f855 3b04 	ldr.w	r3, [r5], #4
 800486a:	4798      	blx	r3
 800486c:	3601      	adds	r6, #1
 800486e:	e7f2      	b.n	8004856 <__libc_init_array+0x1e>
 8004870:	0800817c 	.word	0x0800817c
 8004874:	0800817c 	.word	0x0800817c
 8004878:	0800817c 	.word	0x0800817c
 800487c:	08008180 	.word	0x08008180

08004880 <memset>:
 8004880:	4603      	mov	r3, r0
 8004882:	4402      	add	r2, r0
 8004884:	4293      	cmp	r3, r2
 8004886:	d100      	bne.n	800488a <memset+0xa>
 8004888:	4770      	bx	lr
 800488a:	f803 1b01 	strb.w	r1, [r3], #1
 800488e:	e7f9      	b.n	8004884 <memset+0x4>

08004890 <__cvt>:
 8004890:	2b00      	cmp	r3, #0
 8004892:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004896:	461f      	mov	r7, r3
 8004898:	bfbb      	ittet	lt
 800489a:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800489e:	461f      	movlt	r7, r3
 80048a0:	2300      	movge	r3, #0
 80048a2:	232d      	movlt	r3, #45	; 0x2d
 80048a4:	b088      	sub	sp, #32
 80048a6:	4614      	mov	r4, r2
 80048a8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80048aa:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80048ac:	7013      	strb	r3, [r2, #0]
 80048ae:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80048b0:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 80048b4:	f023 0820 	bic.w	r8, r3, #32
 80048b8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80048bc:	d005      	beq.n	80048ca <__cvt+0x3a>
 80048be:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80048c2:	d100      	bne.n	80048c6 <__cvt+0x36>
 80048c4:	3501      	adds	r5, #1
 80048c6:	2302      	movs	r3, #2
 80048c8:	e000      	b.n	80048cc <__cvt+0x3c>
 80048ca:	2303      	movs	r3, #3
 80048cc:	aa07      	add	r2, sp, #28
 80048ce:	9204      	str	r2, [sp, #16]
 80048d0:	aa06      	add	r2, sp, #24
 80048d2:	e9cd a202 	strd	sl, r2, [sp, #8]
 80048d6:	e9cd 3500 	strd	r3, r5, [sp]
 80048da:	4622      	mov	r2, r4
 80048dc:	463b      	mov	r3, r7
 80048de:	f000 fce7 	bl	80052b0 <_dtoa_r>
 80048e2:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80048e6:	4606      	mov	r6, r0
 80048e8:	d102      	bne.n	80048f0 <__cvt+0x60>
 80048ea:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80048ec:	07db      	lsls	r3, r3, #31
 80048ee:	d522      	bpl.n	8004936 <__cvt+0xa6>
 80048f0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80048f4:	eb06 0905 	add.w	r9, r6, r5
 80048f8:	d110      	bne.n	800491c <__cvt+0x8c>
 80048fa:	7833      	ldrb	r3, [r6, #0]
 80048fc:	2b30      	cmp	r3, #48	; 0x30
 80048fe:	d10a      	bne.n	8004916 <__cvt+0x86>
 8004900:	2200      	movs	r2, #0
 8004902:	2300      	movs	r3, #0
 8004904:	4620      	mov	r0, r4
 8004906:	4639      	mov	r1, r7
 8004908:	f7fc f84e 	bl	80009a8 <__aeabi_dcmpeq>
 800490c:	b918      	cbnz	r0, 8004916 <__cvt+0x86>
 800490e:	f1c5 0501 	rsb	r5, r5, #1
 8004912:	f8ca 5000 	str.w	r5, [sl]
 8004916:	f8da 3000 	ldr.w	r3, [sl]
 800491a:	4499      	add	r9, r3
 800491c:	2200      	movs	r2, #0
 800491e:	2300      	movs	r3, #0
 8004920:	4620      	mov	r0, r4
 8004922:	4639      	mov	r1, r7
 8004924:	f7fc f840 	bl	80009a8 <__aeabi_dcmpeq>
 8004928:	b108      	cbz	r0, 800492e <__cvt+0x9e>
 800492a:	f8cd 901c 	str.w	r9, [sp, #28]
 800492e:	2230      	movs	r2, #48	; 0x30
 8004930:	9b07      	ldr	r3, [sp, #28]
 8004932:	454b      	cmp	r3, r9
 8004934:	d307      	bcc.n	8004946 <__cvt+0xb6>
 8004936:	4630      	mov	r0, r6
 8004938:	9b07      	ldr	r3, [sp, #28]
 800493a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800493c:	1b9b      	subs	r3, r3, r6
 800493e:	6013      	str	r3, [r2, #0]
 8004940:	b008      	add	sp, #32
 8004942:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004946:	1c59      	adds	r1, r3, #1
 8004948:	9107      	str	r1, [sp, #28]
 800494a:	701a      	strb	r2, [r3, #0]
 800494c:	e7f0      	b.n	8004930 <__cvt+0xa0>

0800494e <__exponent>:
 800494e:	4603      	mov	r3, r0
 8004950:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004952:	2900      	cmp	r1, #0
 8004954:	f803 2b02 	strb.w	r2, [r3], #2
 8004958:	bfb6      	itet	lt
 800495a:	222d      	movlt	r2, #45	; 0x2d
 800495c:	222b      	movge	r2, #43	; 0x2b
 800495e:	4249      	neglt	r1, r1
 8004960:	2909      	cmp	r1, #9
 8004962:	7042      	strb	r2, [r0, #1]
 8004964:	dd2b      	ble.n	80049be <__exponent+0x70>
 8004966:	f10d 0407 	add.w	r4, sp, #7
 800496a:	46a4      	mov	ip, r4
 800496c:	270a      	movs	r7, #10
 800496e:	fb91 f6f7 	sdiv	r6, r1, r7
 8004972:	460a      	mov	r2, r1
 8004974:	46a6      	mov	lr, r4
 8004976:	fb07 1516 	mls	r5, r7, r6, r1
 800497a:	2a63      	cmp	r2, #99	; 0x63
 800497c:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8004980:	4631      	mov	r1, r6
 8004982:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8004986:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800498a:	dcf0      	bgt.n	800496e <__exponent+0x20>
 800498c:	3130      	adds	r1, #48	; 0x30
 800498e:	f1ae 0502 	sub.w	r5, lr, #2
 8004992:	f804 1c01 	strb.w	r1, [r4, #-1]
 8004996:	4629      	mov	r1, r5
 8004998:	1c44      	adds	r4, r0, #1
 800499a:	4561      	cmp	r1, ip
 800499c:	d30a      	bcc.n	80049b4 <__exponent+0x66>
 800499e:	f10d 0209 	add.w	r2, sp, #9
 80049a2:	eba2 020e 	sub.w	r2, r2, lr
 80049a6:	4565      	cmp	r5, ip
 80049a8:	bf88      	it	hi
 80049aa:	2200      	movhi	r2, #0
 80049ac:	4413      	add	r3, r2
 80049ae:	1a18      	subs	r0, r3, r0
 80049b0:	b003      	add	sp, #12
 80049b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80049b4:	f811 2b01 	ldrb.w	r2, [r1], #1
 80049b8:	f804 2f01 	strb.w	r2, [r4, #1]!
 80049bc:	e7ed      	b.n	800499a <__exponent+0x4c>
 80049be:	2330      	movs	r3, #48	; 0x30
 80049c0:	3130      	adds	r1, #48	; 0x30
 80049c2:	7083      	strb	r3, [r0, #2]
 80049c4:	70c1      	strb	r1, [r0, #3]
 80049c6:	1d03      	adds	r3, r0, #4
 80049c8:	e7f1      	b.n	80049ae <__exponent+0x60>
	...

080049cc <_printf_float>:
 80049cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80049d0:	b091      	sub	sp, #68	; 0x44
 80049d2:	460c      	mov	r4, r1
 80049d4:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 80049d8:	4616      	mov	r6, r2
 80049da:	461f      	mov	r7, r3
 80049dc:	4605      	mov	r5, r0
 80049de:	f001 fa55 	bl	8005e8c <_localeconv_r>
 80049e2:	6803      	ldr	r3, [r0, #0]
 80049e4:	4618      	mov	r0, r3
 80049e6:	9309      	str	r3, [sp, #36]	; 0x24
 80049e8:	f7fb fbb2 	bl	8000150 <strlen>
 80049ec:	2300      	movs	r3, #0
 80049ee:	930e      	str	r3, [sp, #56]	; 0x38
 80049f0:	f8d8 3000 	ldr.w	r3, [r8]
 80049f4:	900a      	str	r0, [sp, #40]	; 0x28
 80049f6:	3307      	adds	r3, #7
 80049f8:	f023 0307 	bic.w	r3, r3, #7
 80049fc:	f103 0208 	add.w	r2, r3, #8
 8004a00:	f894 9018 	ldrb.w	r9, [r4, #24]
 8004a04:	f8d4 b000 	ldr.w	fp, [r4]
 8004a08:	f8c8 2000 	str.w	r2, [r8]
 8004a0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a10:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004a14:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8004a18:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8004a1c:	930b      	str	r3, [sp, #44]	; 0x2c
 8004a1e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004a22:	4640      	mov	r0, r8
 8004a24:	4b9c      	ldr	r3, [pc, #624]	; (8004c98 <_printf_float+0x2cc>)
 8004a26:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004a28:	f7fb fff0 	bl	8000a0c <__aeabi_dcmpun>
 8004a2c:	bb70      	cbnz	r0, 8004a8c <_printf_float+0xc0>
 8004a2e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004a32:	4640      	mov	r0, r8
 8004a34:	4b98      	ldr	r3, [pc, #608]	; (8004c98 <_printf_float+0x2cc>)
 8004a36:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004a38:	f7fb ffca 	bl	80009d0 <__aeabi_dcmple>
 8004a3c:	bb30      	cbnz	r0, 8004a8c <_printf_float+0xc0>
 8004a3e:	2200      	movs	r2, #0
 8004a40:	2300      	movs	r3, #0
 8004a42:	4640      	mov	r0, r8
 8004a44:	4651      	mov	r1, sl
 8004a46:	f7fb ffb9 	bl	80009bc <__aeabi_dcmplt>
 8004a4a:	b110      	cbz	r0, 8004a52 <_printf_float+0x86>
 8004a4c:	232d      	movs	r3, #45	; 0x2d
 8004a4e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004a52:	4b92      	ldr	r3, [pc, #584]	; (8004c9c <_printf_float+0x2d0>)
 8004a54:	4892      	ldr	r0, [pc, #584]	; (8004ca0 <_printf_float+0x2d4>)
 8004a56:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8004a5a:	bf94      	ite	ls
 8004a5c:	4698      	movls	r8, r3
 8004a5e:	4680      	movhi	r8, r0
 8004a60:	2303      	movs	r3, #3
 8004a62:	f04f 0a00 	mov.w	sl, #0
 8004a66:	6123      	str	r3, [r4, #16]
 8004a68:	f02b 0304 	bic.w	r3, fp, #4
 8004a6c:	6023      	str	r3, [r4, #0]
 8004a6e:	4633      	mov	r3, r6
 8004a70:	4621      	mov	r1, r4
 8004a72:	4628      	mov	r0, r5
 8004a74:	9700      	str	r7, [sp, #0]
 8004a76:	aa0f      	add	r2, sp, #60	; 0x3c
 8004a78:	f000 f9d4 	bl	8004e24 <_printf_common>
 8004a7c:	3001      	adds	r0, #1
 8004a7e:	f040 8090 	bne.w	8004ba2 <_printf_float+0x1d6>
 8004a82:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004a86:	b011      	add	sp, #68	; 0x44
 8004a88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a8c:	4642      	mov	r2, r8
 8004a8e:	4653      	mov	r3, sl
 8004a90:	4640      	mov	r0, r8
 8004a92:	4651      	mov	r1, sl
 8004a94:	f7fb ffba 	bl	8000a0c <__aeabi_dcmpun>
 8004a98:	b148      	cbz	r0, 8004aae <_printf_float+0xe2>
 8004a9a:	f1ba 0f00 	cmp.w	sl, #0
 8004a9e:	bfb8      	it	lt
 8004aa0:	232d      	movlt	r3, #45	; 0x2d
 8004aa2:	4880      	ldr	r0, [pc, #512]	; (8004ca4 <_printf_float+0x2d8>)
 8004aa4:	bfb8      	it	lt
 8004aa6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8004aaa:	4b7f      	ldr	r3, [pc, #508]	; (8004ca8 <_printf_float+0x2dc>)
 8004aac:	e7d3      	b.n	8004a56 <_printf_float+0x8a>
 8004aae:	6863      	ldr	r3, [r4, #4]
 8004ab0:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8004ab4:	1c5a      	adds	r2, r3, #1
 8004ab6:	d142      	bne.n	8004b3e <_printf_float+0x172>
 8004ab8:	2306      	movs	r3, #6
 8004aba:	6063      	str	r3, [r4, #4]
 8004abc:	2200      	movs	r2, #0
 8004abe:	9206      	str	r2, [sp, #24]
 8004ac0:	aa0e      	add	r2, sp, #56	; 0x38
 8004ac2:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8004ac6:	aa0d      	add	r2, sp, #52	; 0x34
 8004ac8:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8004acc:	9203      	str	r2, [sp, #12]
 8004ace:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8004ad2:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8004ad6:	6023      	str	r3, [r4, #0]
 8004ad8:	6863      	ldr	r3, [r4, #4]
 8004ada:	4642      	mov	r2, r8
 8004adc:	9300      	str	r3, [sp, #0]
 8004ade:	4628      	mov	r0, r5
 8004ae0:	4653      	mov	r3, sl
 8004ae2:	910b      	str	r1, [sp, #44]	; 0x2c
 8004ae4:	f7ff fed4 	bl	8004890 <__cvt>
 8004ae8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004aea:	4680      	mov	r8, r0
 8004aec:	2947      	cmp	r1, #71	; 0x47
 8004aee:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004af0:	d108      	bne.n	8004b04 <_printf_float+0x138>
 8004af2:	1cc8      	adds	r0, r1, #3
 8004af4:	db02      	blt.n	8004afc <_printf_float+0x130>
 8004af6:	6863      	ldr	r3, [r4, #4]
 8004af8:	4299      	cmp	r1, r3
 8004afa:	dd40      	ble.n	8004b7e <_printf_float+0x1b2>
 8004afc:	f1a9 0902 	sub.w	r9, r9, #2
 8004b00:	fa5f f989 	uxtb.w	r9, r9
 8004b04:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8004b08:	d81f      	bhi.n	8004b4a <_printf_float+0x17e>
 8004b0a:	464a      	mov	r2, r9
 8004b0c:	3901      	subs	r1, #1
 8004b0e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004b12:	910d      	str	r1, [sp, #52]	; 0x34
 8004b14:	f7ff ff1b 	bl	800494e <__exponent>
 8004b18:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004b1a:	4682      	mov	sl, r0
 8004b1c:	1813      	adds	r3, r2, r0
 8004b1e:	2a01      	cmp	r2, #1
 8004b20:	6123      	str	r3, [r4, #16]
 8004b22:	dc02      	bgt.n	8004b2a <_printf_float+0x15e>
 8004b24:	6822      	ldr	r2, [r4, #0]
 8004b26:	07d2      	lsls	r2, r2, #31
 8004b28:	d501      	bpl.n	8004b2e <_printf_float+0x162>
 8004b2a:	3301      	adds	r3, #1
 8004b2c:	6123      	str	r3, [r4, #16]
 8004b2e:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d09b      	beq.n	8004a6e <_printf_float+0xa2>
 8004b36:	232d      	movs	r3, #45	; 0x2d
 8004b38:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004b3c:	e797      	b.n	8004a6e <_printf_float+0xa2>
 8004b3e:	2947      	cmp	r1, #71	; 0x47
 8004b40:	d1bc      	bne.n	8004abc <_printf_float+0xf0>
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d1ba      	bne.n	8004abc <_printf_float+0xf0>
 8004b46:	2301      	movs	r3, #1
 8004b48:	e7b7      	b.n	8004aba <_printf_float+0xee>
 8004b4a:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8004b4e:	d118      	bne.n	8004b82 <_printf_float+0x1b6>
 8004b50:	2900      	cmp	r1, #0
 8004b52:	6863      	ldr	r3, [r4, #4]
 8004b54:	dd0b      	ble.n	8004b6e <_printf_float+0x1a2>
 8004b56:	6121      	str	r1, [r4, #16]
 8004b58:	b913      	cbnz	r3, 8004b60 <_printf_float+0x194>
 8004b5a:	6822      	ldr	r2, [r4, #0]
 8004b5c:	07d0      	lsls	r0, r2, #31
 8004b5e:	d502      	bpl.n	8004b66 <_printf_float+0x19a>
 8004b60:	3301      	adds	r3, #1
 8004b62:	440b      	add	r3, r1
 8004b64:	6123      	str	r3, [r4, #16]
 8004b66:	f04f 0a00 	mov.w	sl, #0
 8004b6a:	65a1      	str	r1, [r4, #88]	; 0x58
 8004b6c:	e7df      	b.n	8004b2e <_printf_float+0x162>
 8004b6e:	b913      	cbnz	r3, 8004b76 <_printf_float+0x1aa>
 8004b70:	6822      	ldr	r2, [r4, #0]
 8004b72:	07d2      	lsls	r2, r2, #31
 8004b74:	d501      	bpl.n	8004b7a <_printf_float+0x1ae>
 8004b76:	3302      	adds	r3, #2
 8004b78:	e7f4      	b.n	8004b64 <_printf_float+0x198>
 8004b7a:	2301      	movs	r3, #1
 8004b7c:	e7f2      	b.n	8004b64 <_printf_float+0x198>
 8004b7e:	f04f 0967 	mov.w	r9, #103	; 0x67
 8004b82:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004b84:	4299      	cmp	r1, r3
 8004b86:	db05      	blt.n	8004b94 <_printf_float+0x1c8>
 8004b88:	6823      	ldr	r3, [r4, #0]
 8004b8a:	6121      	str	r1, [r4, #16]
 8004b8c:	07d8      	lsls	r0, r3, #31
 8004b8e:	d5ea      	bpl.n	8004b66 <_printf_float+0x19a>
 8004b90:	1c4b      	adds	r3, r1, #1
 8004b92:	e7e7      	b.n	8004b64 <_printf_float+0x198>
 8004b94:	2900      	cmp	r1, #0
 8004b96:	bfcc      	ite	gt
 8004b98:	2201      	movgt	r2, #1
 8004b9a:	f1c1 0202 	rsble	r2, r1, #2
 8004b9e:	4413      	add	r3, r2
 8004ba0:	e7e0      	b.n	8004b64 <_printf_float+0x198>
 8004ba2:	6823      	ldr	r3, [r4, #0]
 8004ba4:	055a      	lsls	r2, r3, #21
 8004ba6:	d407      	bmi.n	8004bb8 <_printf_float+0x1ec>
 8004ba8:	6923      	ldr	r3, [r4, #16]
 8004baa:	4642      	mov	r2, r8
 8004bac:	4631      	mov	r1, r6
 8004bae:	4628      	mov	r0, r5
 8004bb0:	47b8      	blx	r7
 8004bb2:	3001      	adds	r0, #1
 8004bb4:	d12b      	bne.n	8004c0e <_printf_float+0x242>
 8004bb6:	e764      	b.n	8004a82 <_printf_float+0xb6>
 8004bb8:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8004bbc:	f240 80dd 	bls.w	8004d7a <_printf_float+0x3ae>
 8004bc0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004bc4:	2200      	movs	r2, #0
 8004bc6:	2300      	movs	r3, #0
 8004bc8:	f7fb feee 	bl	80009a8 <__aeabi_dcmpeq>
 8004bcc:	2800      	cmp	r0, #0
 8004bce:	d033      	beq.n	8004c38 <_printf_float+0x26c>
 8004bd0:	2301      	movs	r3, #1
 8004bd2:	4631      	mov	r1, r6
 8004bd4:	4628      	mov	r0, r5
 8004bd6:	4a35      	ldr	r2, [pc, #212]	; (8004cac <_printf_float+0x2e0>)
 8004bd8:	47b8      	blx	r7
 8004bda:	3001      	adds	r0, #1
 8004bdc:	f43f af51 	beq.w	8004a82 <_printf_float+0xb6>
 8004be0:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004be4:	429a      	cmp	r2, r3
 8004be6:	db02      	blt.n	8004bee <_printf_float+0x222>
 8004be8:	6823      	ldr	r3, [r4, #0]
 8004bea:	07d8      	lsls	r0, r3, #31
 8004bec:	d50f      	bpl.n	8004c0e <_printf_float+0x242>
 8004bee:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004bf2:	4631      	mov	r1, r6
 8004bf4:	4628      	mov	r0, r5
 8004bf6:	47b8      	blx	r7
 8004bf8:	3001      	adds	r0, #1
 8004bfa:	f43f af42 	beq.w	8004a82 <_printf_float+0xb6>
 8004bfe:	f04f 0800 	mov.w	r8, #0
 8004c02:	f104 091a 	add.w	r9, r4, #26
 8004c06:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004c08:	3b01      	subs	r3, #1
 8004c0a:	4543      	cmp	r3, r8
 8004c0c:	dc09      	bgt.n	8004c22 <_printf_float+0x256>
 8004c0e:	6823      	ldr	r3, [r4, #0]
 8004c10:	079b      	lsls	r3, r3, #30
 8004c12:	f100 8102 	bmi.w	8004e1a <_printf_float+0x44e>
 8004c16:	68e0      	ldr	r0, [r4, #12]
 8004c18:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004c1a:	4298      	cmp	r0, r3
 8004c1c:	bfb8      	it	lt
 8004c1e:	4618      	movlt	r0, r3
 8004c20:	e731      	b.n	8004a86 <_printf_float+0xba>
 8004c22:	2301      	movs	r3, #1
 8004c24:	464a      	mov	r2, r9
 8004c26:	4631      	mov	r1, r6
 8004c28:	4628      	mov	r0, r5
 8004c2a:	47b8      	blx	r7
 8004c2c:	3001      	adds	r0, #1
 8004c2e:	f43f af28 	beq.w	8004a82 <_printf_float+0xb6>
 8004c32:	f108 0801 	add.w	r8, r8, #1
 8004c36:	e7e6      	b.n	8004c06 <_printf_float+0x23a>
 8004c38:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	dc38      	bgt.n	8004cb0 <_printf_float+0x2e4>
 8004c3e:	2301      	movs	r3, #1
 8004c40:	4631      	mov	r1, r6
 8004c42:	4628      	mov	r0, r5
 8004c44:	4a19      	ldr	r2, [pc, #100]	; (8004cac <_printf_float+0x2e0>)
 8004c46:	47b8      	blx	r7
 8004c48:	3001      	adds	r0, #1
 8004c4a:	f43f af1a 	beq.w	8004a82 <_printf_float+0xb6>
 8004c4e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004c52:	4313      	orrs	r3, r2
 8004c54:	d102      	bne.n	8004c5c <_printf_float+0x290>
 8004c56:	6823      	ldr	r3, [r4, #0]
 8004c58:	07d9      	lsls	r1, r3, #31
 8004c5a:	d5d8      	bpl.n	8004c0e <_printf_float+0x242>
 8004c5c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004c60:	4631      	mov	r1, r6
 8004c62:	4628      	mov	r0, r5
 8004c64:	47b8      	blx	r7
 8004c66:	3001      	adds	r0, #1
 8004c68:	f43f af0b 	beq.w	8004a82 <_printf_float+0xb6>
 8004c6c:	f04f 0900 	mov.w	r9, #0
 8004c70:	f104 0a1a 	add.w	sl, r4, #26
 8004c74:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004c76:	425b      	negs	r3, r3
 8004c78:	454b      	cmp	r3, r9
 8004c7a:	dc01      	bgt.n	8004c80 <_printf_float+0x2b4>
 8004c7c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004c7e:	e794      	b.n	8004baa <_printf_float+0x1de>
 8004c80:	2301      	movs	r3, #1
 8004c82:	4652      	mov	r2, sl
 8004c84:	4631      	mov	r1, r6
 8004c86:	4628      	mov	r0, r5
 8004c88:	47b8      	blx	r7
 8004c8a:	3001      	adds	r0, #1
 8004c8c:	f43f aef9 	beq.w	8004a82 <_printf_float+0xb6>
 8004c90:	f109 0901 	add.w	r9, r9, #1
 8004c94:	e7ee      	b.n	8004c74 <_printf_float+0x2a8>
 8004c96:	bf00      	nop
 8004c98:	7fefffff 	.word	0x7fefffff
 8004c9c:	08007d9c 	.word	0x08007d9c
 8004ca0:	08007da0 	.word	0x08007da0
 8004ca4:	08007da8 	.word	0x08007da8
 8004ca8:	08007da4 	.word	0x08007da4
 8004cac:	08007dac 	.word	0x08007dac
 8004cb0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004cb2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004cb4:	429a      	cmp	r2, r3
 8004cb6:	bfa8      	it	ge
 8004cb8:	461a      	movge	r2, r3
 8004cba:	2a00      	cmp	r2, #0
 8004cbc:	4691      	mov	r9, r2
 8004cbe:	dc37      	bgt.n	8004d30 <_printf_float+0x364>
 8004cc0:	f04f 0b00 	mov.w	fp, #0
 8004cc4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004cc8:	f104 021a 	add.w	r2, r4, #26
 8004ccc:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8004cd0:	ebaa 0309 	sub.w	r3, sl, r9
 8004cd4:	455b      	cmp	r3, fp
 8004cd6:	dc33      	bgt.n	8004d40 <_printf_float+0x374>
 8004cd8:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004cdc:	429a      	cmp	r2, r3
 8004cde:	db3b      	blt.n	8004d58 <_printf_float+0x38c>
 8004ce0:	6823      	ldr	r3, [r4, #0]
 8004ce2:	07da      	lsls	r2, r3, #31
 8004ce4:	d438      	bmi.n	8004d58 <_printf_float+0x38c>
 8004ce6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004ce8:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004cea:	eba2 030a 	sub.w	r3, r2, sl
 8004cee:	eba2 0901 	sub.w	r9, r2, r1
 8004cf2:	4599      	cmp	r9, r3
 8004cf4:	bfa8      	it	ge
 8004cf6:	4699      	movge	r9, r3
 8004cf8:	f1b9 0f00 	cmp.w	r9, #0
 8004cfc:	dc34      	bgt.n	8004d68 <_printf_float+0x39c>
 8004cfe:	f04f 0800 	mov.w	r8, #0
 8004d02:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004d06:	f104 0a1a 	add.w	sl, r4, #26
 8004d0a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004d0e:	1a9b      	subs	r3, r3, r2
 8004d10:	eba3 0309 	sub.w	r3, r3, r9
 8004d14:	4543      	cmp	r3, r8
 8004d16:	f77f af7a 	ble.w	8004c0e <_printf_float+0x242>
 8004d1a:	2301      	movs	r3, #1
 8004d1c:	4652      	mov	r2, sl
 8004d1e:	4631      	mov	r1, r6
 8004d20:	4628      	mov	r0, r5
 8004d22:	47b8      	blx	r7
 8004d24:	3001      	adds	r0, #1
 8004d26:	f43f aeac 	beq.w	8004a82 <_printf_float+0xb6>
 8004d2a:	f108 0801 	add.w	r8, r8, #1
 8004d2e:	e7ec      	b.n	8004d0a <_printf_float+0x33e>
 8004d30:	4613      	mov	r3, r2
 8004d32:	4631      	mov	r1, r6
 8004d34:	4642      	mov	r2, r8
 8004d36:	4628      	mov	r0, r5
 8004d38:	47b8      	blx	r7
 8004d3a:	3001      	adds	r0, #1
 8004d3c:	d1c0      	bne.n	8004cc0 <_printf_float+0x2f4>
 8004d3e:	e6a0      	b.n	8004a82 <_printf_float+0xb6>
 8004d40:	2301      	movs	r3, #1
 8004d42:	4631      	mov	r1, r6
 8004d44:	4628      	mov	r0, r5
 8004d46:	920b      	str	r2, [sp, #44]	; 0x2c
 8004d48:	47b8      	blx	r7
 8004d4a:	3001      	adds	r0, #1
 8004d4c:	f43f ae99 	beq.w	8004a82 <_printf_float+0xb6>
 8004d50:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004d52:	f10b 0b01 	add.w	fp, fp, #1
 8004d56:	e7b9      	b.n	8004ccc <_printf_float+0x300>
 8004d58:	4631      	mov	r1, r6
 8004d5a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004d5e:	4628      	mov	r0, r5
 8004d60:	47b8      	blx	r7
 8004d62:	3001      	adds	r0, #1
 8004d64:	d1bf      	bne.n	8004ce6 <_printf_float+0x31a>
 8004d66:	e68c      	b.n	8004a82 <_printf_float+0xb6>
 8004d68:	464b      	mov	r3, r9
 8004d6a:	4631      	mov	r1, r6
 8004d6c:	4628      	mov	r0, r5
 8004d6e:	eb08 020a 	add.w	r2, r8, sl
 8004d72:	47b8      	blx	r7
 8004d74:	3001      	adds	r0, #1
 8004d76:	d1c2      	bne.n	8004cfe <_printf_float+0x332>
 8004d78:	e683      	b.n	8004a82 <_printf_float+0xb6>
 8004d7a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004d7c:	2a01      	cmp	r2, #1
 8004d7e:	dc01      	bgt.n	8004d84 <_printf_float+0x3b8>
 8004d80:	07db      	lsls	r3, r3, #31
 8004d82:	d537      	bpl.n	8004df4 <_printf_float+0x428>
 8004d84:	2301      	movs	r3, #1
 8004d86:	4642      	mov	r2, r8
 8004d88:	4631      	mov	r1, r6
 8004d8a:	4628      	mov	r0, r5
 8004d8c:	47b8      	blx	r7
 8004d8e:	3001      	adds	r0, #1
 8004d90:	f43f ae77 	beq.w	8004a82 <_printf_float+0xb6>
 8004d94:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004d98:	4631      	mov	r1, r6
 8004d9a:	4628      	mov	r0, r5
 8004d9c:	47b8      	blx	r7
 8004d9e:	3001      	adds	r0, #1
 8004da0:	f43f ae6f 	beq.w	8004a82 <_printf_float+0xb6>
 8004da4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004da8:	2200      	movs	r2, #0
 8004daa:	2300      	movs	r3, #0
 8004dac:	f7fb fdfc 	bl	80009a8 <__aeabi_dcmpeq>
 8004db0:	b9d8      	cbnz	r0, 8004dea <_printf_float+0x41e>
 8004db2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004db4:	f108 0201 	add.w	r2, r8, #1
 8004db8:	3b01      	subs	r3, #1
 8004dba:	4631      	mov	r1, r6
 8004dbc:	4628      	mov	r0, r5
 8004dbe:	47b8      	blx	r7
 8004dc0:	3001      	adds	r0, #1
 8004dc2:	d10e      	bne.n	8004de2 <_printf_float+0x416>
 8004dc4:	e65d      	b.n	8004a82 <_printf_float+0xb6>
 8004dc6:	2301      	movs	r3, #1
 8004dc8:	464a      	mov	r2, r9
 8004dca:	4631      	mov	r1, r6
 8004dcc:	4628      	mov	r0, r5
 8004dce:	47b8      	blx	r7
 8004dd0:	3001      	adds	r0, #1
 8004dd2:	f43f ae56 	beq.w	8004a82 <_printf_float+0xb6>
 8004dd6:	f108 0801 	add.w	r8, r8, #1
 8004dda:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004ddc:	3b01      	subs	r3, #1
 8004dde:	4543      	cmp	r3, r8
 8004de0:	dcf1      	bgt.n	8004dc6 <_printf_float+0x3fa>
 8004de2:	4653      	mov	r3, sl
 8004de4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004de8:	e6e0      	b.n	8004bac <_printf_float+0x1e0>
 8004dea:	f04f 0800 	mov.w	r8, #0
 8004dee:	f104 091a 	add.w	r9, r4, #26
 8004df2:	e7f2      	b.n	8004dda <_printf_float+0x40e>
 8004df4:	2301      	movs	r3, #1
 8004df6:	4642      	mov	r2, r8
 8004df8:	e7df      	b.n	8004dba <_printf_float+0x3ee>
 8004dfa:	2301      	movs	r3, #1
 8004dfc:	464a      	mov	r2, r9
 8004dfe:	4631      	mov	r1, r6
 8004e00:	4628      	mov	r0, r5
 8004e02:	47b8      	blx	r7
 8004e04:	3001      	adds	r0, #1
 8004e06:	f43f ae3c 	beq.w	8004a82 <_printf_float+0xb6>
 8004e0a:	f108 0801 	add.w	r8, r8, #1
 8004e0e:	68e3      	ldr	r3, [r4, #12]
 8004e10:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8004e12:	1a5b      	subs	r3, r3, r1
 8004e14:	4543      	cmp	r3, r8
 8004e16:	dcf0      	bgt.n	8004dfa <_printf_float+0x42e>
 8004e18:	e6fd      	b.n	8004c16 <_printf_float+0x24a>
 8004e1a:	f04f 0800 	mov.w	r8, #0
 8004e1e:	f104 0919 	add.w	r9, r4, #25
 8004e22:	e7f4      	b.n	8004e0e <_printf_float+0x442>

08004e24 <_printf_common>:
 8004e24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004e28:	4616      	mov	r6, r2
 8004e2a:	4699      	mov	r9, r3
 8004e2c:	688a      	ldr	r2, [r1, #8]
 8004e2e:	690b      	ldr	r3, [r1, #16]
 8004e30:	4607      	mov	r7, r0
 8004e32:	4293      	cmp	r3, r2
 8004e34:	bfb8      	it	lt
 8004e36:	4613      	movlt	r3, r2
 8004e38:	6033      	str	r3, [r6, #0]
 8004e3a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004e3e:	460c      	mov	r4, r1
 8004e40:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004e44:	b10a      	cbz	r2, 8004e4a <_printf_common+0x26>
 8004e46:	3301      	adds	r3, #1
 8004e48:	6033      	str	r3, [r6, #0]
 8004e4a:	6823      	ldr	r3, [r4, #0]
 8004e4c:	0699      	lsls	r1, r3, #26
 8004e4e:	bf42      	ittt	mi
 8004e50:	6833      	ldrmi	r3, [r6, #0]
 8004e52:	3302      	addmi	r3, #2
 8004e54:	6033      	strmi	r3, [r6, #0]
 8004e56:	6825      	ldr	r5, [r4, #0]
 8004e58:	f015 0506 	ands.w	r5, r5, #6
 8004e5c:	d106      	bne.n	8004e6c <_printf_common+0x48>
 8004e5e:	f104 0a19 	add.w	sl, r4, #25
 8004e62:	68e3      	ldr	r3, [r4, #12]
 8004e64:	6832      	ldr	r2, [r6, #0]
 8004e66:	1a9b      	subs	r3, r3, r2
 8004e68:	42ab      	cmp	r3, r5
 8004e6a:	dc28      	bgt.n	8004ebe <_printf_common+0x9a>
 8004e6c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004e70:	1e13      	subs	r3, r2, #0
 8004e72:	6822      	ldr	r2, [r4, #0]
 8004e74:	bf18      	it	ne
 8004e76:	2301      	movne	r3, #1
 8004e78:	0692      	lsls	r2, r2, #26
 8004e7a:	d42d      	bmi.n	8004ed8 <_printf_common+0xb4>
 8004e7c:	4649      	mov	r1, r9
 8004e7e:	4638      	mov	r0, r7
 8004e80:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004e84:	47c0      	blx	r8
 8004e86:	3001      	adds	r0, #1
 8004e88:	d020      	beq.n	8004ecc <_printf_common+0xa8>
 8004e8a:	6823      	ldr	r3, [r4, #0]
 8004e8c:	68e5      	ldr	r5, [r4, #12]
 8004e8e:	f003 0306 	and.w	r3, r3, #6
 8004e92:	2b04      	cmp	r3, #4
 8004e94:	bf18      	it	ne
 8004e96:	2500      	movne	r5, #0
 8004e98:	6832      	ldr	r2, [r6, #0]
 8004e9a:	f04f 0600 	mov.w	r6, #0
 8004e9e:	68a3      	ldr	r3, [r4, #8]
 8004ea0:	bf08      	it	eq
 8004ea2:	1aad      	subeq	r5, r5, r2
 8004ea4:	6922      	ldr	r2, [r4, #16]
 8004ea6:	bf08      	it	eq
 8004ea8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004eac:	4293      	cmp	r3, r2
 8004eae:	bfc4      	itt	gt
 8004eb0:	1a9b      	subgt	r3, r3, r2
 8004eb2:	18ed      	addgt	r5, r5, r3
 8004eb4:	341a      	adds	r4, #26
 8004eb6:	42b5      	cmp	r5, r6
 8004eb8:	d11a      	bne.n	8004ef0 <_printf_common+0xcc>
 8004eba:	2000      	movs	r0, #0
 8004ebc:	e008      	b.n	8004ed0 <_printf_common+0xac>
 8004ebe:	2301      	movs	r3, #1
 8004ec0:	4652      	mov	r2, sl
 8004ec2:	4649      	mov	r1, r9
 8004ec4:	4638      	mov	r0, r7
 8004ec6:	47c0      	blx	r8
 8004ec8:	3001      	adds	r0, #1
 8004eca:	d103      	bne.n	8004ed4 <_printf_common+0xb0>
 8004ecc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004ed0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ed4:	3501      	adds	r5, #1
 8004ed6:	e7c4      	b.n	8004e62 <_printf_common+0x3e>
 8004ed8:	2030      	movs	r0, #48	; 0x30
 8004eda:	18e1      	adds	r1, r4, r3
 8004edc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004ee0:	1c5a      	adds	r2, r3, #1
 8004ee2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004ee6:	4422      	add	r2, r4
 8004ee8:	3302      	adds	r3, #2
 8004eea:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004eee:	e7c5      	b.n	8004e7c <_printf_common+0x58>
 8004ef0:	2301      	movs	r3, #1
 8004ef2:	4622      	mov	r2, r4
 8004ef4:	4649      	mov	r1, r9
 8004ef6:	4638      	mov	r0, r7
 8004ef8:	47c0      	blx	r8
 8004efa:	3001      	adds	r0, #1
 8004efc:	d0e6      	beq.n	8004ecc <_printf_common+0xa8>
 8004efe:	3601      	adds	r6, #1
 8004f00:	e7d9      	b.n	8004eb6 <_printf_common+0x92>
	...

08004f04 <_printf_i>:
 8004f04:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004f08:	460c      	mov	r4, r1
 8004f0a:	7e27      	ldrb	r7, [r4, #24]
 8004f0c:	4691      	mov	r9, r2
 8004f0e:	2f78      	cmp	r7, #120	; 0x78
 8004f10:	4680      	mov	r8, r0
 8004f12:	469a      	mov	sl, r3
 8004f14:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004f16:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004f1a:	d807      	bhi.n	8004f2c <_printf_i+0x28>
 8004f1c:	2f62      	cmp	r7, #98	; 0x62
 8004f1e:	d80a      	bhi.n	8004f36 <_printf_i+0x32>
 8004f20:	2f00      	cmp	r7, #0
 8004f22:	f000 80d9 	beq.w	80050d8 <_printf_i+0x1d4>
 8004f26:	2f58      	cmp	r7, #88	; 0x58
 8004f28:	f000 80a4 	beq.w	8005074 <_printf_i+0x170>
 8004f2c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004f30:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004f34:	e03a      	b.n	8004fac <_printf_i+0xa8>
 8004f36:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004f3a:	2b15      	cmp	r3, #21
 8004f3c:	d8f6      	bhi.n	8004f2c <_printf_i+0x28>
 8004f3e:	a001      	add	r0, pc, #4	; (adr r0, 8004f44 <_printf_i+0x40>)
 8004f40:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004f44:	08004f9d 	.word	0x08004f9d
 8004f48:	08004fb1 	.word	0x08004fb1
 8004f4c:	08004f2d 	.word	0x08004f2d
 8004f50:	08004f2d 	.word	0x08004f2d
 8004f54:	08004f2d 	.word	0x08004f2d
 8004f58:	08004f2d 	.word	0x08004f2d
 8004f5c:	08004fb1 	.word	0x08004fb1
 8004f60:	08004f2d 	.word	0x08004f2d
 8004f64:	08004f2d 	.word	0x08004f2d
 8004f68:	08004f2d 	.word	0x08004f2d
 8004f6c:	08004f2d 	.word	0x08004f2d
 8004f70:	080050bf 	.word	0x080050bf
 8004f74:	08004fe1 	.word	0x08004fe1
 8004f78:	080050a1 	.word	0x080050a1
 8004f7c:	08004f2d 	.word	0x08004f2d
 8004f80:	08004f2d 	.word	0x08004f2d
 8004f84:	080050e1 	.word	0x080050e1
 8004f88:	08004f2d 	.word	0x08004f2d
 8004f8c:	08004fe1 	.word	0x08004fe1
 8004f90:	08004f2d 	.word	0x08004f2d
 8004f94:	08004f2d 	.word	0x08004f2d
 8004f98:	080050a9 	.word	0x080050a9
 8004f9c:	680b      	ldr	r3, [r1, #0]
 8004f9e:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004fa2:	1d1a      	adds	r2, r3, #4
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	600a      	str	r2, [r1, #0]
 8004fa8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004fac:	2301      	movs	r3, #1
 8004fae:	e0a4      	b.n	80050fa <_printf_i+0x1f6>
 8004fb0:	6825      	ldr	r5, [r4, #0]
 8004fb2:	6808      	ldr	r0, [r1, #0]
 8004fb4:	062e      	lsls	r6, r5, #24
 8004fb6:	f100 0304 	add.w	r3, r0, #4
 8004fba:	d50a      	bpl.n	8004fd2 <_printf_i+0xce>
 8004fbc:	6805      	ldr	r5, [r0, #0]
 8004fbe:	600b      	str	r3, [r1, #0]
 8004fc0:	2d00      	cmp	r5, #0
 8004fc2:	da03      	bge.n	8004fcc <_printf_i+0xc8>
 8004fc4:	232d      	movs	r3, #45	; 0x2d
 8004fc6:	426d      	negs	r5, r5
 8004fc8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004fcc:	230a      	movs	r3, #10
 8004fce:	485e      	ldr	r0, [pc, #376]	; (8005148 <_printf_i+0x244>)
 8004fd0:	e019      	b.n	8005006 <_printf_i+0x102>
 8004fd2:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004fd6:	6805      	ldr	r5, [r0, #0]
 8004fd8:	600b      	str	r3, [r1, #0]
 8004fda:	bf18      	it	ne
 8004fdc:	b22d      	sxthne	r5, r5
 8004fde:	e7ef      	b.n	8004fc0 <_printf_i+0xbc>
 8004fe0:	680b      	ldr	r3, [r1, #0]
 8004fe2:	6825      	ldr	r5, [r4, #0]
 8004fe4:	1d18      	adds	r0, r3, #4
 8004fe6:	6008      	str	r0, [r1, #0]
 8004fe8:	0628      	lsls	r0, r5, #24
 8004fea:	d501      	bpl.n	8004ff0 <_printf_i+0xec>
 8004fec:	681d      	ldr	r5, [r3, #0]
 8004fee:	e002      	b.n	8004ff6 <_printf_i+0xf2>
 8004ff0:	0669      	lsls	r1, r5, #25
 8004ff2:	d5fb      	bpl.n	8004fec <_printf_i+0xe8>
 8004ff4:	881d      	ldrh	r5, [r3, #0]
 8004ff6:	2f6f      	cmp	r7, #111	; 0x6f
 8004ff8:	bf0c      	ite	eq
 8004ffa:	2308      	moveq	r3, #8
 8004ffc:	230a      	movne	r3, #10
 8004ffe:	4852      	ldr	r0, [pc, #328]	; (8005148 <_printf_i+0x244>)
 8005000:	2100      	movs	r1, #0
 8005002:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005006:	6866      	ldr	r6, [r4, #4]
 8005008:	2e00      	cmp	r6, #0
 800500a:	bfa8      	it	ge
 800500c:	6821      	ldrge	r1, [r4, #0]
 800500e:	60a6      	str	r6, [r4, #8]
 8005010:	bfa4      	itt	ge
 8005012:	f021 0104 	bicge.w	r1, r1, #4
 8005016:	6021      	strge	r1, [r4, #0]
 8005018:	b90d      	cbnz	r5, 800501e <_printf_i+0x11a>
 800501a:	2e00      	cmp	r6, #0
 800501c:	d04d      	beq.n	80050ba <_printf_i+0x1b6>
 800501e:	4616      	mov	r6, r2
 8005020:	fbb5 f1f3 	udiv	r1, r5, r3
 8005024:	fb03 5711 	mls	r7, r3, r1, r5
 8005028:	5dc7      	ldrb	r7, [r0, r7]
 800502a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800502e:	462f      	mov	r7, r5
 8005030:	42bb      	cmp	r3, r7
 8005032:	460d      	mov	r5, r1
 8005034:	d9f4      	bls.n	8005020 <_printf_i+0x11c>
 8005036:	2b08      	cmp	r3, #8
 8005038:	d10b      	bne.n	8005052 <_printf_i+0x14e>
 800503a:	6823      	ldr	r3, [r4, #0]
 800503c:	07df      	lsls	r7, r3, #31
 800503e:	d508      	bpl.n	8005052 <_printf_i+0x14e>
 8005040:	6923      	ldr	r3, [r4, #16]
 8005042:	6861      	ldr	r1, [r4, #4]
 8005044:	4299      	cmp	r1, r3
 8005046:	bfde      	ittt	le
 8005048:	2330      	movle	r3, #48	; 0x30
 800504a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800504e:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8005052:	1b92      	subs	r2, r2, r6
 8005054:	6122      	str	r2, [r4, #16]
 8005056:	464b      	mov	r3, r9
 8005058:	4621      	mov	r1, r4
 800505a:	4640      	mov	r0, r8
 800505c:	f8cd a000 	str.w	sl, [sp]
 8005060:	aa03      	add	r2, sp, #12
 8005062:	f7ff fedf 	bl	8004e24 <_printf_common>
 8005066:	3001      	adds	r0, #1
 8005068:	d14c      	bne.n	8005104 <_printf_i+0x200>
 800506a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800506e:	b004      	add	sp, #16
 8005070:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005074:	4834      	ldr	r0, [pc, #208]	; (8005148 <_printf_i+0x244>)
 8005076:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800507a:	680e      	ldr	r6, [r1, #0]
 800507c:	6823      	ldr	r3, [r4, #0]
 800507e:	f856 5b04 	ldr.w	r5, [r6], #4
 8005082:	061f      	lsls	r7, r3, #24
 8005084:	600e      	str	r6, [r1, #0]
 8005086:	d514      	bpl.n	80050b2 <_printf_i+0x1ae>
 8005088:	07d9      	lsls	r1, r3, #31
 800508a:	bf44      	itt	mi
 800508c:	f043 0320 	orrmi.w	r3, r3, #32
 8005090:	6023      	strmi	r3, [r4, #0]
 8005092:	b91d      	cbnz	r5, 800509c <_printf_i+0x198>
 8005094:	6823      	ldr	r3, [r4, #0]
 8005096:	f023 0320 	bic.w	r3, r3, #32
 800509a:	6023      	str	r3, [r4, #0]
 800509c:	2310      	movs	r3, #16
 800509e:	e7af      	b.n	8005000 <_printf_i+0xfc>
 80050a0:	6823      	ldr	r3, [r4, #0]
 80050a2:	f043 0320 	orr.w	r3, r3, #32
 80050a6:	6023      	str	r3, [r4, #0]
 80050a8:	2378      	movs	r3, #120	; 0x78
 80050aa:	4828      	ldr	r0, [pc, #160]	; (800514c <_printf_i+0x248>)
 80050ac:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80050b0:	e7e3      	b.n	800507a <_printf_i+0x176>
 80050b2:	065e      	lsls	r6, r3, #25
 80050b4:	bf48      	it	mi
 80050b6:	b2ad      	uxthmi	r5, r5
 80050b8:	e7e6      	b.n	8005088 <_printf_i+0x184>
 80050ba:	4616      	mov	r6, r2
 80050bc:	e7bb      	b.n	8005036 <_printf_i+0x132>
 80050be:	680b      	ldr	r3, [r1, #0]
 80050c0:	6826      	ldr	r6, [r4, #0]
 80050c2:	1d1d      	adds	r5, r3, #4
 80050c4:	6960      	ldr	r0, [r4, #20]
 80050c6:	600d      	str	r5, [r1, #0]
 80050c8:	0635      	lsls	r5, r6, #24
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	d501      	bpl.n	80050d2 <_printf_i+0x1ce>
 80050ce:	6018      	str	r0, [r3, #0]
 80050d0:	e002      	b.n	80050d8 <_printf_i+0x1d4>
 80050d2:	0671      	lsls	r1, r6, #25
 80050d4:	d5fb      	bpl.n	80050ce <_printf_i+0x1ca>
 80050d6:	8018      	strh	r0, [r3, #0]
 80050d8:	2300      	movs	r3, #0
 80050da:	4616      	mov	r6, r2
 80050dc:	6123      	str	r3, [r4, #16]
 80050de:	e7ba      	b.n	8005056 <_printf_i+0x152>
 80050e0:	680b      	ldr	r3, [r1, #0]
 80050e2:	1d1a      	adds	r2, r3, #4
 80050e4:	600a      	str	r2, [r1, #0]
 80050e6:	681e      	ldr	r6, [r3, #0]
 80050e8:	2100      	movs	r1, #0
 80050ea:	4630      	mov	r0, r6
 80050ec:	6862      	ldr	r2, [r4, #4]
 80050ee:	f000 fed9 	bl	8005ea4 <memchr>
 80050f2:	b108      	cbz	r0, 80050f8 <_printf_i+0x1f4>
 80050f4:	1b80      	subs	r0, r0, r6
 80050f6:	6060      	str	r0, [r4, #4]
 80050f8:	6863      	ldr	r3, [r4, #4]
 80050fa:	6123      	str	r3, [r4, #16]
 80050fc:	2300      	movs	r3, #0
 80050fe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005102:	e7a8      	b.n	8005056 <_printf_i+0x152>
 8005104:	4632      	mov	r2, r6
 8005106:	4649      	mov	r1, r9
 8005108:	4640      	mov	r0, r8
 800510a:	6923      	ldr	r3, [r4, #16]
 800510c:	47d0      	blx	sl
 800510e:	3001      	adds	r0, #1
 8005110:	d0ab      	beq.n	800506a <_printf_i+0x166>
 8005112:	6823      	ldr	r3, [r4, #0]
 8005114:	079b      	lsls	r3, r3, #30
 8005116:	d413      	bmi.n	8005140 <_printf_i+0x23c>
 8005118:	68e0      	ldr	r0, [r4, #12]
 800511a:	9b03      	ldr	r3, [sp, #12]
 800511c:	4298      	cmp	r0, r3
 800511e:	bfb8      	it	lt
 8005120:	4618      	movlt	r0, r3
 8005122:	e7a4      	b.n	800506e <_printf_i+0x16a>
 8005124:	2301      	movs	r3, #1
 8005126:	4632      	mov	r2, r6
 8005128:	4649      	mov	r1, r9
 800512a:	4640      	mov	r0, r8
 800512c:	47d0      	blx	sl
 800512e:	3001      	adds	r0, #1
 8005130:	d09b      	beq.n	800506a <_printf_i+0x166>
 8005132:	3501      	adds	r5, #1
 8005134:	68e3      	ldr	r3, [r4, #12]
 8005136:	9903      	ldr	r1, [sp, #12]
 8005138:	1a5b      	subs	r3, r3, r1
 800513a:	42ab      	cmp	r3, r5
 800513c:	dcf2      	bgt.n	8005124 <_printf_i+0x220>
 800513e:	e7eb      	b.n	8005118 <_printf_i+0x214>
 8005140:	2500      	movs	r5, #0
 8005142:	f104 0619 	add.w	r6, r4, #25
 8005146:	e7f5      	b.n	8005134 <_printf_i+0x230>
 8005148:	08007dae 	.word	0x08007dae
 800514c:	08007dbf 	.word	0x08007dbf

08005150 <siprintf>:
 8005150:	b40e      	push	{r1, r2, r3}
 8005152:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005156:	b500      	push	{lr}
 8005158:	b09c      	sub	sp, #112	; 0x70
 800515a:	ab1d      	add	r3, sp, #116	; 0x74
 800515c:	9002      	str	r0, [sp, #8]
 800515e:	9006      	str	r0, [sp, #24]
 8005160:	9107      	str	r1, [sp, #28]
 8005162:	9104      	str	r1, [sp, #16]
 8005164:	4808      	ldr	r0, [pc, #32]	; (8005188 <siprintf+0x38>)
 8005166:	4909      	ldr	r1, [pc, #36]	; (800518c <siprintf+0x3c>)
 8005168:	f853 2b04 	ldr.w	r2, [r3], #4
 800516c:	9105      	str	r1, [sp, #20]
 800516e:	6800      	ldr	r0, [r0, #0]
 8005170:	a902      	add	r1, sp, #8
 8005172:	9301      	str	r3, [sp, #4]
 8005174:	f001 fb44 	bl	8006800 <_svfiprintf_r>
 8005178:	2200      	movs	r2, #0
 800517a:	9b02      	ldr	r3, [sp, #8]
 800517c:	701a      	strb	r2, [r3, #0]
 800517e:	b01c      	add	sp, #112	; 0x70
 8005180:	f85d eb04 	ldr.w	lr, [sp], #4
 8005184:	b003      	add	sp, #12
 8005186:	4770      	bx	lr
 8005188:	20000014 	.word	0x20000014
 800518c:	ffff0208 	.word	0xffff0208

08005190 <quorem>:
 8005190:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005194:	6903      	ldr	r3, [r0, #16]
 8005196:	690c      	ldr	r4, [r1, #16]
 8005198:	4607      	mov	r7, r0
 800519a:	42a3      	cmp	r3, r4
 800519c:	f2c0 8083 	blt.w	80052a6 <quorem+0x116>
 80051a0:	3c01      	subs	r4, #1
 80051a2:	f100 0514 	add.w	r5, r0, #20
 80051a6:	f101 0814 	add.w	r8, r1, #20
 80051aa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80051ae:	9301      	str	r3, [sp, #4]
 80051b0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80051b4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80051b8:	3301      	adds	r3, #1
 80051ba:	429a      	cmp	r2, r3
 80051bc:	fbb2 f6f3 	udiv	r6, r2, r3
 80051c0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80051c4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80051c8:	d332      	bcc.n	8005230 <quorem+0xa0>
 80051ca:	f04f 0e00 	mov.w	lr, #0
 80051ce:	4640      	mov	r0, r8
 80051d0:	46ac      	mov	ip, r5
 80051d2:	46f2      	mov	sl, lr
 80051d4:	f850 2b04 	ldr.w	r2, [r0], #4
 80051d8:	b293      	uxth	r3, r2
 80051da:	fb06 e303 	mla	r3, r6, r3, lr
 80051de:	0c12      	lsrs	r2, r2, #16
 80051e0:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80051e4:	fb06 e202 	mla	r2, r6, r2, lr
 80051e8:	b29b      	uxth	r3, r3
 80051ea:	ebaa 0303 	sub.w	r3, sl, r3
 80051ee:	f8dc a000 	ldr.w	sl, [ip]
 80051f2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80051f6:	fa1f fa8a 	uxth.w	sl, sl
 80051fa:	4453      	add	r3, sl
 80051fc:	fa1f fa82 	uxth.w	sl, r2
 8005200:	f8dc 2000 	ldr.w	r2, [ip]
 8005204:	4581      	cmp	r9, r0
 8005206:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800520a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800520e:	b29b      	uxth	r3, r3
 8005210:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005214:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8005218:	f84c 3b04 	str.w	r3, [ip], #4
 800521c:	d2da      	bcs.n	80051d4 <quorem+0x44>
 800521e:	f855 300b 	ldr.w	r3, [r5, fp]
 8005222:	b92b      	cbnz	r3, 8005230 <quorem+0xa0>
 8005224:	9b01      	ldr	r3, [sp, #4]
 8005226:	3b04      	subs	r3, #4
 8005228:	429d      	cmp	r5, r3
 800522a:	461a      	mov	r2, r3
 800522c:	d32f      	bcc.n	800528e <quorem+0xfe>
 800522e:	613c      	str	r4, [r7, #16]
 8005230:	4638      	mov	r0, r7
 8005232:	f001 f8cd 	bl	80063d0 <__mcmp>
 8005236:	2800      	cmp	r0, #0
 8005238:	db25      	blt.n	8005286 <quorem+0xf6>
 800523a:	4628      	mov	r0, r5
 800523c:	f04f 0c00 	mov.w	ip, #0
 8005240:	3601      	adds	r6, #1
 8005242:	f858 1b04 	ldr.w	r1, [r8], #4
 8005246:	f8d0 e000 	ldr.w	lr, [r0]
 800524a:	b28b      	uxth	r3, r1
 800524c:	ebac 0303 	sub.w	r3, ip, r3
 8005250:	fa1f f28e 	uxth.w	r2, lr
 8005254:	4413      	add	r3, r2
 8005256:	0c0a      	lsrs	r2, r1, #16
 8005258:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800525c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005260:	b29b      	uxth	r3, r3
 8005262:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005266:	45c1      	cmp	r9, r8
 8005268:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800526c:	f840 3b04 	str.w	r3, [r0], #4
 8005270:	d2e7      	bcs.n	8005242 <quorem+0xb2>
 8005272:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005276:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800527a:	b922      	cbnz	r2, 8005286 <quorem+0xf6>
 800527c:	3b04      	subs	r3, #4
 800527e:	429d      	cmp	r5, r3
 8005280:	461a      	mov	r2, r3
 8005282:	d30a      	bcc.n	800529a <quorem+0x10a>
 8005284:	613c      	str	r4, [r7, #16]
 8005286:	4630      	mov	r0, r6
 8005288:	b003      	add	sp, #12
 800528a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800528e:	6812      	ldr	r2, [r2, #0]
 8005290:	3b04      	subs	r3, #4
 8005292:	2a00      	cmp	r2, #0
 8005294:	d1cb      	bne.n	800522e <quorem+0x9e>
 8005296:	3c01      	subs	r4, #1
 8005298:	e7c6      	b.n	8005228 <quorem+0x98>
 800529a:	6812      	ldr	r2, [r2, #0]
 800529c:	3b04      	subs	r3, #4
 800529e:	2a00      	cmp	r2, #0
 80052a0:	d1f0      	bne.n	8005284 <quorem+0xf4>
 80052a2:	3c01      	subs	r4, #1
 80052a4:	e7eb      	b.n	800527e <quorem+0xee>
 80052a6:	2000      	movs	r0, #0
 80052a8:	e7ee      	b.n	8005288 <quorem+0xf8>
 80052aa:	0000      	movs	r0, r0
 80052ac:	0000      	movs	r0, r0
	...

080052b0 <_dtoa_r>:
 80052b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80052b4:	4616      	mov	r6, r2
 80052b6:	461f      	mov	r7, r3
 80052b8:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80052ba:	b099      	sub	sp, #100	; 0x64
 80052bc:	4605      	mov	r5, r0
 80052be:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80052c2:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 80052c6:	b974      	cbnz	r4, 80052e6 <_dtoa_r+0x36>
 80052c8:	2010      	movs	r0, #16
 80052ca:	f000 fde3 	bl	8005e94 <malloc>
 80052ce:	4602      	mov	r2, r0
 80052d0:	6268      	str	r0, [r5, #36]	; 0x24
 80052d2:	b920      	cbnz	r0, 80052de <_dtoa_r+0x2e>
 80052d4:	21ea      	movs	r1, #234	; 0xea
 80052d6:	4bae      	ldr	r3, [pc, #696]	; (8005590 <_dtoa_r+0x2e0>)
 80052d8:	48ae      	ldr	r0, [pc, #696]	; (8005594 <_dtoa_r+0x2e4>)
 80052da:	f001 fba1 	bl	8006a20 <__assert_func>
 80052de:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80052e2:	6004      	str	r4, [r0, #0]
 80052e4:	60c4      	str	r4, [r0, #12]
 80052e6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80052e8:	6819      	ldr	r1, [r3, #0]
 80052ea:	b151      	cbz	r1, 8005302 <_dtoa_r+0x52>
 80052ec:	685a      	ldr	r2, [r3, #4]
 80052ee:	2301      	movs	r3, #1
 80052f0:	4093      	lsls	r3, r2
 80052f2:	604a      	str	r2, [r1, #4]
 80052f4:	608b      	str	r3, [r1, #8]
 80052f6:	4628      	mov	r0, r5
 80052f8:	f000 fe30 	bl	8005f5c <_Bfree>
 80052fc:	2200      	movs	r2, #0
 80052fe:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005300:	601a      	str	r2, [r3, #0]
 8005302:	1e3b      	subs	r3, r7, #0
 8005304:	bfaf      	iteee	ge
 8005306:	2300      	movge	r3, #0
 8005308:	2201      	movlt	r2, #1
 800530a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800530e:	9305      	strlt	r3, [sp, #20]
 8005310:	bfa8      	it	ge
 8005312:	f8c8 3000 	strge.w	r3, [r8]
 8005316:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800531a:	4b9f      	ldr	r3, [pc, #636]	; (8005598 <_dtoa_r+0x2e8>)
 800531c:	bfb8      	it	lt
 800531e:	f8c8 2000 	strlt.w	r2, [r8]
 8005322:	ea33 0309 	bics.w	r3, r3, r9
 8005326:	d119      	bne.n	800535c <_dtoa_r+0xac>
 8005328:	f242 730f 	movw	r3, #9999	; 0x270f
 800532c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800532e:	6013      	str	r3, [r2, #0]
 8005330:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005334:	4333      	orrs	r3, r6
 8005336:	f000 8580 	beq.w	8005e3a <_dtoa_r+0xb8a>
 800533a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800533c:	b953      	cbnz	r3, 8005354 <_dtoa_r+0xa4>
 800533e:	4b97      	ldr	r3, [pc, #604]	; (800559c <_dtoa_r+0x2ec>)
 8005340:	e022      	b.n	8005388 <_dtoa_r+0xd8>
 8005342:	4b97      	ldr	r3, [pc, #604]	; (80055a0 <_dtoa_r+0x2f0>)
 8005344:	9308      	str	r3, [sp, #32]
 8005346:	3308      	adds	r3, #8
 8005348:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800534a:	6013      	str	r3, [r2, #0]
 800534c:	9808      	ldr	r0, [sp, #32]
 800534e:	b019      	add	sp, #100	; 0x64
 8005350:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005354:	4b91      	ldr	r3, [pc, #580]	; (800559c <_dtoa_r+0x2ec>)
 8005356:	9308      	str	r3, [sp, #32]
 8005358:	3303      	adds	r3, #3
 800535a:	e7f5      	b.n	8005348 <_dtoa_r+0x98>
 800535c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8005360:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8005364:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005368:	2200      	movs	r2, #0
 800536a:	2300      	movs	r3, #0
 800536c:	f7fb fb1c 	bl	80009a8 <__aeabi_dcmpeq>
 8005370:	4680      	mov	r8, r0
 8005372:	b158      	cbz	r0, 800538c <_dtoa_r+0xdc>
 8005374:	2301      	movs	r3, #1
 8005376:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8005378:	6013      	str	r3, [r2, #0]
 800537a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800537c:	2b00      	cmp	r3, #0
 800537e:	f000 8559 	beq.w	8005e34 <_dtoa_r+0xb84>
 8005382:	4888      	ldr	r0, [pc, #544]	; (80055a4 <_dtoa_r+0x2f4>)
 8005384:	6018      	str	r0, [r3, #0]
 8005386:	1e43      	subs	r3, r0, #1
 8005388:	9308      	str	r3, [sp, #32]
 800538a:	e7df      	b.n	800534c <_dtoa_r+0x9c>
 800538c:	ab16      	add	r3, sp, #88	; 0x58
 800538e:	9301      	str	r3, [sp, #4]
 8005390:	ab17      	add	r3, sp, #92	; 0x5c
 8005392:	9300      	str	r3, [sp, #0]
 8005394:	4628      	mov	r0, r5
 8005396:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800539a:	f001 f8c5 	bl	8006528 <__d2b>
 800539e:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80053a2:	4682      	mov	sl, r0
 80053a4:	2c00      	cmp	r4, #0
 80053a6:	d07e      	beq.n	80054a6 <_dtoa_r+0x1f6>
 80053a8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80053ac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80053ae:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 80053b2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80053b6:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 80053ba:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 80053be:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 80053c2:	2200      	movs	r2, #0
 80053c4:	4b78      	ldr	r3, [pc, #480]	; (80055a8 <_dtoa_r+0x2f8>)
 80053c6:	f7fa fecf 	bl	8000168 <__aeabi_dsub>
 80053ca:	a36b      	add	r3, pc, #428	; (adr r3, 8005578 <_dtoa_r+0x2c8>)
 80053cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053d0:	f7fb f882 	bl	80004d8 <__aeabi_dmul>
 80053d4:	a36a      	add	r3, pc, #424	; (adr r3, 8005580 <_dtoa_r+0x2d0>)
 80053d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053da:	f7fa fec7 	bl	800016c <__adddf3>
 80053de:	4606      	mov	r6, r0
 80053e0:	4620      	mov	r0, r4
 80053e2:	460f      	mov	r7, r1
 80053e4:	f7fb f80e 	bl	8000404 <__aeabi_i2d>
 80053e8:	a367      	add	r3, pc, #412	; (adr r3, 8005588 <_dtoa_r+0x2d8>)
 80053ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053ee:	f7fb f873 	bl	80004d8 <__aeabi_dmul>
 80053f2:	4602      	mov	r2, r0
 80053f4:	460b      	mov	r3, r1
 80053f6:	4630      	mov	r0, r6
 80053f8:	4639      	mov	r1, r7
 80053fa:	f7fa feb7 	bl	800016c <__adddf3>
 80053fe:	4606      	mov	r6, r0
 8005400:	460f      	mov	r7, r1
 8005402:	f7fb fb19 	bl	8000a38 <__aeabi_d2iz>
 8005406:	2200      	movs	r2, #0
 8005408:	4681      	mov	r9, r0
 800540a:	2300      	movs	r3, #0
 800540c:	4630      	mov	r0, r6
 800540e:	4639      	mov	r1, r7
 8005410:	f7fb fad4 	bl	80009bc <__aeabi_dcmplt>
 8005414:	b148      	cbz	r0, 800542a <_dtoa_r+0x17a>
 8005416:	4648      	mov	r0, r9
 8005418:	f7fa fff4 	bl	8000404 <__aeabi_i2d>
 800541c:	4632      	mov	r2, r6
 800541e:	463b      	mov	r3, r7
 8005420:	f7fb fac2 	bl	80009a8 <__aeabi_dcmpeq>
 8005424:	b908      	cbnz	r0, 800542a <_dtoa_r+0x17a>
 8005426:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 800542a:	f1b9 0f16 	cmp.w	r9, #22
 800542e:	d857      	bhi.n	80054e0 <_dtoa_r+0x230>
 8005430:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005434:	4b5d      	ldr	r3, [pc, #372]	; (80055ac <_dtoa_r+0x2fc>)
 8005436:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800543a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800543e:	f7fb fabd 	bl	80009bc <__aeabi_dcmplt>
 8005442:	2800      	cmp	r0, #0
 8005444:	d04e      	beq.n	80054e4 <_dtoa_r+0x234>
 8005446:	2300      	movs	r3, #0
 8005448:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 800544c:	930f      	str	r3, [sp, #60]	; 0x3c
 800544e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8005450:	1b1c      	subs	r4, r3, r4
 8005452:	1e63      	subs	r3, r4, #1
 8005454:	9309      	str	r3, [sp, #36]	; 0x24
 8005456:	bf49      	itett	mi
 8005458:	f1c4 0301 	rsbmi	r3, r4, #1
 800545c:	2300      	movpl	r3, #0
 800545e:	9306      	strmi	r3, [sp, #24]
 8005460:	2300      	movmi	r3, #0
 8005462:	bf54      	ite	pl
 8005464:	9306      	strpl	r3, [sp, #24]
 8005466:	9309      	strmi	r3, [sp, #36]	; 0x24
 8005468:	f1b9 0f00 	cmp.w	r9, #0
 800546c:	db3c      	blt.n	80054e8 <_dtoa_r+0x238>
 800546e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005470:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8005474:	444b      	add	r3, r9
 8005476:	9309      	str	r3, [sp, #36]	; 0x24
 8005478:	2300      	movs	r3, #0
 800547a:	930a      	str	r3, [sp, #40]	; 0x28
 800547c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800547e:	2b09      	cmp	r3, #9
 8005480:	d86c      	bhi.n	800555c <_dtoa_r+0x2ac>
 8005482:	2b05      	cmp	r3, #5
 8005484:	bfc4      	itt	gt
 8005486:	3b04      	subgt	r3, #4
 8005488:	9322      	strgt	r3, [sp, #136]	; 0x88
 800548a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800548c:	bfc8      	it	gt
 800548e:	2400      	movgt	r4, #0
 8005490:	f1a3 0302 	sub.w	r3, r3, #2
 8005494:	bfd8      	it	le
 8005496:	2401      	movle	r4, #1
 8005498:	2b03      	cmp	r3, #3
 800549a:	f200 808b 	bhi.w	80055b4 <_dtoa_r+0x304>
 800549e:	e8df f003 	tbb	[pc, r3]
 80054a2:	4f2d      	.short	0x4f2d
 80054a4:	5b4d      	.short	0x5b4d
 80054a6:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 80054aa:	441c      	add	r4, r3
 80054ac:	f204 4332 	addw	r3, r4, #1074	; 0x432
 80054b0:	2b20      	cmp	r3, #32
 80054b2:	bfc3      	ittte	gt
 80054b4:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80054b8:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 80054bc:	fa09 f303 	lslgt.w	r3, r9, r3
 80054c0:	f1c3 0320 	rsble	r3, r3, #32
 80054c4:	bfc6      	itte	gt
 80054c6:	fa26 f000 	lsrgt.w	r0, r6, r0
 80054ca:	4318      	orrgt	r0, r3
 80054cc:	fa06 f003 	lslle.w	r0, r6, r3
 80054d0:	f7fa ff88 	bl	80003e4 <__aeabi_ui2d>
 80054d4:	2301      	movs	r3, #1
 80054d6:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 80054da:	3c01      	subs	r4, #1
 80054dc:	9313      	str	r3, [sp, #76]	; 0x4c
 80054de:	e770      	b.n	80053c2 <_dtoa_r+0x112>
 80054e0:	2301      	movs	r3, #1
 80054e2:	e7b3      	b.n	800544c <_dtoa_r+0x19c>
 80054e4:	900f      	str	r0, [sp, #60]	; 0x3c
 80054e6:	e7b2      	b.n	800544e <_dtoa_r+0x19e>
 80054e8:	9b06      	ldr	r3, [sp, #24]
 80054ea:	eba3 0309 	sub.w	r3, r3, r9
 80054ee:	9306      	str	r3, [sp, #24]
 80054f0:	f1c9 0300 	rsb	r3, r9, #0
 80054f4:	930a      	str	r3, [sp, #40]	; 0x28
 80054f6:	2300      	movs	r3, #0
 80054f8:	930e      	str	r3, [sp, #56]	; 0x38
 80054fa:	e7bf      	b.n	800547c <_dtoa_r+0x1cc>
 80054fc:	2300      	movs	r3, #0
 80054fe:	930b      	str	r3, [sp, #44]	; 0x2c
 8005500:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005502:	2b00      	cmp	r3, #0
 8005504:	dc59      	bgt.n	80055ba <_dtoa_r+0x30a>
 8005506:	f04f 0b01 	mov.w	fp, #1
 800550a:	465b      	mov	r3, fp
 800550c:	f8cd b008 	str.w	fp, [sp, #8]
 8005510:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 8005514:	2200      	movs	r2, #0
 8005516:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8005518:	6042      	str	r2, [r0, #4]
 800551a:	2204      	movs	r2, #4
 800551c:	f102 0614 	add.w	r6, r2, #20
 8005520:	429e      	cmp	r6, r3
 8005522:	6841      	ldr	r1, [r0, #4]
 8005524:	d94f      	bls.n	80055c6 <_dtoa_r+0x316>
 8005526:	4628      	mov	r0, r5
 8005528:	f000 fcd8 	bl	8005edc <_Balloc>
 800552c:	9008      	str	r0, [sp, #32]
 800552e:	2800      	cmp	r0, #0
 8005530:	d14d      	bne.n	80055ce <_dtoa_r+0x31e>
 8005532:	4602      	mov	r2, r0
 8005534:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8005538:	4b1d      	ldr	r3, [pc, #116]	; (80055b0 <_dtoa_r+0x300>)
 800553a:	e6cd      	b.n	80052d8 <_dtoa_r+0x28>
 800553c:	2301      	movs	r3, #1
 800553e:	e7de      	b.n	80054fe <_dtoa_r+0x24e>
 8005540:	2300      	movs	r3, #0
 8005542:	930b      	str	r3, [sp, #44]	; 0x2c
 8005544:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005546:	eb09 0b03 	add.w	fp, r9, r3
 800554a:	f10b 0301 	add.w	r3, fp, #1
 800554e:	2b01      	cmp	r3, #1
 8005550:	9302      	str	r3, [sp, #8]
 8005552:	bfb8      	it	lt
 8005554:	2301      	movlt	r3, #1
 8005556:	e7dd      	b.n	8005514 <_dtoa_r+0x264>
 8005558:	2301      	movs	r3, #1
 800555a:	e7f2      	b.n	8005542 <_dtoa_r+0x292>
 800555c:	2401      	movs	r4, #1
 800555e:	2300      	movs	r3, #0
 8005560:	940b      	str	r4, [sp, #44]	; 0x2c
 8005562:	9322      	str	r3, [sp, #136]	; 0x88
 8005564:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 8005568:	2200      	movs	r2, #0
 800556a:	2312      	movs	r3, #18
 800556c:	f8cd b008 	str.w	fp, [sp, #8]
 8005570:	9223      	str	r2, [sp, #140]	; 0x8c
 8005572:	e7cf      	b.n	8005514 <_dtoa_r+0x264>
 8005574:	f3af 8000 	nop.w
 8005578:	636f4361 	.word	0x636f4361
 800557c:	3fd287a7 	.word	0x3fd287a7
 8005580:	8b60c8b3 	.word	0x8b60c8b3
 8005584:	3fc68a28 	.word	0x3fc68a28
 8005588:	509f79fb 	.word	0x509f79fb
 800558c:	3fd34413 	.word	0x3fd34413
 8005590:	08007ddd 	.word	0x08007ddd
 8005594:	08007df4 	.word	0x08007df4
 8005598:	7ff00000 	.word	0x7ff00000
 800559c:	08007dd9 	.word	0x08007dd9
 80055a0:	08007dd0 	.word	0x08007dd0
 80055a4:	08007dad 	.word	0x08007dad
 80055a8:	3ff80000 	.word	0x3ff80000
 80055ac:	08007ef0 	.word	0x08007ef0
 80055b0:	08007e53 	.word	0x08007e53
 80055b4:	2301      	movs	r3, #1
 80055b6:	930b      	str	r3, [sp, #44]	; 0x2c
 80055b8:	e7d4      	b.n	8005564 <_dtoa_r+0x2b4>
 80055ba:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 80055be:	465b      	mov	r3, fp
 80055c0:	f8cd b008 	str.w	fp, [sp, #8]
 80055c4:	e7a6      	b.n	8005514 <_dtoa_r+0x264>
 80055c6:	3101      	adds	r1, #1
 80055c8:	6041      	str	r1, [r0, #4]
 80055ca:	0052      	lsls	r2, r2, #1
 80055cc:	e7a6      	b.n	800551c <_dtoa_r+0x26c>
 80055ce:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80055d0:	9a08      	ldr	r2, [sp, #32]
 80055d2:	601a      	str	r2, [r3, #0]
 80055d4:	9b02      	ldr	r3, [sp, #8]
 80055d6:	2b0e      	cmp	r3, #14
 80055d8:	f200 80a8 	bhi.w	800572c <_dtoa_r+0x47c>
 80055dc:	2c00      	cmp	r4, #0
 80055de:	f000 80a5 	beq.w	800572c <_dtoa_r+0x47c>
 80055e2:	f1b9 0f00 	cmp.w	r9, #0
 80055e6:	dd34      	ble.n	8005652 <_dtoa_r+0x3a2>
 80055e8:	4a9a      	ldr	r2, [pc, #616]	; (8005854 <_dtoa_r+0x5a4>)
 80055ea:	f009 030f 	and.w	r3, r9, #15
 80055ee:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80055f2:	f419 7f80 	tst.w	r9, #256	; 0x100
 80055f6:	e9d3 3400 	ldrd	r3, r4, [r3]
 80055fa:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80055fe:	ea4f 1429 	mov.w	r4, r9, asr #4
 8005602:	d016      	beq.n	8005632 <_dtoa_r+0x382>
 8005604:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005608:	4b93      	ldr	r3, [pc, #588]	; (8005858 <_dtoa_r+0x5a8>)
 800560a:	2703      	movs	r7, #3
 800560c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005610:	f7fb f88c 	bl	800072c <__aeabi_ddiv>
 8005614:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005618:	f004 040f 	and.w	r4, r4, #15
 800561c:	4e8e      	ldr	r6, [pc, #568]	; (8005858 <_dtoa_r+0x5a8>)
 800561e:	b954      	cbnz	r4, 8005636 <_dtoa_r+0x386>
 8005620:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005624:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005628:	f7fb f880 	bl	800072c <__aeabi_ddiv>
 800562c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005630:	e029      	b.n	8005686 <_dtoa_r+0x3d6>
 8005632:	2702      	movs	r7, #2
 8005634:	e7f2      	b.n	800561c <_dtoa_r+0x36c>
 8005636:	07e1      	lsls	r1, r4, #31
 8005638:	d508      	bpl.n	800564c <_dtoa_r+0x39c>
 800563a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800563e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005642:	f7fa ff49 	bl	80004d8 <__aeabi_dmul>
 8005646:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800564a:	3701      	adds	r7, #1
 800564c:	1064      	asrs	r4, r4, #1
 800564e:	3608      	adds	r6, #8
 8005650:	e7e5      	b.n	800561e <_dtoa_r+0x36e>
 8005652:	f000 80a5 	beq.w	80057a0 <_dtoa_r+0x4f0>
 8005656:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800565a:	f1c9 0400 	rsb	r4, r9, #0
 800565e:	4b7d      	ldr	r3, [pc, #500]	; (8005854 <_dtoa_r+0x5a4>)
 8005660:	f004 020f 	and.w	r2, r4, #15
 8005664:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005668:	e9d3 2300 	ldrd	r2, r3, [r3]
 800566c:	f7fa ff34 	bl	80004d8 <__aeabi_dmul>
 8005670:	2702      	movs	r7, #2
 8005672:	2300      	movs	r3, #0
 8005674:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005678:	4e77      	ldr	r6, [pc, #476]	; (8005858 <_dtoa_r+0x5a8>)
 800567a:	1124      	asrs	r4, r4, #4
 800567c:	2c00      	cmp	r4, #0
 800567e:	f040 8084 	bne.w	800578a <_dtoa_r+0x4da>
 8005682:	2b00      	cmp	r3, #0
 8005684:	d1d2      	bne.n	800562c <_dtoa_r+0x37c>
 8005686:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005688:	2b00      	cmp	r3, #0
 800568a:	f000 808b 	beq.w	80057a4 <_dtoa_r+0x4f4>
 800568e:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8005692:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8005696:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800569a:	2200      	movs	r2, #0
 800569c:	4b6f      	ldr	r3, [pc, #444]	; (800585c <_dtoa_r+0x5ac>)
 800569e:	f7fb f98d 	bl	80009bc <__aeabi_dcmplt>
 80056a2:	2800      	cmp	r0, #0
 80056a4:	d07e      	beq.n	80057a4 <_dtoa_r+0x4f4>
 80056a6:	9b02      	ldr	r3, [sp, #8]
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d07b      	beq.n	80057a4 <_dtoa_r+0x4f4>
 80056ac:	f1bb 0f00 	cmp.w	fp, #0
 80056b0:	dd38      	ble.n	8005724 <_dtoa_r+0x474>
 80056b2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80056b6:	2200      	movs	r2, #0
 80056b8:	4b69      	ldr	r3, [pc, #420]	; (8005860 <_dtoa_r+0x5b0>)
 80056ba:	f7fa ff0d 	bl	80004d8 <__aeabi_dmul>
 80056be:	465c      	mov	r4, fp
 80056c0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80056c4:	f109 38ff 	add.w	r8, r9, #4294967295	; 0xffffffff
 80056c8:	3701      	adds	r7, #1
 80056ca:	4638      	mov	r0, r7
 80056cc:	f7fa fe9a 	bl	8000404 <__aeabi_i2d>
 80056d0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80056d4:	f7fa ff00 	bl	80004d8 <__aeabi_dmul>
 80056d8:	2200      	movs	r2, #0
 80056da:	4b62      	ldr	r3, [pc, #392]	; (8005864 <_dtoa_r+0x5b4>)
 80056dc:	f7fa fd46 	bl	800016c <__adddf3>
 80056e0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80056e4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80056e8:	9611      	str	r6, [sp, #68]	; 0x44
 80056ea:	2c00      	cmp	r4, #0
 80056ec:	d15d      	bne.n	80057aa <_dtoa_r+0x4fa>
 80056ee:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80056f2:	2200      	movs	r2, #0
 80056f4:	4b5c      	ldr	r3, [pc, #368]	; (8005868 <_dtoa_r+0x5b8>)
 80056f6:	f7fa fd37 	bl	8000168 <__aeabi_dsub>
 80056fa:	4602      	mov	r2, r0
 80056fc:	460b      	mov	r3, r1
 80056fe:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005702:	4633      	mov	r3, r6
 8005704:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005706:	f7fb f977 	bl	80009f8 <__aeabi_dcmpgt>
 800570a:	2800      	cmp	r0, #0
 800570c:	f040 829e 	bne.w	8005c4c <_dtoa_r+0x99c>
 8005710:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005714:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005716:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800571a:	f7fb f94f 	bl	80009bc <__aeabi_dcmplt>
 800571e:	2800      	cmp	r0, #0
 8005720:	f040 8292 	bne.w	8005c48 <_dtoa_r+0x998>
 8005724:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8005728:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800572c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800572e:	2b00      	cmp	r3, #0
 8005730:	f2c0 8153 	blt.w	80059da <_dtoa_r+0x72a>
 8005734:	f1b9 0f0e 	cmp.w	r9, #14
 8005738:	f300 814f 	bgt.w	80059da <_dtoa_r+0x72a>
 800573c:	4b45      	ldr	r3, [pc, #276]	; (8005854 <_dtoa_r+0x5a4>)
 800573e:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8005742:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005746:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800574a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800574c:	2b00      	cmp	r3, #0
 800574e:	f280 80db 	bge.w	8005908 <_dtoa_r+0x658>
 8005752:	9b02      	ldr	r3, [sp, #8]
 8005754:	2b00      	cmp	r3, #0
 8005756:	f300 80d7 	bgt.w	8005908 <_dtoa_r+0x658>
 800575a:	f040 8274 	bne.w	8005c46 <_dtoa_r+0x996>
 800575e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005762:	2200      	movs	r2, #0
 8005764:	4b40      	ldr	r3, [pc, #256]	; (8005868 <_dtoa_r+0x5b8>)
 8005766:	f7fa feb7 	bl	80004d8 <__aeabi_dmul>
 800576a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800576e:	f7fb f939 	bl	80009e4 <__aeabi_dcmpge>
 8005772:	9c02      	ldr	r4, [sp, #8]
 8005774:	4626      	mov	r6, r4
 8005776:	2800      	cmp	r0, #0
 8005778:	f040 824a 	bne.w	8005c10 <_dtoa_r+0x960>
 800577c:	2331      	movs	r3, #49	; 0x31
 800577e:	9f08      	ldr	r7, [sp, #32]
 8005780:	f109 0901 	add.w	r9, r9, #1
 8005784:	f807 3b01 	strb.w	r3, [r7], #1
 8005788:	e246      	b.n	8005c18 <_dtoa_r+0x968>
 800578a:	07e2      	lsls	r2, r4, #31
 800578c:	d505      	bpl.n	800579a <_dtoa_r+0x4ea>
 800578e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005792:	f7fa fea1 	bl	80004d8 <__aeabi_dmul>
 8005796:	2301      	movs	r3, #1
 8005798:	3701      	adds	r7, #1
 800579a:	1064      	asrs	r4, r4, #1
 800579c:	3608      	adds	r6, #8
 800579e:	e76d      	b.n	800567c <_dtoa_r+0x3cc>
 80057a0:	2702      	movs	r7, #2
 80057a2:	e770      	b.n	8005686 <_dtoa_r+0x3d6>
 80057a4:	46c8      	mov	r8, r9
 80057a6:	9c02      	ldr	r4, [sp, #8]
 80057a8:	e78f      	b.n	80056ca <_dtoa_r+0x41a>
 80057aa:	9908      	ldr	r1, [sp, #32]
 80057ac:	4b29      	ldr	r3, [pc, #164]	; (8005854 <_dtoa_r+0x5a4>)
 80057ae:	4421      	add	r1, r4
 80057b0:	9112      	str	r1, [sp, #72]	; 0x48
 80057b2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80057b4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80057b8:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 80057bc:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80057c0:	2900      	cmp	r1, #0
 80057c2:	d055      	beq.n	8005870 <_dtoa_r+0x5c0>
 80057c4:	2000      	movs	r0, #0
 80057c6:	4929      	ldr	r1, [pc, #164]	; (800586c <_dtoa_r+0x5bc>)
 80057c8:	f7fa ffb0 	bl	800072c <__aeabi_ddiv>
 80057cc:	463b      	mov	r3, r7
 80057ce:	4632      	mov	r2, r6
 80057d0:	f7fa fcca 	bl	8000168 <__aeabi_dsub>
 80057d4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80057d8:	9f08      	ldr	r7, [sp, #32]
 80057da:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80057de:	f7fb f92b 	bl	8000a38 <__aeabi_d2iz>
 80057e2:	4604      	mov	r4, r0
 80057e4:	f7fa fe0e 	bl	8000404 <__aeabi_i2d>
 80057e8:	4602      	mov	r2, r0
 80057ea:	460b      	mov	r3, r1
 80057ec:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80057f0:	f7fa fcba 	bl	8000168 <__aeabi_dsub>
 80057f4:	4602      	mov	r2, r0
 80057f6:	460b      	mov	r3, r1
 80057f8:	3430      	adds	r4, #48	; 0x30
 80057fa:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80057fe:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005802:	f807 4b01 	strb.w	r4, [r7], #1
 8005806:	f7fb f8d9 	bl	80009bc <__aeabi_dcmplt>
 800580a:	2800      	cmp	r0, #0
 800580c:	d174      	bne.n	80058f8 <_dtoa_r+0x648>
 800580e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005812:	2000      	movs	r0, #0
 8005814:	4911      	ldr	r1, [pc, #68]	; (800585c <_dtoa_r+0x5ac>)
 8005816:	f7fa fca7 	bl	8000168 <__aeabi_dsub>
 800581a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800581e:	f7fb f8cd 	bl	80009bc <__aeabi_dcmplt>
 8005822:	2800      	cmp	r0, #0
 8005824:	f040 80b6 	bne.w	8005994 <_dtoa_r+0x6e4>
 8005828:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800582a:	429f      	cmp	r7, r3
 800582c:	f43f af7a 	beq.w	8005724 <_dtoa_r+0x474>
 8005830:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005834:	2200      	movs	r2, #0
 8005836:	4b0a      	ldr	r3, [pc, #40]	; (8005860 <_dtoa_r+0x5b0>)
 8005838:	f7fa fe4e 	bl	80004d8 <__aeabi_dmul>
 800583c:	2200      	movs	r2, #0
 800583e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005842:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005846:	4b06      	ldr	r3, [pc, #24]	; (8005860 <_dtoa_r+0x5b0>)
 8005848:	f7fa fe46 	bl	80004d8 <__aeabi_dmul>
 800584c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005850:	e7c3      	b.n	80057da <_dtoa_r+0x52a>
 8005852:	bf00      	nop
 8005854:	08007ef0 	.word	0x08007ef0
 8005858:	08007ec8 	.word	0x08007ec8
 800585c:	3ff00000 	.word	0x3ff00000
 8005860:	40240000 	.word	0x40240000
 8005864:	401c0000 	.word	0x401c0000
 8005868:	40140000 	.word	0x40140000
 800586c:	3fe00000 	.word	0x3fe00000
 8005870:	4630      	mov	r0, r6
 8005872:	4639      	mov	r1, r7
 8005874:	f7fa fe30 	bl	80004d8 <__aeabi_dmul>
 8005878:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800587a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800587e:	9c08      	ldr	r4, [sp, #32]
 8005880:	9314      	str	r3, [sp, #80]	; 0x50
 8005882:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005886:	f7fb f8d7 	bl	8000a38 <__aeabi_d2iz>
 800588a:	9015      	str	r0, [sp, #84]	; 0x54
 800588c:	f7fa fdba 	bl	8000404 <__aeabi_i2d>
 8005890:	4602      	mov	r2, r0
 8005892:	460b      	mov	r3, r1
 8005894:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005898:	f7fa fc66 	bl	8000168 <__aeabi_dsub>
 800589c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800589e:	4606      	mov	r6, r0
 80058a0:	3330      	adds	r3, #48	; 0x30
 80058a2:	f804 3b01 	strb.w	r3, [r4], #1
 80058a6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80058a8:	460f      	mov	r7, r1
 80058aa:	429c      	cmp	r4, r3
 80058ac:	f04f 0200 	mov.w	r2, #0
 80058b0:	d124      	bne.n	80058fc <_dtoa_r+0x64c>
 80058b2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80058b6:	4bb3      	ldr	r3, [pc, #716]	; (8005b84 <_dtoa_r+0x8d4>)
 80058b8:	f7fa fc58 	bl	800016c <__adddf3>
 80058bc:	4602      	mov	r2, r0
 80058be:	460b      	mov	r3, r1
 80058c0:	4630      	mov	r0, r6
 80058c2:	4639      	mov	r1, r7
 80058c4:	f7fb f898 	bl	80009f8 <__aeabi_dcmpgt>
 80058c8:	2800      	cmp	r0, #0
 80058ca:	d162      	bne.n	8005992 <_dtoa_r+0x6e2>
 80058cc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80058d0:	2000      	movs	r0, #0
 80058d2:	49ac      	ldr	r1, [pc, #688]	; (8005b84 <_dtoa_r+0x8d4>)
 80058d4:	f7fa fc48 	bl	8000168 <__aeabi_dsub>
 80058d8:	4602      	mov	r2, r0
 80058da:	460b      	mov	r3, r1
 80058dc:	4630      	mov	r0, r6
 80058de:	4639      	mov	r1, r7
 80058e0:	f7fb f86c 	bl	80009bc <__aeabi_dcmplt>
 80058e4:	2800      	cmp	r0, #0
 80058e6:	f43f af1d 	beq.w	8005724 <_dtoa_r+0x474>
 80058ea:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80058ec:	1e7b      	subs	r3, r7, #1
 80058ee:	9314      	str	r3, [sp, #80]	; 0x50
 80058f0:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 80058f4:	2b30      	cmp	r3, #48	; 0x30
 80058f6:	d0f8      	beq.n	80058ea <_dtoa_r+0x63a>
 80058f8:	46c1      	mov	r9, r8
 80058fa:	e03a      	b.n	8005972 <_dtoa_r+0x6c2>
 80058fc:	4ba2      	ldr	r3, [pc, #648]	; (8005b88 <_dtoa_r+0x8d8>)
 80058fe:	f7fa fdeb 	bl	80004d8 <__aeabi_dmul>
 8005902:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005906:	e7bc      	b.n	8005882 <_dtoa_r+0x5d2>
 8005908:	9f08      	ldr	r7, [sp, #32]
 800590a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800590e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005912:	f7fa ff0b 	bl	800072c <__aeabi_ddiv>
 8005916:	f7fb f88f 	bl	8000a38 <__aeabi_d2iz>
 800591a:	4604      	mov	r4, r0
 800591c:	f7fa fd72 	bl	8000404 <__aeabi_i2d>
 8005920:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005924:	f7fa fdd8 	bl	80004d8 <__aeabi_dmul>
 8005928:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800592c:	460b      	mov	r3, r1
 800592e:	4602      	mov	r2, r0
 8005930:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005934:	f7fa fc18 	bl	8000168 <__aeabi_dsub>
 8005938:	f807 6b01 	strb.w	r6, [r7], #1
 800593c:	9e08      	ldr	r6, [sp, #32]
 800593e:	9b02      	ldr	r3, [sp, #8]
 8005940:	1bbe      	subs	r6, r7, r6
 8005942:	42b3      	cmp	r3, r6
 8005944:	d13a      	bne.n	80059bc <_dtoa_r+0x70c>
 8005946:	4602      	mov	r2, r0
 8005948:	460b      	mov	r3, r1
 800594a:	f7fa fc0f 	bl	800016c <__adddf3>
 800594e:	4602      	mov	r2, r0
 8005950:	460b      	mov	r3, r1
 8005952:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005956:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800595a:	f7fb f84d 	bl	80009f8 <__aeabi_dcmpgt>
 800595e:	bb58      	cbnz	r0, 80059b8 <_dtoa_r+0x708>
 8005960:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005964:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005968:	f7fb f81e 	bl	80009a8 <__aeabi_dcmpeq>
 800596c:	b108      	cbz	r0, 8005972 <_dtoa_r+0x6c2>
 800596e:	07e1      	lsls	r1, r4, #31
 8005970:	d422      	bmi.n	80059b8 <_dtoa_r+0x708>
 8005972:	4628      	mov	r0, r5
 8005974:	4651      	mov	r1, sl
 8005976:	f000 faf1 	bl	8005f5c <_Bfree>
 800597a:	2300      	movs	r3, #0
 800597c:	703b      	strb	r3, [r7, #0]
 800597e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8005980:	f109 0001 	add.w	r0, r9, #1
 8005984:	6018      	str	r0, [r3, #0]
 8005986:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005988:	2b00      	cmp	r3, #0
 800598a:	f43f acdf 	beq.w	800534c <_dtoa_r+0x9c>
 800598e:	601f      	str	r7, [r3, #0]
 8005990:	e4dc      	b.n	800534c <_dtoa_r+0x9c>
 8005992:	4627      	mov	r7, r4
 8005994:	463b      	mov	r3, r7
 8005996:	461f      	mov	r7, r3
 8005998:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800599c:	2a39      	cmp	r2, #57	; 0x39
 800599e:	d107      	bne.n	80059b0 <_dtoa_r+0x700>
 80059a0:	9a08      	ldr	r2, [sp, #32]
 80059a2:	429a      	cmp	r2, r3
 80059a4:	d1f7      	bne.n	8005996 <_dtoa_r+0x6e6>
 80059a6:	2230      	movs	r2, #48	; 0x30
 80059a8:	9908      	ldr	r1, [sp, #32]
 80059aa:	f108 0801 	add.w	r8, r8, #1
 80059ae:	700a      	strb	r2, [r1, #0]
 80059b0:	781a      	ldrb	r2, [r3, #0]
 80059b2:	3201      	adds	r2, #1
 80059b4:	701a      	strb	r2, [r3, #0]
 80059b6:	e79f      	b.n	80058f8 <_dtoa_r+0x648>
 80059b8:	46c8      	mov	r8, r9
 80059ba:	e7eb      	b.n	8005994 <_dtoa_r+0x6e4>
 80059bc:	2200      	movs	r2, #0
 80059be:	4b72      	ldr	r3, [pc, #456]	; (8005b88 <_dtoa_r+0x8d8>)
 80059c0:	f7fa fd8a 	bl	80004d8 <__aeabi_dmul>
 80059c4:	4602      	mov	r2, r0
 80059c6:	460b      	mov	r3, r1
 80059c8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80059cc:	2200      	movs	r2, #0
 80059ce:	2300      	movs	r3, #0
 80059d0:	f7fa ffea 	bl	80009a8 <__aeabi_dcmpeq>
 80059d4:	2800      	cmp	r0, #0
 80059d6:	d098      	beq.n	800590a <_dtoa_r+0x65a>
 80059d8:	e7cb      	b.n	8005972 <_dtoa_r+0x6c2>
 80059da:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80059dc:	2a00      	cmp	r2, #0
 80059de:	f000 80cd 	beq.w	8005b7c <_dtoa_r+0x8cc>
 80059e2:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80059e4:	2a01      	cmp	r2, #1
 80059e6:	f300 80af 	bgt.w	8005b48 <_dtoa_r+0x898>
 80059ea:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80059ec:	2a00      	cmp	r2, #0
 80059ee:	f000 80a7 	beq.w	8005b40 <_dtoa_r+0x890>
 80059f2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80059f6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80059f8:	9f06      	ldr	r7, [sp, #24]
 80059fa:	9a06      	ldr	r2, [sp, #24]
 80059fc:	2101      	movs	r1, #1
 80059fe:	441a      	add	r2, r3
 8005a00:	9206      	str	r2, [sp, #24]
 8005a02:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005a04:	4628      	mov	r0, r5
 8005a06:	441a      	add	r2, r3
 8005a08:	9209      	str	r2, [sp, #36]	; 0x24
 8005a0a:	f000 fb61 	bl	80060d0 <__i2b>
 8005a0e:	4606      	mov	r6, r0
 8005a10:	2f00      	cmp	r7, #0
 8005a12:	dd0c      	ble.n	8005a2e <_dtoa_r+0x77e>
 8005a14:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	dd09      	ble.n	8005a2e <_dtoa_r+0x77e>
 8005a1a:	42bb      	cmp	r3, r7
 8005a1c:	bfa8      	it	ge
 8005a1e:	463b      	movge	r3, r7
 8005a20:	9a06      	ldr	r2, [sp, #24]
 8005a22:	1aff      	subs	r7, r7, r3
 8005a24:	1ad2      	subs	r2, r2, r3
 8005a26:	9206      	str	r2, [sp, #24]
 8005a28:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005a2a:	1ad3      	subs	r3, r2, r3
 8005a2c:	9309      	str	r3, [sp, #36]	; 0x24
 8005a2e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005a30:	b1f3      	cbz	r3, 8005a70 <_dtoa_r+0x7c0>
 8005a32:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	f000 80a9 	beq.w	8005b8c <_dtoa_r+0x8dc>
 8005a3a:	2c00      	cmp	r4, #0
 8005a3c:	dd10      	ble.n	8005a60 <_dtoa_r+0x7b0>
 8005a3e:	4631      	mov	r1, r6
 8005a40:	4622      	mov	r2, r4
 8005a42:	4628      	mov	r0, r5
 8005a44:	f000 fbfe 	bl	8006244 <__pow5mult>
 8005a48:	4652      	mov	r2, sl
 8005a4a:	4601      	mov	r1, r0
 8005a4c:	4606      	mov	r6, r0
 8005a4e:	4628      	mov	r0, r5
 8005a50:	f000 fb54 	bl	80060fc <__multiply>
 8005a54:	4680      	mov	r8, r0
 8005a56:	4651      	mov	r1, sl
 8005a58:	4628      	mov	r0, r5
 8005a5a:	f000 fa7f 	bl	8005f5c <_Bfree>
 8005a5e:	46c2      	mov	sl, r8
 8005a60:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005a62:	1b1a      	subs	r2, r3, r4
 8005a64:	d004      	beq.n	8005a70 <_dtoa_r+0x7c0>
 8005a66:	4651      	mov	r1, sl
 8005a68:	4628      	mov	r0, r5
 8005a6a:	f000 fbeb 	bl	8006244 <__pow5mult>
 8005a6e:	4682      	mov	sl, r0
 8005a70:	2101      	movs	r1, #1
 8005a72:	4628      	mov	r0, r5
 8005a74:	f000 fb2c 	bl	80060d0 <__i2b>
 8005a78:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005a7a:	4604      	mov	r4, r0
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	f340 8087 	ble.w	8005b90 <_dtoa_r+0x8e0>
 8005a82:	461a      	mov	r2, r3
 8005a84:	4601      	mov	r1, r0
 8005a86:	4628      	mov	r0, r5
 8005a88:	f000 fbdc 	bl	8006244 <__pow5mult>
 8005a8c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005a8e:	4604      	mov	r4, r0
 8005a90:	2b01      	cmp	r3, #1
 8005a92:	f340 8080 	ble.w	8005b96 <_dtoa_r+0x8e6>
 8005a96:	f04f 0800 	mov.w	r8, #0
 8005a9a:	6923      	ldr	r3, [r4, #16]
 8005a9c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005aa0:	6918      	ldr	r0, [r3, #16]
 8005aa2:	f000 fac7 	bl	8006034 <__hi0bits>
 8005aa6:	f1c0 0020 	rsb	r0, r0, #32
 8005aaa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005aac:	4418      	add	r0, r3
 8005aae:	f010 001f 	ands.w	r0, r0, #31
 8005ab2:	f000 8092 	beq.w	8005bda <_dtoa_r+0x92a>
 8005ab6:	f1c0 0320 	rsb	r3, r0, #32
 8005aba:	2b04      	cmp	r3, #4
 8005abc:	f340 808a 	ble.w	8005bd4 <_dtoa_r+0x924>
 8005ac0:	f1c0 001c 	rsb	r0, r0, #28
 8005ac4:	9b06      	ldr	r3, [sp, #24]
 8005ac6:	4407      	add	r7, r0
 8005ac8:	4403      	add	r3, r0
 8005aca:	9306      	str	r3, [sp, #24]
 8005acc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ace:	4403      	add	r3, r0
 8005ad0:	9309      	str	r3, [sp, #36]	; 0x24
 8005ad2:	9b06      	ldr	r3, [sp, #24]
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	dd05      	ble.n	8005ae4 <_dtoa_r+0x834>
 8005ad8:	4651      	mov	r1, sl
 8005ada:	461a      	mov	r2, r3
 8005adc:	4628      	mov	r0, r5
 8005ade:	f000 fc0b 	bl	80062f8 <__lshift>
 8005ae2:	4682      	mov	sl, r0
 8005ae4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	dd05      	ble.n	8005af6 <_dtoa_r+0x846>
 8005aea:	4621      	mov	r1, r4
 8005aec:	461a      	mov	r2, r3
 8005aee:	4628      	mov	r0, r5
 8005af0:	f000 fc02 	bl	80062f8 <__lshift>
 8005af4:	4604      	mov	r4, r0
 8005af6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d070      	beq.n	8005bde <_dtoa_r+0x92e>
 8005afc:	4621      	mov	r1, r4
 8005afe:	4650      	mov	r0, sl
 8005b00:	f000 fc66 	bl	80063d0 <__mcmp>
 8005b04:	2800      	cmp	r0, #0
 8005b06:	da6a      	bge.n	8005bde <_dtoa_r+0x92e>
 8005b08:	2300      	movs	r3, #0
 8005b0a:	4651      	mov	r1, sl
 8005b0c:	220a      	movs	r2, #10
 8005b0e:	4628      	mov	r0, r5
 8005b10:	f000 fa46 	bl	8005fa0 <__multadd>
 8005b14:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005b16:	4682      	mov	sl, r0
 8005b18:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	f000 8193 	beq.w	8005e48 <_dtoa_r+0xb98>
 8005b22:	4631      	mov	r1, r6
 8005b24:	2300      	movs	r3, #0
 8005b26:	220a      	movs	r2, #10
 8005b28:	4628      	mov	r0, r5
 8005b2a:	f000 fa39 	bl	8005fa0 <__multadd>
 8005b2e:	f1bb 0f00 	cmp.w	fp, #0
 8005b32:	4606      	mov	r6, r0
 8005b34:	f300 8093 	bgt.w	8005c5e <_dtoa_r+0x9ae>
 8005b38:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005b3a:	2b02      	cmp	r3, #2
 8005b3c:	dc57      	bgt.n	8005bee <_dtoa_r+0x93e>
 8005b3e:	e08e      	b.n	8005c5e <_dtoa_r+0x9ae>
 8005b40:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8005b42:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005b46:	e756      	b.n	80059f6 <_dtoa_r+0x746>
 8005b48:	9b02      	ldr	r3, [sp, #8]
 8005b4a:	1e5c      	subs	r4, r3, #1
 8005b4c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005b4e:	42a3      	cmp	r3, r4
 8005b50:	bfb7      	itett	lt
 8005b52:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8005b54:	1b1c      	subge	r4, r3, r4
 8005b56:	1ae2      	sublt	r2, r4, r3
 8005b58:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8005b5a:	bfbe      	ittt	lt
 8005b5c:	940a      	strlt	r4, [sp, #40]	; 0x28
 8005b5e:	189b      	addlt	r3, r3, r2
 8005b60:	930e      	strlt	r3, [sp, #56]	; 0x38
 8005b62:	9b02      	ldr	r3, [sp, #8]
 8005b64:	bfb8      	it	lt
 8005b66:	2400      	movlt	r4, #0
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	bfbb      	ittet	lt
 8005b6c:	9b06      	ldrlt	r3, [sp, #24]
 8005b6e:	9a02      	ldrlt	r2, [sp, #8]
 8005b70:	9f06      	ldrge	r7, [sp, #24]
 8005b72:	1a9f      	sublt	r7, r3, r2
 8005b74:	bfac      	ite	ge
 8005b76:	9b02      	ldrge	r3, [sp, #8]
 8005b78:	2300      	movlt	r3, #0
 8005b7a:	e73e      	b.n	80059fa <_dtoa_r+0x74a>
 8005b7c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8005b7e:	9f06      	ldr	r7, [sp, #24]
 8005b80:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8005b82:	e745      	b.n	8005a10 <_dtoa_r+0x760>
 8005b84:	3fe00000 	.word	0x3fe00000
 8005b88:	40240000 	.word	0x40240000
 8005b8c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005b8e:	e76a      	b.n	8005a66 <_dtoa_r+0x7b6>
 8005b90:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005b92:	2b01      	cmp	r3, #1
 8005b94:	dc19      	bgt.n	8005bca <_dtoa_r+0x91a>
 8005b96:	9b04      	ldr	r3, [sp, #16]
 8005b98:	b9bb      	cbnz	r3, 8005bca <_dtoa_r+0x91a>
 8005b9a:	9b05      	ldr	r3, [sp, #20]
 8005b9c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005ba0:	b99b      	cbnz	r3, 8005bca <_dtoa_r+0x91a>
 8005ba2:	9b05      	ldr	r3, [sp, #20]
 8005ba4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005ba8:	0d1b      	lsrs	r3, r3, #20
 8005baa:	051b      	lsls	r3, r3, #20
 8005bac:	b183      	cbz	r3, 8005bd0 <_dtoa_r+0x920>
 8005bae:	f04f 0801 	mov.w	r8, #1
 8005bb2:	9b06      	ldr	r3, [sp, #24]
 8005bb4:	3301      	adds	r3, #1
 8005bb6:	9306      	str	r3, [sp, #24]
 8005bb8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005bba:	3301      	adds	r3, #1
 8005bbc:	9309      	str	r3, [sp, #36]	; 0x24
 8005bbe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	f47f af6a 	bne.w	8005a9a <_dtoa_r+0x7ea>
 8005bc6:	2001      	movs	r0, #1
 8005bc8:	e76f      	b.n	8005aaa <_dtoa_r+0x7fa>
 8005bca:	f04f 0800 	mov.w	r8, #0
 8005bce:	e7f6      	b.n	8005bbe <_dtoa_r+0x90e>
 8005bd0:	4698      	mov	r8, r3
 8005bd2:	e7f4      	b.n	8005bbe <_dtoa_r+0x90e>
 8005bd4:	f43f af7d 	beq.w	8005ad2 <_dtoa_r+0x822>
 8005bd8:	4618      	mov	r0, r3
 8005bda:	301c      	adds	r0, #28
 8005bdc:	e772      	b.n	8005ac4 <_dtoa_r+0x814>
 8005bde:	9b02      	ldr	r3, [sp, #8]
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	dc36      	bgt.n	8005c52 <_dtoa_r+0x9a2>
 8005be4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005be6:	2b02      	cmp	r3, #2
 8005be8:	dd33      	ble.n	8005c52 <_dtoa_r+0x9a2>
 8005bea:	f8dd b008 	ldr.w	fp, [sp, #8]
 8005bee:	f1bb 0f00 	cmp.w	fp, #0
 8005bf2:	d10d      	bne.n	8005c10 <_dtoa_r+0x960>
 8005bf4:	4621      	mov	r1, r4
 8005bf6:	465b      	mov	r3, fp
 8005bf8:	2205      	movs	r2, #5
 8005bfa:	4628      	mov	r0, r5
 8005bfc:	f000 f9d0 	bl	8005fa0 <__multadd>
 8005c00:	4601      	mov	r1, r0
 8005c02:	4604      	mov	r4, r0
 8005c04:	4650      	mov	r0, sl
 8005c06:	f000 fbe3 	bl	80063d0 <__mcmp>
 8005c0a:	2800      	cmp	r0, #0
 8005c0c:	f73f adb6 	bgt.w	800577c <_dtoa_r+0x4cc>
 8005c10:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005c12:	9f08      	ldr	r7, [sp, #32]
 8005c14:	ea6f 0903 	mvn.w	r9, r3
 8005c18:	f04f 0800 	mov.w	r8, #0
 8005c1c:	4621      	mov	r1, r4
 8005c1e:	4628      	mov	r0, r5
 8005c20:	f000 f99c 	bl	8005f5c <_Bfree>
 8005c24:	2e00      	cmp	r6, #0
 8005c26:	f43f aea4 	beq.w	8005972 <_dtoa_r+0x6c2>
 8005c2a:	f1b8 0f00 	cmp.w	r8, #0
 8005c2e:	d005      	beq.n	8005c3c <_dtoa_r+0x98c>
 8005c30:	45b0      	cmp	r8, r6
 8005c32:	d003      	beq.n	8005c3c <_dtoa_r+0x98c>
 8005c34:	4641      	mov	r1, r8
 8005c36:	4628      	mov	r0, r5
 8005c38:	f000 f990 	bl	8005f5c <_Bfree>
 8005c3c:	4631      	mov	r1, r6
 8005c3e:	4628      	mov	r0, r5
 8005c40:	f000 f98c 	bl	8005f5c <_Bfree>
 8005c44:	e695      	b.n	8005972 <_dtoa_r+0x6c2>
 8005c46:	2400      	movs	r4, #0
 8005c48:	4626      	mov	r6, r4
 8005c4a:	e7e1      	b.n	8005c10 <_dtoa_r+0x960>
 8005c4c:	46c1      	mov	r9, r8
 8005c4e:	4626      	mov	r6, r4
 8005c50:	e594      	b.n	800577c <_dtoa_r+0x4cc>
 8005c52:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005c54:	f8dd b008 	ldr.w	fp, [sp, #8]
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	f000 80fc 	beq.w	8005e56 <_dtoa_r+0xba6>
 8005c5e:	2f00      	cmp	r7, #0
 8005c60:	dd05      	ble.n	8005c6e <_dtoa_r+0x9be>
 8005c62:	4631      	mov	r1, r6
 8005c64:	463a      	mov	r2, r7
 8005c66:	4628      	mov	r0, r5
 8005c68:	f000 fb46 	bl	80062f8 <__lshift>
 8005c6c:	4606      	mov	r6, r0
 8005c6e:	f1b8 0f00 	cmp.w	r8, #0
 8005c72:	d05c      	beq.n	8005d2e <_dtoa_r+0xa7e>
 8005c74:	4628      	mov	r0, r5
 8005c76:	6871      	ldr	r1, [r6, #4]
 8005c78:	f000 f930 	bl	8005edc <_Balloc>
 8005c7c:	4607      	mov	r7, r0
 8005c7e:	b928      	cbnz	r0, 8005c8c <_dtoa_r+0x9dc>
 8005c80:	4602      	mov	r2, r0
 8005c82:	f240 21ea 	movw	r1, #746	; 0x2ea
 8005c86:	4b7e      	ldr	r3, [pc, #504]	; (8005e80 <_dtoa_r+0xbd0>)
 8005c88:	f7ff bb26 	b.w	80052d8 <_dtoa_r+0x28>
 8005c8c:	6932      	ldr	r2, [r6, #16]
 8005c8e:	f106 010c 	add.w	r1, r6, #12
 8005c92:	3202      	adds	r2, #2
 8005c94:	0092      	lsls	r2, r2, #2
 8005c96:	300c      	adds	r0, #12
 8005c98:	f000 f912 	bl	8005ec0 <memcpy>
 8005c9c:	2201      	movs	r2, #1
 8005c9e:	4639      	mov	r1, r7
 8005ca0:	4628      	mov	r0, r5
 8005ca2:	f000 fb29 	bl	80062f8 <__lshift>
 8005ca6:	46b0      	mov	r8, r6
 8005ca8:	4606      	mov	r6, r0
 8005caa:	9b08      	ldr	r3, [sp, #32]
 8005cac:	3301      	adds	r3, #1
 8005cae:	9302      	str	r3, [sp, #8]
 8005cb0:	9b08      	ldr	r3, [sp, #32]
 8005cb2:	445b      	add	r3, fp
 8005cb4:	930a      	str	r3, [sp, #40]	; 0x28
 8005cb6:	9b04      	ldr	r3, [sp, #16]
 8005cb8:	f003 0301 	and.w	r3, r3, #1
 8005cbc:	9309      	str	r3, [sp, #36]	; 0x24
 8005cbe:	9b02      	ldr	r3, [sp, #8]
 8005cc0:	4621      	mov	r1, r4
 8005cc2:	4650      	mov	r0, sl
 8005cc4:	f103 3bff 	add.w	fp, r3, #4294967295	; 0xffffffff
 8005cc8:	f7ff fa62 	bl	8005190 <quorem>
 8005ccc:	4603      	mov	r3, r0
 8005cce:	4641      	mov	r1, r8
 8005cd0:	3330      	adds	r3, #48	; 0x30
 8005cd2:	9004      	str	r0, [sp, #16]
 8005cd4:	4650      	mov	r0, sl
 8005cd6:	930b      	str	r3, [sp, #44]	; 0x2c
 8005cd8:	f000 fb7a 	bl	80063d0 <__mcmp>
 8005cdc:	4632      	mov	r2, r6
 8005cde:	9006      	str	r0, [sp, #24]
 8005ce0:	4621      	mov	r1, r4
 8005ce2:	4628      	mov	r0, r5
 8005ce4:	f000 fb90 	bl	8006408 <__mdiff>
 8005ce8:	68c2      	ldr	r2, [r0, #12]
 8005cea:	4607      	mov	r7, r0
 8005cec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005cee:	bb02      	cbnz	r2, 8005d32 <_dtoa_r+0xa82>
 8005cf0:	4601      	mov	r1, r0
 8005cf2:	4650      	mov	r0, sl
 8005cf4:	f000 fb6c 	bl	80063d0 <__mcmp>
 8005cf8:	4602      	mov	r2, r0
 8005cfa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005cfc:	4639      	mov	r1, r7
 8005cfe:	4628      	mov	r0, r5
 8005d00:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8005d04:	f000 f92a 	bl	8005f5c <_Bfree>
 8005d08:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005d0a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005d0c:	9f02      	ldr	r7, [sp, #8]
 8005d0e:	ea43 0102 	orr.w	r1, r3, r2
 8005d12:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d14:	430b      	orrs	r3, r1
 8005d16:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005d18:	d10d      	bne.n	8005d36 <_dtoa_r+0xa86>
 8005d1a:	2b39      	cmp	r3, #57	; 0x39
 8005d1c:	d027      	beq.n	8005d6e <_dtoa_r+0xabe>
 8005d1e:	9a06      	ldr	r2, [sp, #24]
 8005d20:	2a00      	cmp	r2, #0
 8005d22:	dd01      	ble.n	8005d28 <_dtoa_r+0xa78>
 8005d24:	9b04      	ldr	r3, [sp, #16]
 8005d26:	3331      	adds	r3, #49	; 0x31
 8005d28:	f88b 3000 	strb.w	r3, [fp]
 8005d2c:	e776      	b.n	8005c1c <_dtoa_r+0x96c>
 8005d2e:	4630      	mov	r0, r6
 8005d30:	e7b9      	b.n	8005ca6 <_dtoa_r+0x9f6>
 8005d32:	2201      	movs	r2, #1
 8005d34:	e7e2      	b.n	8005cfc <_dtoa_r+0xa4c>
 8005d36:	9906      	ldr	r1, [sp, #24]
 8005d38:	2900      	cmp	r1, #0
 8005d3a:	db04      	blt.n	8005d46 <_dtoa_r+0xa96>
 8005d3c:	9822      	ldr	r0, [sp, #136]	; 0x88
 8005d3e:	4301      	orrs	r1, r0
 8005d40:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005d42:	4301      	orrs	r1, r0
 8005d44:	d120      	bne.n	8005d88 <_dtoa_r+0xad8>
 8005d46:	2a00      	cmp	r2, #0
 8005d48:	ddee      	ble.n	8005d28 <_dtoa_r+0xa78>
 8005d4a:	4651      	mov	r1, sl
 8005d4c:	2201      	movs	r2, #1
 8005d4e:	4628      	mov	r0, r5
 8005d50:	9302      	str	r3, [sp, #8]
 8005d52:	f000 fad1 	bl	80062f8 <__lshift>
 8005d56:	4621      	mov	r1, r4
 8005d58:	4682      	mov	sl, r0
 8005d5a:	f000 fb39 	bl	80063d0 <__mcmp>
 8005d5e:	2800      	cmp	r0, #0
 8005d60:	9b02      	ldr	r3, [sp, #8]
 8005d62:	dc02      	bgt.n	8005d6a <_dtoa_r+0xaba>
 8005d64:	d1e0      	bne.n	8005d28 <_dtoa_r+0xa78>
 8005d66:	07da      	lsls	r2, r3, #31
 8005d68:	d5de      	bpl.n	8005d28 <_dtoa_r+0xa78>
 8005d6a:	2b39      	cmp	r3, #57	; 0x39
 8005d6c:	d1da      	bne.n	8005d24 <_dtoa_r+0xa74>
 8005d6e:	2339      	movs	r3, #57	; 0x39
 8005d70:	f88b 3000 	strb.w	r3, [fp]
 8005d74:	463b      	mov	r3, r7
 8005d76:	461f      	mov	r7, r3
 8005d78:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8005d7c:	3b01      	subs	r3, #1
 8005d7e:	2a39      	cmp	r2, #57	; 0x39
 8005d80:	d050      	beq.n	8005e24 <_dtoa_r+0xb74>
 8005d82:	3201      	adds	r2, #1
 8005d84:	701a      	strb	r2, [r3, #0]
 8005d86:	e749      	b.n	8005c1c <_dtoa_r+0x96c>
 8005d88:	2a00      	cmp	r2, #0
 8005d8a:	dd03      	ble.n	8005d94 <_dtoa_r+0xae4>
 8005d8c:	2b39      	cmp	r3, #57	; 0x39
 8005d8e:	d0ee      	beq.n	8005d6e <_dtoa_r+0xabe>
 8005d90:	3301      	adds	r3, #1
 8005d92:	e7c9      	b.n	8005d28 <_dtoa_r+0xa78>
 8005d94:	9a02      	ldr	r2, [sp, #8]
 8005d96:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005d98:	f802 3c01 	strb.w	r3, [r2, #-1]
 8005d9c:	428a      	cmp	r2, r1
 8005d9e:	d02a      	beq.n	8005df6 <_dtoa_r+0xb46>
 8005da0:	4651      	mov	r1, sl
 8005da2:	2300      	movs	r3, #0
 8005da4:	220a      	movs	r2, #10
 8005da6:	4628      	mov	r0, r5
 8005da8:	f000 f8fa 	bl	8005fa0 <__multadd>
 8005dac:	45b0      	cmp	r8, r6
 8005dae:	4682      	mov	sl, r0
 8005db0:	f04f 0300 	mov.w	r3, #0
 8005db4:	f04f 020a 	mov.w	r2, #10
 8005db8:	4641      	mov	r1, r8
 8005dba:	4628      	mov	r0, r5
 8005dbc:	d107      	bne.n	8005dce <_dtoa_r+0xb1e>
 8005dbe:	f000 f8ef 	bl	8005fa0 <__multadd>
 8005dc2:	4680      	mov	r8, r0
 8005dc4:	4606      	mov	r6, r0
 8005dc6:	9b02      	ldr	r3, [sp, #8]
 8005dc8:	3301      	adds	r3, #1
 8005dca:	9302      	str	r3, [sp, #8]
 8005dcc:	e777      	b.n	8005cbe <_dtoa_r+0xa0e>
 8005dce:	f000 f8e7 	bl	8005fa0 <__multadd>
 8005dd2:	4631      	mov	r1, r6
 8005dd4:	4680      	mov	r8, r0
 8005dd6:	2300      	movs	r3, #0
 8005dd8:	220a      	movs	r2, #10
 8005dda:	4628      	mov	r0, r5
 8005ddc:	f000 f8e0 	bl	8005fa0 <__multadd>
 8005de0:	4606      	mov	r6, r0
 8005de2:	e7f0      	b.n	8005dc6 <_dtoa_r+0xb16>
 8005de4:	f1bb 0f00 	cmp.w	fp, #0
 8005de8:	bfcc      	ite	gt
 8005dea:	465f      	movgt	r7, fp
 8005dec:	2701      	movle	r7, #1
 8005dee:	f04f 0800 	mov.w	r8, #0
 8005df2:	9a08      	ldr	r2, [sp, #32]
 8005df4:	4417      	add	r7, r2
 8005df6:	4651      	mov	r1, sl
 8005df8:	2201      	movs	r2, #1
 8005dfa:	4628      	mov	r0, r5
 8005dfc:	9302      	str	r3, [sp, #8]
 8005dfe:	f000 fa7b 	bl	80062f8 <__lshift>
 8005e02:	4621      	mov	r1, r4
 8005e04:	4682      	mov	sl, r0
 8005e06:	f000 fae3 	bl	80063d0 <__mcmp>
 8005e0a:	2800      	cmp	r0, #0
 8005e0c:	dcb2      	bgt.n	8005d74 <_dtoa_r+0xac4>
 8005e0e:	d102      	bne.n	8005e16 <_dtoa_r+0xb66>
 8005e10:	9b02      	ldr	r3, [sp, #8]
 8005e12:	07db      	lsls	r3, r3, #31
 8005e14:	d4ae      	bmi.n	8005d74 <_dtoa_r+0xac4>
 8005e16:	463b      	mov	r3, r7
 8005e18:	461f      	mov	r7, r3
 8005e1a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005e1e:	2a30      	cmp	r2, #48	; 0x30
 8005e20:	d0fa      	beq.n	8005e18 <_dtoa_r+0xb68>
 8005e22:	e6fb      	b.n	8005c1c <_dtoa_r+0x96c>
 8005e24:	9a08      	ldr	r2, [sp, #32]
 8005e26:	429a      	cmp	r2, r3
 8005e28:	d1a5      	bne.n	8005d76 <_dtoa_r+0xac6>
 8005e2a:	2331      	movs	r3, #49	; 0x31
 8005e2c:	f109 0901 	add.w	r9, r9, #1
 8005e30:	7013      	strb	r3, [r2, #0]
 8005e32:	e6f3      	b.n	8005c1c <_dtoa_r+0x96c>
 8005e34:	4b13      	ldr	r3, [pc, #76]	; (8005e84 <_dtoa_r+0xbd4>)
 8005e36:	f7ff baa7 	b.w	8005388 <_dtoa_r+0xd8>
 8005e3a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	f47f aa80 	bne.w	8005342 <_dtoa_r+0x92>
 8005e42:	4b11      	ldr	r3, [pc, #68]	; (8005e88 <_dtoa_r+0xbd8>)
 8005e44:	f7ff baa0 	b.w	8005388 <_dtoa_r+0xd8>
 8005e48:	f1bb 0f00 	cmp.w	fp, #0
 8005e4c:	dc03      	bgt.n	8005e56 <_dtoa_r+0xba6>
 8005e4e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005e50:	2b02      	cmp	r3, #2
 8005e52:	f73f aecc 	bgt.w	8005bee <_dtoa_r+0x93e>
 8005e56:	9f08      	ldr	r7, [sp, #32]
 8005e58:	4621      	mov	r1, r4
 8005e5a:	4650      	mov	r0, sl
 8005e5c:	f7ff f998 	bl	8005190 <quorem>
 8005e60:	9a08      	ldr	r2, [sp, #32]
 8005e62:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8005e66:	f807 3b01 	strb.w	r3, [r7], #1
 8005e6a:	1aba      	subs	r2, r7, r2
 8005e6c:	4593      	cmp	fp, r2
 8005e6e:	ddb9      	ble.n	8005de4 <_dtoa_r+0xb34>
 8005e70:	4651      	mov	r1, sl
 8005e72:	2300      	movs	r3, #0
 8005e74:	220a      	movs	r2, #10
 8005e76:	4628      	mov	r0, r5
 8005e78:	f000 f892 	bl	8005fa0 <__multadd>
 8005e7c:	4682      	mov	sl, r0
 8005e7e:	e7eb      	b.n	8005e58 <_dtoa_r+0xba8>
 8005e80:	08007e53 	.word	0x08007e53
 8005e84:	08007dac 	.word	0x08007dac
 8005e88:	08007dd0 	.word	0x08007dd0

08005e8c <_localeconv_r>:
 8005e8c:	4800      	ldr	r0, [pc, #0]	; (8005e90 <_localeconv_r+0x4>)
 8005e8e:	4770      	bx	lr
 8005e90:	20000168 	.word	0x20000168

08005e94 <malloc>:
 8005e94:	4b02      	ldr	r3, [pc, #8]	; (8005ea0 <malloc+0xc>)
 8005e96:	4601      	mov	r1, r0
 8005e98:	6818      	ldr	r0, [r3, #0]
 8005e9a:	f000 bbfb 	b.w	8006694 <_malloc_r>
 8005e9e:	bf00      	nop
 8005ea0:	20000014 	.word	0x20000014

08005ea4 <memchr>:
 8005ea4:	4603      	mov	r3, r0
 8005ea6:	b510      	push	{r4, lr}
 8005ea8:	b2c9      	uxtb	r1, r1
 8005eaa:	4402      	add	r2, r0
 8005eac:	4293      	cmp	r3, r2
 8005eae:	4618      	mov	r0, r3
 8005eb0:	d101      	bne.n	8005eb6 <memchr+0x12>
 8005eb2:	2000      	movs	r0, #0
 8005eb4:	e003      	b.n	8005ebe <memchr+0x1a>
 8005eb6:	7804      	ldrb	r4, [r0, #0]
 8005eb8:	3301      	adds	r3, #1
 8005eba:	428c      	cmp	r4, r1
 8005ebc:	d1f6      	bne.n	8005eac <memchr+0x8>
 8005ebe:	bd10      	pop	{r4, pc}

08005ec0 <memcpy>:
 8005ec0:	440a      	add	r2, r1
 8005ec2:	4291      	cmp	r1, r2
 8005ec4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8005ec8:	d100      	bne.n	8005ecc <memcpy+0xc>
 8005eca:	4770      	bx	lr
 8005ecc:	b510      	push	{r4, lr}
 8005ece:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005ed2:	4291      	cmp	r1, r2
 8005ed4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005ed8:	d1f9      	bne.n	8005ece <memcpy+0xe>
 8005eda:	bd10      	pop	{r4, pc}

08005edc <_Balloc>:
 8005edc:	b570      	push	{r4, r5, r6, lr}
 8005ede:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005ee0:	4604      	mov	r4, r0
 8005ee2:	460d      	mov	r5, r1
 8005ee4:	b976      	cbnz	r6, 8005f04 <_Balloc+0x28>
 8005ee6:	2010      	movs	r0, #16
 8005ee8:	f7ff ffd4 	bl	8005e94 <malloc>
 8005eec:	4602      	mov	r2, r0
 8005eee:	6260      	str	r0, [r4, #36]	; 0x24
 8005ef0:	b920      	cbnz	r0, 8005efc <_Balloc+0x20>
 8005ef2:	2166      	movs	r1, #102	; 0x66
 8005ef4:	4b17      	ldr	r3, [pc, #92]	; (8005f54 <_Balloc+0x78>)
 8005ef6:	4818      	ldr	r0, [pc, #96]	; (8005f58 <_Balloc+0x7c>)
 8005ef8:	f000 fd92 	bl	8006a20 <__assert_func>
 8005efc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005f00:	6006      	str	r6, [r0, #0]
 8005f02:	60c6      	str	r6, [r0, #12]
 8005f04:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8005f06:	68f3      	ldr	r3, [r6, #12]
 8005f08:	b183      	cbz	r3, 8005f2c <_Balloc+0x50>
 8005f0a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005f0c:	68db      	ldr	r3, [r3, #12]
 8005f0e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005f12:	b9b8      	cbnz	r0, 8005f44 <_Balloc+0x68>
 8005f14:	2101      	movs	r1, #1
 8005f16:	fa01 f605 	lsl.w	r6, r1, r5
 8005f1a:	1d72      	adds	r2, r6, #5
 8005f1c:	4620      	mov	r0, r4
 8005f1e:	0092      	lsls	r2, r2, #2
 8005f20:	f000 fb5e 	bl	80065e0 <_calloc_r>
 8005f24:	b160      	cbz	r0, 8005f40 <_Balloc+0x64>
 8005f26:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005f2a:	e00e      	b.n	8005f4a <_Balloc+0x6e>
 8005f2c:	2221      	movs	r2, #33	; 0x21
 8005f2e:	2104      	movs	r1, #4
 8005f30:	4620      	mov	r0, r4
 8005f32:	f000 fb55 	bl	80065e0 <_calloc_r>
 8005f36:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005f38:	60f0      	str	r0, [r6, #12]
 8005f3a:	68db      	ldr	r3, [r3, #12]
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d1e4      	bne.n	8005f0a <_Balloc+0x2e>
 8005f40:	2000      	movs	r0, #0
 8005f42:	bd70      	pop	{r4, r5, r6, pc}
 8005f44:	6802      	ldr	r2, [r0, #0]
 8005f46:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005f4a:	2300      	movs	r3, #0
 8005f4c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005f50:	e7f7      	b.n	8005f42 <_Balloc+0x66>
 8005f52:	bf00      	nop
 8005f54:	08007ddd 	.word	0x08007ddd
 8005f58:	08007e64 	.word	0x08007e64

08005f5c <_Bfree>:
 8005f5c:	b570      	push	{r4, r5, r6, lr}
 8005f5e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005f60:	4605      	mov	r5, r0
 8005f62:	460c      	mov	r4, r1
 8005f64:	b976      	cbnz	r6, 8005f84 <_Bfree+0x28>
 8005f66:	2010      	movs	r0, #16
 8005f68:	f7ff ff94 	bl	8005e94 <malloc>
 8005f6c:	4602      	mov	r2, r0
 8005f6e:	6268      	str	r0, [r5, #36]	; 0x24
 8005f70:	b920      	cbnz	r0, 8005f7c <_Bfree+0x20>
 8005f72:	218a      	movs	r1, #138	; 0x8a
 8005f74:	4b08      	ldr	r3, [pc, #32]	; (8005f98 <_Bfree+0x3c>)
 8005f76:	4809      	ldr	r0, [pc, #36]	; (8005f9c <_Bfree+0x40>)
 8005f78:	f000 fd52 	bl	8006a20 <__assert_func>
 8005f7c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005f80:	6006      	str	r6, [r0, #0]
 8005f82:	60c6      	str	r6, [r0, #12]
 8005f84:	b13c      	cbz	r4, 8005f96 <_Bfree+0x3a>
 8005f86:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005f88:	6862      	ldr	r2, [r4, #4]
 8005f8a:	68db      	ldr	r3, [r3, #12]
 8005f8c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005f90:	6021      	str	r1, [r4, #0]
 8005f92:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005f96:	bd70      	pop	{r4, r5, r6, pc}
 8005f98:	08007ddd 	.word	0x08007ddd
 8005f9c:	08007e64 	.word	0x08007e64

08005fa0 <__multadd>:
 8005fa0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005fa4:	4698      	mov	r8, r3
 8005fa6:	460c      	mov	r4, r1
 8005fa8:	2300      	movs	r3, #0
 8005faa:	690e      	ldr	r6, [r1, #16]
 8005fac:	4607      	mov	r7, r0
 8005fae:	f101 0014 	add.w	r0, r1, #20
 8005fb2:	6805      	ldr	r5, [r0, #0]
 8005fb4:	3301      	adds	r3, #1
 8005fb6:	b2a9      	uxth	r1, r5
 8005fb8:	fb02 8101 	mla	r1, r2, r1, r8
 8005fbc:	0c2d      	lsrs	r5, r5, #16
 8005fbe:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8005fc2:	fb02 c505 	mla	r5, r2, r5, ip
 8005fc6:	b289      	uxth	r1, r1
 8005fc8:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8005fcc:	429e      	cmp	r6, r3
 8005fce:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8005fd2:	f840 1b04 	str.w	r1, [r0], #4
 8005fd6:	dcec      	bgt.n	8005fb2 <__multadd+0x12>
 8005fd8:	f1b8 0f00 	cmp.w	r8, #0
 8005fdc:	d022      	beq.n	8006024 <__multadd+0x84>
 8005fde:	68a3      	ldr	r3, [r4, #8]
 8005fe0:	42b3      	cmp	r3, r6
 8005fe2:	dc19      	bgt.n	8006018 <__multadd+0x78>
 8005fe4:	6861      	ldr	r1, [r4, #4]
 8005fe6:	4638      	mov	r0, r7
 8005fe8:	3101      	adds	r1, #1
 8005fea:	f7ff ff77 	bl	8005edc <_Balloc>
 8005fee:	4605      	mov	r5, r0
 8005ff0:	b928      	cbnz	r0, 8005ffe <__multadd+0x5e>
 8005ff2:	4602      	mov	r2, r0
 8005ff4:	21b5      	movs	r1, #181	; 0xb5
 8005ff6:	4b0d      	ldr	r3, [pc, #52]	; (800602c <__multadd+0x8c>)
 8005ff8:	480d      	ldr	r0, [pc, #52]	; (8006030 <__multadd+0x90>)
 8005ffa:	f000 fd11 	bl	8006a20 <__assert_func>
 8005ffe:	6922      	ldr	r2, [r4, #16]
 8006000:	f104 010c 	add.w	r1, r4, #12
 8006004:	3202      	adds	r2, #2
 8006006:	0092      	lsls	r2, r2, #2
 8006008:	300c      	adds	r0, #12
 800600a:	f7ff ff59 	bl	8005ec0 <memcpy>
 800600e:	4621      	mov	r1, r4
 8006010:	4638      	mov	r0, r7
 8006012:	f7ff ffa3 	bl	8005f5c <_Bfree>
 8006016:	462c      	mov	r4, r5
 8006018:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800601c:	3601      	adds	r6, #1
 800601e:	f8c3 8014 	str.w	r8, [r3, #20]
 8006022:	6126      	str	r6, [r4, #16]
 8006024:	4620      	mov	r0, r4
 8006026:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800602a:	bf00      	nop
 800602c:	08007e53 	.word	0x08007e53
 8006030:	08007e64 	.word	0x08007e64

08006034 <__hi0bits>:
 8006034:	0c02      	lsrs	r2, r0, #16
 8006036:	0412      	lsls	r2, r2, #16
 8006038:	4603      	mov	r3, r0
 800603a:	b9ca      	cbnz	r2, 8006070 <__hi0bits+0x3c>
 800603c:	0403      	lsls	r3, r0, #16
 800603e:	2010      	movs	r0, #16
 8006040:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8006044:	bf04      	itt	eq
 8006046:	021b      	lsleq	r3, r3, #8
 8006048:	3008      	addeq	r0, #8
 800604a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800604e:	bf04      	itt	eq
 8006050:	011b      	lsleq	r3, r3, #4
 8006052:	3004      	addeq	r0, #4
 8006054:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8006058:	bf04      	itt	eq
 800605a:	009b      	lsleq	r3, r3, #2
 800605c:	3002      	addeq	r0, #2
 800605e:	2b00      	cmp	r3, #0
 8006060:	db05      	blt.n	800606e <__hi0bits+0x3a>
 8006062:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8006066:	f100 0001 	add.w	r0, r0, #1
 800606a:	bf08      	it	eq
 800606c:	2020      	moveq	r0, #32
 800606e:	4770      	bx	lr
 8006070:	2000      	movs	r0, #0
 8006072:	e7e5      	b.n	8006040 <__hi0bits+0xc>

08006074 <__lo0bits>:
 8006074:	6803      	ldr	r3, [r0, #0]
 8006076:	4602      	mov	r2, r0
 8006078:	f013 0007 	ands.w	r0, r3, #7
 800607c:	d00b      	beq.n	8006096 <__lo0bits+0x22>
 800607e:	07d9      	lsls	r1, r3, #31
 8006080:	d422      	bmi.n	80060c8 <__lo0bits+0x54>
 8006082:	0798      	lsls	r0, r3, #30
 8006084:	bf49      	itett	mi
 8006086:	085b      	lsrmi	r3, r3, #1
 8006088:	089b      	lsrpl	r3, r3, #2
 800608a:	2001      	movmi	r0, #1
 800608c:	6013      	strmi	r3, [r2, #0]
 800608e:	bf5c      	itt	pl
 8006090:	2002      	movpl	r0, #2
 8006092:	6013      	strpl	r3, [r2, #0]
 8006094:	4770      	bx	lr
 8006096:	b299      	uxth	r1, r3
 8006098:	b909      	cbnz	r1, 800609e <__lo0bits+0x2a>
 800609a:	2010      	movs	r0, #16
 800609c:	0c1b      	lsrs	r3, r3, #16
 800609e:	f013 0fff 	tst.w	r3, #255	; 0xff
 80060a2:	bf04      	itt	eq
 80060a4:	0a1b      	lsreq	r3, r3, #8
 80060a6:	3008      	addeq	r0, #8
 80060a8:	0719      	lsls	r1, r3, #28
 80060aa:	bf04      	itt	eq
 80060ac:	091b      	lsreq	r3, r3, #4
 80060ae:	3004      	addeq	r0, #4
 80060b0:	0799      	lsls	r1, r3, #30
 80060b2:	bf04      	itt	eq
 80060b4:	089b      	lsreq	r3, r3, #2
 80060b6:	3002      	addeq	r0, #2
 80060b8:	07d9      	lsls	r1, r3, #31
 80060ba:	d403      	bmi.n	80060c4 <__lo0bits+0x50>
 80060bc:	085b      	lsrs	r3, r3, #1
 80060be:	f100 0001 	add.w	r0, r0, #1
 80060c2:	d003      	beq.n	80060cc <__lo0bits+0x58>
 80060c4:	6013      	str	r3, [r2, #0]
 80060c6:	4770      	bx	lr
 80060c8:	2000      	movs	r0, #0
 80060ca:	4770      	bx	lr
 80060cc:	2020      	movs	r0, #32
 80060ce:	4770      	bx	lr

080060d0 <__i2b>:
 80060d0:	b510      	push	{r4, lr}
 80060d2:	460c      	mov	r4, r1
 80060d4:	2101      	movs	r1, #1
 80060d6:	f7ff ff01 	bl	8005edc <_Balloc>
 80060da:	4602      	mov	r2, r0
 80060dc:	b928      	cbnz	r0, 80060ea <__i2b+0x1a>
 80060de:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80060e2:	4b04      	ldr	r3, [pc, #16]	; (80060f4 <__i2b+0x24>)
 80060e4:	4804      	ldr	r0, [pc, #16]	; (80060f8 <__i2b+0x28>)
 80060e6:	f000 fc9b 	bl	8006a20 <__assert_func>
 80060ea:	2301      	movs	r3, #1
 80060ec:	6144      	str	r4, [r0, #20]
 80060ee:	6103      	str	r3, [r0, #16]
 80060f0:	bd10      	pop	{r4, pc}
 80060f2:	bf00      	nop
 80060f4:	08007e53 	.word	0x08007e53
 80060f8:	08007e64 	.word	0x08007e64

080060fc <__multiply>:
 80060fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006100:	4614      	mov	r4, r2
 8006102:	690a      	ldr	r2, [r1, #16]
 8006104:	6923      	ldr	r3, [r4, #16]
 8006106:	460d      	mov	r5, r1
 8006108:	429a      	cmp	r2, r3
 800610a:	bfbe      	ittt	lt
 800610c:	460b      	movlt	r3, r1
 800610e:	4625      	movlt	r5, r4
 8006110:	461c      	movlt	r4, r3
 8006112:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8006116:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800611a:	68ab      	ldr	r3, [r5, #8]
 800611c:	6869      	ldr	r1, [r5, #4]
 800611e:	eb0a 0709 	add.w	r7, sl, r9
 8006122:	42bb      	cmp	r3, r7
 8006124:	b085      	sub	sp, #20
 8006126:	bfb8      	it	lt
 8006128:	3101      	addlt	r1, #1
 800612a:	f7ff fed7 	bl	8005edc <_Balloc>
 800612e:	b930      	cbnz	r0, 800613e <__multiply+0x42>
 8006130:	4602      	mov	r2, r0
 8006132:	f240 115d 	movw	r1, #349	; 0x15d
 8006136:	4b41      	ldr	r3, [pc, #260]	; (800623c <__multiply+0x140>)
 8006138:	4841      	ldr	r0, [pc, #260]	; (8006240 <__multiply+0x144>)
 800613a:	f000 fc71 	bl	8006a20 <__assert_func>
 800613e:	f100 0614 	add.w	r6, r0, #20
 8006142:	4633      	mov	r3, r6
 8006144:	2200      	movs	r2, #0
 8006146:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800614a:	4543      	cmp	r3, r8
 800614c:	d31e      	bcc.n	800618c <__multiply+0x90>
 800614e:	f105 0c14 	add.w	ip, r5, #20
 8006152:	f104 0314 	add.w	r3, r4, #20
 8006156:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800615a:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800615e:	9202      	str	r2, [sp, #8]
 8006160:	ebac 0205 	sub.w	r2, ip, r5
 8006164:	3a15      	subs	r2, #21
 8006166:	f022 0203 	bic.w	r2, r2, #3
 800616a:	3204      	adds	r2, #4
 800616c:	f105 0115 	add.w	r1, r5, #21
 8006170:	458c      	cmp	ip, r1
 8006172:	bf38      	it	cc
 8006174:	2204      	movcc	r2, #4
 8006176:	9201      	str	r2, [sp, #4]
 8006178:	9a02      	ldr	r2, [sp, #8]
 800617a:	9303      	str	r3, [sp, #12]
 800617c:	429a      	cmp	r2, r3
 800617e:	d808      	bhi.n	8006192 <__multiply+0x96>
 8006180:	2f00      	cmp	r7, #0
 8006182:	dc55      	bgt.n	8006230 <__multiply+0x134>
 8006184:	6107      	str	r7, [r0, #16]
 8006186:	b005      	add	sp, #20
 8006188:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800618c:	f843 2b04 	str.w	r2, [r3], #4
 8006190:	e7db      	b.n	800614a <__multiply+0x4e>
 8006192:	f8b3 a000 	ldrh.w	sl, [r3]
 8006196:	f1ba 0f00 	cmp.w	sl, #0
 800619a:	d020      	beq.n	80061de <__multiply+0xe2>
 800619c:	46b1      	mov	r9, r6
 800619e:	2200      	movs	r2, #0
 80061a0:	f105 0e14 	add.w	lr, r5, #20
 80061a4:	f85e 4b04 	ldr.w	r4, [lr], #4
 80061a8:	f8d9 b000 	ldr.w	fp, [r9]
 80061ac:	b2a1      	uxth	r1, r4
 80061ae:	fa1f fb8b 	uxth.w	fp, fp
 80061b2:	fb0a b101 	mla	r1, sl, r1, fp
 80061b6:	4411      	add	r1, r2
 80061b8:	f8d9 2000 	ldr.w	r2, [r9]
 80061bc:	0c24      	lsrs	r4, r4, #16
 80061be:	0c12      	lsrs	r2, r2, #16
 80061c0:	fb0a 2404 	mla	r4, sl, r4, r2
 80061c4:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 80061c8:	b289      	uxth	r1, r1
 80061ca:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80061ce:	45f4      	cmp	ip, lr
 80061d0:	ea4f 4214 	mov.w	r2, r4, lsr #16
 80061d4:	f849 1b04 	str.w	r1, [r9], #4
 80061d8:	d8e4      	bhi.n	80061a4 <__multiply+0xa8>
 80061da:	9901      	ldr	r1, [sp, #4]
 80061dc:	5072      	str	r2, [r6, r1]
 80061de:	9a03      	ldr	r2, [sp, #12]
 80061e0:	3304      	adds	r3, #4
 80061e2:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80061e6:	f1b9 0f00 	cmp.w	r9, #0
 80061ea:	d01f      	beq.n	800622c <__multiply+0x130>
 80061ec:	46b6      	mov	lr, r6
 80061ee:	f04f 0a00 	mov.w	sl, #0
 80061f2:	6834      	ldr	r4, [r6, #0]
 80061f4:	f105 0114 	add.w	r1, r5, #20
 80061f8:	880a      	ldrh	r2, [r1, #0]
 80061fa:	f8be b002 	ldrh.w	fp, [lr, #2]
 80061fe:	b2a4      	uxth	r4, r4
 8006200:	fb09 b202 	mla	r2, r9, r2, fp
 8006204:	4492      	add	sl, r2
 8006206:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800620a:	f84e 4b04 	str.w	r4, [lr], #4
 800620e:	f851 4b04 	ldr.w	r4, [r1], #4
 8006212:	f8be 2000 	ldrh.w	r2, [lr]
 8006216:	0c24      	lsrs	r4, r4, #16
 8006218:	fb09 2404 	mla	r4, r9, r4, r2
 800621c:	458c      	cmp	ip, r1
 800621e:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8006222:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8006226:	d8e7      	bhi.n	80061f8 <__multiply+0xfc>
 8006228:	9a01      	ldr	r2, [sp, #4]
 800622a:	50b4      	str	r4, [r6, r2]
 800622c:	3604      	adds	r6, #4
 800622e:	e7a3      	b.n	8006178 <__multiply+0x7c>
 8006230:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006234:	2b00      	cmp	r3, #0
 8006236:	d1a5      	bne.n	8006184 <__multiply+0x88>
 8006238:	3f01      	subs	r7, #1
 800623a:	e7a1      	b.n	8006180 <__multiply+0x84>
 800623c:	08007e53 	.word	0x08007e53
 8006240:	08007e64 	.word	0x08007e64

08006244 <__pow5mult>:
 8006244:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006248:	4615      	mov	r5, r2
 800624a:	f012 0203 	ands.w	r2, r2, #3
 800624e:	4606      	mov	r6, r0
 8006250:	460f      	mov	r7, r1
 8006252:	d007      	beq.n	8006264 <__pow5mult+0x20>
 8006254:	4c25      	ldr	r4, [pc, #148]	; (80062ec <__pow5mult+0xa8>)
 8006256:	3a01      	subs	r2, #1
 8006258:	2300      	movs	r3, #0
 800625a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800625e:	f7ff fe9f 	bl	8005fa0 <__multadd>
 8006262:	4607      	mov	r7, r0
 8006264:	10ad      	asrs	r5, r5, #2
 8006266:	d03d      	beq.n	80062e4 <__pow5mult+0xa0>
 8006268:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800626a:	b97c      	cbnz	r4, 800628c <__pow5mult+0x48>
 800626c:	2010      	movs	r0, #16
 800626e:	f7ff fe11 	bl	8005e94 <malloc>
 8006272:	4602      	mov	r2, r0
 8006274:	6270      	str	r0, [r6, #36]	; 0x24
 8006276:	b928      	cbnz	r0, 8006284 <__pow5mult+0x40>
 8006278:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800627c:	4b1c      	ldr	r3, [pc, #112]	; (80062f0 <__pow5mult+0xac>)
 800627e:	481d      	ldr	r0, [pc, #116]	; (80062f4 <__pow5mult+0xb0>)
 8006280:	f000 fbce 	bl	8006a20 <__assert_func>
 8006284:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006288:	6004      	str	r4, [r0, #0]
 800628a:	60c4      	str	r4, [r0, #12]
 800628c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8006290:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006294:	b94c      	cbnz	r4, 80062aa <__pow5mult+0x66>
 8006296:	f240 2171 	movw	r1, #625	; 0x271
 800629a:	4630      	mov	r0, r6
 800629c:	f7ff ff18 	bl	80060d0 <__i2b>
 80062a0:	2300      	movs	r3, #0
 80062a2:	4604      	mov	r4, r0
 80062a4:	f8c8 0008 	str.w	r0, [r8, #8]
 80062a8:	6003      	str	r3, [r0, #0]
 80062aa:	f04f 0900 	mov.w	r9, #0
 80062ae:	07eb      	lsls	r3, r5, #31
 80062b0:	d50a      	bpl.n	80062c8 <__pow5mult+0x84>
 80062b2:	4639      	mov	r1, r7
 80062b4:	4622      	mov	r2, r4
 80062b6:	4630      	mov	r0, r6
 80062b8:	f7ff ff20 	bl	80060fc <__multiply>
 80062bc:	4680      	mov	r8, r0
 80062be:	4639      	mov	r1, r7
 80062c0:	4630      	mov	r0, r6
 80062c2:	f7ff fe4b 	bl	8005f5c <_Bfree>
 80062c6:	4647      	mov	r7, r8
 80062c8:	106d      	asrs	r5, r5, #1
 80062ca:	d00b      	beq.n	80062e4 <__pow5mult+0xa0>
 80062cc:	6820      	ldr	r0, [r4, #0]
 80062ce:	b938      	cbnz	r0, 80062e0 <__pow5mult+0x9c>
 80062d0:	4622      	mov	r2, r4
 80062d2:	4621      	mov	r1, r4
 80062d4:	4630      	mov	r0, r6
 80062d6:	f7ff ff11 	bl	80060fc <__multiply>
 80062da:	6020      	str	r0, [r4, #0]
 80062dc:	f8c0 9000 	str.w	r9, [r0]
 80062e0:	4604      	mov	r4, r0
 80062e2:	e7e4      	b.n	80062ae <__pow5mult+0x6a>
 80062e4:	4638      	mov	r0, r7
 80062e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80062ea:	bf00      	nop
 80062ec:	08007fb8 	.word	0x08007fb8
 80062f0:	08007ddd 	.word	0x08007ddd
 80062f4:	08007e64 	.word	0x08007e64

080062f8 <__lshift>:
 80062f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80062fc:	460c      	mov	r4, r1
 80062fe:	4607      	mov	r7, r0
 8006300:	4691      	mov	r9, r2
 8006302:	6923      	ldr	r3, [r4, #16]
 8006304:	6849      	ldr	r1, [r1, #4]
 8006306:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800630a:	68a3      	ldr	r3, [r4, #8]
 800630c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006310:	f108 0601 	add.w	r6, r8, #1
 8006314:	42b3      	cmp	r3, r6
 8006316:	db0b      	blt.n	8006330 <__lshift+0x38>
 8006318:	4638      	mov	r0, r7
 800631a:	f7ff fddf 	bl	8005edc <_Balloc>
 800631e:	4605      	mov	r5, r0
 8006320:	b948      	cbnz	r0, 8006336 <__lshift+0x3e>
 8006322:	4602      	mov	r2, r0
 8006324:	f240 11d9 	movw	r1, #473	; 0x1d9
 8006328:	4b27      	ldr	r3, [pc, #156]	; (80063c8 <__lshift+0xd0>)
 800632a:	4828      	ldr	r0, [pc, #160]	; (80063cc <__lshift+0xd4>)
 800632c:	f000 fb78 	bl	8006a20 <__assert_func>
 8006330:	3101      	adds	r1, #1
 8006332:	005b      	lsls	r3, r3, #1
 8006334:	e7ee      	b.n	8006314 <__lshift+0x1c>
 8006336:	2300      	movs	r3, #0
 8006338:	f100 0114 	add.w	r1, r0, #20
 800633c:	f100 0210 	add.w	r2, r0, #16
 8006340:	4618      	mov	r0, r3
 8006342:	4553      	cmp	r3, sl
 8006344:	db33      	blt.n	80063ae <__lshift+0xb6>
 8006346:	6920      	ldr	r0, [r4, #16]
 8006348:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800634c:	f104 0314 	add.w	r3, r4, #20
 8006350:	f019 091f 	ands.w	r9, r9, #31
 8006354:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006358:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800635c:	d02b      	beq.n	80063b6 <__lshift+0xbe>
 800635e:	468a      	mov	sl, r1
 8006360:	2200      	movs	r2, #0
 8006362:	f1c9 0e20 	rsb	lr, r9, #32
 8006366:	6818      	ldr	r0, [r3, #0]
 8006368:	fa00 f009 	lsl.w	r0, r0, r9
 800636c:	4302      	orrs	r2, r0
 800636e:	f84a 2b04 	str.w	r2, [sl], #4
 8006372:	f853 2b04 	ldr.w	r2, [r3], #4
 8006376:	459c      	cmp	ip, r3
 8006378:	fa22 f20e 	lsr.w	r2, r2, lr
 800637c:	d8f3      	bhi.n	8006366 <__lshift+0x6e>
 800637e:	ebac 0304 	sub.w	r3, ip, r4
 8006382:	3b15      	subs	r3, #21
 8006384:	f023 0303 	bic.w	r3, r3, #3
 8006388:	3304      	adds	r3, #4
 800638a:	f104 0015 	add.w	r0, r4, #21
 800638e:	4584      	cmp	ip, r0
 8006390:	bf38      	it	cc
 8006392:	2304      	movcc	r3, #4
 8006394:	50ca      	str	r2, [r1, r3]
 8006396:	b10a      	cbz	r2, 800639c <__lshift+0xa4>
 8006398:	f108 0602 	add.w	r6, r8, #2
 800639c:	3e01      	subs	r6, #1
 800639e:	4638      	mov	r0, r7
 80063a0:	4621      	mov	r1, r4
 80063a2:	612e      	str	r6, [r5, #16]
 80063a4:	f7ff fdda 	bl	8005f5c <_Bfree>
 80063a8:	4628      	mov	r0, r5
 80063aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80063ae:	f842 0f04 	str.w	r0, [r2, #4]!
 80063b2:	3301      	adds	r3, #1
 80063b4:	e7c5      	b.n	8006342 <__lshift+0x4a>
 80063b6:	3904      	subs	r1, #4
 80063b8:	f853 2b04 	ldr.w	r2, [r3], #4
 80063bc:	459c      	cmp	ip, r3
 80063be:	f841 2f04 	str.w	r2, [r1, #4]!
 80063c2:	d8f9      	bhi.n	80063b8 <__lshift+0xc0>
 80063c4:	e7ea      	b.n	800639c <__lshift+0xa4>
 80063c6:	bf00      	nop
 80063c8:	08007e53 	.word	0x08007e53
 80063cc:	08007e64 	.word	0x08007e64

080063d0 <__mcmp>:
 80063d0:	4603      	mov	r3, r0
 80063d2:	690a      	ldr	r2, [r1, #16]
 80063d4:	6900      	ldr	r0, [r0, #16]
 80063d6:	b530      	push	{r4, r5, lr}
 80063d8:	1a80      	subs	r0, r0, r2
 80063da:	d10d      	bne.n	80063f8 <__mcmp+0x28>
 80063dc:	3314      	adds	r3, #20
 80063de:	3114      	adds	r1, #20
 80063e0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80063e4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80063e8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80063ec:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80063f0:	4295      	cmp	r5, r2
 80063f2:	d002      	beq.n	80063fa <__mcmp+0x2a>
 80063f4:	d304      	bcc.n	8006400 <__mcmp+0x30>
 80063f6:	2001      	movs	r0, #1
 80063f8:	bd30      	pop	{r4, r5, pc}
 80063fa:	42a3      	cmp	r3, r4
 80063fc:	d3f4      	bcc.n	80063e8 <__mcmp+0x18>
 80063fe:	e7fb      	b.n	80063f8 <__mcmp+0x28>
 8006400:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006404:	e7f8      	b.n	80063f8 <__mcmp+0x28>
	...

08006408 <__mdiff>:
 8006408:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800640c:	460c      	mov	r4, r1
 800640e:	4606      	mov	r6, r0
 8006410:	4611      	mov	r1, r2
 8006412:	4620      	mov	r0, r4
 8006414:	4692      	mov	sl, r2
 8006416:	f7ff ffdb 	bl	80063d0 <__mcmp>
 800641a:	1e05      	subs	r5, r0, #0
 800641c:	d111      	bne.n	8006442 <__mdiff+0x3a>
 800641e:	4629      	mov	r1, r5
 8006420:	4630      	mov	r0, r6
 8006422:	f7ff fd5b 	bl	8005edc <_Balloc>
 8006426:	4602      	mov	r2, r0
 8006428:	b928      	cbnz	r0, 8006436 <__mdiff+0x2e>
 800642a:	f240 2132 	movw	r1, #562	; 0x232
 800642e:	4b3c      	ldr	r3, [pc, #240]	; (8006520 <__mdiff+0x118>)
 8006430:	483c      	ldr	r0, [pc, #240]	; (8006524 <__mdiff+0x11c>)
 8006432:	f000 faf5 	bl	8006a20 <__assert_func>
 8006436:	2301      	movs	r3, #1
 8006438:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800643c:	4610      	mov	r0, r2
 800643e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006442:	bfa4      	itt	ge
 8006444:	4653      	movge	r3, sl
 8006446:	46a2      	movge	sl, r4
 8006448:	4630      	mov	r0, r6
 800644a:	f8da 1004 	ldr.w	r1, [sl, #4]
 800644e:	bfa6      	itte	ge
 8006450:	461c      	movge	r4, r3
 8006452:	2500      	movge	r5, #0
 8006454:	2501      	movlt	r5, #1
 8006456:	f7ff fd41 	bl	8005edc <_Balloc>
 800645a:	4602      	mov	r2, r0
 800645c:	b918      	cbnz	r0, 8006466 <__mdiff+0x5e>
 800645e:	f44f 7110 	mov.w	r1, #576	; 0x240
 8006462:	4b2f      	ldr	r3, [pc, #188]	; (8006520 <__mdiff+0x118>)
 8006464:	e7e4      	b.n	8006430 <__mdiff+0x28>
 8006466:	f100 0814 	add.w	r8, r0, #20
 800646a:	f8da 7010 	ldr.w	r7, [sl, #16]
 800646e:	60c5      	str	r5, [r0, #12]
 8006470:	f04f 0c00 	mov.w	ip, #0
 8006474:	f10a 0514 	add.w	r5, sl, #20
 8006478:	f10a 0010 	add.w	r0, sl, #16
 800647c:	46c2      	mov	sl, r8
 800647e:	6926      	ldr	r6, [r4, #16]
 8006480:	f104 0914 	add.w	r9, r4, #20
 8006484:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 8006488:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800648c:	f850 bf04 	ldr.w	fp, [r0, #4]!
 8006490:	f859 3b04 	ldr.w	r3, [r9], #4
 8006494:	fa1f f18b 	uxth.w	r1, fp
 8006498:	4461      	add	r1, ip
 800649a:	fa1f fc83 	uxth.w	ip, r3
 800649e:	0c1b      	lsrs	r3, r3, #16
 80064a0:	eba1 010c 	sub.w	r1, r1, ip
 80064a4:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80064a8:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80064ac:	b289      	uxth	r1, r1
 80064ae:	ea4f 4c23 	mov.w	ip, r3, asr #16
 80064b2:	454e      	cmp	r6, r9
 80064b4:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80064b8:	f84a 3b04 	str.w	r3, [sl], #4
 80064bc:	d8e6      	bhi.n	800648c <__mdiff+0x84>
 80064be:	1b33      	subs	r3, r6, r4
 80064c0:	3b15      	subs	r3, #21
 80064c2:	f023 0303 	bic.w	r3, r3, #3
 80064c6:	3415      	adds	r4, #21
 80064c8:	3304      	adds	r3, #4
 80064ca:	42a6      	cmp	r6, r4
 80064cc:	bf38      	it	cc
 80064ce:	2304      	movcc	r3, #4
 80064d0:	441d      	add	r5, r3
 80064d2:	4443      	add	r3, r8
 80064d4:	461e      	mov	r6, r3
 80064d6:	462c      	mov	r4, r5
 80064d8:	4574      	cmp	r4, lr
 80064da:	d30e      	bcc.n	80064fa <__mdiff+0xf2>
 80064dc:	f10e 0103 	add.w	r1, lr, #3
 80064e0:	1b49      	subs	r1, r1, r5
 80064e2:	f021 0103 	bic.w	r1, r1, #3
 80064e6:	3d03      	subs	r5, #3
 80064e8:	45ae      	cmp	lr, r5
 80064ea:	bf38      	it	cc
 80064ec:	2100      	movcc	r1, #0
 80064ee:	4419      	add	r1, r3
 80064f0:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 80064f4:	b18b      	cbz	r3, 800651a <__mdiff+0x112>
 80064f6:	6117      	str	r7, [r2, #16]
 80064f8:	e7a0      	b.n	800643c <__mdiff+0x34>
 80064fa:	f854 8b04 	ldr.w	r8, [r4], #4
 80064fe:	fa1f f188 	uxth.w	r1, r8
 8006502:	4461      	add	r1, ip
 8006504:	1408      	asrs	r0, r1, #16
 8006506:	eb00 4018 	add.w	r0, r0, r8, lsr #16
 800650a:	b289      	uxth	r1, r1
 800650c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8006510:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006514:	f846 1b04 	str.w	r1, [r6], #4
 8006518:	e7de      	b.n	80064d8 <__mdiff+0xd0>
 800651a:	3f01      	subs	r7, #1
 800651c:	e7e8      	b.n	80064f0 <__mdiff+0xe8>
 800651e:	bf00      	nop
 8006520:	08007e53 	.word	0x08007e53
 8006524:	08007e64 	.word	0x08007e64

08006528 <__d2b>:
 8006528:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800652c:	2101      	movs	r1, #1
 800652e:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8006532:	4690      	mov	r8, r2
 8006534:	461d      	mov	r5, r3
 8006536:	f7ff fcd1 	bl	8005edc <_Balloc>
 800653a:	4604      	mov	r4, r0
 800653c:	b930      	cbnz	r0, 800654c <__d2b+0x24>
 800653e:	4602      	mov	r2, r0
 8006540:	f240 310a 	movw	r1, #778	; 0x30a
 8006544:	4b24      	ldr	r3, [pc, #144]	; (80065d8 <__d2b+0xb0>)
 8006546:	4825      	ldr	r0, [pc, #148]	; (80065dc <__d2b+0xb4>)
 8006548:	f000 fa6a 	bl	8006a20 <__assert_func>
 800654c:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8006550:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8006554:	bb2d      	cbnz	r5, 80065a2 <__d2b+0x7a>
 8006556:	9301      	str	r3, [sp, #4]
 8006558:	f1b8 0300 	subs.w	r3, r8, #0
 800655c:	d026      	beq.n	80065ac <__d2b+0x84>
 800655e:	4668      	mov	r0, sp
 8006560:	9300      	str	r3, [sp, #0]
 8006562:	f7ff fd87 	bl	8006074 <__lo0bits>
 8006566:	9900      	ldr	r1, [sp, #0]
 8006568:	b1f0      	cbz	r0, 80065a8 <__d2b+0x80>
 800656a:	9a01      	ldr	r2, [sp, #4]
 800656c:	f1c0 0320 	rsb	r3, r0, #32
 8006570:	fa02 f303 	lsl.w	r3, r2, r3
 8006574:	430b      	orrs	r3, r1
 8006576:	40c2      	lsrs	r2, r0
 8006578:	6163      	str	r3, [r4, #20]
 800657a:	9201      	str	r2, [sp, #4]
 800657c:	9b01      	ldr	r3, [sp, #4]
 800657e:	2b00      	cmp	r3, #0
 8006580:	bf14      	ite	ne
 8006582:	2102      	movne	r1, #2
 8006584:	2101      	moveq	r1, #1
 8006586:	61a3      	str	r3, [r4, #24]
 8006588:	6121      	str	r1, [r4, #16]
 800658a:	b1c5      	cbz	r5, 80065be <__d2b+0x96>
 800658c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8006590:	4405      	add	r5, r0
 8006592:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006596:	603d      	str	r5, [r7, #0]
 8006598:	6030      	str	r0, [r6, #0]
 800659a:	4620      	mov	r0, r4
 800659c:	b002      	add	sp, #8
 800659e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80065a2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80065a6:	e7d6      	b.n	8006556 <__d2b+0x2e>
 80065a8:	6161      	str	r1, [r4, #20]
 80065aa:	e7e7      	b.n	800657c <__d2b+0x54>
 80065ac:	a801      	add	r0, sp, #4
 80065ae:	f7ff fd61 	bl	8006074 <__lo0bits>
 80065b2:	2101      	movs	r1, #1
 80065b4:	9b01      	ldr	r3, [sp, #4]
 80065b6:	6121      	str	r1, [r4, #16]
 80065b8:	6163      	str	r3, [r4, #20]
 80065ba:	3020      	adds	r0, #32
 80065bc:	e7e5      	b.n	800658a <__d2b+0x62>
 80065be:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 80065c2:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80065c6:	6038      	str	r0, [r7, #0]
 80065c8:	6918      	ldr	r0, [r3, #16]
 80065ca:	f7ff fd33 	bl	8006034 <__hi0bits>
 80065ce:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 80065d2:	6031      	str	r1, [r6, #0]
 80065d4:	e7e1      	b.n	800659a <__d2b+0x72>
 80065d6:	bf00      	nop
 80065d8:	08007e53 	.word	0x08007e53
 80065dc:	08007e64 	.word	0x08007e64

080065e0 <_calloc_r>:
 80065e0:	b538      	push	{r3, r4, r5, lr}
 80065e2:	fb02 f501 	mul.w	r5, r2, r1
 80065e6:	4629      	mov	r1, r5
 80065e8:	f000 f854 	bl	8006694 <_malloc_r>
 80065ec:	4604      	mov	r4, r0
 80065ee:	b118      	cbz	r0, 80065f8 <_calloc_r+0x18>
 80065f0:	462a      	mov	r2, r5
 80065f2:	2100      	movs	r1, #0
 80065f4:	f7fe f944 	bl	8004880 <memset>
 80065f8:	4620      	mov	r0, r4
 80065fa:	bd38      	pop	{r3, r4, r5, pc}

080065fc <_free_r>:
 80065fc:	b538      	push	{r3, r4, r5, lr}
 80065fe:	4605      	mov	r5, r0
 8006600:	2900      	cmp	r1, #0
 8006602:	d043      	beq.n	800668c <_free_r+0x90>
 8006604:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006608:	1f0c      	subs	r4, r1, #4
 800660a:	2b00      	cmp	r3, #0
 800660c:	bfb8      	it	lt
 800660e:	18e4      	addlt	r4, r4, r3
 8006610:	f000 fa62 	bl	8006ad8 <__malloc_lock>
 8006614:	4a1e      	ldr	r2, [pc, #120]	; (8006690 <_free_r+0x94>)
 8006616:	6813      	ldr	r3, [r2, #0]
 8006618:	4610      	mov	r0, r2
 800661a:	b933      	cbnz	r3, 800662a <_free_r+0x2e>
 800661c:	6063      	str	r3, [r4, #4]
 800661e:	6014      	str	r4, [r2, #0]
 8006620:	4628      	mov	r0, r5
 8006622:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006626:	f000 ba5d 	b.w	8006ae4 <__malloc_unlock>
 800662a:	42a3      	cmp	r3, r4
 800662c:	d90a      	bls.n	8006644 <_free_r+0x48>
 800662e:	6821      	ldr	r1, [r4, #0]
 8006630:	1862      	adds	r2, r4, r1
 8006632:	4293      	cmp	r3, r2
 8006634:	bf01      	itttt	eq
 8006636:	681a      	ldreq	r2, [r3, #0]
 8006638:	685b      	ldreq	r3, [r3, #4]
 800663a:	1852      	addeq	r2, r2, r1
 800663c:	6022      	streq	r2, [r4, #0]
 800663e:	6063      	str	r3, [r4, #4]
 8006640:	6004      	str	r4, [r0, #0]
 8006642:	e7ed      	b.n	8006620 <_free_r+0x24>
 8006644:	461a      	mov	r2, r3
 8006646:	685b      	ldr	r3, [r3, #4]
 8006648:	b10b      	cbz	r3, 800664e <_free_r+0x52>
 800664a:	42a3      	cmp	r3, r4
 800664c:	d9fa      	bls.n	8006644 <_free_r+0x48>
 800664e:	6811      	ldr	r1, [r2, #0]
 8006650:	1850      	adds	r0, r2, r1
 8006652:	42a0      	cmp	r0, r4
 8006654:	d10b      	bne.n	800666e <_free_r+0x72>
 8006656:	6820      	ldr	r0, [r4, #0]
 8006658:	4401      	add	r1, r0
 800665a:	1850      	adds	r0, r2, r1
 800665c:	4283      	cmp	r3, r0
 800665e:	6011      	str	r1, [r2, #0]
 8006660:	d1de      	bne.n	8006620 <_free_r+0x24>
 8006662:	6818      	ldr	r0, [r3, #0]
 8006664:	685b      	ldr	r3, [r3, #4]
 8006666:	4401      	add	r1, r0
 8006668:	6011      	str	r1, [r2, #0]
 800666a:	6053      	str	r3, [r2, #4]
 800666c:	e7d8      	b.n	8006620 <_free_r+0x24>
 800666e:	d902      	bls.n	8006676 <_free_r+0x7a>
 8006670:	230c      	movs	r3, #12
 8006672:	602b      	str	r3, [r5, #0]
 8006674:	e7d4      	b.n	8006620 <_free_r+0x24>
 8006676:	6820      	ldr	r0, [r4, #0]
 8006678:	1821      	adds	r1, r4, r0
 800667a:	428b      	cmp	r3, r1
 800667c:	bf01      	itttt	eq
 800667e:	6819      	ldreq	r1, [r3, #0]
 8006680:	685b      	ldreq	r3, [r3, #4]
 8006682:	1809      	addeq	r1, r1, r0
 8006684:	6021      	streq	r1, [r4, #0]
 8006686:	6063      	str	r3, [r4, #4]
 8006688:	6054      	str	r4, [r2, #4]
 800668a:	e7c9      	b.n	8006620 <_free_r+0x24>
 800668c:	bd38      	pop	{r3, r4, r5, pc}
 800668e:	bf00      	nop
 8006690:	2000060c 	.word	0x2000060c

08006694 <_malloc_r>:
 8006694:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006696:	1ccd      	adds	r5, r1, #3
 8006698:	f025 0503 	bic.w	r5, r5, #3
 800669c:	3508      	adds	r5, #8
 800669e:	2d0c      	cmp	r5, #12
 80066a0:	bf38      	it	cc
 80066a2:	250c      	movcc	r5, #12
 80066a4:	2d00      	cmp	r5, #0
 80066a6:	4606      	mov	r6, r0
 80066a8:	db01      	blt.n	80066ae <_malloc_r+0x1a>
 80066aa:	42a9      	cmp	r1, r5
 80066ac:	d903      	bls.n	80066b6 <_malloc_r+0x22>
 80066ae:	230c      	movs	r3, #12
 80066b0:	6033      	str	r3, [r6, #0]
 80066b2:	2000      	movs	r0, #0
 80066b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80066b6:	f000 fa0f 	bl	8006ad8 <__malloc_lock>
 80066ba:	4921      	ldr	r1, [pc, #132]	; (8006740 <_malloc_r+0xac>)
 80066bc:	680a      	ldr	r2, [r1, #0]
 80066be:	4614      	mov	r4, r2
 80066c0:	b99c      	cbnz	r4, 80066ea <_malloc_r+0x56>
 80066c2:	4f20      	ldr	r7, [pc, #128]	; (8006744 <_malloc_r+0xb0>)
 80066c4:	683b      	ldr	r3, [r7, #0]
 80066c6:	b923      	cbnz	r3, 80066d2 <_malloc_r+0x3e>
 80066c8:	4621      	mov	r1, r4
 80066ca:	4630      	mov	r0, r6
 80066cc:	f000 f998 	bl	8006a00 <_sbrk_r>
 80066d0:	6038      	str	r0, [r7, #0]
 80066d2:	4629      	mov	r1, r5
 80066d4:	4630      	mov	r0, r6
 80066d6:	f000 f993 	bl	8006a00 <_sbrk_r>
 80066da:	1c43      	adds	r3, r0, #1
 80066dc:	d123      	bne.n	8006726 <_malloc_r+0x92>
 80066de:	230c      	movs	r3, #12
 80066e0:	4630      	mov	r0, r6
 80066e2:	6033      	str	r3, [r6, #0]
 80066e4:	f000 f9fe 	bl	8006ae4 <__malloc_unlock>
 80066e8:	e7e3      	b.n	80066b2 <_malloc_r+0x1e>
 80066ea:	6823      	ldr	r3, [r4, #0]
 80066ec:	1b5b      	subs	r3, r3, r5
 80066ee:	d417      	bmi.n	8006720 <_malloc_r+0x8c>
 80066f0:	2b0b      	cmp	r3, #11
 80066f2:	d903      	bls.n	80066fc <_malloc_r+0x68>
 80066f4:	6023      	str	r3, [r4, #0]
 80066f6:	441c      	add	r4, r3
 80066f8:	6025      	str	r5, [r4, #0]
 80066fa:	e004      	b.n	8006706 <_malloc_r+0x72>
 80066fc:	6863      	ldr	r3, [r4, #4]
 80066fe:	42a2      	cmp	r2, r4
 8006700:	bf0c      	ite	eq
 8006702:	600b      	streq	r3, [r1, #0]
 8006704:	6053      	strne	r3, [r2, #4]
 8006706:	4630      	mov	r0, r6
 8006708:	f000 f9ec 	bl	8006ae4 <__malloc_unlock>
 800670c:	f104 000b 	add.w	r0, r4, #11
 8006710:	1d23      	adds	r3, r4, #4
 8006712:	f020 0007 	bic.w	r0, r0, #7
 8006716:	1ac2      	subs	r2, r0, r3
 8006718:	d0cc      	beq.n	80066b4 <_malloc_r+0x20>
 800671a:	1a1b      	subs	r3, r3, r0
 800671c:	50a3      	str	r3, [r4, r2]
 800671e:	e7c9      	b.n	80066b4 <_malloc_r+0x20>
 8006720:	4622      	mov	r2, r4
 8006722:	6864      	ldr	r4, [r4, #4]
 8006724:	e7cc      	b.n	80066c0 <_malloc_r+0x2c>
 8006726:	1cc4      	adds	r4, r0, #3
 8006728:	f024 0403 	bic.w	r4, r4, #3
 800672c:	42a0      	cmp	r0, r4
 800672e:	d0e3      	beq.n	80066f8 <_malloc_r+0x64>
 8006730:	1a21      	subs	r1, r4, r0
 8006732:	4630      	mov	r0, r6
 8006734:	f000 f964 	bl	8006a00 <_sbrk_r>
 8006738:	3001      	adds	r0, #1
 800673a:	d1dd      	bne.n	80066f8 <_malloc_r+0x64>
 800673c:	e7cf      	b.n	80066de <_malloc_r+0x4a>
 800673e:	bf00      	nop
 8006740:	2000060c 	.word	0x2000060c
 8006744:	20000610 	.word	0x20000610

08006748 <__ssputs_r>:
 8006748:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800674c:	688e      	ldr	r6, [r1, #8]
 800674e:	4682      	mov	sl, r0
 8006750:	429e      	cmp	r6, r3
 8006752:	460c      	mov	r4, r1
 8006754:	4690      	mov	r8, r2
 8006756:	461f      	mov	r7, r3
 8006758:	d838      	bhi.n	80067cc <__ssputs_r+0x84>
 800675a:	898a      	ldrh	r2, [r1, #12]
 800675c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006760:	d032      	beq.n	80067c8 <__ssputs_r+0x80>
 8006762:	6825      	ldr	r5, [r4, #0]
 8006764:	6909      	ldr	r1, [r1, #16]
 8006766:	3301      	adds	r3, #1
 8006768:	eba5 0901 	sub.w	r9, r5, r1
 800676c:	6965      	ldr	r5, [r4, #20]
 800676e:	444b      	add	r3, r9
 8006770:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006774:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006778:	106d      	asrs	r5, r5, #1
 800677a:	429d      	cmp	r5, r3
 800677c:	bf38      	it	cc
 800677e:	461d      	movcc	r5, r3
 8006780:	0553      	lsls	r3, r2, #21
 8006782:	d531      	bpl.n	80067e8 <__ssputs_r+0xa0>
 8006784:	4629      	mov	r1, r5
 8006786:	f7ff ff85 	bl	8006694 <_malloc_r>
 800678a:	4606      	mov	r6, r0
 800678c:	b950      	cbnz	r0, 80067a4 <__ssputs_r+0x5c>
 800678e:	230c      	movs	r3, #12
 8006790:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006794:	f8ca 3000 	str.w	r3, [sl]
 8006798:	89a3      	ldrh	r3, [r4, #12]
 800679a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800679e:	81a3      	strh	r3, [r4, #12]
 80067a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80067a4:	464a      	mov	r2, r9
 80067a6:	6921      	ldr	r1, [r4, #16]
 80067a8:	f7ff fb8a 	bl	8005ec0 <memcpy>
 80067ac:	89a3      	ldrh	r3, [r4, #12]
 80067ae:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80067b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80067b6:	81a3      	strh	r3, [r4, #12]
 80067b8:	6126      	str	r6, [r4, #16]
 80067ba:	444e      	add	r6, r9
 80067bc:	6026      	str	r6, [r4, #0]
 80067be:	463e      	mov	r6, r7
 80067c0:	6165      	str	r5, [r4, #20]
 80067c2:	eba5 0509 	sub.w	r5, r5, r9
 80067c6:	60a5      	str	r5, [r4, #8]
 80067c8:	42be      	cmp	r6, r7
 80067ca:	d900      	bls.n	80067ce <__ssputs_r+0x86>
 80067cc:	463e      	mov	r6, r7
 80067ce:	4632      	mov	r2, r6
 80067d0:	4641      	mov	r1, r8
 80067d2:	6820      	ldr	r0, [r4, #0]
 80067d4:	f000 f966 	bl	8006aa4 <memmove>
 80067d8:	68a3      	ldr	r3, [r4, #8]
 80067da:	6822      	ldr	r2, [r4, #0]
 80067dc:	1b9b      	subs	r3, r3, r6
 80067de:	4432      	add	r2, r6
 80067e0:	2000      	movs	r0, #0
 80067e2:	60a3      	str	r3, [r4, #8]
 80067e4:	6022      	str	r2, [r4, #0]
 80067e6:	e7db      	b.n	80067a0 <__ssputs_r+0x58>
 80067e8:	462a      	mov	r2, r5
 80067ea:	f000 f981 	bl	8006af0 <_realloc_r>
 80067ee:	4606      	mov	r6, r0
 80067f0:	2800      	cmp	r0, #0
 80067f2:	d1e1      	bne.n	80067b8 <__ssputs_r+0x70>
 80067f4:	4650      	mov	r0, sl
 80067f6:	6921      	ldr	r1, [r4, #16]
 80067f8:	f7ff ff00 	bl	80065fc <_free_r>
 80067fc:	e7c7      	b.n	800678e <__ssputs_r+0x46>
	...

08006800 <_svfiprintf_r>:
 8006800:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006804:	4698      	mov	r8, r3
 8006806:	898b      	ldrh	r3, [r1, #12]
 8006808:	4607      	mov	r7, r0
 800680a:	061b      	lsls	r3, r3, #24
 800680c:	460d      	mov	r5, r1
 800680e:	4614      	mov	r4, r2
 8006810:	b09d      	sub	sp, #116	; 0x74
 8006812:	d50e      	bpl.n	8006832 <_svfiprintf_r+0x32>
 8006814:	690b      	ldr	r3, [r1, #16]
 8006816:	b963      	cbnz	r3, 8006832 <_svfiprintf_r+0x32>
 8006818:	2140      	movs	r1, #64	; 0x40
 800681a:	f7ff ff3b 	bl	8006694 <_malloc_r>
 800681e:	6028      	str	r0, [r5, #0]
 8006820:	6128      	str	r0, [r5, #16]
 8006822:	b920      	cbnz	r0, 800682e <_svfiprintf_r+0x2e>
 8006824:	230c      	movs	r3, #12
 8006826:	603b      	str	r3, [r7, #0]
 8006828:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800682c:	e0d1      	b.n	80069d2 <_svfiprintf_r+0x1d2>
 800682e:	2340      	movs	r3, #64	; 0x40
 8006830:	616b      	str	r3, [r5, #20]
 8006832:	2300      	movs	r3, #0
 8006834:	9309      	str	r3, [sp, #36]	; 0x24
 8006836:	2320      	movs	r3, #32
 8006838:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800683c:	2330      	movs	r3, #48	; 0x30
 800683e:	f04f 0901 	mov.w	r9, #1
 8006842:	f8cd 800c 	str.w	r8, [sp, #12]
 8006846:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80069ec <_svfiprintf_r+0x1ec>
 800684a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800684e:	4623      	mov	r3, r4
 8006850:	469a      	mov	sl, r3
 8006852:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006856:	b10a      	cbz	r2, 800685c <_svfiprintf_r+0x5c>
 8006858:	2a25      	cmp	r2, #37	; 0x25
 800685a:	d1f9      	bne.n	8006850 <_svfiprintf_r+0x50>
 800685c:	ebba 0b04 	subs.w	fp, sl, r4
 8006860:	d00b      	beq.n	800687a <_svfiprintf_r+0x7a>
 8006862:	465b      	mov	r3, fp
 8006864:	4622      	mov	r2, r4
 8006866:	4629      	mov	r1, r5
 8006868:	4638      	mov	r0, r7
 800686a:	f7ff ff6d 	bl	8006748 <__ssputs_r>
 800686e:	3001      	adds	r0, #1
 8006870:	f000 80aa 	beq.w	80069c8 <_svfiprintf_r+0x1c8>
 8006874:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006876:	445a      	add	r2, fp
 8006878:	9209      	str	r2, [sp, #36]	; 0x24
 800687a:	f89a 3000 	ldrb.w	r3, [sl]
 800687e:	2b00      	cmp	r3, #0
 8006880:	f000 80a2 	beq.w	80069c8 <_svfiprintf_r+0x1c8>
 8006884:	2300      	movs	r3, #0
 8006886:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800688a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800688e:	f10a 0a01 	add.w	sl, sl, #1
 8006892:	9304      	str	r3, [sp, #16]
 8006894:	9307      	str	r3, [sp, #28]
 8006896:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800689a:	931a      	str	r3, [sp, #104]	; 0x68
 800689c:	4654      	mov	r4, sl
 800689e:	2205      	movs	r2, #5
 80068a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80068a4:	4851      	ldr	r0, [pc, #324]	; (80069ec <_svfiprintf_r+0x1ec>)
 80068a6:	f7ff fafd 	bl	8005ea4 <memchr>
 80068aa:	9a04      	ldr	r2, [sp, #16]
 80068ac:	b9d8      	cbnz	r0, 80068e6 <_svfiprintf_r+0xe6>
 80068ae:	06d0      	lsls	r0, r2, #27
 80068b0:	bf44      	itt	mi
 80068b2:	2320      	movmi	r3, #32
 80068b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80068b8:	0711      	lsls	r1, r2, #28
 80068ba:	bf44      	itt	mi
 80068bc:	232b      	movmi	r3, #43	; 0x2b
 80068be:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80068c2:	f89a 3000 	ldrb.w	r3, [sl]
 80068c6:	2b2a      	cmp	r3, #42	; 0x2a
 80068c8:	d015      	beq.n	80068f6 <_svfiprintf_r+0xf6>
 80068ca:	4654      	mov	r4, sl
 80068cc:	2000      	movs	r0, #0
 80068ce:	f04f 0c0a 	mov.w	ip, #10
 80068d2:	9a07      	ldr	r2, [sp, #28]
 80068d4:	4621      	mov	r1, r4
 80068d6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80068da:	3b30      	subs	r3, #48	; 0x30
 80068dc:	2b09      	cmp	r3, #9
 80068de:	d94e      	bls.n	800697e <_svfiprintf_r+0x17e>
 80068e0:	b1b0      	cbz	r0, 8006910 <_svfiprintf_r+0x110>
 80068e2:	9207      	str	r2, [sp, #28]
 80068e4:	e014      	b.n	8006910 <_svfiprintf_r+0x110>
 80068e6:	eba0 0308 	sub.w	r3, r0, r8
 80068ea:	fa09 f303 	lsl.w	r3, r9, r3
 80068ee:	4313      	orrs	r3, r2
 80068f0:	46a2      	mov	sl, r4
 80068f2:	9304      	str	r3, [sp, #16]
 80068f4:	e7d2      	b.n	800689c <_svfiprintf_r+0x9c>
 80068f6:	9b03      	ldr	r3, [sp, #12]
 80068f8:	1d19      	adds	r1, r3, #4
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	9103      	str	r1, [sp, #12]
 80068fe:	2b00      	cmp	r3, #0
 8006900:	bfbb      	ittet	lt
 8006902:	425b      	neglt	r3, r3
 8006904:	f042 0202 	orrlt.w	r2, r2, #2
 8006908:	9307      	strge	r3, [sp, #28]
 800690a:	9307      	strlt	r3, [sp, #28]
 800690c:	bfb8      	it	lt
 800690e:	9204      	strlt	r2, [sp, #16]
 8006910:	7823      	ldrb	r3, [r4, #0]
 8006912:	2b2e      	cmp	r3, #46	; 0x2e
 8006914:	d10c      	bne.n	8006930 <_svfiprintf_r+0x130>
 8006916:	7863      	ldrb	r3, [r4, #1]
 8006918:	2b2a      	cmp	r3, #42	; 0x2a
 800691a:	d135      	bne.n	8006988 <_svfiprintf_r+0x188>
 800691c:	9b03      	ldr	r3, [sp, #12]
 800691e:	3402      	adds	r4, #2
 8006920:	1d1a      	adds	r2, r3, #4
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	9203      	str	r2, [sp, #12]
 8006926:	2b00      	cmp	r3, #0
 8006928:	bfb8      	it	lt
 800692a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800692e:	9305      	str	r3, [sp, #20]
 8006930:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80069fc <_svfiprintf_r+0x1fc>
 8006934:	2203      	movs	r2, #3
 8006936:	4650      	mov	r0, sl
 8006938:	7821      	ldrb	r1, [r4, #0]
 800693a:	f7ff fab3 	bl	8005ea4 <memchr>
 800693e:	b140      	cbz	r0, 8006952 <_svfiprintf_r+0x152>
 8006940:	2340      	movs	r3, #64	; 0x40
 8006942:	eba0 000a 	sub.w	r0, r0, sl
 8006946:	fa03 f000 	lsl.w	r0, r3, r0
 800694a:	9b04      	ldr	r3, [sp, #16]
 800694c:	3401      	adds	r4, #1
 800694e:	4303      	orrs	r3, r0
 8006950:	9304      	str	r3, [sp, #16]
 8006952:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006956:	2206      	movs	r2, #6
 8006958:	4825      	ldr	r0, [pc, #148]	; (80069f0 <_svfiprintf_r+0x1f0>)
 800695a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800695e:	f7ff faa1 	bl	8005ea4 <memchr>
 8006962:	2800      	cmp	r0, #0
 8006964:	d038      	beq.n	80069d8 <_svfiprintf_r+0x1d8>
 8006966:	4b23      	ldr	r3, [pc, #140]	; (80069f4 <_svfiprintf_r+0x1f4>)
 8006968:	bb1b      	cbnz	r3, 80069b2 <_svfiprintf_r+0x1b2>
 800696a:	9b03      	ldr	r3, [sp, #12]
 800696c:	3307      	adds	r3, #7
 800696e:	f023 0307 	bic.w	r3, r3, #7
 8006972:	3308      	adds	r3, #8
 8006974:	9303      	str	r3, [sp, #12]
 8006976:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006978:	4433      	add	r3, r6
 800697a:	9309      	str	r3, [sp, #36]	; 0x24
 800697c:	e767      	b.n	800684e <_svfiprintf_r+0x4e>
 800697e:	460c      	mov	r4, r1
 8006980:	2001      	movs	r0, #1
 8006982:	fb0c 3202 	mla	r2, ip, r2, r3
 8006986:	e7a5      	b.n	80068d4 <_svfiprintf_r+0xd4>
 8006988:	2300      	movs	r3, #0
 800698a:	f04f 0c0a 	mov.w	ip, #10
 800698e:	4619      	mov	r1, r3
 8006990:	3401      	adds	r4, #1
 8006992:	9305      	str	r3, [sp, #20]
 8006994:	4620      	mov	r0, r4
 8006996:	f810 2b01 	ldrb.w	r2, [r0], #1
 800699a:	3a30      	subs	r2, #48	; 0x30
 800699c:	2a09      	cmp	r2, #9
 800699e:	d903      	bls.n	80069a8 <_svfiprintf_r+0x1a8>
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d0c5      	beq.n	8006930 <_svfiprintf_r+0x130>
 80069a4:	9105      	str	r1, [sp, #20]
 80069a6:	e7c3      	b.n	8006930 <_svfiprintf_r+0x130>
 80069a8:	4604      	mov	r4, r0
 80069aa:	2301      	movs	r3, #1
 80069ac:	fb0c 2101 	mla	r1, ip, r1, r2
 80069b0:	e7f0      	b.n	8006994 <_svfiprintf_r+0x194>
 80069b2:	ab03      	add	r3, sp, #12
 80069b4:	9300      	str	r3, [sp, #0]
 80069b6:	462a      	mov	r2, r5
 80069b8:	4638      	mov	r0, r7
 80069ba:	4b0f      	ldr	r3, [pc, #60]	; (80069f8 <_svfiprintf_r+0x1f8>)
 80069bc:	a904      	add	r1, sp, #16
 80069be:	f7fe f805 	bl	80049cc <_printf_float>
 80069c2:	1c42      	adds	r2, r0, #1
 80069c4:	4606      	mov	r6, r0
 80069c6:	d1d6      	bne.n	8006976 <_svfiprintf_r+0x176>
 80069c8:	89ab      	ldrh	r3, [r5, #12]
 80069ca:	065b      	lsls	r3, r3, #25
 80069cc:	f53f af2c 	bmi.w	8006828 <_svfiprintf_r+0x28>
 80069d0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80069d2:	b01d      	add	sp, #116	; 0x74
 80069d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80069d8:	ab03      	add	r3, sp, #12
 80069da:	9300      	str	r3, [sp, #0]
 80069dc:	462a      	mov	r2, r5
 80069de:	4638      	mov	r0, r7
 80069e0:	4b05      	ldr	r3, [pc, #20]	; (80069f8 <_svfiprintf_r+0x1f8>)
 80069e2:	a904      	add	r1, sp, #16
 80069e4:	f7fe fa8e 	bl	8004f04 <_printf_i>
 80069e8:	e7eb      	b.n	80069c2 <_svfiprintf_r+0x1c2>
 80069ea:	bf00      	nop
 80069ec:	08007fc4 	.word	0x08007fc4
 80069f0:	08007fce 	.word	0x08007fce
 80069f4:	080049cd 	.word	0x080049cd
 80069f8:	08006749 	.word	0x08006749
 80069fc:	08007fca 	.word	0x08007fca

08006a00 <_sbrk_r>:
 8006a00:	b538      	push	{r3, r4, r5, lr}
 8006a02:	2300      	movs	r3, #0
 8006a04:	4d05      	ldr	r5, [pc, #20]	; (8006a1c <_sbrk_r+0x1c>)
 8006a06:	4604      	mov	r4, r0
 8006a08:	4608      	mov	r0, r1
 8006a0a:	602b      	str	r3, [r5, #0]
 8006a0c:	f7fa ff56 	bl	80018bc <_sbrk>
 8006a10:	1c43      	adds	r3, r0, #1
 8006a12:	d102      	bne.n	8006a1a <_sbrk_r+0x1a>
 8006a14:	682b      	ldr	r3, [r5, #0]
 8006a16:	b103      	cbz	r3, 8006a1a <_sbrk_r+0x1a>
 8006a18:	6023      	str	r3, [r4, #0]
 8006a1a:	bd38      	pop	{r3, r4, r5, pc}
 8006a1c:	20000728 	.word	0x20000728

08006a20 <__assert_func>:
 8006a20:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006a22:	4614      	mov	r4, r2
 8006a24:	461a      	mov	r2, r3
 8006a26:	4b09      	ldr	r3, [pc, #36]	; (8006a4c <__assert_func+0x2c>)
 8006a28:	4605      	mov	r5, r0
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	68d8      	ldr	r0, [r3, #12]
 8006a2e:	b14c      	cbz	r4, 8006a44 <__assert_func+0x24>
 8006a30:	4b07      	ldr	r3, [pc, #28]	; (8006a50 <__assert_func+0x30>)
 8006a32:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006a36:	9100      	str	r1, [sp, #0]
 8006a38:	462b      	mov	r3, r5
 8006a3a:	4906      	ldr	r1, [pc, #24]	; (8006a54 <__assert_func+0x34>)
 8006a3c:	f000 f80e 	bl	8006a5c <fiprintf>
 8006a40:	f000 faa2 	bl	8006f88 <abort>
 8006a44:	4b04      	ldr	r3, [pc, #16]	; (8006a58 <__assert_func+0x38>)
 8006a46:	461c      	mov	r4, r3
 8006a48:	e7f3      	b.n	8006a32 <__assert_func+0x12>
 8006a4a:	bf00      	nop
 8006a4c:	20000014 	.word	0x20000014
 8006a50:	08007fd5 	.word	0x08007fd5
 8006a54:	08007fe2 	.word	0x08007fe2
 8006a58:	08008010 	.word	0x08008010

08006a5c <fiprintf>:
 8006a5c:	b40e      	push	{r1, r2, r3}
 8006a5e:	b503      	push	{r0, r1, lr}
 8006a60:	4601      	mov	r1, r0
 8006a62:	ab03      	add	r3, sp, #12
 8006a64:	4805      	ldr	r0, [pc, #20]	; (8006a7c <fiprintf+0x20>)
 8006a66:	f853 2b04 	ldr.w	r2, [r3], #4
 8006a6a:	6800      	ldr	r0, [r0, #0]
 8006a6c:	9301      	str	r3, [sp, #4]
 8006a6e:	f000 f88d 	bl	8006b8c <_vfiprintf_r>
 8006a72:	b002      	add	sp, #8
 8006a74:	f85d eb04 	ldr.w	lr, [sp], #4
 8006a78:	b003      	add	sp, #12
 8006a7a:	4770      	bx	lr
 8006a7c:	20000014 	.word	0x20000014

08006a80 <__ascii_mbtowc>:
 8006a80:	b082      	sub	sp, #8
 8006a82:	b901      	cbnz	r1, 8006a86 <__ascii_mbtowc+0x6>
 8006a84:	a901      	add	r1, sp, #4
 8006a86:	b142      	cbz	r2, 8006a9a <__ascii_mbtowc+0x1a>
 8006a88:	b14b      	cbz	r3, 8006a9e <__ascii_mbtowc+0x1e>
 8006a8a:	7813      	ldrb	r3, [r2, #0]
 8006a8c:	600b      	str	r3, [r1, #0]
 8006a8e:	7812      	ldrb	r2, [r2, #0]
 8006a90:	1e10      	subs	r0, r2, #0
 8006a92:	bf18      	it	ne
 8006a94:	2001      	movne	r0, #1
 8006a96:	b002      	add	sp, #8
 8006a98:	4770      	bx	lr
 8006a9a:	4610      	mov	r0, r2
 8006a9c:	e7fb      	b.n	8006a96 <__ascii_mbtowc+0x16>
 8006a9e:	f06f 0001 	mvn.w	r0, #1
 8006aa2:	e7f8      	b.n	8006a96 <__ascii_mbtowc+0x16>

08006aa4 <memmove>:
 8006aa4:	4288      	cmp	r0, r1
 8006aa6:	b510      	push	{r4, lr}
 8006aa8:	eb01 0402 	add.w	r4, r1, r2
 8006aac:	d902      	bls.n	8006ab4 <memmove+0x10>
 8006aae:	4284      	cmp	r4, r0
 8006ab0:	4623      	mov	r3, r4
 8006ab2:	d807      	bhi.n	8006ac4 <memmove+0x20>
 8006ab4:	1e43      	subs	r3, r0, #1
 8006ab6:	42a1      	cmp	r1, r4
 8006ab8:	d008      	beq.n	8006acc <memmove+0x28>
 8006aba:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006abe:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006ac2:	e7f8      	b.n	8006ab6 <memmove+0x12>
 8006ac4:	4601      	mov	r1, r0
 8006ac6:	4402      	add	r2, r0
 8006ac8:	428a      	cmp	r2, r1
 8006aca:	d100      	bne.n	8006ace <memmove+0x2a>
 8006acc:	bd10      	pop	{r4, pc}
 8006ace:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006ad2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006ad6:	e7f7      	b.n	8006ac8 <memmove+0x24>

08006ad8 <__malloc_lock>:
 8006ad8:	4801      	ldr	r0, [pc, #4]	; (8006ae0 <__malloc_lock+0x8>)
 8006ada:	f000 bc15 	b.w	8007308 <__retarget_lock_acquire_recursive>
 8006ade:	bf00      	nop
 8006ae0:	20000730 	.word	0x20000730

08006ae4 <__malloc_unlock>:
 8006ae4:	4801      	ldr	r0, [pc, #4]	; (8006aec <__malloc_unlock+0x8>)
 8006ae6:	f000 bc10 	b.w	800730a <__retarget_lock_release_recursive>
 8006aea:	bf00      	nop
 8006aec:	20000730 	.word	0x20000730

08006af0 <_realloc_r>:
 8006af0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006af2:	4607      	mov	r7, r0
 8006af4:	4614      	mov	r4, r2
 8006af6:	460e      	mov	r6, r1
 8006af8:	b921      	cbnz	r1, 8006b04 <_realloc_r+0x14>
 8006afa:	4611      	mov	r1, r2
 8006afc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006b00:	f7ff bdc8 	b.w	8006694 <_malloc_r>
 8006b04:	b922      	cbnz	r2, 8006b10 <_realloc_r+0x20>
 8006b06:	f7ff fd79 	bl	80065fc <_free_r>
 8006b0a:	4625      	mov	r5, r4
 8006b0c:	4628      	mov	r0, r5
 8006b0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006b10:	f000 fc60 	bl	80073d4 <_malloc_usable_size_r>
 8006b14:	42a0      	cmp	r0, r4
 8006b16:	d20f      	bcs.n	8006b38 <_realloc_r+0x48>
 8006b18:	4621      	mov	r1, r4
 8006b1a:	4638      	mov	r0, r7
 8006b1c:	f7ff fdba 	bl	8006694 <_malloc_r>
 8006b20:	4605      	mov	r5, r0
 8006b22:	2800      	cmp	r0, #0
 8006b24:	d0f2      	beq.n	8006b0c <_realloc_r+0x1c>
 8006b26:	4631      	mov	r1, r6
 8006b28:	4622      	mov	r2, r4
 8006b2a:	f7ff f9c9 	bl	8005ec0 <memcpy>
 8006b2e:	4631      	mov	r1, r6
 8006b30:	4638      	mov	r0, r7
 8006b32:	f7ff fd63 	bl	80065fc <_free_r>
 8006b36:	e7e9      	b.n	8006b0c <_realloc_r+0x1c>
 8006b38:	4635      	mov	r5, r6
 8006b3a:	e7e7      	b.n	8006b0c <_realloc_r+0x1c>

08006b3c <__sfputc_r>:
 8006b3c:	6893      	ldr	r3, [r2, #8]
 8006b3e:	b410      	push	{r4}
 8006b40:	3b01      	subs	r3, #1
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	6093      	str	r3, [r2, #8]
 8006b46:	da07      	bge.n	8006b58 <__sfputc_r+0x1c>
 8006b48:	6994      	ldr	r4, [r2, #24]
 8006b4a:	42a3      	cmp	r3, r4
 8006b4c:	db01      	blt.n	8006b52 <__sfputc_r+0x16>
 8006b4e:	290a      	cmp	r1, #10
 8006b50:	d102      	bne.n	8006b58 <__sfputc_r+0x1c>
 8006b52:	bc10      	pop	{r4}
 8006b54:	f000 b94a 	b.w	8006dec <__swbuf_r>
 8006b58:	6813      	ldr	r3, [r2, #0]
 8006b5a:	1c58      	adds	r0, r3, #1
 8006b5c:	6010      	str	r0, [r2, #0]
 8006b5e:	7019      	strb	r1, [r3, #0]
 8006b60:	4608      	mov	r0, r1
 8006b62:	bc10      	pop	{r4}
 8006b64:	4770      	bx	lr

08006b66 <__sfputs_r>:
 8006b66:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b68:	4606      	mov	r6, r0
 8006b6a:	460f      	mov	r7, r1
 8006b6c:	4614      	mov	r4, r2
 8006b6e:	18d5      	adds	r5, r2, r3
 8006b70:	42ac      	cmp	r4, r5
 8006b72:	d101      	bne.n	8006b78 <__sfputs_r+0x12>
 8006b74:	2000      	movs	r0, #0
 8006b76:	e007      	b.n	8006b88 <__sfputs_r+0x22>
 8006b78:	463a      	mov	r2, r7
 8006b7a:	4630      	mov	r0, r6
 8006b7c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006b80:	f7ff ffdc 	bl	8006b3c <__sfputc_r>
 8006b84:	1c43      	adds	r3, r0, #1
 8006b86:	d1f3      	bne.n	8006b70 <__sfputs_r+0xa>
 8006b88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006b8c <_vfiprintf_r>:
 8006b8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b90:	460d      	mov	r5, r1
 8006b92:	4614      	mov	r4, r2
 8006b94:	4698      	mov	r8, r3
 8006b96:	4606      	mov	r6, r0
 8006b98:	b09d      	sub	sp, #116	; 0x74
 8006b9a:	b118      	cbz	r0, 8006ba4 <_vfiprintf_r+0x18>
 8006b9c:	6983      	ldr	r3, [r0, #24]
 8006b9e:	b90b      	cbnz	r3, 8006ba4 <_vfiprintf_r+0x18>
 8006ba0:	f000 fb14 	bl	80071cc <__sinit>
 8006ba4:	4b89      	ldr	r3, [pc, #548]	; (8006dcc <_vfiprintf_r+0x240>)
 8006ba6:	429d      	cmp	r5, r3
 8006ba8:	d11b      	bne.n	8006be2 <_vfiprintf_r+0x56>
 8006baa:	6875      	ldr	r5, [r6, #4]
 8006bac:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006bae:	07d9      	lsls	r1, r3, #31
 8006bb0:	d405      	bmi.n	8006bbe <_vfiprintf_r+0x32>
 8006bb2:	89ab      	ldrh	r3, [r5, #12]
 8006bb4:	059a      	lsls	r2, r3, #22
 8006bb6:	d402      	bmi.n	8006bbe <_vfiprintf_r+0x32>
 8006bb8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006bba:	f000 fba5 	bl	8007308 <__retarget_lock_acquire_recursive>
 8006bbe:	89ab      	ldrh	r3, [r5, #12]
 8006bc0:	071b      	lsls	r3, r3, #28
 8006bc2:	d501      	bpl.n	8006bc8 <_vfiprintf_r+0x3c>
 8006bc4:	692b      	ldr	r3, [r5, #16]
 8006bc6:	b9eb      	cbnz	r3, 8006c04 <_vfiprintf_r+0x78>
 8006bc8:	4629      	mov	r1, r5
 8006bca:	4630      	mov	r0, r6
 8006bcc:	f000 f96e 	bl	8006eac <__swsetup_r>
 8006bd0:	b1c0      	cbz	r0, 8006c04 <_vfiprintf_r+0x78>
 8006bd2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006bd4:	07dc      	lsls	r4, r3, #31
 8006bd6:	d50e      	bpl.n	8006bf6 <_vfiprintf_r+0x6a>
 8006bd8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006bdc:	b01d      	add	sp, #116	; 0x74
 8006bde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006be2:	4b7b      	ldr	r3, [pc, #492]	; (8006dd0 <_vfiprintf_r+0x244>)
 8006be4:	429d      	cmp	r5, r3
 8006be6:	d101      	bne.n	8006bec <_vfiprintf_r+0x60>
 8006be8:	68b5      	ldr	r5, [r6, #8]
 8006bea:	e7df      	b.n	8006bac <_vfiprintf_r+0x20>
 8006bec:	4b79      	ldr	r3, [pc, #484]	; (8006dd4 <_vfiprintf_r+0x248>)
 8006bee:	429d      	cmp	r5, r3
 8006bf0:	bf08      	it	eq
 8006bf2:	68f5      	ldreq	r5, [r6, #12]
 8006bf4:	e7da      	b.n	8006bac <_vfiprintf_r+0x20>
 8006bf6:	89ab      	ldrh	r3, [r5, #12]
 8006bf8:	0598      	lsls	r0, r3, #22
 8006bfa:	d4ed      	bmi.n	8006bd8 <_vfiprintf_r+0x4c>
 8006bfc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006bfe:	f000 fb84 	bl	800730a <__retarget_lock_release_recursive>
 8006c02:	e7e9      	b.n	8006bd8 <_vfiprintf_r+0x4c>
 8006c04:	2300      	movs	r3, #0
 8006c06:	9309      	str	r3, [sp, #36]	; 0x24
 8006c08:	2320      	movs	r3, #32
 8006c0a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006c0e:	2330      	movs	r3, #48	; 0x30
 8006c10:	f04f 0901 	mov.w	r9, #1
 8006c14:	f8cd 800c 	str.w	r8, [sp, #12]
 8006c18:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8006dd8 <_vfiprintf_r+0x24c>
 8006c1c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006c20:	4623      	mov	r3, r4
 8006c22:	469a      	mov	sl, r3
 8006c24:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006c28:	b10a      	cbz	r2, 8006c2e <_vfiprintf_r+0xa2>
 8006c2a:	2a25      	cmp	r2, #37	; 0x25
 8006c2c:	d1f9      	bne.n	8006c22 <_vfiprintf_r+0x96>
 8006c2e:	ebba 0b04 	subs.w	fp, sl, r4
 8006c32:	d00b      	beq.n	8006c4c <_vfiprintf_r+0xc0>
 8006c34:	465b      	mov	r3, fp
 8006c36:	4622      	mov	r2, r4
 8006c38:	4629      	mov	r1, r5
 8006c3a:	4630      	mov	r0, r6
 8006c3c:	f7ff ff93 	bl	8006b66 <__sfputs_r>
 8006c40:	3001      	adds	r0, #1
 8006c42:	f000 80aa 	beq.w	8006d9a <_vfiprintf_r+0x20e>
 8006c46:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006c48:	445a      	add	r2, fp
 8006c4a:	9209      	str	r2, [sp, #36]	; 0x24
 8006c4c:	f89a 3000 	ldrb.w	r3, [sl]
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	f000 80a2 	beq.w	8006d9a <_vfiprintf_r+0x20e>
 8006c56:	2300      	movs	r3, #0
 8006c58:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006c5c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006c60:	f10a 0a01 	add.w	sl, sl, #1
 8006c64:	9304      	str	r3, [sp, #16]
 8006c66:	9307      	str	r3, [sp, #28]
 8006c68:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006c6c:	931a      	str	r3, [sp, #104]	; 0x68
 8006c6e:	4654      	mov	r4, sl
 8006c70:	2205      	movs	r2, #5
 8006c72:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006c76:	4858      	ldr	r0, [pc, #352]	; (8006dd8 <_vfiprintf_r+0x24c>)
 8006c78:	f7ff f914 	bl	8005ea4 <memchr>
 8006c7c:	9a04      	ldr	r2, [sp, #16]
 8006c7e:	b9d8      	cbnz	r0, 8006cb8 <_vfiprintf_r+0x12c>
 8006c80:	06d1      	lsls	r1, r2, #27
 8006c82:	bf44      	itt	mi
 8006c84:	2320      	movmi	r3, #32
 8006c86:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006c8a:	0713      	lsls	r3, r2, #28
 8006c8c:	bf44      	itt	mi
 8006c8e:	232b      	movmi	r3, #43	; 0x2b
 8006c90:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006c94:	f89a 3000 	ldrb.w	r3, [sl]
 8006c98:	2b2a      	cmp	r3, #42	; 0x2a
 8006c9a:	d015      	beq.n	8006cc8 <_vfiprintf_r+0x13c>
 8006c9c:	4654      	mov	r4, sl
 8006c9e:	2000      	movs	r0, #0
 8006ca0:	f04f 0c0a 	mov.w	ip, #10
 8006ca4:	9a07      	ldr	r2, [sp, #28]
 8006ca6:	4621      	mov	r1, r4
 8006ca8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006cac:	3b30      	subs	r3, #48	; 0x30
 8006cae:	2b09      	cmp	r3, #9
 8006cb0:	d94e      	bls.n	8006d50 <_vfiprintf_r+0x1c4>
 8006cb2:	b1b0      	cbz	r0, 8006ce2 <_vfiprintf_r+0x156>
 8006cb4:	9207      	str	r2, [sp, #28]
 8006cb6:	e014      	b.n	8006ce2 <_vfiprintf_r+0x156>
 8006cb8:	eba0 0308 	sub.w	r3, r0, r8
 8006cbc:	fa09 f303 	lsl.w	r3, r9, r3
 8006cc0:	4313      	orrs	r3, r2
 8006cc2:	46a2      	mov	sl, r4
 8006cc4:	9304      	str	r3, [sp, #16]
 8006cc6:	e7d2      	b.n	8006c6e <_vfiprintf_r+0xe2>
 8006cc8:	9b03      	ldr	r3, [sp, #12]
 8006cca:	1d19      	adds	r1, r3, #4
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	9103      	str	r1, [sp, #12]
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	bfbb      	ittet	lt
 8006cd4:	425b      	neglt	r3, r3
 8006cd6:	f042 0202 	orrlt.w	r2, r2, #2
 8006cda:	9307      	strge	r3, [sp, #28]
 8006cdc:	9307      	strlt	r3, [sp, #28]
 8006cde:	bfb8      	it	lt
 8006ce0:	9204      	strlt	r2, [sp, #16]
 8006ce2:	7823      	ldrb	r3, [r4, #0]
 8006ce4:	2b2e      	cmp	r3, #46	; 0x2e
 8006ce6:	d10c      	bne.n	8006d02 <_vfiprintf_r+0x176>
 8006ce8:	7863      	ldrb	r3, [r4, #1]
 8006cea:	2b2a      	cmp	r3, #42	; 0x2a
 8006cec:	d135      	bne.n	8006d5a <_vfiprintf_r+0x1ce>
 8006cee:	9b03      	ldr	r3, [sp, #12]
 8006cf0:	3402      	adds	r4, #2
 8006cf2:	1d1a      	adds	r2, r3, #4
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	9203      	str	r2, [sp, #12]
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	bfb8      	it	lt
 8006cfc:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8006d00:	9305      	str	r3, [sp, #20]
 8006d02:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006de8 <_vfiprintf_r+0x25c>
 8006d06:	2203      	movs	r2, #3
 8006d08:	4650      	mov	r0, sl
 8006d0a:	7821      	ldrb	r1, [r4, #0]
 8006d0c:	f7ff f8ca 	bl	8005ea4 <memchr>
 8006d10:	b140      	cbz	r0, 8006d24 <_vfiprintf_r+0x198>
 8006d12:	2340      	movs	r3, #64	; 0x40
 8006d14:	eba0 000a 	sub.w	r0, r0, sl
 8006d18:	fa03 f000 	lsl.w	r0, r3, r0
 8006d1c:	9b04      	ldr	r3, [sp, #16]
 8006d1e:	3401      	adds	r4, #1
 8006d20:	4303      	orrs	r3, r0
 8006d22:	9304      	str	r3, [sp, #16]
 8006d24:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006d28:	2206      	movs	r2, #6
 8006d2a:	482c      	ldr	r0, [pc, #176]	; (8006ddc <_vfiprintf_r+0x250>)
 8006d2c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006d30:	f7ff f8b8 	bl	8005ea4 <memchr>
 8006d34:	2800      	cmp	r0, #0
 8006d36:	d03f      	beq.n	8006db8 <_vfiprintf_r+0x22c>
 8006d38:	4b29      	ldr	r3, [pc, #164]	; (8006de0 <_vfiprintf_r+0x254>)
 8006d3a:	bb1b      	cbnz	r3, 8006d84 <_vfiprintf_r+0x1f8>
 8006d3c:	9b03      	ldr	r3, [sp, #12]
 8006d3e:	3307      	adds	r3, #7
 8006d40:	f023 0307 	bic.w	r3, r3, #7
 8006d44:	3308      	adds	r3, #8
 8006d46:	9303      	str	r3, [sp, #12]
 8006d48:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d4a:	443b      	add	r3, r7
 8006d4c:	9309      	str	r3, [sp, #36]	; 0x24
 8006d4e:	e767      	b.n	8006c20 <_vfiprintf_r+0x94>
 8006d50:	460c      	mov	r4, r1
 8006d52:	2001      	movs	r0, #1
 8006d54:	fb0c 3202 	mla	r2, ip, r2, r3
 8006d58:	e7a5      	b.n	8006ca6 <_vfiprintf_r+0x11a>
 8006d5a:	2300      	movs	r3, #0
 8006d5c:	f04f 0c0a 	mov.w	ip, #10
 8006d60:	4619      	mov	r1, r3
 8006d62:	3401      	adds	r4, #1
 8006d64:	9305      	str	r3, [sp, #20]
 8006d66:	4620      	mov	r0, r4
 8006d68:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006d6c:	3a30      	subs	r2, #48	; 0x30
 8006d6e:	2a09      	cmp	r2, #9
 8006d70:	d903      	bls.n	8006d7a <_vfiprintf_r+0x1ee>
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d0c5      	beq.n	8006d02 <_vfiprintf_r+0x176>
 8006d76:	9105      	str	r1, [sp, #20]
 8006d78:	e7c3      	b.n	8006d02 <_vfiprintf_r+0x176>
 8006d7a:	4604      	mov	r4, r0
 8006d7c:	2301      	movs	r3, #1
 8006d7e:	fb0c 2101 	mla	r1, ip, r1, r2
 8006d82:	e7f0      	b.n	8006d66 <_vfiprintf_r+0x1da>
 8006d84:	ab03      	add	r3, sp, #12
 8006d86:	9300      	str	r3, [sp, #0]
 8006d88:	462a      	mov	r2, r5
 8006d8a:	4630      	mov	r0, r6
 8006d8c:	4b15      	ldr	r3, [pc, #84]	; (8006de4 <_vfiprintf_r+0x258>)
 8006d8e:	a904      	add	r1, sp, #16
 8006d90:	f7fd fe1c 	bl	80049cc <_printf_float>
 8006d94:	4607      	mov	r7, r0
 8006d96:	1c78      	adds	r0, r7, #1
 8006d98:	d1d6      	bne.n	8006d48 <_vfiprintf_r+0x1bc>
 8006d9a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006d9c:	07d9      	lsls	r1, r3, #31
 8006d9e:	d405      	bmi.n	8006dac <_vfiprintf_r+0x220>
 8006da0:	89ab      	ldrh	r3, [r5, #12]
 8006da2:	059a      	lsls	r2, r3, #22
 8006da4:	d402      	bmi.n	8006dac <_vfiprintf_r+0x220>
 8006da6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006da8:	f000 faaf 	bl	800730a <__retarget_lock_release_recursive>
 8006dac:	89ab      	ldrh	r3, [r5, #12]
 8006dae:	065b      	lsls	r3, r3, #25
 8006db0:	f53f af12 	bmi.w	8006bd8 <_vfiprintf_r+0x4c>
 8006db4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006db6:	e711      	b.n	8006bdc <_vfiprintf_r+0x50>
 8006db8:	ab03      	add	r3, sp, #12
 8006dba:	9300      	str	r3, [sp, #0]
 8006dbc:	462a      	mov	r2, r5
 8006dbe:	4630      	mov	r0, r6
 8006dc0:	4b08      	ldr	r3, [pc, #32]	; (8006de4 <_vfiprintf_r+0x258>)
 8006dc2:	a904      	add	r1, sp, #16
 8006dc4:	f7fe f89e 	bl	8004f04 <_printf_i>
 8006dc8:	e7e4      	b.n	8006d94 <_vfiprintf_r+0x208>
 8006dca:	bf00      	nop
 8006dcc:	0800813c 	.word	0x0800813c
 8006dd0:	0800815c 	.word	0x0800815c
 8006dd4:	0800811c 	.word	0x0800811c
 8006dd8:	08007fc4 	.word	0x08007fc4
 8006ddc:	08007fce 	.word	0x08007fce
 8006de0:	080049cd 	.word	0x080049cd
 8006de4:	08006b67 	.word	0x08006b67
 8006de8:	08007fca 	.word	0x08007fca

08006dec <__swbuf_r>:
 8006dec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006dee:	460e      	mov	r6, r1
 8006df0:	4614      	mov	r4, r2
 8006df2:	4605      	mov	r5, r0
 8006df4:	b118      	cbz	r0, 8006dfe <__swbuf_r+0x12>
 8006df6:	6983      	ldr	r3, [r0, #24]
 8006df8:	b90b      	cbnz	r3, 8006dfe <__swbuf_r+0x12>
 8006dfa:	f000 f9e7 	bl	80071cc <__sinit>
 8006dfe:	4b21      	ldr	r3, [pc, #132]	; (8006e84 <__swbuf_r+0x98>)
 8006e00:	429c      	cmp	r4, r3
 8006e02:	d12b      	bne.n	8006e5c <__swbuf_r+0x70>
 8006e04:	686c      	ldr	r4, [r5, #4]
 8006e06:	69a3      	ldr	r3, [r4, #24]
 8006e08:	60a3      	str	r3, [r4, #8]
 8006e0a:	89a3      	ldrh	r3, [r4, #12]
 8006e0c:	071a      	lsls	r2, r3, #28
 8006e0e:	d52f      	bpl.n	8006e70 <__swbuf_r+0x84>
 8006e10:	6923      	ldr	r3, [r4, #16]
 8006e12:	b36b      	cbz	r3, 8006e70 <__swbuf_r+0x84>
 8006e14:	6923      	ldr	r3, [r4, #16]
 8006e16:	6820      	ldr	r0, [r4, #0]
 8006e18:	b2f6      	uxtb	r6, r6
 8006e1a:	1ac0      	subs	r0, r0, r3
 8006e1c:	6963      	ldr	r3, [r4, #20]
 8006e1e:	4637      	mov	r7, r6
 8006e20:	4283      	cmp	r3, r0
 8006e22:	dc04      	bgt.n	8006e2e <__swbuf_r+0x42>
 8006e24:	4621      	mov	r1, r4
 8006e26:	4628      	mov	r0, r5
 8006e28:	f000 f93c 	bl	80070a4 <_fflush_r>
 8006e2c:	bb30      	cbnz	r0, 8006e7c <__swbuf_r+0x90>
 8006e2e:	68a3      	ldr	r3, [r4, #8]
 8006e30:	3001      	adds	r0, #1
 8006e32:	3b01      	subs	r3, #1
 8006e34:	60a3      	str	r3, [r4, #8]
 8006e36:	6823      	ldr	r3, [r4, #0]
 8006e38:	1c5a      	adds	r2, r3, #1
 8006e3a:	6022      	str	r2, [r4, #0]
 8006e3c:	701e      	strb	r6, [r3, #0]
 8006e3e:	6963      	ldr	r3, [r4, #20]
 8006e40:	4283      	cmp	r3, r0
 8006e42:	d004      	beq.n	8006e4e <__swbuf_r+0x62>
 8006e44:	89a3      	ldrh	r3, [r4, #12]
 8006e46:	07db      	lsls	r3, r3, #31
 8006e48:	d506      	bpl.n	8006e58 <__swbuf_r+0x6c>
 8006e4a:	2e0a      	cmp	r6, #10
 8006e4c:	d104      	bne.n	8006e58 <__swbuf_r+0x6c>
 8006e4e:	4621      	mov	r1, r4
 8006e50:	4628      	mov	r0, r5
 8006e52:	f000 f927 	bl	80070a4 <_fflush_r>
 8006e56:	b988      	cbnz	r0, 8006e7c <__swbuf_r+0x90>
 8006e58:	4638      	mov	r0, r7
 8006e5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006e5c:	4b0a      	ldr	r3, [pc, #40]	; (8006e88 <__swbuf_r+0x9c>)
 8006e5e:	429c      	cmp	r4, r3
 8006e60:	d101      	bne.n	8006e66 <__swbuf_r+0x7a>
 8006e62:	68ac      	ldr	r4, [r5, #8]
 8006e64:	e7cf      	b.n	8006e06 <__swbuf_r+0x1a>
 8006e66:	4b09      	ldr	r3, [pc, #36]	; (8006e8c <__swbuf_r+0xa0>)
 8006e68:	429c      	cmp	r4, r3
 8006e6a:	bf08      	it	eq
 8006e6c:	68ec      	ldreq	r4, [r5, #12]
 8006e6e:	e7ca      	b.n	8006e06 <__swbuf_r+0x1a>
 8006e70:	4621      	mov	r1, r4
 8006e72:	4628      	mov	r0, r5
 8006e74:	f000 f81a 	bl	8006eac <__swsetup_r>
 8006e78:	2800      	cmp	r0, #0
 8006e7a:	d0cb      	beq.n	8006e14 <__swbuf_r+0x28>
 8006e7c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8006e80:	e7ea      	b.n	8006e58 <__swbuf_r+0x6c>
 8006e82:	bf00      	nop
 8006e84:	0800813c 	.word	0x0800813c
 8006e88:	0800815c 	.word	0x0800815c
 8006e8c:	0800811c 	.word	0x0800811c

08006e90 <__ascii_wctomb>:
 8006e90:	4603      	mov	r3, r0
 8006e92:	4608      	mov	r0, r1
 8006e94:	b141      	cbz	r1, 8006ea8 <__ascii_wctomb+0x18>
 8006e96:	2aff      	cmp	r2, #255	; 0xff
 8006e98:	d904      	bls.n	8006ea4 <__ascii_wctomb+0x14>
 8006e9a:	228a      	movs	r2, #138	; 0x8a
 8006e9c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006ea0:	601a      	str	r2, [r3, #0]
 8006ea2:	4770      	bx	lr
 8006ea4:	2001      	movs	r0, #1
 8006ea6:	700a      	strb	r2, [r1, #0]
 8006ea8:	4770      	bx	lr
	...

08006eac <__swsetup_r>:
 8006eac:	4b32      	ldr	r3, [pc, #200]	; (8006f78 <__swsetup_r+0xcc>)
 8006eae:	b570      	push	{r4, r5, r6, lr}
 8006eb0:	681d      	ldr	r5, [r3, #0]
 8006eb2:	4606      	mov	r6, r0
 8006eb4:	460c      	mov	r4, r1
 8006eb6:	b125      	cbz	r5, 8006ec2 <__swsetup_r+0x16>
 8006eb8:	69ab      	ldr	r3, [r5, #24]
 8006eba:	b913      	cbnz	r3, 8006ec2 <__swsetup_r+0x16>
 8006ebc:	4628      	mov	r0, r5
 8006ebe:	f000 f985 	bl	80071cc <__sinit>
 8006ec2:	4b2e      	ldr	r3, [pc, #184]	; (8006f7c <__swsetup_r+0xd0>)
 8006ec4:	429c      	cmp	r4, r3
 8006ec6:	d10f      	bne.n	8006ee8 <__swsetup_r+0x3c>
 8006ec8:	686c      	ldr	r4, [r5, #4]
 8006eca:	89a3      	ldrh	r3, [r4, #12]
 8006ecc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006ed0:	0719      	lsls	r1, r3, #28
 8006ed2:	d42c      	bmi.n	8006f2e <__swsetup_r+0x82>
 8006ed4:	06dd      	lsls	r5, r3, #27
 8006ed6:	d411      	bmi.n	8006efc <__swsetup_r+0x50>
 8006ed8:	2309      	movs	r3, #9
 8006eda:	6033      	str	r3, [r6, #0]
 8006edc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006ee0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006ee4:	81a3      	strh	r3, [r4, #12]
 8006ee6:	e03e      	b.n	8006f66 <__swsetup_r+0xba>
 8006ee8:	4b25      	ldr	r3, [pc, #148]	; (8006f80 <__swsetup_r+0xd4>)
 8006eea:	429c      	cmp	r4, r3
 8006eec:	d101      	bne.n	8006ef2 <__swsetup_r+0x46>
 8006eee:	68ac      	ldr	r4, [r5, #8]
 8006ef0:	e7eb      	b.n	8006eca <__swsetup_r+0x1e>
 8006ef2:	4b24      	ldr	r3, [pc, #144]	; (8006f84 <__swsetup_r+0xd8>)
 8006ef4:	429c      	cmp	r4, r3
 8006ef6:	bf08      	it	eq
 8006ef8:	68ec      	ldreq	r4, [r5, #12]
 8006efa:	e7e6      	b.n	8006eca <__swsetup_r+0x1e>
 8006efc:	0758      	lsls	r0, r3, #29
 8006efe:	d512      	bpl.n	8006f26 <__swsetup_r+0x7a>
 8006f00:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006f02:	b141      	cbz	r1, 8006f16 <__swsetup_r+0x6a>
 8006f04:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006f08:	4299      	cmp	r1, r3
 8006f0a:	d002      	beq.n	8006f12 <__swsetup_r+0x66>
 8006f0c:	4630      	mov	r0, r6
 8006f0e:	f7ff fb75 	bl	80065fc <_free_r>
 8006f12:	2300      	movs	r3, #0
 8006f14:	6363      	str	r3, [r4, #52]	; 0x34
 8006f16:	89a3      	ldrh	r3, [r4, #12]
 8006f18:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006f1c:	81a3      	strh	r3, [r4, #12]
 8006f1e:	2300      	movs	r3, #0
 8006f20:	6063      	str	r3, [r4, #4]
 8006f22:	6923      	ldr	r3, [r4, #16]
 8006f24:	6023      	str	r3, [r4, #0]
 8006f26:	89a3      	ldrh	r3, [r4, #12]
 8006f28:	f043 0308 	orr.w	r3, r3, #8
 8006f2c:	81a3      	strh	r3, [r4, #12]
 8006f2e:	6923      	ldr	r3, [r4, #16]
 8006f30:	b94b      	cbnz	r3, 8006f46 <__swsetup_r+0x9a>
 8006f32:	89a3      	ldrh	r3, [r4, #12]
 8006f34:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006f38:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006f3c:	d003      	beq.n	8006f46 <__swsetup_r+0x9a>
 8006f3e:	4621      	mov	r1, r4
 8006f40:	4630      	mov	r0, r6
 8006f42:	f000 fa07 	bl	8007354 <__smakebuf_r>
 8006f46:	89a0      	ldrh	r0, [r4, #12]
 8006f48:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006f4c:	f010 0301 	ands.w	r3, r0, #1
 8006f50:	d00a      	beq.n	8006f68 <__swsetup_r+0xbc>
 8006f52:	2300      	movs	r3, #0
 8006f54:	60a3      	str	r3, [r4, #8]
 8006f56:	6963      	ldr	r3, [r4, #20]
 8006f58:	425b      	negs	r3, r3
 8006f5a:	61a3      	str	r3, [r4, #24]
 8006f5c:	6923      	ldr	r3, [r4, #16]
 8006f5e:	b943      	cbnz	r3, 8006f72 <__swsetup_r+0xc6>
 8006f60:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006f64:	d1ba      	bne.n	8006edc <__swsetup_r+0x30>
 8006f66:	bd70      	pop	{r4, r5, r6, pc}
 8006f68:	0781      	lsls	r1, r0, #30
 8006f6a:	bf58      	it	pl
 8006f6c:	6963      	ldrpl	r3, [r4, #20]
 8006f6e:	60a3      	str	r3, [r4, #8]
 8006f70:	e7f4      	b.n	8006f5c <__swsetup_r+0xb0>
 8006f72:	2000      	movs	r0, #0
 8006f74:	e7f7      	b.n	8006f66 <__swsetup_r+0xba>
 8006f76:	bf00      	nop
 8006f78:	20000014 	.word	0x20000014
 8006f7c:	0800813c 	.word	0x0800813c
 8006f80:	0800815c 	.word	0x0800815c
 8006f84:	0800811c 	.word	0x0800811c

08006f88 <abort>:
 8006f88:	2006      	movs	r0, #6
 8006f8a:	b508      	push	{r3, lr}
 8006f8c:	f000 fa52 	bl	8007434 <raise>
 8006f90:	2001      	movs	r0, #1
 8006f92:	f7fa fc20 	bl	80017d6 <_exit>
	...

08006f98 <__sflush_r>:
 8006f98:	898a      	ldrh	r2, [r1, #12]
 8006f9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f9e:	4605      	mov	r5, r0
 8006fa0:	0710      	lsls	r0, r2, #28
 8006fa2:	460c      	mov	r4, r1
 8006fa4:	d458      	bmi.n	8007058 <__sflush_r+0xc0>
 8006fa6:	684b      	ldr	r3, [r1, #4]
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	dc05      	bgt.n	8006fb8 <__sflush_r+0x20>
 8006fac:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	dc02      	bgt.n	8006fb8 <__sflush_r+0x20>
 8006fb2:	2000      	movs	r0, #0
 8006fb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006fb8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006fba:	2e00      	cmp	r6, #0
 8006fbc:	d0f9      	beq.n	8006fb2 <__sflush_r+0x1a>
 8006fbe:	2300      	movs	r3, #0
 8006fc0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006fc4:	682f      	ldr	r7, [r5, #0]
 8006fc6:	602b      	str	r3, [r5, #0]
 8006fc8:	d032      	beq.n	8007030 <__sflush_r+0x98>
 8006fca:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006fcc:	89a3      	ldrh	r3, [r4, #12]
 8006fce:	075a      	lsls	r2, r3, #29
 8006fd0:	d505      	bpl.n	8006fde <__sflush_r+0x46>
 8006fd2:	6863      	ldr	r3, [r4, #4]
 8006fd4:	1ac0      	subs	r0, r0, r3
 8006fd6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006fd8:	b10b      	cbz	r3, 8006fde <__sflush_r+0x46>
 8006fda:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006fdc:	1ac0      	subs	r0, r0, r3
 8006fde:	2300      	movs	r3, #0
 8006fe0:	4602      	mov	r2, r0
 8006fe2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006fe4:	4628      	mov	r0, r5
 8006fe6:	6a21      	ldr	r1, [r4, #32]
 8006fe8:	47b0      	blx	r6
 8006fea:	1c43      	adds	r3, r0, #1
 8006fec:	89a3      	ldrh	r3, [r4, #12]
 8006fee:	d106      	bne.n	8006ffe <__sflush_r+0x66>
 8006ff0:	6829      	ldr	r1, [r5, #0]
 8006ff2:	291d      	cmp	r1, #29
 8006ff4:	d82c      	bhi.n	8007050 <__sflush_r+0xb8>
 8006ff6:	4a2a      	ldr	r2, [pc, #168]	; (80070a0 <__sflush_r+0x108>)
 8006ff8:	40ca      	lsrs	r2, r1
 8006ffa:	07d6      	lsls	r6, r2, #31
 8006ffc:	d528      	bpl.n	8007050 <__sflush_r+0xb8>
 8006ffe:	2200      	movs	r2, #0
 8007000:	6062      	str	r2, [r4, #4]
 8007002:	6922      	ldr	r2, [r4, #16]
 8007004:	04d9      	lsls	r1, r3, #19
 8007006:	6022      	str	r2, [r4, #0]
 8007008:	d504      	bpl.n	8007014 <__sflush_r+0x7c>
 800700a:	1c42      	adds	r2, r0, #1
 800700c:	d101      	bne.n	8007012 <__sflush_r+0x7a>
 800700e:	682b      	ldr	r3, [r5, #0]
 8007010:	b903      	cbnz	r3, 8007014 <__sflush_r+0x7c>
 8007012:	6560      	str	r0, [r4, #84]	; 0x54
 8007014:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007016:	602f      	str	r7, [r5, #0]
 8007018:	2900      	cmp	r1, #0
 800701a:	d0ca      	beq.n	8006fb2 <__sflush_r+0x1a>
 800701c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007020:	4299      	cmp	r1, r3
 8007022:	d002      	beq.n	800702a <__sflush_r+0x92>
 8007024:	4628      	mov	r0, r5
 8007026:	f7ff fae9 	bl	80065fc <_free_r>
 800702a:	2000      	movs	r0, #0
 800702c:	6360      	str	r0, [r4, #52]	; 0x34
 800702e:	e7c1      	b.n	8006fb4 <__sflush_r+0x1c>
 8007030:	6a21      	ldr	r1, [r4, #32]
 8007032:	2301      	movs	r3, #1
 8007034:	4628      	mov	r0, r5
 8007036:	47b0      	blx	r6
 8007038:	1c41      	adds	r1, r0, #1
 800703a:	d1c7      	bne.n	8006fcc <__sflush_r+0x34>
 800703c:	682b      	ldr	r3, [r5, #0]
 800703e:	2b00      	cmp	r3, #0
 8007040:	d0c4      	beq.n	8006fcc <__sflush_r+0x34>
 8007042:	2b1d      	cmp	r3, #29
 8007044:	d001      	beq.n	800704a <__sflush_r+0xb2>
 8007046:	2b16      	cmp	r3, #22
 8007048:	d101      	bne.n	800704e <__sflush_r+0xb6>
 800704a:	602f      	str	r7, [r5, #0]
 800704c:	e7b1      	b.n	8006fb2 <__sflush_r+0x1a>
 800704e:	89a3      	ldrh	r3, [r4, #12]
 8007050:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007054:	81a3      	strh	r3, [r4, #12]
 8007056:	e7ad      	b.n	8006fb4 <__sflush_r+0x1c>
 8007058:	690f      	ldr	r7, [r1, #16]
 800705a:	2f00      	cmp	r7, #0
 800705c:	d0a9      	beq.n	8006fb2 <__sflush_r+0x1a>
 800705e:	0793      	lsls	r3, r2, #30
 8007060:	bf18      	it	ne
 8007062:	2300      	movne	r3, #0
 8007064:	680e      	ldr	r6, [r1, #0]
 8007066:	bf08      	it	eq
 8007068:	694b      	ldreq	r3, [r1, #20]
 800706a:	eba6 0807 	sub.w	r8, r6, r7
 800706e:	600f      	str	r7, [r1, #0]
 8007070:	608b      	str	r3, [r1, #8]
 8007072:	f1b8 0f00 	cmp.w	r8, #0
 8007076:	dd9c      	ble.n	8006fb2 <__sflush_r+0x1a>
 8007078:	4643      	mov	r3, r8
 800707a:	463a      	mov	r2, r7
 800707c:	4628      	mov	r0, r5
 800707e:	6a21      	ldr	r1, [r4, #32]
 8007080:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007082:	47b0      	blx	r6
 8007084:	2800      	cmp	r0, #0
 8007086:	dc06      	bgt.n	8007096 <__sflush_r+0xfe>
 8007088:	89a3      	ldrh	r3, [r4, #12]
 800708a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800708e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007092:	81a3      	strh	r3, [r4, #12]
 8007094:	e78e      	b.n	8006fb4 <__sflush_r+0x1c>
 8007096:	4407      	add	r7, r0
 8007098:	eba8 0800 	sub.w	r8, r8, r0
 800709c:	e7e9      	b.n	8007072 <__sflush_r+0xda>
 800709e:	bf00      	nop
 80070a0:	20400001 	.word	0x20400001

080070a4 <_fflush_r>:
 80070a4:	b538      	push	{r3, r4, r5, lr}
 80070a6:	690b      	ldr	r3, [r1, #16]
 80070a8:	4605      	mov	r5, r0
 80070aa:	460c      	mov	r4, r1
 80070ac:	b913      	cbnz	r3, 80070b4 <_fflush_r+0x10>
 80070ae:	2500      	movs	r5, #0
 80070b0:	4628      	mov	r0, r5
 80070b2:	bd38      	pop	{r3, r4, r5, pc}
 80070b4:	b118      	cbz	r0, 80070be <_fflush_r+0x1a>
 80070b6:	6983      	ldr	r3, [r0, #24]
 80070b8:	b90b      	cbnz	r3, 80070be <_fflush_r+0x1a>
 80070ba:	f000 f887 	bl	80071cc <__sinit>
 80070be:	4b14      	ldr	r3, [pc, #80]	; (8007110 <_fflush_r+0x6c>)
 80070c0:	429c      	cmp	r4, r3
 80070c2:	d11b      	bne.n	80070fc <_fflush_r+0x58>
 80070c4:	686c      	ldr	r4, [r5, #4]
 80070c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d0ef      	beq.n	80070ae <_fflush_r+0xa>
 80070ce:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80070d0:	07d0      	lsls	r0, r2, #31
 80070d2:	d404      	bmi.n	80070de <_fflush_r+0x3a>
 80070d4:	0599      	lsls	r1, r3, #22
 80070d6:	d402      	bmi.n	80070de <_fflush_r+0x3a>
 80070d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80070da:	f000 f915 	bl	8007308 <__retarget_lock_acquire_recursive>
 80070de:	4628      	mov	r0, r5
 80070e0:	4621      	mov	r1, r4
 80070e2:	f7ff ff59 	bl	8006f98 <__sflush_r>
 80070e6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80070e8:	4605      	mov	r5, r0
 80070ea:	07da      	lsls	r2, r3, #31
 80070ec:	d4e0      	bmi.n	80070b0 <_fflush_r+0xc>
 80070ee:	89a3      	ldrh	r3, [r4, #12]
 80070f0:	059b      	lsls	r3, r3, #22
 80070f2:	d4dd      	bmi.n	80070b0 <_fflush_r+0xc>
 80070f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80070f6:	f000 f908 	bl	800730a <__retarget_lock_release_recursive>
 80070fa:	e7d9      	b.n	80070b0 <_fflush_r+0xc>
 80070fc:	4b05      	ldr	r3, [pc, #20]	; (8007114 <_fflush_r+0x70>)
 80070fe:	429c      	cmp	r4, r3
 8007100:	d101      	bne.n	8007106 <_fflush_r+0x62>
 8007102:	68ac      	ldr	r4, [r5, #8]
 8007104:	e7df      	b.n	80070c6 <_fflush_r+0x22>
 8007106:	4b04      	ldr	r3, [pc, #16]	; (8007118 <_fflush_r+0x74>)
 8007108:	429c      	cmp	r4, r3
 800710a:	bf08      	it	eq
 800710c:	68ec      	ldreq	r4, [r5, #12]
 800710e:	e7da      	b.n	80070c6 <_fflush_r+0x22>
 8007110:	0800813c 	.word	0x0800813c
 8007114:	0800815c 	.word	0x0800815c
 8007118:	0800811c 	.word	0x0800811c

0800711c <std>:
 800711c:	2300      	movs	r3, #0
 800711e:	b510      	push	{r4, lr}
 8007120:	4604      	mov	r4, r0
 8007122:	e9c0 3300 	strd	r3, r3, [r0]
 8007126:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800712a:	6083      	str	r3, [r0, #8]
 800712c:	8181      	strh	r1, [r0, #12]
 800712e:	6643      	str	r3, [r0, #100]	; 0x64
 8007130:	81c2      	strh	r2, [r0, #14]
 8007132:	6183      	str	r3, [r0, #24]
 8007134:	4619      	mov	r1, r3
 8007136:	2208      	movs	r2, #8
 8007138:	305c      	adds	r0, #92	; 0x5c
 800713a:	f7fd fba1 	bl	8004880 <memset>
 800713e:	4b05      	ldr	r3, [pc, #20]	; (8007154 <std+0x38>)
 8007140:	6224      	str	r4, [r4, #32]
 8007142:	6263      	str	r3, [r4, #36]	; 0x24
 8007144:	4b04      	ldr	r3, [pc, #16]	; (8007158 <std+0x3c>)
 8007146:	62a3      	str	r3, [r4, #40]	; 0x28
 8007148:	4b04      	ldr	r3, [pc, #16]	; (800715c <std+0x40>)
 800714a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800714c:	4b04      	ldr	r3, [pc, #16]	; (8007160 <std+0x44>)
 800714e:	6323      	str	r3, [r4, #48]	; 0x30
 8007150:	bd10      	pop	{r4, pc}
 8007152:	bf00      	nop
 8007154:	0800746d 	.word	0x0800746d
 8007158:	0800748f 	.word	0x0800748f
 800715c:	080074c7 	.word	0x080074c7
 8007160:	080074eb 	.word	0x080074eb

08007164 <_cleanup_r>:
 8007164:	4901      	ldr	r1, [pc, #4]	; (800716c <_cleanup_r+0x8>)
 8007166:	f000 b8af 	b.w	80072c8 <_fwalk_reent>
 800716a:	bf00      	nop
 800716c:	080070a5 	.word	0x080070a5

08007170 <__sfmoreglue>:
 8007170:	b570      	push	{r4, r5, r6, lr}
 8007172:	2568      	movs	r5, #104	; 0x68
 8007174:	1e4a      	subs	r2, r1, #1
 8007176:	4355      	muls	r5, r2
 8007178:	460e      	mov	r6, r1
 800717a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800717e:	f7ff fa89 	bl	8006694 <_malloc_r>
 8007182:	4604      	mov	r4, r0
 8007184:	b140      	cbz	r0, 8007198 <__sfmoreglue+0x28>
 8007186:	2100      	movs	r1, #0
 8007188:	e9c0 1600 	strd	r1, r6, [r0]
 800718c:	300c      	adds	r0, #12
 800718e:	60a0      	str	r0, [r4, #8]
 8007190:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007194:	f7fd fb74 	bl	8004880 <memset>
 8007198:	4620      	mov	r0, r4
 800719a:	bd70      	pop	{r4, r5, r6, pc}

0800719c <__sfp_lock_acquire>:
 800719c:	4801      	ldr	r0, [pc, #4]	; (80071a4 <__sfp_lock_acquire+0x8>)
 800719e:	f000 b8b3 	b.w	8007308 <__retarget_lock_acquire_recursive>
 80071a2:	bf00      	nop
 80071a4:	20000734 	.word	0x20000734

080071a8 <__sfp_lock_release>:
 80071a8:	4801      	ldr	r0, [pc, #4]	; (80071b0 <__sfp_lock_release+0x8>)
 80071aa:	f000 b8ae 	b.w	800730a <__retarget_lock_release_recursive>
 80071ae:	bf00      	nop
 80071b0:	20000734 	.word	0x20000734

080071b4 <__sinit_lock_acquire>:
 80071b4:	4801      	ldr	r0, [pc, #4]	; (80071bc <__sinit_lock_acquire+0x8>)
 80071b6:	f000 b8a7 	b.w	8007308 <__retarget_lock_acquire_recursive>
 80071ba:	bf00      	nop
 80071bc:	2000072f 	.word	0x2000072f

080071c0 <__sinit_lock_release>:
 80071c0:	4801      	ldr	r0, [pc, #4]	; (80071c8 <__sinit_lock_release+0x8>)
 80071c2:	f000 b8a2 	b.w	800730a <__retarget_lock_release_recursive>
 80071c6:	bf00      	nop
 80071c8:	2000072f 	.word	0x2000072f

080071cc <__sinit>:
 80071cc:	b510      	push	{r4, lr}
 80071ce:	4604      	mov	r4, r0
 80071d0:	f7ff fff0 	bl	80071b4 <__sinit_lock_acquire>
 80071d4:	69a3      	ldr	r3, [r4, #24]
 80071d6:	b11b      	cbz	r3, 80071e0 <__sinit+0x14>
 80071d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80071dc:	f7ff bff0 	b.w	80071c0 <__sinit_lock_release>
 80071e0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80071e4:	6523      	str	r3, [r4, #80]	; 0x50
 80071e6:	4b13      	ldr	r3, [pc, #76]	; (8007234 <__sinit+0x68>)
 80071e8:	4a13      	ldr	r2, [pc, #76]	; (8007238 <__sinit+0x6c>)
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	62a2      	str	r2, [r4, #40]	; 0x28
 80071ee:	42a3      	cmp	r3, r4
 80071f0:	bf08      	it	eq
 80071f2:	2301      	moveq	r3, #1
 80071f4:	4620      	mov	r0, r4
 80071f6:	bf08      	it	eq
 80071f8:	61a3      	streq	r3, [r4, #24]
 80071fa:	f000 f81f 	bl	800723c <__sfp>
 80071fe:	6060      	str	r0, [r4, #4]
 8007200:	4620      	mov	r0, r4
 8007202:	f000 f81b 	bl	800723c <__sfp>
 8007206:	60a0      	str	r0, [r4, #8]
 8007208:	4620      	mov	r0, r4
 800720a:	f000 f817 	bl	800723c <__sfp>
 800720e:	2200      	movs	r2, #0
 8007210:	2104      	movs	r1, #4
 8007212:	60e0      	str	r0, [r4, #12]
 8007214:	6860      	ldr	r0, [r4, #4]
 8007216:	f7ff ff81 	bl	800711c <std>
 800721a:	2201      	movs	r2, #1
 800721c:	2109      	movs	r1, #9
 800721e:	68a0      	ldr	r0, [r4, #8]
 8007220:	f7ff ff7c 	bl	800711c <std>
 8007224:	2202      	movs	r2, #2
 8007226:	2112      	movs	r1, #18
 8007228:	68e0      	ldr	r0, [r4, #12]
 800722a:	f7ff ff77 	bl	800711c <std>
 800722e:	2301      	movs	r3, #1
 8007230:	61a3      	str	r3, [r4, #24]
 8007232:	e7d1      	b.n	80071d8 <__sinit+0xc>
 8007234:	08007d98 	.word	0x08007d98
 8007238:	08007165 	.word	0x08007165

0800723c <__sfp>:
 800723c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800723e:	4607      	mov	r7, r0
 8007240:	f7ff ffac 	bl	800719c <__sfp_lock_acquire>
 8007244:	4b1e      	ldr	r3, [pc, #120]	; (80072c0 <__sfp+0x84>)
 8007246:	681e      	ldr	r6, [r3, #0]
 8007248:	69b3      	ldr	r3, [r6, #24]
 800724a:	b913      	cbnz	r3, 8007252 <__sfp+0x16>
 800724c:	4630      	mov	r0, r6
 800724e:	f7ff ffbd 	bl	80071cc <__sinit>
 8007252:	3648      	adds	r6, #72	; 0x48
 8007254:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007258:	3b01      	subs	r3, #1
 800725a:	d503      	bpl.n	8007264 <__sfp+0x28>
 800725c:	6833      	ldr	r3, [r6, #0]
 800725e:	b30b      	cbz	r3, 80072a4 <__sfp+0x68>
 8007260:	6836      	ldr	r6, [r6, #0]
 8007262:	e7f7      	b.n	8007254 <__sfp+0x18>
 8007264:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007268:	b9d5      	cbnz	r5, 80072a0 <__sfp+0x64>
 800726a:	4b16      	ldr	r3, [pc, #88]	; (80072c4 <__sfp+0x88>)
 800726c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007270:	60e3      	str	r3, [r4, #12]
 8007272:	6665      	str	r5, [r4, #100]	; 0x64
 8007274:	f000 f847 	bl	8007306 <__retarget_lock_init_recursive>
 8007278:	f7ff ff96 	bl	80071a8 <__sfp_lock_release>
 800727c:	2208      	movs	r2, #8
 800727e:	4629      	mov	r1, r5
 8007280:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007284:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007288:	6025      	str	r5, [r4, #0]
 800728a:	61a5      	str	r5, [r4, #24]
 800728c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007290:	f7fd faf6 	bl	8004880 <memset>
 8007294:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007298:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800729c:	4620      	mov	r0, r4
 800729e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80072a0:	3468      	adds	r4, #104	; 0x68
 80072a2:	e7d9      	b.n	8007258 <__sfp+0x1c>
 80072a4:	2104      	movs	r1, #4
 80072a6:	4638      	mov	r0, r7
 80072a8:	f7ff ff62 	bl	8007170 <__sfmoreglue>
 80072ac:	4604      	mov	r4, r0
 80072ae:	6030      	str	r0, [r6, #0]
 80072b0:	2800      	cmp	r0, #0
 80072b2:	d1d5      	bne.n	8007260 <__sfp+0x24>
 80072b4:	f7ff ff78 	bl	80071a8 <__sfp_lock_release>
 80072b8:	230c      	movs	r3, #12
 80072ba:	603b      	str	r3, [r7, #0]
 80072bc:	e7ee      	b.n	800729c <__sfp+0x60>
 80072be:	bf00      	nop
 80072c0:	08007d98 	.word	0x08007d98
 80072c4:	ffff0001 	.word	0xffff0001

080072c8 <_fwalk_reent>:
 80072c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80072cc:	4606      	mov	r6, r0
 80072ce:	4688      	mov	r8, r1
 80072d0:	2700      	movs	r7, #0
 80072d2:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80072d6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80072da:	f1b9 0901 	subs.w	r9, r9, #1
 80072de:	d505      	bpl.n	80072ec <_fwalk_reent+0x24>
 80072e0:	6824      	ldr	r4, [r4, #0]
 80072e2:	2c00      	cmp	r4, #0
 80072e4:	d1f7      	bne.n	80072d6 <_fwalk_reent+0xe>
 80072e6:	4638      	mov	r0, r7
 80072e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80072ec:	89ab      	ldrh	r3, [r5, #12]
 80072ee:	2b01      	cmp	r3, #1
 80072f0:	d907      	bls.n	8007302 <_fwalk_reent+0x3a>
 80072f2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80072f6:	3301      	adds	r3, #1
 80072f8:	d003      	beq.n	8007302 <_fwalk_reent+0x3a>
 80072fa:	4629      	mov	r1, r5
 80072fc:	4630      	mov	r0, r6
 80072fe:	47c0      	blx	r8
 8007300:	4307      	orrs	r7, r0
 8007302:	3568      	adds	r5, #104	; 0x68
 8007304:	e7e9      	b.n	80072da <_fwalk_reent+0x12>

08007306 <__retarget_lock_init_recursive>:
 8007306:	4770      	bx	lr

08007308 <__retarget_lock_acquire_recursive>:
 8007308:	4770      	bx	lr

0800730a <__retarget_lock_release_recursive>:
 800730a:	4770      	bx	lr

0800730c <__swhatbuf_r>:
 800730c:	b570      	push	{r4, r5, r6, lr}
 800730e:	460e      	mov	r6, r1
 8007310:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007314:	4614      	mov	r4, r2
 8007316:	2900      	cmp	r1, #0
 8007318:	461d      	mov	r5, r3
 800731a:	b096      	sub	sp, #88	; 0x58
 800731c:	da07      	bge.n	800732e <__swhatbuf_r+0x22>
 800731e:	2300      	movs	r3, #0
 8007320:	602b      	str	r3, [r5, #0]
 8007322:	89b3      	ldrh	r3, [r6, #12]
 8007324:	061a      	lsls	r2, r3, #24
 8007326:	d410      	bmi.n	800734a <__swhatbuf_r+0x3e>
 8007328:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800732c:	e00e      	b.n	800734c <__swhatbuf_r+0x40>
 800732e:	466a      	mov	r2, sp
 8007330:	f000 f902 	bl	8007538 <_fstat_r>
 8007334:	2800      	cmp	r0, #0
 8007336:	dbf2      	blt.n	800731e <__swhatbuf_r+0x12>
 8007338:	9a01      	ldr	r2, [sp, #4]
 800733a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800733e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007342:	425a      	negs	r2, r3
 8007344:	415a      	adcs	r2, r3
 8007346:	602a      	str	r2, [r5, #0]
 8007348:	e7ee      	b.n	8007328 <__swhatbuf_r+0x1c>
 800734a:	2340      	movs	r3, #64	; 0x40
 800734c:	2000      	movs	r0, #0
 800734e:	6023      	str	r3, [r4, #0]
 8007350:	b016      	add	sp, #88	; 0x58
 8007352:	bd70      	pop	{r4, r5, r6, pc}

08007354 <__smakebuf_r>:
 8007354:	898b      	ldrh	r3, [r1, #12]
 8007356:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007358:	079d      	lsls	r5, r3, #30
 800735a:	4606      	mov	r6, r0
 800735c:	460c      	mov	r4, r1
 800735e:	d507      	bpl.n	8007370 <__smakebuf_r+0x1c>
 8007360:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007364:	6023      	str	r3, [r4, #0]
 8007366:	6123      	str	r3, [r4, #16]
 8007368:	2301      	movs	r3, #1
 800736a:	6163      	str	r3, [r4, #20]
 800736c:	b002      	add	sp, #8
 800736e:	bd70      	pop	{r4, r5, r6, pc}
 8007370:	466a      	mov	r2, sp
 8007372:	ab01      	add	r3, sp, #4
 8007374:	f7ff ffca 	bl	800730c <__swhatbuf_r>
 8007378:	9900      	ldr	r1, [sp, #0]
 800737a:	4605      	mov	r5, r0
 800737c:	4630      	mov	r0, r6
 800737e:	f7ff f989 	bl	8006694 <_malloc_r>
 8007382:	b948      	cbnz	r0, 8007398 <__smakebuf_r+0x44>
 8007384:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007388:	059a      	lsls	r2, r3, #22
 800738a:	d4ef      	bmi.n	800736c <__smakebuf_r+0x18>
 800738c:	f023 0303 	bic.w	r3, r3, #3
 8007390:	f043 0302 	orr.w	r3, r3, #2
 8007394:	81a3      	strh	r3, [r4, #12]
 8007396:	e7e3      	b.n	8007360 <__smakebuf_r+0xc>
 8007398:	4b0d      	ldr	r3, [pc, #52]	; (80073d0 <__smakebuf_r+0x7c>)
 800739a:	62b3      	str	r3, [r6, #40]	; 0x28
 800739c:	89a3      	ldrh	r3, [r4, #12]
 800739e:	6020      	str	r0, [r4, #0]
 80073a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80073a4:	81a3      	strh	r3, [r4, #12]
 80073a6:	9b00      	ldr	r3, [sp, #0]
 80073a8:	6120      	str	r0, [r4, #16]
 80073aa:	6163      	str	r3, [r4, #20]
 80073ac:	9b01      	ldr	r3, [sp, #4]
 80073ae:	b15b      	cbz	r3, 80073c8 <__smakebuf_r+0x74>
 80073b0:	4630      	mov	r0, r6
 80073b2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80073b6:	f000 f8d1 	bl	800755c <_isatty_r>
 80073ba:	b128      	cbz	r0, 80073c8 <__smakebuf_r+0x74>
 80073bc:	89a3      	ldrh	r3, [r4, #12]
 80073be:	f023 0303 	bic.w	r3, r3, #3
 80073c2:	f043 0301 	orr.w	r3, r3, #1
 80073c6:	81a3      	strh	r3, [r4, #12]
 80073c8:	89a0      	ldrh	r0, [r4, #12]
 80073ca:	4305      	orrs	r5, r0
 80073cc:	81a5      	strh	r5, [r4, #12]
 80073ce:	e7cd      	b.n	800736c <__smakebuf_r+0x18>
 80073d0:	08007165 	.word	0x08007165

080073d4 <_malloc_usable_size_r>:
 80073d4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80073d8:	1f18      	subs	r0, r3, #4
 80073da:	2b00      	cmp	r3, #0
 80073dc:	bfbc      	itt	lt
 80073de:	580b      	ldrlt	r3, [r1, r0]
 80073e0:	18c0      	addlt	r0, r0, r3
 80073e2:	4770      	bx	lr

080073e4 <_raise_r>:
 80073e4:	291f      	cmp	r1, #31
 80073e6:	b538      	push	{r3, r4, r5, lr}
 80073e8:	4604      	mov	r4, r0
 80073ea:	460d      	mov	r5, r1
 80073ec:	d904      	bls.n	80073f8 <_raise_r+0x14>
 80073ee:	2316      	movs	r3, #22
 80073f0:	6003      	str	r3, [r0, #0]
 80073f2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80073f6:	bd38      	pop	{r3, r4, r5, pc}
 80073f8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80073fa:	b112      	cbz	r2, 8007402 <_raise_r+0x1e>
 80073fc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007400:	b94b      	cbnz	r3, 8007416 <_raise_r+0x32>
 8007402:	4620      	mov	r0, r4
 8007404:	f000 f830 	bl	8007468 <_getpid_r>
 8007408:	462a      	mov	r2, r5
 800740a:	4601      	mov	r1, r0
 800740c:	4620      	mov	r0, r4
 800740e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007412:	f000 b817 	b.w	8007444 <_kill_r>
 8007416:	2b01      	cmp	r3, #1
 8007418:	d00a      	beq.n	8007430 <_raise_r+0x4c>
 800741a:	1c59      	adds	r1, r3, #1
 800741c:	d103      	bne.n	8007426 <_raise_r+0x42>
 800741e:	2316      	movs	r3, #22
 8007420:	6003      	str	r3, [r0, #0]
 8007422:	2001      	movs	r0, #1
 8007424:	e7e7      	b.n	80073f6 <_raise_r+0x12>
 8007426:	2400      	movs	r4, #0
 8007428:	4628      	mov	r0, r5
 800742a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800742e:	4798      	blx	r3
 8007430:	2000      	movs	r0, #0
 8007432:	e7e0      	b.n	80073f6 <_raise_r+0x12>

08007434 <raise>:
 8007434:	4b02      	ldr	r3, [pc, #8]	; (8007440 <raise+0xc>)
 8007436:	4601      	mov	r1, r0
 8007438:	6818      	ldr	r0, [r3, #0]
 800743a:	f7ff bfd3 	b.w	80073e4 <_raise_r>
 800743e:	bf00      	nop
 8007440:	20000014 	.word	0x20000014

08007444 <_kill_r>:
 8007444:	b538      	push	{r3, r4, r5, lr}
 8007446:	2300      	movs	r3, #0
 8007448:	4d06      	ldr	r5, [pc, #24]	; (8007464 <_kill_r+0x20>)
 800744a:	4604      	mov	r4, r0
 800744c:	4608      	mov	r0, r1
 800744e:	4611      	mov	r1, r2
 8007450:	602b      	str	r3, [r5, #0]
 8007452:	f7fa f9b0 	bl	80017b6 <_kill>
 8007456:	1c43      	adds	r3, r0, #1
 8007458:	d102      	bne.n	8007460 <_kill_r+0x1c>
 800745a:	682b      	ldr	r3, [r5, #0]
 800745c:	b103      	cbz	r3, 8007460 <_kill_r+0x1c>
 800745e:	6023      	str	r3, [r4, #0]
 8007460:	bd38      	pop	{r3, r4, r5, pc}
 8007462:	bf00      	nop
 8007464:	20000728 	.word	0x20000728

08007468 <_getpid_r>:
 8007468:	f7fa b99e 	b.w	80017a8 <_getpid>

0800746c <__sread>:
 800746c:	b510      	push	{r4, lr}
 800746e:	460c      	mov	r4, r1
 8007470:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007474:	f000 f894 	bl	80075a0 <_read_r>
 8007478:	2800      	cmp	r0, #0
 800747a:	bfab      	itete	ge
 800747c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800747e:	89a3      	ldrhlt	r3, [r4, #12]
 8007480:	181b      	addge	r3, r3, r0
 8007482:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007486:	bfac      	ite	ge
 8007488:	6563      	strge	r3, [r4, #84]	; 0x54
 800748a:	81a3      	strhlt	r3, [r4, #12]
 800748c:	bd10      	pop	{r4, pc}

0800748e <__swrite>:
 800748e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007492:	461f      	mov	r7, r3
 8007494:	898b      	ldrh	r3, [r1, #12]
 8007496:	4605      	mov	r5, r0
 8007498:	05db      	lsls	r3, r3, #23
 800749a:	460c      	mov	r4, r1
 800749c:	4616      	mov	r6, r2
 800749e:	d505      	bpl.n	80074ac <__swrite+0x1e>
 80074a0:	2302      	movs	r3, #2
 80074a2:	2200      	movs	r2, #0
 80074a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80074a8:	f000 f868 	bl	800757c <_lseek_r>
 80074ac:	89a3      	ldrh	r3, [r4, #12]
 80074ae:	4632      	mov	r2, r6
 80074b0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80074b4:	81a3      	strh	r3, [r4, #12]
 80074b6:	4628      	mov	r0, r5
 80074b8:	463b      	mov	r3, r7
 80074ba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80074be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80074c2:	f000 b817 	b.w	80074f4 <_write_r>

080074c6 <__sseek>:
 80074c6:	b510      	push	{r4, lr}
 80074c8:	460c      	mov	r4, r1
 80074ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80074ce:	f000 f855 	bl	800757c <_lseek_r>
 80074d2:	1c43      	adds	r3, r0, #1
 80074d4:	89a3      	ldrh	r3, [r4, #12]
 80074d6:	bf15      	itete	ne
 80074d8:	6560      	strne	r0, [r4, #84]	; 0x54
 80074da:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80074de:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80074e2:	81a3      	strheq	r3, [r4, #12]
 80074e4:	bf18      	it	ne
 80074e6:	81a3      	strhne	r3, [r4, #12]
 80074e8:	bd10      	pop	{r4, pc}

080074ea <__sclose>:
 80074ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80074ee:	f000 b813 	b.w	8007518 <_close_r>
	...

080074f4 <_write_r>:
 80074f4:	b538      	push	{r3, r4, r5, lr}
 80074f6:	4604      	mov	r4, r0
 80074f8:	4608      	mov	r0, r1
 80074fa:	4611      	mov	r1, r2
 80074fc:	2200      	movs	r2, #0
 80074fe:	4d05      	ldr	r5, [pc, #20]	; (8007514 <_write_r+0x20>)
 8007500:	602a      	str	r2, [r5, #0]
 8007502:	461a      	mov	r2, r3
 8007504:	f7fa f98e 	bl	8001824 <_write>
 8007508:	1c43      	adds	r3, r0, #1
 800750a:	d102      	bne.n	8007512 <_write_r+0x1e>
 800750c:	682b      	ldr	r3, [r5, #0]
 800750e:	b103      	cbz	r3, 8007512 <_write_r+0x1e>
 8007510:	6023      	str	r3, [r4, #0]
 8007512:	bd38      	pop	{r3, r4, r5, pc}
 8007514:	20000728 	.word	0x20000728

08007518 <_close_r>:
 8007518:	b538      	push	{r3, r4, r5, lr}
 800751a:	2300      	movs	r3, #0
 800751c:	4d05      	ldr	r5, [pc, #20]	; (8007534 <_close_r+0x1c>)
 800751e:	4604      	mov	r4, r0
 8007520:	4608      	mov	r0, r1
 8007522:	602b      	str	r3, [r5, #0]
 8007524:	f7fa f99a 	bl	800185c <_close>
 8007528:	1c43      	adds	r3, r0, #1
 800752a:	d102      	bne.n	8007532 <_close_r+0x1a>
 800752c:	682b      	ldr	r3, [r5, #0]
 800752e:	b103      	cbz	r3, 8007532 <_close_r+0x1a>
 8007530:	6023      	str	r3, [r4, #0]
 8007532:	bd38      	pop	{r3, r4, r5, pc}
 8007534:	20000728 	.word	0x20000728

08007538 <_fstat_r>:
 8007538:	b538      	push	{r3, r4, r5, lr}
 800753a:	2300      	movs	r3, #0
 800753c:	4d06      	ldr	r5, [pc, #24]	; (8007558 <_fstat_r+0x20>)
 800753e:	4604      	mov	r4, r0
 8007540:	4608      	mov	r0, r1
 8007542:	4611      	mov	r1, r2
 8007544:	602b      	str	r3, [r5, #0]
 8007546:	f7fa f994 	bl	8001872 <_fstat>
 800754a:	1c43      	adds	r3, r0, #1
 800754c:	d102      	bne.n	8007554 <_fstat_r+0x1c>
 800754e:	682b      	ldr	r3, [r5, #0]
 8007550:	b103      	cbz	r3, 8007554 <_fstat_r+0x1c>
 8007552:	6023      	str	r3, [r4, #0]
 8007554:	bd38      	pop	{r3, r4, r5, pc}
 8007556:	bf00      	nop
 8007558:	20000728 	.word	0x20000728

0800755c <_isatty_r>:
 800755c:	b538      	push	{r3, r4, r5, lr}
 800755e:	2300      	movs	r3, #0
 8007560:	4d05      	ldr	r5, [pc, #20]	; (8007578 <_isatty_r+0x1c>)
 8007562:	4604      	mov	r4, r0
 8007564:	4608      	mov	r0, r1
 8007566:	602b      	str	r3, [r5, #0]
 8007568:	f7fa f992 	bl	8001890 <_isatty>
 800756c:	1c43      	adds	r3, r0, #1
 800756e:	d102      	bne.n	8007576 <_isatty_r+0x1a>
 8007570:	682b      	ldr	r3, [r5, #0]
 8007572:	b103      	cbz	r3, 8007576 <_isatty_r+0x1a>
 8007574:	6023      	str	r3, [r4, #0]
 8007576:	bd38      	pop	{r3, r4, r5, pc}
 8007578:	20000728 	.word	0x20000728

0800757c <_lseek_r>:
 800757c:	b538      	push	{r3, r4, r5, lr}
 800757e:	4604      	mov	r4, r0
 8007580:	4608      	mov	r0, r1
 8007582:	4611      	mov	r1, r2
 8007584:	2200      	movs	r2, #0
 8007586:	4d05      	ldr	r5, [pc, #20]	; (800759c <_lseek_r+0x20>)
 8007588:	602a      	str	r2, [r5, #0]
 800758a:	461a      	mov	r2, r3
 800758c:	f7fa f98a 	bl	80018a4 <_lseek>
 8007590:	1c43      	adds	r3, r0, #1
 8007592:	d102      	bne.n	800759a <_lseek_r+0x1e>
 8007594:	682b      	ldr	r3, [r5, #0]
 8007596:	b103      	cbz	r3, 800759a <_lseek_r+0x1e>
 8007598:	6023      	str	r3, [r4, #0]
 800759a:	bd38      	pop	{r3, r4, r5, pc}
 800759c:	20000728 	.word	0x20000728

080075a0 <_read_r>:
 80075a0:	b538      	push	{r3, r4, r5, lr}
 80075a2:	4604      	mov	r4, r0
 80075a4:	4608      	mov	r0, r1
 80075a6:	4611      	mov	r1, r2
 80075a8:	2200      	movs	r2, #0
 80075aa:	4d05      	ldr	r5, [pc, #20]	; (80075c0 <_read_r+0x20>)
 80075ac:	602a      	str	r2, [r5, #0]
 80075ae:	461a      	mov	r2, r3
 80075b0:	f7fa f91b 	bl	80017ea <_read>
 80075b4:	1c43      	adds	r3, r0, #1
 80075b6:	d102      	bne.n	80075be <_read_r+0x1e>
 80075b8:	682b      	ldr	r3, [r5, #0]
 80075ba:	b103      	cbz	r3, 80075be <_read_r+0x1e>
 80075bc:	6023      	str	r3, [r4, #0]
 80075be:	bd38      	pop	{r3, r4, r5, pc}
 80075c0:	20000728 	.word	0x20000728

080075c4 <_init>:
 80075c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075c6:	bf00      	nop
 80075c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80075ca:	bc08      	pop	{r3}
 80075cc:	469e      	mov	lr, r3
 80075ce:	4770      	bx	lr

080075d0 <_fini>:
 80075d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075d2:	bf00      	nop
 80075d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80075d6:	bc08      	pop	{r3}
 80075d8:	469e      	mov	lr, r3
 80075da:	4770      	bx	lr
