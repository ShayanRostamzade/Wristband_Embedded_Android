
Medical_Wrist_Band.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000aab4  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001a1c  0800abc8  0800abc8  0001abc8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c5e4  0800c5e4  000201ec  2**0
                  CONTENTS
  4 .ARM          00000000  0800c5e4  0800c5e4  000201ec  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800c5e4  0800c5e4  000201ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c5e4  0800c5e4  0001c5e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c5e8  0800c5e8  0001c5e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  20000000  0800c5ec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001b28  200001ec  0800c7d8  000201ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001d14  0800c7d8  00021d14  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014a0e  00000000  00000000  00020215  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002e38  00000000  00000000  00034c23  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012d8  00000000  00000000  00037a60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000011d8  00000000  00000000  00038d38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a532  00000000  00000000  00039f10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015adc  00000000  00000000  00054442  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000949c4  00000000  00000000  00069f1e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000fe8e2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006168  00000000  00000000  000fe938  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001ec 	.word	0x200001ec
 800012c:	00000000 	.word	0x00000000
 8000130:	0800abac 	.word	0x0800abac

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001f0 	.word	0x200001f0
 800014c:	0800abac 	.word	0x0800abac

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <__aeabi_frsub>:
 8000b28:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b2c:	e002      	b.n	8000b34 <__addsf3>
 8000b2e:	bf00      	nop

08000b30 <__aeabi_fsub>:
 8000b30:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b34 <__addsf3>:
 8000b34:	0042      	lsls	r2, r0, #1
 8000b36:	bf1f      	itttt	ne
 8000b38:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b3c:	ea92 0f03 	teqne	r2, r3
 8000b40:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b44:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b48:	d06a      	beq.n	8000c20 <__addsf3+0xec>
 8000b4a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b4e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b52:	bfc1      	itttt	gt
 8000b54:	18d2      	addgt	r2, r2, r3
 8000b56:	4041      	eorgt	r1, r0
 8000b58:	4048      	eorgt	r0, r1
 8000b5a:	4041      	eorgt	r1, r0
 8000b5c:	bfb8      	it	lt
 8000b5e:	425b      	neglt	r3, r3
 8000b60:	2b19      	cmp	r3, #25
 8000b62:	bf88      	it	hi
 8000b64:	4770      	bxhi	lr
 8000b66:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b6a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b6e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b7e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b82:	bf18      	it	ne
 8000b84:	4249      	negne	r1, r1
 8000b86:	ea92 0f03 	teq	r2, r3
 8000b8a:	d03f      	beq.n	8000c0c <__addsf3+0xd8>
 8000b8c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b90:	fa41 fc03 	asr.w	ip, r1, r3
 8000b94:	eb10 000c 	adds.w	r0, r0, ip
 8000b98:	f1c3 0320 	rsb	r3, r3, #32
 8000b9c:	fa01 f103 	lsl.w	r1, r1, r3
 8000ba0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ba4:	d502      	bpl.n	8000bac <__addsf3+0x78>
 8000ba6:	4249      	negs	r1, r1
 8000ba8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bac:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bb0:	d313      	bcc.n	8000bda <__addsf3+0xa6>
 8000bb2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bb6:	d306      	bcc.n	8000bc6 <__addsf3+0x92>
 8000bb8:	0840      	lsrs	r0, r0, #1
 8000bba:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bbe:	f102 0201 	add.w	r2, r2, #1
 8000bc2:	2afe      	cmp	r2, #254	; 0xfe
 8000bc4:	d251      	bcs.n	8000c6a <__addsf3+0x136>
 8000bc6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bce:	bf08      	it	eq
 8000bd0:	f020 0001 	biceq.w	r0, r0, #1
 8000bd4:	ea40 0003 	orr.w	r0, r0, r3
 8000bd8:	4770      	bx	lr
 8000bda:	0049      	lsls	r1, r1, #1
 8000bdc:	eb40 0000 	adc.w	r0, r0, r0
 8000be0:	3a01      	subs	r2, #1
 8000be2:	bf28      	it	cs
 8000be4:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000be8:	d2ed      	bcs.n	8000bc6 <__addsf3+0x92>
 8000bea:	fab0 fc80 	clz	ip, r0
 8000bee:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bf2:	ebb2 020c 	subs.w	r2, r2, ip
 8000bf6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bfa:	bfaa      	itet	ge
 8000bfc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c00:	4252      	neglt	r2, r2
 8000c02:	4318      	orrge	r0, r3
 8000c04:	bfbc      	itt	lt
 8000c06:	40d0      	lsrlt	r0, r2
 8000c08:	4318      	orrlt	r0, r3
 8000c0a:	4770      	bx	lr
 8000c0c:	f092 0f00 	teq	r2, #0
 8000c10:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c14:	bf06      	itte	eq
 8000c16:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c1a:	3201      	addeq	r2, #1
 8000c1c:	3b01      	subne	r3, #1
 8000c1e:	e7b5      	b.n	8000b8c <__addsf3+0x58>
 8000c20:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c24:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c28:	bf18      	it	ne
 8000c2a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c2e:	d021      	beq.n	8000c74 <__addsf3+0x140>
 8000c30:	ea92 0f03 	teq	r2, r3
 8000c34:	d004      	beq.n	8000c40 <__addsf3+0x10c>
 8000c36:	f092 0f00 	teq	r2, #0
 8000c3a:	bf08      	it	eq
 8000c3c:	4608      	moveq	r0, r1
 8000c3e:	4770      	bx	lr
 8000c40:	ea90 0f01 	teq	r0, r1
 8000c44:	bf1c      	itt	ne
 8000c46:	2000      	movne	r0, #0
 8000c48:	4770      	bxne	lr
 8000c4a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c4e:	d104      	bne.n	8000c5a <__addsf3+0x126>
 8000c50:	0040      	lsls	r0, r0, #1
 8000c52:	bf28      	it	cs
 8000c54:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c58:	4770      	bx	lr
 8000c5a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c5e:	bf3c      	itt	cc
 8000c60:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c64:	4770      	bxcc	lr
 8000c66:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c6a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c6e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c72:	4770      	bx	lr
 8000c74:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c78:	bf16      	itet	ne
 8000c7a:	4608      	movne	r0, r1
 8000c7c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c80:	4601      	movne	r1, r0
 8000c82:	0242      	lsls	r2, r0, #9
 8000c84:	bf06      	itte	eq
 8000c86:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c8a:	ea90 0f01 	teqeq	r0, r1
 8000c8e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c92:	4770      	bx	lr

08000c94 <__aeabi_ui2f>:
 8000c94:	f04f 0300 	mov.w	r3, #0
 8000c98:	e004      	b.n	8000ca4 <__aeabi_i2f+0x8>
 8000c9a:	bf00      	nop

08000c9c <__aeabi_i2f>:
 8000c9c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ca0:	bf48      	it	mi
 8000ca2:	4240      	negmi	r0, r0
 8000ca4:	ea5f 0c00 	movs.w	ip, r0
 8000ca8:	bf08      	it	eq
 8000caa:	4770      	bxeq	lr
 8000cac:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cb0:	4601      	mov	r1, r0
 8000cb2:	f04f 0000 	mov.w	r0, #0
 8000cb6:	e01c      	b.n	8000cf2 <__aeabi_l2f+0x2a>

08000cb8 <__aeabi_ul2f>:
 8000cb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f04f 0300 	mov.w	r3, #0
 8000cc4:	e00a      	b.n	8000cdc <__aeabi_l2f+0x14>
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_l2f>:
 8000cc8:	ea50 0201 	orrs.w	r2, r0, r1
 8000ccc:	bf08      	it	eq
 8000cce:	4770      	bxeq	lr
 8000cd0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cd4:	d502      	bpl.n	8000cdc <__aeabi_l2f+0x14>
 8000cd6:	4240      	negs	r0, r0
 8000cd8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cdc:	ea5f 0c01 	movs.w	ip, r1
 8000ce0:	bf02      	ittt	eq
 8000ce2:	4684      	moveq	ip, r0
 8000ce4:	4601      	moveq	r1, r0
 8000ce6:	2000      	moveq	r0, #0
 8000ce8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cec:	bf08      	it	eq
 8000cee:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cf2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cf6:	fabc f28c 	clz	r2, ip
 8000cfa:	3a08      	subs	r2, #8
 8000cfc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d00:	db10      	blt.n	8000d24 <__aeabi_l2f+0x5c>
 8000d02:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d06:	4463      	add	r3, ip
 8000d08:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d0c:	f1c2 0220 	rsb	r2, r2, #32
 8000d10:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d14:	fa20 f202 	lsr.w	r2, r0, r2
 8000d18:	eb43 0002 	adc.w	r0, r3, r2
 8000d1c:	bf08      	it	eq
 8000d1e:	f020 0001 	biceq.w	r0, r0, #1
 8000d22:	4770      	bx	lr
 8000d24:	f102 0220 	add.w	r2, r2, #32
 8000d28:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d2c:	f1c2 0220 	rsb	r2, r2, #32
 8000d30:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d34:	fa21 f202 	lsr.w	r2, r1, r2
 8000d38:	eb43 0002 	adc.w	r0, r3, r2
 8000d3c:	bf08      	it	eq
 8000d3e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d42:	4770      	bx	lr

08000d44 <__aeabi_fmul>:
 8000d44:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d48:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d4c:	bf1e      	ittt	ne
 8000d4e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d52:	ea92 0f0c 	teqne	r2, ip
 8000d56:	ea93 0f0c 	teqne	r3, ip
 8000d5a:	d06f      	beq.n	8000e3c <__aeabi_fmul+0xf8>
 8000d5c:	441a      	add	r2, r3
 8000d5e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d62:	0240      	lsls	r0, r0, #9
 8000d64:	bf18      	it	ne
 8000d66:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d6a:	d01e      	beq.n	8000daa <__aeabi_fmul+0x66>
 8000d6c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d70:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d74:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d78:	fba0 3101 	umull	r3, r1, r0, r1
 8000d7c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d80:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d84:	bf3e      	ittt	cc
 8000d86:	0049      	lslcc	r1, r1, #1
 8000d88:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d8c:	005b      	lslcc	r3, r3, #1
 8000d8e:	ea40 0001 	orr.w	r0, r0, r1
 8000d92:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d96:	2afd      	cmp	r2, #253	; 0xfd
 8000d98:	d81d      	bhi.n	8000dd6 <__aeabi_fmul+0x92>
 8000d9a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d9e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000da2:	bf08      	it	eq
 8000da4:	f020 0001 	biceq.w	r0, r0, #1
 8000da8:	4770      	bx	lr
 8000daa:	f090 0f00 	teq	r0, #0
 8000dae:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000db2:	bf08      	it	eq
 8000db4:	0249      	lsleq	r1, r1, #9
 8000db6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dba:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dbe:	3a7f      	subs	r2, #127	; 0x7f
 8000dc0:	bfc2      	ittt	gt
 8000dc2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000dc6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dca:	4770      	bxgt	lr
 8000dcc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dd0:	f04f 0300 	mov.w	r3, #0
 8000dd4:	3a01      	subs	r2, #1
 8000dd6:	dc5d      	bgt.n	8000e94 <__aeabi_fmul+0x150>
 8000dd8:	f112 0f19 	cmn.w	r2, #25
 8000ddc:	bfdc      	itt	le
 8000dde:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000de2:	4770      	bxle	lr
 8000de4:	f1c2 0200 	rsb	r2, r2, #0
 8000de8:	0041      	lsls	r1, r0, #1
 8000dea:	fa21 f102 	lsr.w	r1, r1, r2
 8000dee:	f1c2 0220 	rsb	r2, r2, #32
 8000df2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000df6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dfa:	f140 0000 	adc.w	r0, r0, #0
 8000dfe:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e02:	bf08      	it	eq
 8000e04:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e08:	4770      	bx	lr
 8000e0a:	f092 0f00 	teq	r2, #0
 8000e0e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e12:	bf02      	ittt	eq
 8000e14:	0040      	lsleq	r0, r0, #1
 8000e16:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e1a:	3a01      	subeq	r2, #1
 8000e1c:	d0f9      	beq.n	8000e12 <__aeabi_fmul+0xce>
 8000e1e:	ea40 000c 	orr.w	r0, r0, ip
 8000e22:	f093 0f00 	teq	r3, #0
 8000e26:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e2a:	bf02      	ittt	eq
 8000e2c:	0049      	lsleq	r1, r1, #1
 8000e2e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e32:	3b01      	subeq	r3, #1
 8000e34:	d0f9      	beq.n	8000e2a <__aeabi_fmul+0xe6>
 8000e36:	ea41 010c 	orr.w	r1, r1, ip
 8000e3a:	e78f      	b.n	8000d5c <__aeabi_fmul+0x18>
 8000e3c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e40:	ea92 0f0c 	teq	r2, ip
 8000e44:	bf18      	it	ne
 8000e46:	ea93 0f0c 	teqne	r3, ip
 8000e4a:	d00a      	beq.n	8000e62 <__aeabi_fmul+0x11e>
 8000e4c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e50:	bf18      	it	ne
 8000e52:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e56:	d1d8      	bne.n	8000e0a <__aeabi_fmul+0xc6>
 8000e58:	ea80 0001 	eor.w	r0, r0, r1
 8000e5c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e60:	4770      	bx	lr
 8000e62:	f090 0f00 	teq	r0, #0
 8000e66:	bf17      	itett	ne
 8000e68:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e6c:	4608      	moveq	r0, r1
 8000e6e:	f091 0f00 	teqne	r1, #0
 8000e72:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e76:	d014      	beq.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e78:	ea92 0f0c 	teq	r2, ip
 8000e7c:	d101      	bne.n	8000e82 <__aeabi_fmul+0x13e>
 8000e7e:	0242      	lsls	r2, r0, #9
 8000e80:	d10f      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e82:	ea93 0f0c 	teq	r3, ip
 8000e86:	d103      	bne.n	8000e90 <__aeabi_fmul+0x14c>
 8000e88:	024b      	lsls	r3, r1, #9
 8000e8a:	bf18      	it	ne
 8000e8c:	4608      	movne	r0, r1
 8000e8e:	d108      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e90:	ea80 0001 	eor.w	r0, r0, r1
 8000e94:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e98:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e9c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ea0:	4770      	bx	lr
 8000ea2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ea6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eaa:	4770      	bx	lr

08000eac <__aeabi_fdiv>:
 8000eac:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000eb0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000eb4:	bf1e      	ittt	ne
 8000eb6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eba:	ea92 0f0c 	teqne	r2, ip
 8000ebe:	ea93 0f0c 	teqne	r3, ip
 8000ec2:	d069      	beq.n	8000f98 <__aeabi_fdiv+0xec>
 8000ec4:	eba2 0203 	sub.w	r2, r2, r3
 8000ec8:	ea80 0c01 	eor.w	ip, r0, r1
 8000ecc:	0249      	lsls	r1, r1, #9
 8000ece:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ed2:	d037      	beq.n	8000f44 <__aeabi_fdiv+0x98>
 8000ed4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ed8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000edc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ee0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ee4:	428b      	cmp	r3, r1
 8000ee6:	bf38      	it	cc
 8000ee8:	005b      	lslcc	r3, r3, #1
 8000eea:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000eee:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000ef2:	428b      	cmp	r3, r1
 8000ef4:	bf24      	itt	cs
 8000ef6:	1a5b      	subcs	r3, r3, r1
 8000ef8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000efc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f00:	bf24      	itt	cs
 8000f02:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f06:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f0a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f0e:	bf24      	itt	cs
 8000f10:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f14:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f18:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f1c:	bf24      	itt	cs
 8000f1e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f22:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f26:	011b      	lsls	r3, r3, #4
 8000f28:	bf18      	it	ne
 8000f2a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f2e:	d1e0      	bne.n	8000ef2 <__aeabi_fdiv+0x46>
 8000f30:	2afd      	cmp	r2, #253	; 0xfd
 8000f32:	f63f af50 	bhi.w	8000dd6 <__aeabi_fmul+0x92>
 8000f36:	428b      	cmp	r3, r1
 8000f38:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f3c:	bf08      	it	eq
 8000f3e:	f020 0001 	biceq.w	r0, r0, #1
 8000f42:	4770      	bx	lr
 8000f44:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f48:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f4c:	327f      	adds	r2, #127	; 0x7f
 8000f4e:	bfc2      	ittt	gt
 8000f50:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f54:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f58:	4770      	bxgt	lr
 8000f5a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f5e:	f04f 0300 	mov.w	r3, #0
 8000f62:	3a01      	subs	r2, #1
 8000f64:	e737      	b.n	8000dd6 <__aeabi_fmul+0x92>
 8000f66:	f092 0f00 	teq	r2, #0
 8000f6a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f6e:	bf02      	ittt	eq
 8000f70:	0040      	lsleq	r0, r0, #1
 8000f72:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f76:	3a01      	subeq	r2, #1
 8000f78:	d0f9      	beq.n	8000f6e <__aeabi_fdiv+0xc2>
 8000f7a:	ea40 000c 	orr.w	r0, r0, ip
 8000f7e:	f093 0f00 	teq	r3, #0
 8000f82:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f86:	bf02      	ittt	eq
 8000f88:	0049      	lsleq	r1, r1, #1
 8000f8a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f8e:	3b01      	subeq	r3, #1
 8000f90:	d0f9      	beq.n	8000f86 <__aeabi_fdiv+0xda>
 8000f92:	ea41 010c 	orr.w	r1, r1, ip
 8000f96:	e795      	b.n	8000ec4 <__aeabi_fdiv+0x18>
 8000f98:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f9c:	ea92 0f0c 	teq	r2, ip
 8000fa0:	d108      	bne.n	8000fb4 <__aeabi_fdiv+0x108>
 8000fa2:	0242      	lsls	r2, r0, #9
 8000fa4:	f47f af7d 	bne.w	8000ea2 <__aeabi_fmul+0x15e>
 8000fa8:	ea93 0f0c 	teq	r3, ip
 8000fac:	f47f af70 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fb0:	4608      	mov	r0, r1
 8000fb2:	e776      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fb4:	ea93 0f0c 	teq	r3, ip
 8000fb8:	d104      	bne.n	8000fc4 <__aeabi_fdiv+0x118>
 8000fba:	024b      	lsls	r3, r1, #9
 8000fbc:	f43f af4c 	beq.w	8000e58 <__aeabi_fmul+0x114>
 8000fc0:	4608      	mov	r0, r1
 8000fc2:	e76e      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fc4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000fc8:	bf18      	it	ne
 8000fca:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000fce:	d1ca      	bne.n	8000f66 <__aeabi_fdiv+0xba>
 8000fd0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000fd4:	f47f af5c 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fd8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000fdc:	f47f af3c 	bne.w	8000e58 <__aeabi_fmul+0x114>
 8000fe0:	e75f      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fe2:	bf00      	nop

08000fe4 <__aeabi_f2iz>:
 8000fe4:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000fe8:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000fec:	d30f      	bcc.n	800100e <__aeabi_f2iz+0x2a>
 8000fee:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000ff2:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000ff6:	d90d      	bls.n	8001014 <__aeabi_f2iz+0x30>
 8000ff8:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000ffc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001000:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8001004:	fa23 f002 	lsr.w	r0, r3, r2
 8001008:	bf18      	it	ne
 800100a:	4240      	negne	r0, r0
 800100c:	4770      	bx	lr
 800100e:	f04f 0000 	mov.w	r0, #0
 8001012:	4770      	bx	lr
 8001014:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001018:	d101      	bne.n	800101e <__aeabi_f2iz+0x3a>
 800101a:	0242      	lsls	r2, r0, #9
 800101c:	d105      	bne.n	800102a <__aeabi_f2iz+0x46>
 800101e:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8001022:	bf08      	it	eq
 8001024:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001028:	4770      	bx	lr
 800102a:	f04f 0000 	mov.w	r0, #0
 800102e:	4770      	bx	lr

08001030 <Max30102_WriteReg>:
}MAX30102_STATE;

MAX30102_STATE StateMachine;

MAX30102_STATUS Max30102_WriteReg(uint8_t uch_addr, uint8_t uch_data)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b086      	sub	sp, #24
 8001034:	af04      	add	r7, sp, #16
 8001036:	4603      	mov	r3, r0
 8001038:	460a      	mov	r2, r1
 800103a:	71fb      	strb	r3, [r7, #7]
 800103c:	4613      	mov	r3, r2
 800103e:	71bb      	strb	r3, [r7, #6]
	if(HAL_I2C_Mem_Write(i2c_max30102, MAX30102_ADDRESS, uch_addr, 1, &uch_data, 1, I2C_TIMEOUT) == HAL_OK)
 8001040:	4b0b      	ldr	r3, [pc, #44]	; (8001070 <Max30102_WriteReg+0x40>)
 8001042:	6818      	ldr	r0, [r3, #0]
 8001044:	79fb      	ldrb	r3, [r7, #7]
 8001046:	b29a      	uxth	r2, r3
 8001048:	2301      	movs	r3, #1
 800104a:	9302      	str	r3, [sp, #8]
 800104c:	2301      	movs	r3, #1
 800104e:	9301      	str	r3, [sp, #4]
 8001050:	1dbb      	adds	r3, r7, #6
 8001052:	9300      	str	r3, [sp, #0]
 8001054:	2301      	movs	r3, #1
 8001056:	21ae      	movs	r1, #174	; 0xae
 8001058:	f003 ff6a 	bl	8004f30 <HAL_I2C_Mem_Write>
 800105c:	4603      	mov	r3, r0
 800105e:	2b00      	cmp	r3, #0
 8001060:	d101      	bne.n	8001066 <Max30102_WriteReg+0x36>
		return MAX30102_OK;
 8001062:	2301      	movs	r3, #1
 8001064:	e000      	b.n	8001068 <Max30102_WriteReg+0x38>
	return MAX30102_ERROR;
 8001066:	2300      	movs	r3, #0
}
 8001068:	4618      	mov	r0, r3
 800106a:	3708      	adds	r7, #8
 800106c:	46bd      	mov	sp, r7
 800106e:	bd80      	pop	{r7, pc}
 8001070:	200011d0 	.word	0x200011d0

08001074 <Max30102_ReadReg>:

MAX30102_STATUS Max30102_ReadReg(uint8_t uch_addr, uint8_t *puch_data)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b086      	sub	sp, #24
 8001078:	af04      	add	r7, sp, #16
 800107a:	4603      	mov	r3, r0
 800107c:	6039      	str	r1, [r7, #0]
 800107e:	71fb      	strb	r3, [r7, #7]
	if(HAL_I2C_Mem_Read(i2c_max30102, MAX30102_ADDRESS, uch_addr, 1, puch_data, 1, I2C_TIMEOUT) == HAL_OK)
 8001080:	4b0b      	ldr	r3, [pc, #44]	; (80010b0 <Max30102_ReadReg+0x3c>)
 8001082:	6818      	ldr	r0, [r3, #0]
 8001084:	79fb      	ldrb	r3, [r7, #7]
 8001086:	b29a      	uxth	r2, r3
 8001088:	2301      	movs	r3, #1
 800108a:	9302      	str	r3, [sp, #8]
 800108c:	2301      	movs	r3, #1
 800108e:	9301      	str	r3, [sp, #4]
 8001090:	683b      	ldr	r3, [r7, #0]
 8001092:	9300      	str	r3, [sp, #0]
 8001094:	2301      	movs	r3, #1
 8001096:	21ae      	movs	r1, #174	; 0xae
 8001098:	f004 f844 	bl	8005124 <HAL_I2C_Mem_Read>
 800109c:	4603      	mov	r3, r0
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d101      	bne.n	80010a6 <Max30102_ReadReg+0x32>
		return MAX30102_OK;
 80010a2:	2301      	movs	r3, #1
 80010a4:	e000      	b.n	80010a8 <Max30102_ReadReg+0x34>
	return MAX30102_ERROR;
 80010a6:	2300      	movs	r3, #0
}
 80010a8:	4618      	mov	r0, r3
 80010aa:	3708      	adds	r7, #8
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bd80      	pop	{r7, pc}
 80010b0:	200011d0 	.word	0x200011d0

080010b4 <Max30102_WriteRegisterBit>:

MAX30102_STATUS Max30102_WriteRegisterBit(uint8_t Register, uint8_t Bit, uint8_t Value)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b084      	sub	sp, #16
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	4603      	mov	r3, r0
 80010bc:	71fb      	strb	r3, [r7, #7]
 80010be:	460b      	mov	r3, r1
 80010c0:	71bb      	strb	r3, [r7, #6]
 80010c2:	4613      	mov	r3, r2
 80010c4:	717b      	strb	r3, [r7, #5]
	uint8_t tmp;
	if(MAX30102_OK != Max30102_ReadReg(Register, &tmp))
 80010c6:	f107 020f 	add.w	r2, r7, #15
 80010ca:	79fb      	ldrb	r3, [r7, #7]
 80010cc:	4611      	mov	r1, r2
 80010ce:	4618      	mov	r0, r3
 80010d0:	f7ff ffd0 	bl	8001074 <Max30102_ReadReg>
 80010d4:	4603      	mov	r3, r0
 80010d6:	2b01      	cmp	r3, #1
 80010d8:	d001      	beq.n	80010de <Max30102_WriteRegisterBit+0x2a>
		return MAX30102_ERROR;
 80010da:	2300      	movs	r3, #0
 80010dc:	e025      	b.n	800112a <Max30102_WriteRegisterBit+0x76>
	tmp &= ~(1<<Bit);
 80010de:	79bb      	ldrb	r3, [r7, #6]
 80010e0:	2201      	movs	r2, #1
 80010e2:	fa02 f303 	lsl.w	r3, r2, r3
 80010e6:	b25b      	sxtb	r3, r3
 80010e8:	43db      	mvns	r3, r3
 80010ea:	b25a      	sxtb	r2, r3
 80010ec:	7bfb      	ldrb	r3, [r7, #15]
 80010ee:	b25b      	sxtb	r3, r3
 80010f0:	4013      	ands	r3, r2
 80010f2:	b25b      	sxtb	r3, r3
 80010f4:	b2db      	uxtb	r3, r3
 80010f6:	73fb      	strb	r3, [r7, #15]
	tmp |= (Value&0x01)<<Bit;
 80010f8:	797b      	ldrb	r3, [r7, #5]
 80010fa:	f003 0201 	and.w	r2, r3, #1
 80010fe:	79bb      	ldrb	r3, [r7, #6]
 8001100:	fa02 f303 	lsl.w	r3, r2, r3
 8001104:	b25a      	sxtb	r2, r3
 8001106:	7bfb      	ldrb	r3, [r7, #15]
 8001108:	b25b      	sxtb	r3, r3
 800110a:	4313      	orrs	r3, r2
 800110c:	b25b      	sxtb	r3, r3
 800110e:	b2db      	uxtb	r3, r3
 8001110:	73fb      	strb	r3, [r7, #15]
	if(MAX30102_OK != Max30102_WriteReg(Register, tmp))
 8001112:	7bfa      	ldrb	r2, [r7, #15]
 8001114:	79fb      	ldrb	r3, [r7, #7]
 8001116:	4611      	mov	r1, r2
 8001118:	4618      	mov	r0, r3
 800111a:	f7ff ff89 	bl	8001030 <Max30102_WriteReg>
 800111e:	4603      	mov	r3, r0
 8001120:	2b01      	cmp	r3, #1
 8001122:	d001      	beq.n	8001128 <Max30102_WriteRegisterBit+0x74>
		return MAX30102_ERROR;
 8001124:	2300      	movs	r3, #0
 8001126:	e000      	b.n	800112a <Max30102_WriteRegisterBit+0x76>

	return MAX30102_OK;
 8001128:	2301      	movs	r3, #1
}
 800112a:	4618      	mov	r0, r3
 800112c:	3710      	adds	r7, #16
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}
	...

08001134 <Max30102_ReadFifo>:

MAX30102_STATUS Max30102_ReadFifo(volatile uint32_t *pun_red_led, volatile uint32_t *pun_ir_led)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b08a      	sub	sp, #40	; 0x28
 8001138:	af04      	add	r7, sp, #16
 800113a:	6078      	str	r0, [r7, #4]
 800113c:	6039      	str	r1, [r7, #0]
	uint32_t un_temp;
	*pun_red_led=0;
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	2200      	movs	r2, #0
 8001142:	601a      	str	r2, [r3, #0]
	*pun_ir_led=0;
 8001144:	683b      	ldr	r3, [r7, #0]
 8001146:	2200      	movs	r2, #0
 8001148:	601a      	str	r2, [r3, #0]
	uint8_t ach_i2c_data[6];

	if(HAL_I2C_Mem_Read(i2c_max30102, MAX30102_ADDRESS, REG_FIFO_DATA, 1, ach_i2c_data, 6, I2C_TIMEOUT) != HAL_OK)
 800114a:	4b30      	ldr	r3, [pc, #192]	; (800120c <Max30102_ReadFifo+0xd8>)
 800114c:	6818      	ldr	r0, [r3, #0]
 800114e:	2301      	movs	r3, #1
 8001150:	9302      	str	r3, [sp, #8]
 8001152:	2306      	movs	r3, #6
 8001154:	9301      	str	r3, [sp, #4]
 8001156:	f107 030c 	add.w	r3, r7, #12
 800115a:	9300      	str	r3, [sp, #0]
 800115c:	2301      	movs	r3, #1
 800115e:	2207      	movs	r2, #7
 8001160:	21ae      	movs	r1, #174	; 0xae
 8001162:	f003 ffdf 	bl	8005124 <HAL_I2C_Mem_Read>
 8001166:	4603      	mov	r3, r0
 8001168:	2b00      	cmp	r3, #0
 800116a:	d001      	beq.n	8001170 <Max30102_ReadFifo+0x3c>
	{
		return MAX30102_ERROR;
 800116c:	2300      	movs	r3, #0
 800116e:	e048      	b.n	8001202 <Max30102_ReadFifo+0xce>
	}
	un_temp=(unsigned char) ach_i2c_data[0];
 8001170:	7b3b      	ldrb	r3, [r7, #12]
 8001172:	617b      	str	r3, [r7, #20]
	un_temp<<=16;
 8001174:	697b      	ldr	r3, [r7, #20]
 8001176:	041b      	lsls	r3, r3, #16
 8001178:	617b      	str	r3, [r7, #20]
	*pun_red_led+=un_temp;
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681a      	ldr	r2, [r3, #0]
 800117e:	697b      	ldr	r3, [r7, #20]
 8001180:	441a      	add	r2, r3
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	601a      	str	r2, [r3, #0]
	un_temp=(unsigned char) ach_i2c_data[1];
 8001186:	7b7b      	ldrb	r3, [r7, #13]
 8001188:	617b      	str	r3, [r7, #20]
	un_temp<<=8;
 800118a:	697b      	ldr	r3, [r7, #20]
 800118c:	021b      	lsls	r3, r3, #8
 800118e:	617b      	str	r3, [r7, #20]
	*pun_red_led+=un_temp;
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681a      	ldr	r2, [r3, #0]
 8001194:	697b      	ldr	r3, [r7, #20]
 8001196:	441a      	add	r2, r3
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	601a      	str	r2, [r3, #0]
	un_temp=(unsigned char) ach_i2c_data[2];
 800119c:	7bbb      	ldrb	r3, [r7, #14]
 800119e:	617b      	str	r3, [r7, #20]
	*pun_red_led+=un_temp;
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681a      	ldr	r2, [r3, #0]
 80011a4:	697b      	ldr	r3, [r7, #20]
 80011a6:	441a      	add	r2, r3
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	601a      	str	r2, [r3, #0]

	un_temp=(unsigned char) ach_i2c_data[3];
 80011ac:	7bfb      	ldrb	r3, [r7, #15]
 80011ae:	617b      	str	r3, [r7, #20]
	un_temp<<=16;
 80011b0:	697b      	ldr	r3, [r7, #20]
 80011b2:	041b      	lsls	r3, r3, #16
 80011b4:	617b      	str	r3, [r7, #20]
	*pun_ir_led+=un_temp;
 80011b6:	683b      	ldr	r3, [r7, #0]
 80011b8:	681a      	ldr	r2, [r3, #0]
 80011ba:	697b      	ldr	r3, [r7, #20]
 80011bc:	441a      	add	r2, r3
 80011be:	683b      	ldr	r3, [r7, #0]
 80011c0:	601a      	str	r2, [r3, #0]
	un_temp=(unsigned char) ach_i2c_data[4];
 80011c2:	7c3b      	ldrb	r3, [r7, #16]
 80011c4:	617b      	str	r3, [r7, #20]
	un_temp<<=8;
 80011c6:	697b      	ldr	r3, [r7, #20]
 80011c8:	021b      	lsls	r3, r3, #8
 80011ca:	617b      	str	r3, [r7, #20]
	*pun_ir_led+=un_temp;
 80011cc:	683b      	ldr	r3, [r7, #0]
 80011ce:	681a      	ldr	r2, [r3, #0]
 80011d0:	697b      	ldr	r3, [r7, #20]
 80011d2:	441a      	add	r2, r3
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	601a      	str	r2, [r3, #0]
	un_temp=(unsigned char) ach_i2c_data[5];
 80011d8:	7c7b      	ldrb	r3, [r7, #17]
 80011da:	617b      	str	r3, [r7, #20]
	*pun_ir_led+=un_temp;
 80011dc:	683b      	ldr	r3, [r7, #0]
 80011de:	681a      	ldr	r2, [r3, #0]
 80011e0:	697b      	ldr	r3, [r7, #20]
 80011e2:	441a      	add	r2, r3
 80011e4:	683b      	ldr	r3, [r7, #0]
 80011e6:	601a      	str	r2, [r3, #0]
	*pun_red_led&=0x03FFFF;  //Mask MSB [23:18]
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	f3c3 0211 	ubfx	r2, r3, #0, #18
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	601a      	str	r2, [r3, #0]
	*pun_ir_led&=0x03FFFF;  //Mask MSB [23:18]
 80011f4:	683b      	ldr	r3, [r7, #0]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	f3c3 0211 	ubfx	r2, r3, #0, #18
 80011fc:	683b      	ldr	r3, [r7, #0]
 80011fe:	601a      	str	r2, [r3, #0]

	return MAX30102_OK;
 8001200:	2301      	movs	r3, #1
}
 8001202:	4618      	mov	r0, r3
 8001204:	3718      	adds	r7, #24
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}
 800120a:	bf00      	nop
 800120c:	200011d0 	.word	0x200011d0

08001210 <Max30102_SetIntAlmostFullEnabled>:

//
//	Interrupts
//
MAX30102_STATUS Max30102_SetIntAlmostFullEnabled(uint8_t Enable)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b082      	sub	sp, #8
 8001214:	af00      	add	r7, sp, #0
 8001216:	4603      	mov	r3, r0
 8001218:	71fb      	strb	r3, [r7, #7]
	return Max30102_WriteRegisterBit(REG_INTR_ENABLE_1, INT_A_FULL_BIT, Enable);
 800121a:	79fb      	ldrb	r3, [r7, #7]
 800121c:	461a      	mov	r2, r3
 800121e:	2107      	movs	r1, #7
 8001220:	2002      	movs	r0, #2
 8001222:	f7ff ff47 	bl	80010b4 <Max30102_WriteRegisterBit>
 8001226:	4603      	mov	r3, r0
}
 8001228:	4618      	mov	r0, r3
 800122a:	3708      	adds	r7, #8
 800122c:	46bd      	mov	sp, r7
 800122e:	bd80      	pop	{r7, pc}

08001230 <Max30102_SetIntFifoDataReadyEnabled>:

MAX30102_STATUS Max30102_SetIntFifoDataReadyEnabled(uint8_t Enable)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b082      	sub	sp, #8
 8001234:	af00      	add	r7, sp, #0
 8001236:	4603      	mov	r3, r0
 8001238:	71fb      	strb	r3, [r7, #7]

	return Max30102_WriteRegisterBit(REG_INTR_ENABLE_1, INT_PPG_RDY_BIT, Enable);
 800123a:	79fb      	ldrb	r3, [r7, #7]
 800123c:	461a      	mov	r2, r3
 800123e:	2106      	movs	r1, #6
 8001240:	2002      	movs	r0, #2
 8001242:	f7ff ff37 	bl	80010b4 <Max30102_WriteRegisterBit>
 8001246:	4603      	mov	r3, r0
}
 8001248:	4618      	mov	r0, r3
 800124a:	3708      	adds	r7, #8
 800124c:	46bd      	mov	sp, r7
 800124e:	bd80      	pop	{r7, pc}

08001250 <Max30102_ReadInterruptStatus>:

	return Max30102_WriteRegisterBit(REG_INTR_ENABLE_2, INT_DIE_TEMP_RDY_BIT, Enable);
}
#endif
MAX30102_STATUS Max30102_ReadInterruptStatus(uint8_t *Status)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b084      	sub	sp, #16
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	*Status = 0;
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	2200      	movs	r2, #0
 800125c:	701a      	strb	r2, [r3, #0]

	if(MAX30102_OK != Max30102_ReadReg(REG_INTR_STATUS_1, &tmp))
 800125e:	f107 030f 	add.w	r3, r7, #15
 8001262:	4619      	mov	r1, r3
 8001264:	2000      	movs	r0, #0
 8001266:	f7ff ff05 	bl	8001074 <Max30102_ReadReg>
 800126a:	4603      	mov	r3, r0
 800126c:	2b01      	cmp	r3, #1
 800126e:	d001      	beq.n	8001274 <Max30102_ReadInterruptStatus+0x24>
		return MAX30102_ERROR;
 8001270:	2300      	movs	r3, #0
 8001272:	e00d      	b.n	8001290 <Max30102_ReadInterruptStatus+0x40>
	*Status |= tmp & 0xE1; // 3 highest bits
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	781b      	ldrb	r3, [r3, #0]
 8001278:	b25a      	sxtb	r2, r3
 800127a:	7bfb      	ldrb	r3, [r7, #15]
 800127c:	b25b      	sxtb	r3, r3
 800127e:	f023 031e 	bic.w	r3, r3, #30
 8001282:	b25b      	sxtb	r3, r3
 8001284:	4313      	orrs	r3, r2
 8001286:	b25b      	sxtb	r3, r3
 8001288:	b2da      	uxtb	r2, r3
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	701a      	strb	r2, [r3, #0]
#ifdef MAX30102_USE_INTERNAL_TEMPERATURE
	if(MAX30102_OK != Max30102_ReadReg(REG_INTR_STATUS_2, &tmp))
		return MAX30102_ERROR;
	*Status |= tmp & 0x02;
#endif
	return MAX30102_OK;
 800128e:	2301      	movs	r3, #1
}
 8001290:	4618      	mov	r0, r3
 8001292:	3710      	adds	r7, #16
 8001294:	46bd      	mov	sp, r7
 8001296:	bd80      	pop	{r7, pc}

08001298 <Max30102_InterruptCallback>:

void Max30102_InterruptCallback(void)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b082      	sub	sp, #8
 800129c:	af00      	add	r7, sp, #0
	uint8_t Status;
	while(MAX30102_OK != Max30102_ReadInterruptStatus(&Status));
 800129e:	bf00      	nop
 80012a0:	1dbb      	adds	r3, r7, #6
 80012a2:	4618      	mov	r0, r3
 80012a4:	f7ff ffd4 	bl	8001250 <Max30102_ReadInterruptStatus>
 80012a8:	4603      	mov	r3, r0
 80012aa:	2b01      	cmp	r3, #1
 80012ac:	d1f8      	bne.n	80012a0 <Max30102_InterruptCallback+0x8>

	// Almost Full FIFO Interrupt handle
	if(Status & (1<<INT_A_FULL_BIT))
 80012ae:	79bb      	ldrb	r3, [r7, #6]
 80012b0:	b25b      	sxtb	r3, r3
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	da4a      	bge.n	800134c <Max30102_InterruptCallback+0xb4>
	{
		for(uint8_t i = 0; i < MAX30102_FIFO_ALMOST_FULL_SAMPLES; i++)
 80012b6:	2300      	movs	r3, #0
 80012b8:	71fb      	strb	r3, [r7, #7]
 80012ba:	e044      	b.n	8001346 <Max30102_InterruptCallback+0xae>
		{
			while(MAX30102_OK != Max30102_ReadFifo((RedBuffer+BufferHead), (IrBuffer+BufferHead)));
 80012bc:	bf00      	nop
 80012be:	4b49      	ldr	r3, [pc, #292]	; (80013e4 <Max30102_InterruptCallback+0x14c>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	009b      	lsls	r3, r3, #2
 80012c4:	4a48      	ldr	r2, [pc, #288]	; (80013e8 <Max30102_InterruptCallback+0x150>)
 80012c6:	441a      	add	r2, r3
 80012c8:	4b46      	ldr	r3, [pc, #280]	; (80013e4 <Max30102_InterruptCallback+0x14c>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	009b      	lsls	r3, r3, #2
 80012ce:	4947      	ldr	r1, [pc, #284]	; (80013ec <Max30102_InterruptCallback+0x154>)
 80012d0:	440b      	add	r3, r1
 80012d2:	4619      	mov	r1, r3
 80012d4:	4610      	mov	r0, r2
 80012d6:	f7ff ff2d 	bl	8001134 <Max30102_ReadFifo>
 80012da:	4603      	mov	r3, r0
 80012dc:	2b01      	cmp	r3, #1
 80012de:	d1ee      	bne.n	80012be <Max30102_InterruptCallback+0x26>
			if(IsFingerOnScreen)
 80012e0:	4b43      	ldr	r3, [pc, #268]	; (80013f0 <Max30102_InterruptCallback+0x158>)
 80012e2:	781b      	ldrb	r3, [r3, #0]
 80012e4:	b2db      	uxtb	r3, r3
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d00c      	beq.n	8001304 <Max30102_InterruptCallback+0x6c>
			{
				if(IrBuffer[BufferHead] < MAX30102_IR_VALUE_FINGER_OUT_SENSOR) IsFingerOnScreen = 0;
 80012ea:	4b3e      	ldr	r3, [pc, #248]	; (80013e4 <Max30102_InterruptCallback+0x14c>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	4a3f      	ldr	r2, [pc, #252]	; (80013ec <Max30102_InterruptCallback+0x154>)
 80012f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012f4:	f24c 324f 	movw	r2, #49999	; 0xc34f
 80012f8:	4293      	cmp	r3, r2
 80012fa:	d80e      	bhi.n	800131a <Max30102_InterruptCallback+0x82>
 80012fc:	4b3c      	ldr	r3, [pc, #240]	; (80013f0 <Max30102_InterruptCallback+0x158>)
 80012fe:	2200      	movs	r2, #0
 8001300:	701a      	strb	r2, [r3, #0]
 8001302:	e00a      	b.n	800131a <Max30102_InterruptCallback+0x82>
			}
			else
			{
				if(IrBuffer[BufferHead] > MAX30102_IR_VALUE_FINGER_ON_SENSOR) IsFingerOnScreen = 1;
 8001304:	4b37      	ldr	r3, [pc, #220]	; (80013e4 <Max30102_InterruptCallback+0x14c>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	4a38      	ldr	r2, [pc, #224]	; (80013ec <Max30102_InterruptCallback+0x154>)
 800130a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800130e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8001312:	d902      	bls.n	800131a <Max30102_InterruptCallback+0x82>
 8001314:	4b36      	ldr	r3, [pc, #216]	; (80013f0 <Max30102_InterruptCallback+0x158>)
 8001316:	2201      	movs	r2, #1
 8001318:	701a      	strb	r2, [r3, #0]
			}
			BufferHead = (BufferHead + 1) % MAX30102_BUFFER_LENGTH;
 800131a:	4b32      	ldr	r3, [pc, #200]	; (80013e4 <Max30102_InterruptCallback+0x14c>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	1c5a      	adds	r2, r3, #1
 8001320:	4b34      	ldr	r3, [pc, #208]	; (80013f4 <Max30102_InterruptCallback+0x15c>)
 8001322:	fba3 1302 	umull	r1, r3, r3, r2
 8001326:	095b      	lsrs	r3, r3, #5
 8001328:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800132c:	fb01 f303 	mul.w	r3, r1, r3
 8001330:	1ad3      	subs	r3, r2, r3
 8001332:	4a2c      	ldr	r2, [pc, #176]	; (80013e4 <Max30102_InterruptCallback+0x14c>)
 8001334:	6013      	str	r3, [r2, #0]
			CollectedSamples++;
 8001336:	4b30      	ldr	r3, [pc, #192]	; (80013f8 <Max30102_InterruptCallback+0x160>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	3301      	adds	r3, #1
 800133c:	4a2e      	ldr	r2, [pc, #184]	; (80013f8 <Max30102_InterruptCallback+0x160>)
 800133e:	6013      	str	r3, [r2, #0]
		for(uint8_t i = 0; i < MAX30102_FIFO_ALMOST_FULL_SAMPLES; i++)
 8001340:	79fb      	ldrb	r3, [r7, #7]
 8001342:	3301      	adds	r3, #1
 8001344:	71fb      	strb	r3, [r7, #7]
 8001346:	79fb      	ldrb	r3, [r7, #7]
 8001348:	2b10      	cmp	r3, #16
 800134a:	d9b7      	bls.n	80012bc <Max30102_InterruptCallback+0x24>
		}
	}

	// New FIFO Data Ready Interrupt handle
	if(Status & (1<<INT_PPG_RDY_BIT))
 800134c:	79bb      	ldrb	r3, [r7, #6]
 800134e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001352:	2b00      	cmp	r3, #0
 8001354:	d041      	beq.n	80013da <Max30102_InterruptCallback+0x142>
	{
		while(MAX30102_OK != Max30102_ReadFifo((RedBuffer+BufferHead), (IrBuffer+BufferHead)));
 8001356:	bf00      	nop
 8001358:	4b22      	ldr	r3, [pc, #136]	; (80013e4 <Max30102_InterruptCallback+0x14c>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	009b      	lsls	r3, r3, #2
 800135e:	4a22      	ldr	r2, [pc, #136]	; (80013e8 <Max30102_InterruptCallback+0x150>)
 8001360:	441a      	add	r2, r3
 8001362:	4b20      	ldr	r3, [pc, #128]	; (80013e4 <Max30102_InterruptCallback+0x14c>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	009b      	lsls	r3, r3, #2
 8001368:	4920      	ldr	r1, [pc, #128]	; (80013ec <Max30102_InterruptCallback+0x154>)
 800136a:	440b      	add	r3, r1
 800136c:	4619      	mov	r1, r3
 800136e:	4610      	mov	r0, r2
 8001370:	f7ff fee0 	bl	8001134 <Max30102_ReadFifo>
 8001374:	4603      	mov	r3, r0
 8001376:	2b01      	cmp	r3, #1
 8001378:	d1ee      	bne.n	8001358 <Max30102_InterruptCallback+0xc0>
		if(IsFingerOnScreen)
 800137a:	4b1d      	ldr	r3, [pc, #116]	; (80013f0 <Max30102_InterruptCallback+0x158>)
 800137c:	781b      	ldrb	r3, [r3, #0]
 800137e:	b2db      	uxtb	r3, r3
 8001380:	2b00      	cmp	r3, #0
 8001382:	d00c      	beq.n	800139e <Max30102_InterruptCallback+0x106>
		{
			if(IrBuffer[BufferHead] < MAX30102_IR_VALUE_FINGER_OUT_SENSOR) IsFingerOnScreen = 0;
 8001384:	4b17      	ldr	r3, [pc, #92]	; (80013e4 <Max30102_InterruptCallback+0x14c>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	4a18      	ldr	r2, [pc, #96]	; (80013ec <Max30102_InterruptCallback+0x154>)
 800138a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800138e:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8001392:	4293      	cmp	r3, r2
 8001394:	d80e      	bhi.n	80013b4 <Max30102_InterruptCallback+0x11c>
 8001396:	4b16      	ldr	r3, [pc, #88]	; (80013f0 <Max30102_InterruptCallback+0x158>)
 8001398:	2200      	movs	r2, #0
 800139a:	701a      	strb	r2, [r3, #0]
 800139c:	e00a      	b.n	80013b4 <Max30102_InterruptCallback+0x11c>
		}
		else
		{
			if(IrBuffer[BufferHead] > MAX30102_IR_VALUE_FINGER_ON_SENSOR) IsFingerOnScreen = 1;
 800139e:	4b11      	ldr	r3, [pc, #68]	; (80013e4 <Max30102_InterruptCallback+0x14c>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	4a12      	ldr	r2, [pc, #72]	; (80013ec <Max30102_InterruptCallback+0x154>)
 80013a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013a8:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80013ac:	d902      	bls.n	80013b4 <Max30102_InterruptCallback+0x11c>
 80013ae:	4b10      	ldr	r3, [pc, #64]	; (80013f0 <Max30102_InterruptCallback+0x158>)
 80013b0:	2201      	movs	r2, #1
 80013b2:	701a      	strb	r2, [r3, #0]
		}
		BufferHead = (BufferHead + 1) % MAX30102_BUFFER_LENGTH;
 80013b4:	4b0b      	ldr	r3, [pc, #44]	; (80013e4 <Max30102_InterruptCallback+0x14c>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	1c5a      	adds	r2, r3, #1
 80013ba:	4b0e      	ldr	r3, [pc, #56]	; (80013f4 <Max30102_InterruptCallback+0x15c>)
 80013bc:	fba3 1302 	umull	r1, r3, r3, r2
 80013c0:	095b      	lsrs	r3, r3, #5
 80013c2:	f44f 7196 	mov.w	r1, #300	; 0x12c
 80013c6:	fb01 f303 	mul.w	r3, r1, r3
 80013ca:	1ad3      	subs	r3, r2, r3
 80013cc:	4a05      	ldr	r2, [pc, #20]	; (80013e4 <Max30102_InterruptCallback+0x14c>)
 80013ce:	6013      	str	r3, [r2, #0]
		CollectedSamples++;
 80013d0:	4b09      	ldr	r3, [pc, #36]	; (80013f8 <Max30102_InterruptCallback+0x160>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	3301      	adds	r3, #1
 80013d6:	4a08      	ldr	r2, [pc, #32]	; (80013f8 <Max30102_InterruptCallback+0x160>)
 80013d8:	6013      	str	r3, [r2, #0]
	if(Status & (1<<INT_DIE_TEMP_RDY_BIT))
	{

	}
#endif
}
 80013da:	bf00      	nop
 80013dc:	3708      	adds	r7, #8
 80013de:	46bd      	mov	sp, r7
 80013e0:	bd80      	pop	{r7, pc}
 80013e2:	bf00      	nop
 80013e4:	200011d8 	.word	0x200011d8
 80013e8:	20001698 	.word	0x20001698
 80013ec:	200011e0 	.word	0x200011e0
 80013f0:	200011d5 	.word	0x200011d5
 80013f4:	1b4e81b5 	.word	0x1b4e81b5
 80013f8:	200011cc 	.word	0x200011cc

080013fc <Max30102_FifoWritePointer>:

//
//	FIFO Configuration
//
MAX30102_STATUS Max30102_FifoWritePointer(uint8_t Address)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b082      	sub	sp, #8
 8001400:	af00      	add	r7, sp, #0
 8001402:	4603      	mov	r3, r0
 8001404:	71fb      	strb	r3, [r7, #7]
	if(MAX30102_OK != Max30102_WriteReg(REG_FIFO_WR_PTR,(Address & 0x1F)))  //FIFO_WR_PTR[4:0]
 8001406:	79fb      	ldrb	r3, [r7, #7]
 8001408:	f003 031f 	and.w	r3, r3, #31
 800140c:	b2db      	uxtb	r3, r3
 800140e:	4619      	mov	r1, r3
 8001410:	2004      	movs	r0, #4
 8001412:	f7ff fe0d 	bl	8001030 <Max30102_WriteReg>
 8001416:	4603      	mov	r3, r0
 8001418:	2b01      	cmp	r3, #1
 800141a:	d001      	beq.n	8001420 <Max30102_FifoWritePointer+0x24>
			return MAX30102_ERROR;
 800141c:	2300      	movs	r3, #0
 800141e:	e000      	b.n	8001422 <Max30102_FifoWritePointer+0x26>
	return MAX30102_OK;
 8001420:	2301      	movs	r3, #1
}
 8001422:	4618      	mov	r0, r3
 8001424:	3708      	adds	r7, #8
 8001426:	46bd      	mov	sp, r7
 8001428:	bd80      	pop	{r7, pc}

0800142a <Max30102_FifoOverflowCounter>:

MAX30102_STATUS Max30102_FifoOverflowCounter(uint8_t Address)
{
 800142a:	b580      	push	{r7, lr}
 800142c:	b082      	sub	sp, #8
 800142e:	af00      	add	r7, sp, #0
 8001430:	4603      	mov	r3, r0
 8001432:	71fb      	strb	r3, [r7, #7]
	if(MAX30102_OK != Max30102_WriteReg(REG_OVF_COUNTER,(Address & 0x1F)))  //OVF_COUNTER[4:0]
 8001434:	79fb      	ldrb	r3, [r7, #7]
 8001436:	f003 031f 	and.w	r3, r3, #31
 800143a:	b2db      	uxtb	r3, r3
 800143c:	4619      	mov	r1, r3
 800143e:	2005      	movs	r0, #5
 8001440:	f7ff fdf6 	bl	8001030 <Max30102_WriteReg>
 8001444:	4603      	mov	r3, r0
 8001446:	2b01      	cmp	r3, #1
 8001448:	d001      	beq.n	800144e <Max30102_FifoOverflowCounter+0x24>
			return MAX30102_ERROR;
 800144a:	2300      	movs	r3, #0
 800144c:	e000      	b.n	8001450 <Max30102_FifoOverflowCounter+0x26>
	return MAX30102_OK;
 800144e:	2301      	movs	r3, #1
}
 8001450:	4618      	mov	r0, r3
 8001452:	3708      	adds	r7, #8
 8001454:	46bd      	mov	sp, r7
 8001456:	bd80      	pop	{r7, pc}

08001458 <Max30102_FifoReadPointer>:

MAX30102_STATUS Max30102_FifoReadPointer(uint8_t Address)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b082      	sub	sp, #8
 800145c:	af00      	add	r7, sp, #0
 800145e:	4603      	mov	r3, r0
 8001460:	71fb      	strb	r3, [r7, #7]
	if(MAX30102_OK != Max30102_WriteReg(REG_FIFO_RD_PTR,(Address & 0x1F)))  //FIFO_RD_PTR[4:0]
 8001462:	79fb      	ldrb	r3, [r7, #7]
 8001464:	f003 031f 	and.w	r3, r3, #31
 8001468:	b2db      	uxtb	r3, r3
 800146a:	4619      	mov	r1, r3
 800146c:	2006      	movs	r0, #6
 800146e:	f7ff fddf 	bl	8001030 <Max30102_WriteReg>
 8001472:	4603      	mov	r3, r0
 8001474:	2b01      	cmp	r3, #1
 8001476:	d001      	beq.n	800147c <Max30102_FifoReadPointer+0x24>
			return MAX30102_ERROR;
 8001478:	2300      	movs	r3, #0
 800147a:	e000      	b.n	800147e <Max30102_FifoReadPointer+0x26>
	return MAX30102_OK;
 800147c:	2301      	movs	r3, #1
}
 800147e:	4618      	mov	r0, r3
 8001480:	3708      	adds	r7, #8
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}

08001486 <Max30102_FifoSampleAveraging>:

MAX30102_STATUS Max30102_FifoSampleAveraging(uint8_t Value)
{
 8001486:	b580      	push	{r7, lr}
 8001488:	b084      	sub	sp, #16
 800148a:	af00      	add	r7, sp, #0
 800148c:	4603      	mov	r3, r0
 800148e:	71fb      	strb	r3, [r7, #7]
	uint8_t tmp;
	if(MAX30102_OK != Max30102_ReadReg(REG_FIFO_CONFIG, &tmp))
 8001490:	f107 030f 	add.w	r3, r7, #15
 8001494:	4619      	mov	r1, r3
 8001496:	2008      	movs	r0, #8
 8001498:	f7ff fdec 	bl	8001074 <Max30102_ReadReg>
 800149c:	4603      	mov	r3, r0
 800149e:	2b01      	cmp	r3, #1
 80014a0:	d001      	beq.n	80014a6 <Max30102_FifoSampleAveraging+0x20>
		return MAX30102_ERROR;
 80014a2:	2300      	movs	r3, #0
 80014a4:	e018      	b.n	80014d8 <Max30102_FifoSampleAveraging+0x52>
	tmp &= ~(0x07);
 80014a6:	7bfb      	ldrb	r3, [r7, #15]
 80014a8:	f023 0307 	bic.w	r3, r3, #7
 80014ac:	b2db      	uxtb	r3, r3
 80014ae:	73fb      	strb	r3, [r7, #15]
	tmp |= (Value&0x07)<<5;
 80014b0:	79fb      	ldrb	r3, [r7, #7]
 80014b2:	015b      	lsls	r3, r3, #5
 80014b4:	b25a      	sxtb	r2, r3
 80014b6:	7bfb      	ldrb	r3, [r7, #15]
 80014b8:	b25b      	sxtb	r3, r3
 80014ba:	4313      	orrs	r3, r2
 80014bc:	b25b      	sxtb	r3, r3
 80014be:	b2db      	uxtb	r3, r3
 80014c0:	73fb      	strb	r3, [r7, #15]
	if(MAX30102_OK != Max30102_WriteReg(REG_FIFO_CONFIG, tmp))
 80014c2:	7bfb      	ldrb	r3, [r7, #15]
 80014c4:	4619      	mov	r1, r3
 80014c6:	2008      	movs	r0, #8
 80014c8:	f7ff fdb2 	bl	8001030 <Max30102_WriteReg>
 80014cc:	4603      	mov	r3, r0
 80014ce:	2b01      	cmp	r3, #1
 80014d0:	d001      	beq.n	80014d6 <Max30102_FifoSampleAveraging+0x50>
		return MAX30102_ERROR;
 80014d2:	2300      	movs	r3, #0
 80014d4:	e000      	b.n	80014d8 <Max30102_FifoSampleAveraging+0x52>

	return MAX30102_OK;
 80014d6:	2301      	movs	r3, #1
}
 80014d8:	4618      	mov	r0, r3
 80014da:	3710      	adds	r7, #16
 80014dc:	46bd      	mov	sp, r7
 80014de:	bd80      	pop	{r7, pc}

080014e0 <Max30102_FifoRolloverEnable>:

MAX30102_STATUS Max30102_FifoRolloverEnable(uint8_t Enable)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b082      	sub	sp, #8
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	4603      	mov	r3, r0
 80014e8:	71fb      	strb	r3, [r7, #7]
	return Max30102_WriteRegisterBit(REG_FIFO_CONFIG, FIFO_CONF_FIFO_ROLLOVER_EN_BIT, (Enable & 0x01));
 80014ea:	79fb      	ldrb	r3, [r7, #7]
 80014ec:	f003 0301 	and.w	r3, r3, #1
 80014f0:	b2db      	uxtb	r3, r3
 80014f2:	461a      	mov	r2, r3
 80014f4:	2104      	movs	r1, #4
 80014f6:	2008      	movs	r0, #8
 80014f8:	f7ff fddc 	bl	80010b4 <Max30102_WriteRegisterBit>
 80014fc:	4603      	mov	r3, r0
}
 80014fe:	4618      	mov	r0, r3
 8001500:	3708      	adds	r7, #8
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}

08001506 <Max30102_FifoAlmostFullValue>:

MAX30102_STATUS Max30102_FifoAlmostFullValue(uint8_t Value)
{
 8001506:	b580      	push	{r7, lr}
 8001508:	b084      	sub	sp, #16
 800150a:	af00      	add	r7, sp, #0
 800150c:	4603      	mov	r3, r0
 800150e:	71fb      	strb	r3, [r7, #7]
	if(Value < 17) Value = 17;
 8001510:	79fb      	ldrb	r3, [r7, #7]
 8001512:	2b10      	cmp	r3, #16
 8001514:	d801      	bhi.n	800151a <Max30102_FifoAlmostFullValue+0x14>
 8001516:	2311      	movs	r3, #17
 8001518:	71fb      	strb	r3, [r7, #7]
	if(Value > 32) Value = 32;
 800151a:	79fb      	ldrb	r3, [r7, #7]
 800151c:	2b20      	cmp	r3, #32
 800151e:	d901      	bls.n	8001524 <Max30102_FifoAlmostFullValue+0x1e>
 8001520:	2320      	movs	r3, #32
 8001522:	71fb      	strb	r3, [r7, #7]
	Value = 32 - Value;
 8001524:	79fb      	ldrb	r3, [r7, #7]
 8001526:	f1c3 0320 	rsb	r3, r3, #32
 800152a:	71fb      	strb	r3, [r7, #7]
	uint8_t tmp;
	if(MAX30102_OK != Max30102_ReadReg(REG_FIFO_CONFIG, &tmp))
 800152c:	f107 030f 	add.w	r3, r7, #15
 8001530:	4619      	mov	r1, r3
 8001532:	2008      	movs	r0, #8
 8001534:	f7ff fd9e 	bl	8001074 <Max30102_ReadReg>
 8001538:	4603      	mov	r3, r0
 800153a:	2b01      	cmp	r3, #1
 800153c:	d001      	beq.n	8001542 <Max30102_FifoAlmostFullValue+0x3c>
		return MAX30102_ERROR;
 800153e:	2300      	movs	r3, #0
 8001540:	e01a      	b.n	8001578 <Max30102_FifoAlmostFullValue+0x72>
	tmp &= ~(0x0F);
 8001542:	7bfb      	ldrb	r3, [r7, #15]
 8001544:	f023 030f 	bic.w	r3, r3, #15
 8001548:	b2db      	uxtb	r3, r3
 800154a:	73fb      	strb	r3, [r7, #15]
	tmp |= (Value & 0x0F);
 800154c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001550:	f003 030f 	and.w	r3, r3, #15
 8001554:	b25a      	sxtb	r2, r3
 8001556:	7bfb      	ldrb	r3, [r7, #15]
 8001558:	b25b      	sxtb	r3, r3
 800155a:	4313      	orrs	r3, r2
 800155c:	b25b      	sxtb	r3, r3
 800155e:	b2db      	uxtb	r3, r3
 8001560:	73fb      	strb	r3, [r7, #15]
	if(MAX30102_OK != Max30102_WriteReg(REG_FIFO_CONFIG, tmp))
 8001562:	7bfb      	ldrb	r3, [r7, #15]
 8001564:	4619      	mov	r1, r3
 8001566:	2008      	movs	r0, #8
 8001568:	f7ff fd62 	bl	8001030 <Max30102_WriteReg>
 800156c:	4603      	mov	r3, r0
 800156e:	2b01      	cmp	r3, #1
 8001570:	d001      	beq.n	8001576 <Max30102_FifoAlmostFullValue+0x70>
		return MAX30102_ERROR;
 8001572:	2300      	movs	r3, #0
 8001574:	e000      	b.n	8001578 <Max30102_FifoAlmostFullValue+0x72>

	return MAX30102_OK;
 8001576:	2301      	movs	r3, #1
}
 8001578:	4618      	mov	r0, r3
 800157a:	3710      	adds	r7, #16
 800157c:	46bd      	mov	sp, r7
 800157e:	bd80      	pop	{r7, pc}

08001580 <Max30102_Reset>:
{
	return Max30102_WriteRegisterBit(REG_MODE_CONFIG, MODE_SHDN_BIT, (Enable & 0x01));
}

MAX30102_STATUS Max30102_Reset(void)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b082      	sub	sp, #8
 8001584:	af00      	add	r7, sp, #0
	uint8_t tmp = 0xFF;
 8001586:	23ff      	movs	r3, #255	; 0xff
 8001588:	71fb      	strb	r3, [r7, #7]
    if(MAX30102_OK != Max30102_WriteReg(REG_MODE_CONFIG,0x40))
 800158a:	2140      	movs	r1, #64	; 0x40
 800158c:	2009      	movs	r0, #9
 800158e:	f7ff fd4f 	bl	8001030 <Max30102_WriteReg>
 8001592:	4603      	mov	r3, r0
 8001594:	2b01      	cmp	r3, #1
 8001596:	d001      	beq.n	800159c <Max30102_Reset+0x1c>
        return MAX30102_ERROR;
 8001598:	2300      	movs	r3, #0
 800159a:	e00f      	b.n	80015bc <Max30102_Reset+0x3c>
    do
    {
    	if(MAX30102_OK != Max30102_ReadReg(REG_MODE_CONFIG, &tmp))
 800159c:	1dfb      	adds	r3, r7, #7
 800159e:	4619      	mov	r1, r3
 80015a0:	2009      	movs	r0, #9
 80015a2:	f7ff fd67 	bl	8001074 <Max30102_ReadReg>
 80015a6:	4603      	mov	r3, r0
 80015a8:	2b01      	cmp	r3, #1
 80015aa:	d001      	beq.n	80015b0 <Max30102_Reset+0x30>
    		return MAX30102_ERROR;
 80015ac:	2300      	movs	r3, #0
 80015ae:	e005      	b.n	80015bc <Max30102_Reset+0x3c>
    } while(tmp & (1<<6));
 80015b0:	79fb      	ldrb	r3, [r7, #7]
 80015b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d1f0      	bne.n	800159c <Max30102_Reset+0x1c>

    return MAX30102_OK;
 80015ba:	2301      	movs	r3, #1
}
 80015bc:	4618      	mov	r0, r3
 80015be:	3708      	adds	r7, #8
 80015c0:	46bd      	mov	sp, r7
 80015c2:	bd80      	pop	{r7, pc}

080015c4 <Max30102_SetMode>:

MAX30102_STATUS Max30102_SetMode(uint8_t Mode)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b084      	sub	sp, #16
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	4603      	mov	r3, r0
 80015cc:	71fb      	strb	r3, [r7, #7]
	uint8_t tmp;
	if(MAX30102_OK != Max30102_ReadReg(REG_MODE_CONFIG, &tmp))
 80015ce:	f107 030f 	add.w	r3, r7, #15
 80015d2:	4619      	mov	r1, r3
 80015d4:	2009      	movs	r0, #9
 80015d6:	f7ff fd4d 	bl	8001074 <Max30102_ReadReg>
 80015da:	4603      	mov	r3, r0
 80015dc:	2b01      	cmp	r3, #1
 80015de:	d001      	beq.n	80015e4 <Max30102_SetMode+0x20>
		return MAX30102_ERROR;
 80015e0:	2300      	movs	r3, #0
 80015e2:	e01a      	b.n	800161a <Max30102_SetMode+0x56>
	tmp &= ~(0x07);
 80015e4:	7bfb      	ldrb	r3, [r7, #15]
 80015e6:	f023 0307 	bic.w	r3, r3, #7
 80015ea:	b2db      	uxtb	r3, r3
 80015ec:	73fb      	strb	r3, [r7, #15]
	tmp |= (Mode & 0x07);
 80015ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015f2:	f003 0307 	and.w	r3, r3, #7
 80015f6:	b25a      	sxtb	r2, r3
 80015f8:	7bfb      	ldrb	r3, [r7, #15]
 80015fa:	b25b      	sxtb	r3, r3
 80015fc:	4313      	orrs	r3, r2
 80015fe:	b25b      	sxtb	r3, r3
 8001600:	b2db      	uxtb	r3, r3
 8001602:	73fb      	strb	r3, [r7, #15]
	if(MAX30102_OK != Max30102_WriteReg(REG_MODE_CONFIG, tmp))
 8001604:	7bfb      	ldrb	r3, [r7, #15]
 8001606:	4619      	mov	r1, r3
 8001608:	2009      	movs	r0, #9
 800160a:	f7ff fd11 	bl	8001030 <Max30102_WriteReg>
 800160e:	4603      	mov	r3, r0
 8001610:	2b01      	cmp	r3, #1
 8001612:	d001      	beq.n	8001618 <Max30102_SetMode+0x54>
		return MAX30102_ERROR;
 8001614:	2300      	movs	r3, #0
 8001616:	e000      	b.n	800161a <Max30102_SetMode+0x56>

	return MAX30102_OK;
 8001618:	2301      	movs	r3, #1
}
 800161a:	4618      	mov	r0, r3
 800161c:	3710      	adds	r7, #16
 800161e:	46bd      	mov	sp, r7
 8001620:	bd80      	pop	{r7, pc}

08001622 <Max30102_SpO2AdcRange>:
//
//	SpO2 Configuration
//
MAX30102_STATUS Max30102_SpO2AdcRange(uint8_t Value)
{
 8001622:	b580      	push	{r7, lr}
 8001624:	b084      	sub	sp, #16
 8001626:	af00      	add	r7, sp, #0
 8001628:	4603      	mov	r3, r0
 800162a:	71fb      	strb	r3, [r7, #7]
	uint8_t tmp;
	if(MAX30102_OK != Max30102_ReadReg(REG_SPO2_CONFIG, &tmp))
 800162c:	f107 030f 	add.w	r3, r7, #15
 8001630:	4619      	mov	r1, r3
 8001632:	200a      	movs	r0, #10
 8001634:	f7ff fd1e 	bl	8001074 <Max30102_ReadReg>
 8001638:	4603      	mov	r3, r0
 800163a:	2b01      	cmp	r3, #1
 800163c:	d001      	beq.n	8001642 <Max30102_SpO2AdcRange+0x20>
		return MAX30102_ERROR;
 800163e:	2300      	movs	r3, #0
 8001640:	e01b      	b.n	800167a <Max30102_SpO2AdcRange+0x58>
	tmp &= ~(0x03);
 8001642:	7bfb      	ldrb	r3, [r7, #15]
 8001644:	f023 0303 	bic.w	r3, r3, #3
 8001648:	b2db      	uxtb	r3, r3
 800164a:	73fb      	strb	r3, [r7, #15]
	tmp |= ((Value & 0x03) << 5);
 800164c:	79fb      	ldrb	r3, [r7, #7]
 800164e:	015b      	lsls	r3, r3, #5
 8001650:	b25b      	sxtb	r3, r3
 8001652:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8001656:	b25a      	sxtb	r2, r3
 8001658:	7bfb      	ldrb	r3, [r7, #15]
 800165a:	b25b      	sxtb	r3, r3
 800165c:	4313      	orrs	r3, r2
 800165e:	b25b      	sxtb	r3, r3
 8001660:	b2db      	uxtb	r3, r3
 8001662:	73fb      	strb	r3, [r7, #15]
	if(MAX30102_OK != Max30102_WriteReg(REG_SPO2_CONFIG, tmp))
 8001664:	7bfb      	ldrb	r3, [r7, #15]
 8001666:	4619      	mov	r1, r3
 8001668:	200a      	movs	r0, #10
 800166a:	f7ff fce1 	bl	8001030 <Max30102_WriteReg>
 800166e:	4603      	mov	r3, r0
 8001670:	2b01      	cmp	r3, #1
 8001672:	d001      	beq.n	8001678 <Max30102_SpO2AdcRange+0x56>
		return MAX30102_ERROR;
 8001674:	2300      	movs	r3, #0
 8001676:	e000      	b.n	800167a <Max30102_SpO2AdcRange+0x58>

	return MAX30102_OK;
 8001678:	2301      	movs	r3, #1
}
 800167a:	4618      	mov	r0, r3
 800167c:	3710      	adds	r7, #16
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}

08001682 <Max30102_SpO2SampleRate>:

MAX30102_STATUS Max30102_SpO2SampleRate(uint8_t Value)
{
 8001682:	b580      	push	{r7, lr}
 8001684:	b084      	sub	sp, #16
 8001686:	af00      	add	r7, sp, #0
 8001688:	4603      	mov	r3, r0
 800168a:	71fb      	strb	r3, [r7, #7]
	uint8_t tmp;
	if(MAX30102_OK != Max30102_ReadReg(REG_SPO2_CONFIG, &tmp))
 800168c:	f107 030f 	add.w	r3, r7, #15
 8001690:	4619      	mov	r1, r3
 8001692:	200a      	movs	r0, #10
 8001694:	f7ff fcee 	bl	8001074 <Max30102_ReadReg>
 8001698:	4603      	mov	r3, r0
 800169a:	2b01      	cmp	r3, #1
 800169c:	d001      	beq.n	80016a2 <Max30102_SpO2SampleRate+0x20>
		return MAX30102_ERROR;
 800169e:	2300      	movs	r3, #0
 80016a0:	e01b      	b.n	80016da <Max30102_SpO2SampleRate+0x58>
	tmp &= ~(0x07);
 80016a2:	7bfb      	ldrb	r3, [r7, #15]
 80016a4:	f023 0307 	bic.w	r3, r3, #7
 80016a8:	b2db      	uxtb	r3, r3
 80016aa:	73fb      	strb	r3, [r7, #15]
	tmp |= ((Value & 0x07) << 2);
 80016ac:	79fb      	ldrb	r3, [r7, #7]
 80016ae:	009b      	lsls	r3, r3, #2
 80016b0:	b25b      	sxtb	r3, r3
 80016b2:	f003 031c 	and.w	r3, r3, #28
 80016b6:	b25a      	sxtb	r2, r3
 80016b8:	7bfb      	ldrb	r3, [r7, #15]
 80016ba:	b25b      	sxtb	r3, r3
 80016bc:	4313      	orrs	r3, r2
 80016be:	b25b      	sxtb	r3, r3
 80016c0:	b2db      	uxtb	r3, r3
 80016c2:	73fb      	strb	r3, [r7, #15]
	if(MAX30102_OK != Max30102_WriteReg(REG_SPO2_CONFIG, tmp))
 80016c4:	7bfb      	ldrb	r3, [r7, #15]
 80016c6:	4619      	mov	r1, r3
 80016c8:	200a      	movs	r0, #10
 80016ca:	f7ff fcb1 	bl	8001030 <Max30102_WriteReg>
 80016ce:	4603      	mov	r3, r0
 80016d0:	2b01      	cmp	r3, #1
 80016d2:	d001      	beq.n	80016d8 <Max30102_SpO2SampleRate+0x56>
		return MAX30102_ERROR;
 80016d4:	2300      	movs	r3, #0
 80016d6:	e000      	b.n	80016da <Max30102_SpO2SampleRate+0x58>

	return MAX30102_OK;
 80016d8:	2301      	movs	r3, #1
}
 80016da:	4618      	mov	r0, r3
 80016dc:	3710      	adds	r7, #16
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd80      	pop	{r7, pc}

080016e2 <Max30102_SpO2LedPulseWidth>:

MAX30102_STATUS Max30102_SpO2LedPulseWidth(uint8_t Value)
{
 80016e2:	b580      	push	{r7, lr}
 80016e4:	b084      	sub	sp, #16
 80016e6:	af00      	add	r7, sp, #0
 80016e8:	4603      	mov	r3, r0
 80016ea:	71fb      	strb	r3, [r7, #7]
	uint8_t tmp;
	if(MAX30102_OK != Max30102_ReadReg(REG_SPO2_CONFIG, &tmp))
 80016ec:	f107 030f 	add.w	r3, r7, #15
 80016f0:	4619      	mov	r1, r3
 80016f2:	200a      	movs	r0, #10
 80016f4:	f7ff fcbe 	bl	8001074 <Max30102_ReadReg>
 80016f8:	4603      	mov	r3, r0
 80016fa:	2b01      	cmp	r3, #1
 80016fc:	d001      	beq.n	8001702 <Max30102_SpO2LedPulseWidth+0x20>
		return MAX30102_ERROR;
 80016fe:	2300      	movs	r3, #0
 8001700:	e01a      	b.n	8001738 <Max30102_SpO2LedPulseWidth+0x56>
	tmp &= ~(0x03);
 8001702:	7bfb      	ldrb	r3, [r7, #15]
 8001704:	f023 0303 	bic.w	r3, r3, #3
 8001708:	b2db      	uxtb	r3, r3
 800170a:	73fb      	strb	r3, [r7, #15]
	tmp |= (Value & 0x03);
 800170c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001710:	f003 0303 	and.w	r3, r3, #3
 8001714:	b25a      	sxtb	r2, r3
 8001716:	7bfb      	ldrb	r3, [r7, #15]
 8001718:	b25b      	sxtb	r3, r3
 800171a:	4313      	orrs	r3, r2
 800171c:	b25b      	sxtb	r3, r3
 800171e:	b2db      	uxtb	r3, r3
 8001720:	73fb      	strb	r3, [r7, #15]
	if(MAX30102_OK != Max30102_WriteReg(REG_SPO2_CONFIG, tmp))
 8001722:	7bfb      	ldrb	r3, [r7, #15]
 8001724:	4619      	mov	r1, r3
 8001726:	200a      	movs	r0, #10
 8001728:	f7ff fc82 	bl	8001030 <Max30102_WriteReg>
 800172c:	4603      	mov	r3, r0
 800172e:	2b01      	cmp	r3, #1
 8001730:	d001      	beq.n	8001736 <Max30102_SpO2LedPulseWidth+0x54>
		return MAX30102_ERROR;
 8001732:	2300      	movs	r3, #0
 8001734:	e000      	b.n	8001738 <Max30102_SpO2LedPulseWidth+0x56>

	return MAX30102_OK;
 8001736:	2301      	movs	r3, #1
}
 8001738:	4618      	mov	r0, r3
 800173a:	3710      	adds	r7, #16
 800173c:	46bd      	mov	sp, r7
 800173e:	bd80      	pop	{r7, pc}

08001740 <Max30102_Led1PulseAmplitude>:
//
//	LEDs Pulse Amplitute Configuration
//	LED Current = Value * 0.2 mA
//
MAX30102_STATUS Max30102_Led1PulseAmplitude(uint8_t Value)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b082      	sub	sp, #8
 8001744:	af00      	add	r7, sp, #0
 8001746:	4603      	mov	r3, r0
 8001748:	71fb      	strb	r3, [r7, #7]
	if(MAX30102_OK != Max30102_WriteReg(REG_LED1_PA, Value))
 800174a:	79fb      	ldrb	r3, [r7, #7]
 800174c:	4619      	mov	r1, r3
 800174e:	200c      	movs	r0, #12
 8001750:	f7ff fc6e 	bl	8001030 <Max30102_WriteReg>
 8001754:	4603      	mov	r3, r0
 8001756:	2b01      	cmp	r3, #1
 8001758:	d001      	beq.n	800175e <Max30102_Led1PulseAmplitude+0x1e>
		return MAX30102_ERROR;
 800175a:	2300      	movs	r3, #0
 800175c:	e000      	b.n	8001760 <Max30102_Led1PulseAmplitude+0x20>
	return MAX30102_OK;
 800175e:	2301      	movs	r3, #1
}
 8001760:	4618      	mov	r0, r3
 8001762:	3708      	adds	r7, #8
 8001764:	46bd      	mov	sp, r7
 8001766:	bd80      	pop	{r7, pc}

08001768 <Max30102_Led2PulseAmplitude>:

MAX30102_STATUS Max30102_Led2PulseAmplitude(uint8_t Value)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b082      	sub	sp, #8
 800176c:	af00      	add	r7, sp, #0
 800176e:	4603      	mov	r3, r0
 8001770:	71fb      	strb	r3, [r7, #7]
	if(MAX30102_OK != Max30102_WriteReg(REG_LED2_PA, Value))
 8001772:	79fb      	ldrb	r3, [r7, #7]
 8001774:	4619      	mov	r1, r3
 8001776:	200d      	movs	r0, #13
 8001778:	f7ff fc5a 	bl	8001030 <Max30102_WriteReg>
 800177c:	4603      	mov	r3, r0
 800177e:	2b01      	cmp	r3, #1
 8001780:	d001      	beq.n	8001786 <Max30102_Led2PulseAmplitude+0x1e>
		return MAX30102_ERROR;
 8001782:	2300      	movs	r3, #0
 8001784:	e000      	b.n	8001788 <Max30102_Led2PulseAmplitude+0x20>
	return MAX30102_OK;
 8001786:	2301      	movs	r3, #1
}
 8001788:	4618      	mov	r0, r3
 800178a:	3708      	adds	r7, #8
 800178c:	46bd      	mov	sp, r7
 800178e:	bd80      	pop	{r7, pc}

08001790 <Max30102_GetHeartRate>:
{
	return IsFingerOnScreen;
}

int32_t Max30102_GetHeartRate(void)
{
 8001790:	b480      	push	{r7}
 8001792:	af00      	add	r7, sp, #0
	return HeartRate;
 8001794:	4b02      	ldr	r3, [pc, #8]	; (80017a0 <Max30102_GetHeartRate+0x10>)
 8001796:	681b      	ldr	r3, [r3, #0]
}
 8001798:	4618      	mov	r0, r3
 800179a:	46bd      	mov	sp, r7
 800179c:	bc80      	pop	{r7}
 800179e:	4770      	bx	lr
 80017a0:	200011dc 	.word	0x200011dc

080017a4 <Max30102_GetSpO2Value>:

int32_t Max30102_GetSpO2Value(void)
{
 80017a4:	b480      	push	{r7}
 80017a6:	af00      	add	r7, sp, #0
	return Sp02Value;
 80017a8:	4b02      	ldr	r3, [pc, #8]	; (80017b4 <Max30102_GetSpO2Value+0x10>)
 80017aa:	681b      	ldr	r3, [r3, #0]
}
 80017ac:	4618      	mov	r0, r3
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bc80      	pop	{r7}
 80017b2:	4770      	bx	lr
 80017b4:	20001b4c 	.word	0x20001b4c

080017b8 <Max30102_Task>:

void Max30102_Task(void)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b084      	sub	sp, #16
 80017bc:	af04      	add	r7, sp, #16
	switch(StateMachine)
 80017be:	4b4c      	ldr	r3, [pc, #304]	; (80018f0 <Max30102_Task+0x138>)
 80017c0:	781b      	ldrb	r3, [r3, #0]
 80017c2:	2b03      	cmp	r3, #3
 80017c4:	f200 8090 	bhi.w	80018e8 <Max30102_Task+0x130>
 80017c8:	a201      	add	r2, pc, #4	; (adr r2, 80017d0 <Max30102_Task+0x18>)
 80017ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017ce:	bf00      	nop
 80017d0:	080017e1 	.word	0x080017e1
 80017d4:	08001819 	.word	0x08001819
 80017d8:	08001847 	.word	0x08001847
 80017dc:	080018b1 	.word	0x080018b1
	{
		case MAX30102_STATE_BEGIN:
			HeartRate = 0;
 80017e0:	4b44      	ldr	r3, [pc, #272]	; (80018f4 <Max30102_Task+0x13c>)
 80017e2:	2200      	movs	r2, #0
 80017e4:	601a      	str	r2, [r3, #0]
			Sp02Value = 0;
 80017e6:	4b44      	ldr	r3, [pc, #272]	; (80018f8 <Max30102_Task+0x140>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	601a      	str	r2, [r3, #0]
			if(IsFingerOnScreen)
 80017ec:	4b43      	ldr	r3, [pc, #268]	; (80018fc <Max30102_Task+0x144>)
 80017ee:	781b      	ldrb	r3, [r3, #0]
 80017f0:	b2db      	uxtb	r3, r3
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d073      	beq.n	80018de <Max30102_Task+0x126>
			{
				CollectedSamples = 0;
 80017f6:	4b42      	ldr	r3, [pc, #264]	; (8001900 <Max30102_Task+0x148>)
 80017f8:	2200      	movs	r2, #0
 80017fa:	601a      	str	r2, [r3, #0]
				BufferTail = BufferHead;
 80017fc:	4b41      	ldr	r3, [pc, #260]	; (8001904 <Max30102_Task+0x14c>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	4a41      	ldr	r2, [pc, #260]	; (8001908 <Max30102_Task+0x150>)
 8001802:	6013      	str	r3, [r2, #0]
				Max30102_Led1PulseAmplitude(MAX30102_RED_LED_CURRENT_HIGH);
 8001804:	2024      	movs	r0, #36	; 0x24
 8001806:	f7ff ff9b 	bl	8001740 <Max30102_Led1PulseAmplitude>
				Max30102_Led2PulseAmplitude(MAX30102_IR_LED_CURRENT_HIGH);
 800180a:	2024      	movs	r0, #36	; 0x24
 800180c:	f7ff ffac 	bl	8001768 <Max30102_Led2PulseAmplitude>
				StateMachine = MAX30102_STATE_CALIBRATE;
 8001810:	4b37      	ldr	r3, [pc, #220]	; (80018f0 <Max30102_Task+0x138>)
 8001812:	2201      	movs	r2, #1
 8001814:	701a      	strb	r2, [r3, #0]
			}
			break;
 8001816:	e062      	b.n	80018de <Max30102_Task+0x126>

		case MAX30102_STATE_CALIBRATE:
				if(IsFingerOnScreen)
 8001818:	4b38      	ldr	r3, [pc, #224]	; (80018fc <Max30102_Task+0x144>)
 800181a:	781b      	ldrb	r3, [r3, #0]
 800181c:	b2db      	uxtb	r3, r3
 800181e:	2b00      	cmp	r3, #0
 8001820:	d007      	beq.n	8001832 <Max30102_Task+0x7a>
				{
					if(CollectedSamples > (MAX30102_BUFFER_LENGTH-MAX30102_SAMPLES_PER_SECOND))
 8001822:	4b37      	ldr	r3, [pc, #220]	; (8001900 <Max30102_Task+0x148>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	2bfa      	cmp	r3, #250	; 0xfa
 8001828:	d95b      	bls.n	80018e2 <Max30102_Task+0x12a>
					{
						StateMachine = MAX30102_STATE_CALCULATE_HR;
 800182a:	4b31      	ldr	r3, [pc, #196]	; (80018f0 <Max30102_Task+0x138>)
 800182c:	2202      	movs	r2, #2
 800182e:	701a      	strb	r2, [r3, #0]
				{
					Max30102_Led1PulseAmplitude(MAX30102_RED_LED_CURRENT_LOW);
					Max30102_Led2PulseAmplitude(MAX30102_IR_LED_CURRENT_LOW);
					StateMachine = MAX30102_STATE_BEGIN;
				}
			break;
 8001830:	e057      	b.n	80018e2 <Max30102_Task+0x12a>
					Max30102_Led1PulseAmplitude(MAX30102_RED_LED_CURRENT_LOW);
 8001832:	2000      	movs	r0, #0
 8001834:	f7ff ff84 	bl	8001740 <Max30102_Led1PulseAmplitude>
					Max30102_Led2PulseAmplitude(MAX30102_IR_LED_CURRENT_LOW);
 8001838:	2001      	movs	r0, #1
 800183a:	f7ff ff95 	bl	8001768 <Max30102_Led2PulseAmplitude>
					StateMachine = MAX30102_STATE_BEGIN;
 800183e:	4b2c      	ldr	r3, [pc, #176]	; (80018f0 <Max30102_Task+0x138>)
 8001840:	2200      	movs	r2, #0
 8001842:	701a      	strb	r2, [r3, #0]
			break;
 8001844:	e04d      	b.n	80018e2 <Max30102_Task+0x12a>

		case MAX30102_STATE_CALCULATE_HR:
			if(IsFingerOnScreen)
 8001846:	4b2d      	ldr	r3, [pc, #180]	; (80018fc <Max30102_Task+0x144>)
 8001848:	781b      	ldrb	r3, [r3, #0]
 800184a:	b2db      	uxtb	r3, r3
 800184c:	2b00      	cmp	r3, #0
 800184e:	d025      	beq.n	800189c <Max30102_Task+0xe4>
			{
				maxim_heart_rate_and_oxygen_saturation(IrBuffer, RedBuffer, MAX30102_BUFFER_LENGTH-MAX30102_SAMPLES_PER_SECOND, BufferTail, &Sp02Value, &Sp02IsValid, &HeartRate, &IsHrValid);
 8001850:	4b2d      	ldr	r3, [pc, #180]	; (8001908 <Max30102_Task+0x150>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	b29b      	uxth	r3, r3
 8001856:	4a2d      	ldr	r2, [pc, #180]	; (800190c <Max30102_Task+0x154>)
 8001858:	9203      	str	r2, [sp, #12]
 800185a:	4a26      	ldr	r2, [pc, #152]	; (80018f4 <Max30102_Task+0x13c>)
 800185c:	9202      	str	r2, [sp, #8]
 800185e:	4a2c      	ldr	r2, [pc, #176]	; (8001910 <Max30102_Task+0x158>)
 8001860:	9201      	str	r2, [sp, #4]
 8001862:	4a25      	ldr	r2, [pc, #148]	; (80018f8 <Max30102_Task+0x140>)
 8001864:	9200      	str	r2, [sp, #0]
 8001866:	22fa      	movs	r2, #250	; 0xfa
 8001868:	492a      	ldr	r1, [pc, #168]	; (8001914 <Max30102_Task+0x15c>)
 800186a:	482b      	ldr	r0, [pc, #172]	; (8001918 <Max30102_Task+0x160>)
 800186c:	f000 f8ee 	bl	8001a4c <maxim_heart_rate_and_oxygen_saturation>
				BufferTail = (BufferTail + MAX30102_SAMPLES_PER_SECOND) % MAX30102_BUFFER_LENGTH;
 8001870:	4b25      	ldr	r3, [pc, #148]	; (8001908 <Max30102_Task+0x150>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8001878:	4b28      	ldr	r3, [pc, #160]	; (800191c <Max30102_Task+0x164>)
 800187a:	fba3 1302 	umull	r1, r3, r3, r2
 800187e:	095b      	lsrs	r3, r3, #5
 8001880:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8001884:	fb01 f303 	mul.w	r3, r1, r3
 8001888:	1ad3      	subs	r3, r2, r3
 800188a:	4a1f      	ldr	r2, [pc, #124]	; (8001908 <Max30102_Task+0x150>)
 800188c:	6013      	str	r3, [r2, #0]
				CollectedSamples = 0;
 800188e:	4b1c      	ldr	r3, [pc, #112]	; (8001900 <Max30102_Task+0x148>)
 8001890:	2200      	movs	r2, #0
 8001892:	601a      	str	r2, [r3, #0]
				StateMachine = MAX30102_STATE_COLLECT_NEXT_PORTION;
 8001894:	4b16      	ldr	r3, [pc, #88]	; (80018f0 <Max30102_Task+0x138>)
 8001896:	2203      	movs	r2, #3
 8001898:	701a      	strb	r2, [r3, #0]
			{
				Max30102_Led1PulseAmplitude(MAX30102_RED_LED_CURRENT_LOW);
				Max30102_Led2PulseAmplitude(MAX30102_IR_LED_CURRENT_LOW);
				StateMachine = MAX30102_STATE_BEGIN;
			}
			break;
 800189a:	e025      	b.n	80018e8 <Max30102_Task+0x130>
				Max30102_Led1PulseAmplitude(MAX30102_RED_LED_CURRENT_LOW);
 800189c:	2000      	movs	r0, #0
 800189e:	f7ff ff4f 	bl	8001740 <Max30102_Led1PulseAmplitude>
				Max30102_Led2PulseAmplitude(MAX30102_IR_LED_CURRENT_LOW);
 80018a2:	2001      	movs	r0, #1
 80018a4:	f7ff ff60 	bl	8001768 <Max30102_Led2PulseAmplitude>
				StateMachine = MAX30102_STATE_BEGIN;
 80018a8:	4b11      	ldr	r3, [pc, #68]	; (80018f0 <Max30102_Task+0x138>)
 80018aa:	2200      	movs	r2, #0
 80018ac:	701a      	strb	r2, [r3, #0]
			break;
 80018ae:	e01b      	b.n	80018e8 <Max30102_Task+0x130>

		case MAX30102_STATE_COLLECT_NEXT_PORTION:
			if(IsFingerOnScreen)
 80018b0:	4b12      	ldr	r3, [pc, #72]	; (80018fc <Max30102_Task+0x144>)
 80018b2:	781b      	ldrb	r3, [r3, #0]
 80018b4:	b2db      	uxtb	r3, r3
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d007      	beq.n	80018ca <Max30102_Task+0x112>
			{
				if(CollectedSamples > MAX30102_SAMPLES_PER_SECOND)
 80018ba:	4b11      	ldr	r3, [pc, #68]	; (8001900 <Max30102_Task+0x148>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	2b32      	cmp	r3, #50	; 0x32
 80018c0:	d911      	bls.n	80018e6 <Max30102_Task+0x12e>
				{
					StateMachine = MAX30102_STATE_CALCULATE_HR;
 80018c2:	4b0b      	ldr	r3, [pc, #44]	; (80018f0 <Max30102_Task+0x138>)
 80018c4:	2202      	movs	r2, #2
 80018c6:	701a      	strb	r2, [r3, #0]
			{
				Max30102_Led1PulseAmplitude(MAX30102_RED_LED_CURRENT_LOW);
				Max30102_Led2PulseAmplitude(MAX30102_IR_LED_CURRENT_LOW);
				StateMachine = MAX30102_STATE_BEGIN;
			}
			break;
 80018c8:	e00d      	b.n	80018e6 <Max30102_Task+0x12e>
				Max30102_Led1PulseAmplitude(MAX30102_RED_LED_CURRENT_LOW);
 80018ca:	2000      	movs	r0, #0
 80018cc:	f7ff ff38 	bl	8001740 <Max30102_Led1PulseAmplitude>
				Max30102_Led2PulseAmplitude(MAX30102_IR_LED_CURRENT_LOW);
 80018d0:	2001      	movs	r0, #1
 80018d2:	f7ff ff49 	bl	8001768 <Max30102_Led2PulseAmplitude>
				StateMachine = MAX30102_STATE_BEGIN;
 80018d6:	4b06      	ldr	r3, [pc, #24]	; (80018f0 <Max30102_Task+0x138>)
 80018d8:	2200      	movs	r2, #0
 80018da:	701a      	strb	r2, [r3, #0]
			break;
 80018dc:	e003      	b.n	80018e6 <Max30102_Task+0x12e>
			break;
 80018de:	bf00      	nop
 80018e0:	e002      	b.n	80018e8 <Max30102_Task+0x130>
			break;
 80018e2:	bf00      	nop
 80018e4:	e000      	b.n	80018e8 <Max30102_Task+0x130>
			break;
 80018e6:	bf00      	nop
	}
}
 80018e8:	bf00      	nop
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bd80      	pop	{r7, pc}
 80018ee:	bf00      	nop
 80018f0:	200011d4 	.word	0x200011d4
 80018f4:	200011dc 	.word	0x200011dc
 80018f8:	20001b4c 	.word	0x20001b4c
 80018fc:	200011d5 	.word	0x200011d5
 8001900:	200011cc 	.word	0x200011cc
 8001904:	200011d8 	.word	0x200011d8
 8001908:	20001694 	.word	0x20001694
 800190c:	20001b48 	.word	0x20001b48
 8001910:	20001690 	.word	0x20001690
 8001914:	20001698 	.word	0x20001698
 8001918:	200011e0 	.word	0x200011e0
 800191c:	1b4e81b5 	.word	0x1b4e81b5

08001920 <Max30102_Init>:

//
//	Initialization
//
MAX30102_STATUS Max30102_Init(I2C_HandleTypeDef *i2c)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b084      	sub	sp, #16
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
	uint8_t uch_dummy;
	i2c_max30102 = i2c;
 8001928:	4a46      	ldr	r2, [pc, #280]	; (8001a44 <Max30102_Init+0x124>)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	6013      	str	r3, [r2, #0]
	if(MAX30102_OK != Max30102_Reset()) //resets the MAX30102
 800192e:	f7ff fe27 	bl	8001580 <Max30102_Reset>
 8001932:	4603      	mov	r3, r0
 8001934:	2b01      	cmp	r3, #1
 8001936:	d001      	beq.n	800193c <Max30102_Init+0x1c>
		return MAX30102_ERROR;
 8001938:	2300      	movs	r3, #0
 800193a:	e07e      	b.n	8001a3a <Max30102_Init+0x11a>
	if(MAX30102_OK != Max30102_ReadReg(0,&uch_dummy))
 800193c:	f107 030f 	add.w	r3, r7, #15
 8001940:	4619      	mov	r1, r3
 8001942:	2000      	movs	r0, #0
 8001944:	f7ff fb96 	bl	8001074 <Max30102_ReadReg>
 8001948:	4603      	mov	r3, r0
 800194a:	2b01      	cmp	r3, #1
 800194c:	d001      	beq.n	8001952 <Max30102_Init+0x32>
		return MAX30102_ERROR;
 800194e:	2300      	movs	r3, #0
 8001950:	e073      	b.n	8001a3a <Max30102_Init+0x11a>
	if(MAX30102_OK != Max30102_FifoWritePointer(0x00))
 8001952:	2000      	movs	r0, #0
 8001954:	f7ff fd52 	bl	80013fc <Max30102_FifoWritePointer>
 8001958:	4603      	mov	r3, r0
 800195a:	2b01      	cmp	r3, #1
 800195c:	d001      	beq.n	8001962 <Max30102_Init+0x42>
		return MAX30102_ERROR;
 800195e:	2300      	movs	r3, #0
 8001960:	e06b      	b.n	8001a3a <Max30102_Init+0x11a>
	if(MAX30102_OK != Max30102_FifoOverflowCounter(0x00))
 8001962:	2000      	movs	r0, #0
 8001964:	f7ff fd61 	bl	800142a <Max30102_FifoOverflowCounter>
 8001968:	4603      	mov	r3, r0
 800196a:	2b01      	cmp	r3, #1
 800196c:	d001      	beq.n	8001972 <Max30102_Init+0x52>
		return MAX30102_ERROR;
 800196e:	2300      	movs	r3, #0
 8001970:	e063      	b.n	8001a3a <Max30102_Init+0x11a>
	if(MAX30102_OK != Max30102_FifoReadPointer(0x00))
 8001972:	2000      	movs	r0, #0
 8001974:	f7ff fd70 	bl	8001458 <Max30102_FifoReadPointer>
 8001978:	4603      	mov	r3, r0
 800197a:	2b01      	cmp	r3, #1
 800197c:	d001      	beq.n	8001982 <Max30102_Init+0x62>
		return MAX30102_ERROR;
 800197e:	2300      	movs	r3, #0
 8001980:	e05b      	b.n	8001a3a <Max30102_Init+0x11a>
	if(MAX30102_OK != Max30102_FifoSampleAveraging(FIFO_SMP_AVE_1))
 8001982:	2000      	movs	r0, #0
 8001984:	f7ff fd7f 	bl	8001486 <Max30102_FifoSampleAveraging>
 8001988:	4603      	mov	r3, r0
 800198a:	2b01      	cmp	r3, #1
 800198c:	d001      	beq.n	8001992 <Max30102_Init+0x72>
		return MAX30102_ERROR;
 800198e:	2300      	movs	r3, #0
 8001990:	e053      	b.n	8001a3a <Max30102_Init+0x11a>
	if(MAX30102_OK != Max30102_FifoRolloverEnable(0))
 8001992:	2000      	movs	r0, #0
 8001994:	f7ff fda4 	bl	80014e0 <Max30102_FifoRolloverEnable>
 8001998:	4603      	mov	r3, r0
 800199a:	2b01      	cmp	r3, #1
 800199c:	d001      	beq.n	80019a2 <Max30102_Init+0x82>
		return MAX30102_ERROR;
 800199e:	2300      	movs	r3, #0
 80019a0:	e04b      	b.n	8001a3a <Max30102_Init+0x11a>
	if(MAX30102_OK != Max30102_FifoAlmostFullValue(MAX30102_FIFO_ALMOST_FULL_SAMPLES))
 80019a2:	2011      	movs	r0, #17
 80019a4:	f7ff fdaf 	bl	8001506 <Max30102_FifoAlmostFullValue>
 80019a8:	4603      	mov	r3, r0
 80019aa:	2b01      	cmp	r3, #1
 80019ac:	d001      	beq.n	80019b2 <Max30102_Init+0x92>
		return MAX30102_ERROR;
 80019ae:	2300      	movs	r3, #0
 80019b0:	e043      	b.n	8001a3a <Max30102_Init+0x11a>
	if(MAX30102_OK != Max30102_SetMode(MODE_SPO2_MODE))
 80019b2:	2003      	movs	r0, #3
 80019b4:	f7ff fe06 	bl	80015c4 <Max30102_SetMode>
 80019b8:	4603      	mov	r3, r0
 80019ba:	2b01      	cmp	r3, #1
 80019bc:	d001      	beq.n	80019c2 <Max30102_Init+0xa2>
		return MAX30102_ERROR;
 80019be:	2300      	movs	r3, #0
 80019c0:	e03b      	b.n	8001a3a <Max30102_Init+0x11a>
	if(MAX30102_OK != Max30102_SpO2AdcRange(SPO2_ADC_RGE_4096))
 80019c2:	2001      	movs	r0, #1
 80019c4:	f7ff fe2d 	bl	8001622 <Max30102_SpO2AdcRange>
 80019c8:	4603      	mov	r3, r0
 80019ca:	2b01      	cmp	r3, #1
 80019cc:	d001      	beq.n	80019d2 <Max30102_Init+0xb2>
		return MAX30102_ERROR;
 80019ce:	2300      	movs	r3, #0
 80019d0:	e033      	b.n	8001a3a <Max30102_Init+0x11a>
	if(MAX30102_OK != Max30102_SpO2SampleRate(SPO2_SAMPLE_RATE))
 80019d2:	2000      	movs	r0, #0
 80019d4:	f7ff fe55 	bl	8001682 <Max30102_SpO2SampleRate>
 80019d8:	4603      	mov	r3, r0
 80019da:	2b01      	cmp	r3, #1
 80019dc:	d001      	beq.n	80019e2 <Max30102_Init+0xc2>
		return MAX30102_ERROR;
 80019de:	2300      	movs	r3, #0
 80019e0:	e02b      	b.n	8001a3a <Max30102_Init+0x11a>
	if(MAX30102_OK != Max30102_SpO2LedPulseWidth(SPO2_PULSE_WIDTH_411))
 80019e2:	2003      	movs	r0, #3
 80019e4:	f7ff fe7d 	bl	80016e2 <Max30102_SpO2LedPulseWidth>
 80019e8:	4603      	mov	r3, r0
 80019ea:	2b01      	cmp	r3, #1
 80019ec:	d001      	beq.n	80019f2 <Max30102_Init+0xd2>
		return MAX30102_ERROR;
 80019ee:	2300      	movs	r3, #0
 80019f0:	e023      	b.n	8001a3a <Max30102_Init+0x11a>
	if(MAX30102_OK != Max30102_Led1PulseAmplitude(MAX30102_RED_LED_CURRENT_LOW))
 80019f2:	2000      	movs	r0, #0
 80019f4:	f7ff fea4 	bl	8001740 <Max30102_Led1PulseAmplitude>
 80019f8:	4603      	mov	r3, r0
 80019fa:	2b01      	cmp	r3, #1
 80019fc:	d001      	beq.n	8001a02 <Max30102_Init+0xe2>
		return MAX30102_ERROR;
 80019fe:	2300      	movs	r3, #0
 8001a00:	e01b      	b.n	8001a3a <Max30102_Init+0x11a>
	if(MAX30102_OK != Max30102_Led2PulseAmplitude(MAX30102_IR_LED_CURRENT_LOW))
 8001a02:	2001      	movs	r0, #1
 8001a04:	f7ff feb0 	bl	8001768 <Max30102_Led2PulseAmplitude>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	2b01      	cmp	r3, #1
 8001a0c:	d001      	beq.n	8001a12 <Max30102_Init+0xf2>
		return MAX30102_ERROR;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	e013      	b.n	8001a3a <Max30102_Init+0x11a>
	if(MAX30102_OK != Max30102_SetIntAlmostFullEnabled(1))
 8001a12:	2001      	movs	r0, #1
 8001a14:	f7ff fbfc 	bl	8001210 <Max30102_SetIntAlmostFullEnabled>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	2b01      	cmp	r3, #1
 8001a1c:	d001      	beq.n	8001a22 <Max30102_Init+0x102>
		return MAX30102_ERROR;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	e00b      	b.n	8001a3a <Max30102_Init+0x11a>
	if(MAX30102_OK != Max30102_SetIntFifoDataReadyEnabled(1))
 8001a22:	2001      	movs	r0, #1
 8001a24:	f7ff fc04 	bl	8001230 <Max30102_SetIntFifoDataReadyEnabled>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	2b01      	cmp	r3, #1
 8001a2c:	d001      	beq.n	8001a32 <Max30102_Init+0x112>
		return MAX30102_ERROR;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	e003      	b.n	8001a3a <Max30102_Init+0x11a>
//	if(MAX30102_OK != Max30102_WriteReg(REG_PILOT_PA,0x7f))   // Choose value for ~ 25mA for Pilot LED
//		return MAX30102_ERROR;
	StateMachine = MAX30102_STATE_BEGIN;
 8001a32:	4b05      	ldr	r3, [pc, #20]	; (8001a48 <Max30102_Init+0x128>)
 8001a34:	2200      	movs	r2, #0
 8001a36:	701a      	strb	r2, [r3, #0]
	return MAX30102_OK;
 8001a38:	2301      	movs	r3, #1
}
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	3710      	adds	r7, #16
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd80      	pop	{r7, pc}
 8001a42:	bf00      	nop
 8001a44:	200011d0 	.word	0x200011d0
 8001a48:	200011d4 	.word	0x200011d4

08001a4c <maxim_heart_rate_and_oxygen_saturation>:
* \param[out]    *pn_heart_rate          - Calculated heart rate value
* \param[out]    *pch_hr_valid           - 1 if the calculated heart rate value is valid
*
* \retval       None
*/
{
 8001a4c:	b590      	push	{r4, r7, lr}
 8001a4e:	b0d3      	sub	sp, #332	; 0x14c
 8001a50:	af04      	add	r7, sp, #16
 8001a52:	f107 040c 	add.w	r4, r7, #12
 8001a56:	6020      	str	r0, [r4, #0]
 8001a58:	f107 0008 	add.w	r0, r7, #8
 8001a5c:	6001      	str	r1, [r0, #0]
 8001a5e:	1d39      	adds	r1, r7, #4
 8001a60:	600a      	str	r2, [r1, #0]
 8001a62:	461a      	mov	r2, r3
 8001a64:	1cbb      	adds	r3, r7, #2
 8001a66:	801a      	strh	r2, [r3, #0]
    int32_t n_spo2_calc; 
    int32_t n_y_dc_max, n_x_dc_max; 
    int32_t n_y_dc_max_idx, n_x_dc_max_idx; 
    int32_t an_ratio[5],n_ratio_average; 
    int32_t n_nume,  n_denom ;
    uint32_t un_offset_tmp = un_offset;
 8001a68:	1cbb      	adds	r3, r7, #2
 8001a6a:	881b      	ldrh	r3, [r3, #0]
 8001a6c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    // remove DC of ir signal    
    un_ir_mean =0; 
 8001a70:	2300      	movs	r3, #0
 8001a72:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
    for (k=0 ; k<n_buffer_length ; k++ )
 8001a76:	2300      	movs	r3, #0
 8001a78:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8001a7c:	e01f      	b.n	8001abe <maxim_heart_rate_and_oxygen_saturation+0x72>
	{
    	un_ir_mean += pun_ir_buffer[un_offset_tmp];
 8001a7e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8001a82:	009b      	lsls	r3, r3, #2
 8001a84:	f107 020c 	add.w	r2, r7, #12
 8001a88:	6812      	ldr	r2, [r2, #0]
 8001a8a:	4413      	add	r3, r2
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 8001a92:	4413      	add	r3, r2
 8001a94:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
    	un_offset_tmp = (un_offset_tmp + 1) % MAX30102_BUFFER_LENGTH;
 8001a98:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8001a9c:	3301      	adds	r3, #1
 8001a9e:	4adc      	ldr	r2, [pc, #880]	; (8001e10 <maxim_heart_rate_and_oxygen_saturation+0x3c4>)
 8001aa0:	fba2 1203 	umull	r1, r2, r2, r3
 8001aa4:	0952      	lsrs	r2, r2, #5
 8001aa6:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8001aaa:	fb01 f202 	mul.w	r2, r1, r2
 8001aae:	1a9b      	subs	r3, r3, r2
 8001ab0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    for (k=0 ; k<n_buffer_length ; k++ )
 8001ab4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001ab8:	3301      	adds	r3, #1
 8001aba:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8001abe:	1d3b      	adds	r3, r7, #4
 8001ac0:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	429a      	cmp	r2, r3
 8001ac8:	dbd9      	blt.n	8001a7e <maxim_heart_rate_and_oxygen_saturation+0x32>
	}

    un_ir_mean =un_ir_mean/n_buffer_length ;
 8001aca:	1d3b      	adds	r3, r7, #4
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 8001ad2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ad6:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
    un_offset_tmp = un_offset;
 8001ada:	1cbb      	adds	r3, r7, #2
 8001adc:	881b      	ldrh	r3, [r3, #0]
 8001ade:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    for (k=0 ; k<n_buffer_length ; k++ )
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8001ae8:	e023      	b.n	8001b32 <maxim_heart_rate_and_oxygen_saturation+0xe6>
	{
    	an_x[k] =  pun_ir_buffer[un_offset_tmp] - un_ir_mean;
 8001aea:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8001aee:	009b      	lsls	r3, r3, #2
 8001af0:	f107 020c 	add.w	r2, r7, #12
 8001af4:	6812      	ldr	r2, [r2, #0]
 8001af6:	4413      	add	r3, r2
 8001af8:	681a      	ldr	r2, [r3, #0]
 8001afa:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8001afe:	1ad3      	subs	r3, r2, r3
 8001b00:	4619      	mov	r1, r3
 8001b02:	4ac4      	ldr	r2, [pc, #784]	; (8001e14 <maxim_heart_rate_and_oxygen_saturation+0x3c8>)
 8001b04:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001b08:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    	un_offset_tmp = (un_offset_tmp + 1) % MAX30102_BUFFER_LENGTH;
 8001b0c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8001b10:	3301      	adds	r3, #1
 8001b12:	4abf      	ldr	r2, [pc, #764]	; (8001e10 <maxim_heart_rate_and_oxygen_saturation+0x3c4>)
 8001b14:	fba2 1203 	umull	r1, r2, r2, r3
 8001b18:	0952      	lsrs	r2, r2, #5
 8001b1a:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8001b1e:	fb01 f202 	mul.w	r2, r1, r2
 8001b22:	1a9b      	subs	r3, r3, r2
 8001b24:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    for (k=0 ; k<n_buffer_length ; k++ )
 8001b28:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001b2c:	3301      	adds	r3, #1
 8001b2e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8001b32:	1d3b      	adds	r3, r7, #4
 8001b34:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	429a      	cmp	r2, r3
 8001b3c:	dbd5      	blt.n	8001aea <maxim_heart_rate_and_oxygen_saturation+0x9e>
	}
    
    // 4 pt Moving Average
    for(k=0; k< BUFFER_SIZE-MA4_SIZE; k++)
 8001b3e:	2300      	movs	r3, #0
 8001b40:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8001b44:	e02c      	b.n	8001ba0 <maxim_heart_rate_and_oxygen_saturation+0x154>
    {
        n_denom= ( an_x[k]+an_x[k+1]+ an_x[k+2]+ an_x[k+3]);
 8001b46:	4ab3      	ldr	r2, [pc, #716]	; (8001e14 <maxim_heart_rate_and_oxygen_saturation+0x3c8>)
 8001b48:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001b4c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001b50:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001b54:	3301      	adds	r3, #1
 8001b56:	49af      	ldr	r1, [pc, #700]	; (8001e14 <maxim_heart_rate_and_oxygen_saturation+0x3c8>)
 8001b58:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001b5c:	441a      	add	r2, r3
 8001b5e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001b62:	3302      	adds	r3, #2
 8001b64:	49ab      	ldr	r1, [pc, #684]	; (8001e14 <maxim_heart_rate_and_oxygen_saturation+0x3c8>)
 8001b66:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001b6a:	441a      	add	r2, r3
 8001b6c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001b70:	3303      	adds	r3, #3
 8001b72:	49a8      	ldr	r1, [pc, #672]	; (8001e14 <maxim_heart_rate_and_oxygen_saturation+0x3c8>)
 8001b74:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001b78:	4413      	add	r3, r2
 8001b7a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
        an_x[k]=  n_denom/(int32_t)4; 
 8001b7e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	da00      	bge.n	8001b88 <maxim_heart_rate_and_oxygen_saturation+0x13c>
 8001b86:	3303      	adds	r3, #3
 8001b88:	109b      	asrs	r3, r3, #2
 8001b8a:	4619      	mov	r1, r3
 8001b8c:	4aa1      	ldr	r2, [pc, #644]	; (8001e14 <maxim_heart_rate_and_oxygen_saturation+0x3c8>)
 8001b8e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001b92:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for(k=0; k< BUFFER_SIZE-MA4_SIZE; k++)
 8001b96:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001b9a:	3301      	adds	r3, #1
 8001b9c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8001ba0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001ba4:	2bf5      	cmp	r3, #245	; 0xf5
 8001ba6:	ddce      	ble.n	8001b46 <maxim_heart_rate_and_oxygen_saturation+0xfa>
    }

    // get difference of smoothed IR signal
    
    for( k=0; k<BUFFER_SIZE-MA4_SIZE-1;  k++)
 8001ba8:	2300      	movs	r3, #0
 8001baa:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8001bae:	e015      	b.n	8001bdc <maxim_heart_rate_and_oxygen_saturation+0x190>
        an_dx[k]= (an_x[k+1]- an_x[k]);
 8001bb0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001bb4:	3301      	adds	r3, #1
 8001bb6:	4a97      	ldr	r2, [pc, #604]	; (8001e14 <maxim_heart_rate_and_oxygen_saturation+0x3c8>)
 8001bb8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001bbc:	4995      	ldr	r1, [pc, #596]	; (8001e14 <maxim_heart_rate_and_oxygen_saturation+0x3c8>)
 8001bbe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001bc2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001bc6:	1ad2      	subs	r2, r2, r3
 8001bc8:	4993      	ldr	r1, [pc, #588]	; (8001e18 <maxim_heart_rate_and_oxygen_saturation+0x3cc>)
 8001bca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001bce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    for( k=0; k<BUFFER_SIZE-MA4_SIZE-1;  k++)
 8001bd2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001bd6:	3301      	adds	r3, #1
 8001bd8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8001bdc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001be0:	2bf4      	cmp	r3, #244	; 0xf4
 8001be2:	dde5      	ble.n	8001bb0 <maxim_heart_rate_and_oxygen_saturation+0x164>

    // 2-pt Moving Average to an_dx
    for(k=0; k< BUFFER_SIZE-MA4_SIZE-2; k++){
 8001be4:	2300      	movs	r3, #0
 8001be6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8001bea:	e019      	b.n	8001c20 <maxim_heart_rate_and_oxygen_saturation+0x1d4>
        an_dx[k] =  ( an_dx[k]+an_dx[k+1])/2 ;
 8001bec:	4a8a      	ldr	r2, [pc, #552]	; (8001e18 <maxim_heart_rate_and_oxygen_saturation+0x3cc>)
 8001bee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001bf2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001bf6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001bfa:	3301      	adds	r3, #1
 8001bfc:	4986      	ldr	r1, [pc, #536]	; (8001e18 <maxim_heart_rate_and_oxygen_saturation+0x3cc>)
 8001bfe:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001c02:	4413      	add	r3, r2
 8001c04:	0fda      	lsrs	r2, r3, #31
 8001c06:	4413      	add	r3, r2
 8001c08:	105b      	asrs	r3, r3, #1
 8001c0a:	4619      	mov	r1, r3
 8001c0c:	4a82      	ldr	r2, [pc, #520]	; (8001e18 <maxim_heart_rate_and_oxygen_saturation+0x3cc>)
 8001c0e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001c12:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for(k=0; k< BUFFER_SIZE-MA4_SIZE-2; k++){
 8001c16:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001c1a:	3301      	adds	r3, #1
 8001c1c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8001c20:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001c24:	2bf3      	cmp	r3, #243	; 0xf3
 8001c26:	dde1      	ble.n	8001bec <maxim_heart_rate_and_oxygen_saturation+0x1a0>
    }
    
    // hamming window
    // flip wave form so that we can detect valley with peak detector
    for ( i=0 ; i<BUFFER_SIZE-HAMMING_SIZE-MA4_SIZE-2 ;i++){
 8001c28:	2300      	movs	r3, #0
 8001c2a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001c2e:	e039      	b.n	8001ca4 <maxim_heart_rate_and_oxygen_saturation+0x258>
        s= 0;
 8001c30:	2300      	movs	r3, #0
 8001c32:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
        for( k=i; k<i+ HAMMING_SIZE ;k++){
 8001c36:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001c3a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8001c3e:	e018      	b.n	8001c72 <maxim_heart_rate_and_oxygen_saturation+0x226>
            s -= an_dx[k] *auw_hamm[k-i] ; 
 8001c40:	4a75      	ldr	r2, [pc, #468]	; (8001e18 <maxim_heart_rate_and_oxygen_saturation+0x3cc>)
 8001c42:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001c46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c4a:	f8d7 112c 	ldr.w	r1, [r7, #300]	; 0x12c
 8001c4e:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8001c52:	1a8a      	subs	r2, r1, r2
 8001c54:	4971      	ldr	r1, [pc, #452]	; (8001e1c <maxim_heart_rate_and_oxygen_saturation+0x3d0>)
 8001c56:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8001c5a:	fb02 f303 	mul.w	r3, r2, r3
 8001c5e:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 8001c62:	1ad3      	subs	r3, r2, r3
 8001c64:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
        for( k=i; k<i+ HAMMING_SIZE ;k++){
 8001c68:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001c6c:	3301      	adds	r3, #1
 8001c6e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8001c72:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001c76:	3304      	adds	r3, #4
 8001c78:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8001c7c:	429a      	cmp	r2, r3
 8001c7e:	dddf      	ble.n	8001c40 <maxim_heart_rate_and_oxygen_saturation+0x1f4>
                     }
        an_dx[i]= s/ (int32_t)1146; // divide by sum of auw_hamm 
 8001c80:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001c84:	4a66      	ldr	r2, [pc, #408]	; (8001e20 <maxim_heart_rate_and_oxygen_saturation+0x3d4>)
 8001c86:	fb82 1203 	smull	r1, r2, r2, r3
 8001c8a:	1252      	asrs	r2, r2, #9
 8001c8c:	17db      	asrs	r3, r3, #31
 8001c8e:	1ad2      	subs	r2, r2, r3
 8001c90:	4961      	ldr	r1, [pc, #388]	; (8001e18 <maxim_heart_rate_and_oxygen_saturation+0x3cc>)
 8001c92:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001c96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    for ( i=0 ; i<BUFFER_SIZE-HAMMING_SIZE-MA4_SIZE-2 ;i++){
 8001c9a:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001c9e:	3301      	adds	r3, #1
 8001ca0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001ca4:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001ca8:	2bee      	cmp	r3, #238	; 0xee
 8001caa:	ddc1      	ble.n	8001c30 <maxim_heart_rate_and_oxygen_saturation+0x1e4>
    }

 
    n_th1=0; // threshold calculation
 8001cac:	2300      	movs	r3, #0
 8001cae:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    for ( k=0 ; k<BUFFER_SIZE-HAMMING_SIZE ;k++){
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8001cb8:	e011      	b.n	8001cde <maxim_heart_rate_and_oxygen_saturation+0x292>
        n_th1 += ((an_dx[k]>0)? an_dx[k] : ((int32_t)0-an_dx[k])) ;
 8001cba:	4a57      	ldr	r2, [pc, #348]	; (8001e18 <maxim_heart_rate_and_oxygen_saturation+0x3cc>)
 8001cbc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001cc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	bfb8      	it	lt
 8001cc8:	425b      	neglt	r3, r3
 8001cca:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001cce:	4413      	add	r3, r2
 8001cd0:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    for ( k=0 ; k<BUFFER_SIZE-HAMMING_SIZE ;k++){
 8001cd4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001cd8:	3301      	adds	r3, #1
 8001cda:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8001cde:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001ce2:	2bf4      	cmp	r3, #244	; 0xf4
 8001ce4:	dde9      	ble.n	8001cba <maxim_heart_rate_and_oxygen_saturation+0x26e>
    }
    n_th1= n_th1/ ( BUFFER_SIZE-HAMMING_SIZE);
 8001ce6:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8001cea:	4a4e      	ldr	r2, [pc, #312]	; (8001e24 <maxim_heart_rate_and_oxygen_saturation+0x3d8>)
 8001cec:	fb82 1203 	smull	r1, r2, r2, r3
 8001cf0:	1192      	asrs	r2, r2, #6
 8001cf2:	17db      	asrs	r3, r3, #31
 8001cf4:	1ad3      	subs	r3, r2, r3
 8001cf6:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    // peak location is acutally index for sharpest location of raw signal since we flipped the signal         
    maxim_find_peaks( an_dx_peak_locs, &n_npks, an_dx, BUFFER_SIZE-HAMMING_SIZE, n_th1, 8, 5 );//peak_height, peak_distance, max_num_peaks 
 8001cfa:	f107 01d8 	add.w	r1, r7, #216	; 0xd8
 8001cfe:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8001d02:	2305      	movs	r3, #5
 8001d04:	9302      	str	r3, [sp, #8]
 8001d06:	2308      	movs	r3, #8
 8001d08:	9301      	str	r3, [sp, #4]
 8001d0a:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8001d0e:	9300      	str	r3, [sp, #0]
 8001d10:	23f5      	movs	r3, #245	; 0xf5
 8001d12:	4a41      	ldr	r2, [pc, #260]	; (8001e18 <maxim_heart_rate_and_oxygen_saturation+0x3cc>)
 8001d14:	f000 fb78 	bl	8002408 <maxim_find_peaks>

    n_peak_interval_sum =0;
 8001d18:	2300      	movs	r3, #0
 8001d1a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    if (n_npks>=2){
 8001d1e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8001d22:	2b01      	cmp	r3, #1
 8001d24:	dd46      	ble.n	8001db4 <maxim_heart_rate_and_oxygen_saturation+0x368>
        for (k=1; k<n_npks; k++)
 8001d26:	2301      	movs	r3, #1
 8001d28:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8001d2c:	e017      	b.n	8001d5e <maxim_heart_rate_and_oxygen_saturation+0x312>
            n_peak_interval_sum += (an_dx_peak_locs[k]-an_dx_peak_locs[k -1]);
 8001d2e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d32:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8001d36:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001d3a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001d3e:	1e59      	subs	r1, r3, #1
 8001d40:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d44:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001d48:	1ad3      	subs	r3, r2, r3
 8001d4a:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 8001d4e:	4413      	add	r3, r2
 8001d50:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
        for (k=1; k<n_npks; k++)
 8001d54:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001d58:	3301      	adds	r3, #1
 8001d5a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8001d5e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8001d62:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8001d66:	429a      	cmp	r2, r3
 8001d68:	dbe1      	blt.n	8001d2e <maxim_heart_rate_and_oxygen_saturation+0x2e2>
        n_peak_interval_sum=n_peak_interval_sum/(n_npks-1);
 8001d6a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8001d6e:	3b01      	subs	r3, #1
 8001d70:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 8001d74:	fb92 f3f3 	sdiv	r3, r2, r3
 8001d78:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
        *pn_heart_rate=(int32_t)(6000/(float)n_peak_interval_sum*(float)(FS/100.0));// beats per minutes
 8001d7c:	f8d7 0110 	ldr.w	r0, [r7, #272]	; 0x110
 8001d80:	f7fe ff8c 	bl	8000c9c <__aeabi_i2f>
 8001d84:	4603      	mov	r3, r0
 8001d86:	4619      	mov	r1, r3
 8001d88:	4827      	ldr	r0, [pc, #156]	; (8001e28 <maxim_heart_rate_and_oxygen_saturation+0x3dc>)
 8001d8a:	f7ff f88f 	bl	8000eac <__aeabi_fdiv>
 8001d8e:	4603      	mov	r3, r0
 8001d90:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8001d94:	4618      	mov	r0, r3
 8001d96:	f7fe ffd5 	bl	8000d44 <__aeabi_fmul>
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	f7ff f921 	bl	8000fe4 <__aeabi_f2iz>
 8001da2:	4602      	mov	r2, r0
 8001da4:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001da8:	601a      	str	r2, [r3, #0]
        *pch_hr_valid  = 1;
 8001daa:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8001dae:	2201      	movs	r2, #1
 8001db0:	701a      	strb	r2, [r3, #0]
 8001db2:	e007      	b.n	8001dc4 <maxim_heart_rate_and_oxygen_saturation+0x378>
    }
    else  {
        *pn_heart_rate = -999;
 8001db4:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001db8:	4a1c      	ldr	r2, [pc, #112]	; (8001e2c <maxim_heart_rate_and_oxygen_saturation+0x3e0>)
 8001dba:	601a      	str	r2, [r3, #0]
        *pch_hr_valid  = 0;
 8001dbc:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	701a      	strb	r2, [r3, #0]
    }
            
    for ( k=0 ; k<n_npks ;k++)
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8001dca:	e013      	b.n	8001df4 <maxim_heart_rate_and_oxygen_saturation+0x3a8>
        an_ir_valley_locs[k]=an_dx_peak_locs[k]+HAMMING_SIZE/2; 
 8001dcc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001dd0:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8001dd4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001dd8:	1c9a      	adds	r2, r3, #2
 8001dda:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001dde:	009b      	lsls	r3, r3, #2
 8001de0:	f507 719c 	add.w	r1, r7, #312	; 0x138
 8001de4:	440b      	add	r3, r1
 8001de6:	f843 2c9c 	str.w	r2, [r3, #-156]
    for ( k=0 ; k<n_npks ;k++)
 8001dea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001dee:	3301      	adds	r3, #1
 8001df0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8001df4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8001df8:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8001dfc:	429a      	cmp	r2, r3
 8001dfe:	dbe5      	blt.n	8001dcc <maxim_heart_rate_and_oxygen_saturation+0x380>


    // raw value : RED(=y) and IR(=X)
    // we need to assess DC and AC value of ir and red PPG.
    un_offset_tmp = un_offset;
 8001e00:	1cbb      	adds	r3, r7, #2
 8001e02:	881b      	ldrh	r3, [r3, #0]
 8001e04:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    for (k=0 ; k<n_buffer_length ; k++ )  {
 8001e08:	2300      	movs	r3, #0
 8001e0a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8001e0e:	e03e      	b.n	8001e8e <maxim_heart_rate_and_oxygen_saturation+0x442>
 8001e10:	1b4e81b5 	.word	0x1b4e81b5
 8001e14:	200005e0 	.word	0x200005e0
 8001e18:	20000208 	.word	0x20000208
 8001e1c:	0800ac28 	.word	0x0800ac28
 8001e20:	725f9bed 	.word	0x725f9bed
 8001e24:	42df9bb1 	.word	0x42df9bb1
 8001e28:	45bb8000 	.word	0x45bb8000
 8001e2c:	fffffc19 	.word	0xfffffc19
        an_x[k] =  pun_ir_buffer[un_offset_tmp];
 8001e30:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8001e34:	009b      	lsls	r3, r3, #2
 8001e36:	f107 020c 	add.w	r2, r7, #12
 8001e3a:	6812      	ldr	r2, [r2, #0]
 8001e3c:	4413      	add	r3, r2
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	4619      	mov	r1, r3
 8001e42:	4aae      	ldr	r2, [pc, #696]	; (80020fc <maxim_heart_rate_and_oxygen_saturation+0x6b0>)
 8001e44:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001e48:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        an_y[k] =  pun_red_buffer[un_offset_tmp];
 8001e4c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8001e50:	009b      	lsls	r3, r3, #2
 8001e52:	f107 0208 	add.w	r2, r7, #8
 8001e56:	6812      	ldr	r2, [r2, #0]
 8001e58:	4413      	add	r3, r2
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	4619      	mov	r1, r3
 8001e5e:	4aa8      	ldr	r2, [pc, #672]	; (8002100 <maxim_heart_rate_and_oxygen_saturation+0x6b4>)
 8001e60:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001e64:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        un_offset_tmp = (un_offset_tmp + 1) % MAX30102_BUFFER_LENGTH;
 8001e68:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8001e6c:	3301      	adds	r3, #1
 8001e6e:	4aa5      	ldr	r2, [pc, #660]	; (8002104 <maxim_heart_rate_and_oxygen_saturation+0x6b8>)
 8001e70:	fba2 1203 	umull	r1, r2, r2, r3
 8001e74:	0952      	lsrs	r2, r2, #5
 8001e76:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8001e7a:	fb01 f202 	mul.w	r2, r1, r2
 8001e7e:	1a9b      	subs	r3, r3, r2
 8001e80:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    for (k=0 ; k<n_buffer_length ; k++ )  {
 8001e84:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001e88:	3301      	adds	r3, #1
 8001e8a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8001e8e:	1d3b      	adds	r3, r7, #4
 8001e90:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	429a      	cmp	r2, r3
 8001e98:	dbca      	blt.n	8001e30 <maxim_heart_rate_and_oxygen_saturation+0x3e4>
    }

    // find precise min near an_ir_valley_locs
    n_exact_ir_valley_locs_count =0; 
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    for(k=0 ; k<n_npks ;k++){
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8001ea6:	e059      	b.n	8001f5c <maxim_heart_rate_and_oxygen_saturation+0x510>
        un_only_once =1;
 8001ea8:	2301      	movs	r3, #1
 8001eaa:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
        m=an_ir_valley_locs[k];
 8001eae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001eb2:	009b      	lsls	r3, r3, #2
 8001eb4:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8001eb8:	4413      	add	r3, r2
 8001eba:	f853 3c9c 	ldr.w	r3, [r3, #-156]
 8001ebe:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
        n_c_min= 16777216;//2^24;
 8001ec2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001ec6:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
        if (m+5 <  BUFFER_SIZE-HAMMING_SIZE  && m-5 >0){
 8001eca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001ece:	2bef      	cmp	r3, #239	; 0xef
 8001ed0:	dc3f      	bgt.n	8001f52 <maxim_heart_rate_and_oxygen_saturation+0x506>
 8001ed2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001ed6:	2b05      	cmp	r3, #5
 8001ed8:	dd3b      	ble.n	8001f52 <maxim_heart_rate_and_oxygen_saturation+0x506>
            for(i= m-5;i<m+5; i++)
 8001eda:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001ede:	3b05      	subs	r3, #5
 8001ee0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001ee4:	e025      	b.n	8001f32 <maxim_heart_rate_and_oxygen_saturation+0x4e6>
                if (an_x[i]<n_c_min){
 8001ee6:	4a85      	ldr	r2, [pc, #532]	; (80020fc <maxim_heart_rate_and_oxygen_saturation+0x6b0>)
 8001ee8:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001eec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ef0:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8001ef4:	429a      	cmp	r2, r3
 8001ef6:	dd17      	ble.n	8001f28 <maxim_heart_rate_and_oxygen_saturation+0x4dc>
                    if (un_only_once >0){
 8001ef8:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d002      	beq.n	8001f06 <maxim_heart_rate_and_oxygen_saturation+0x4ba>
                       un_only_once =0;
 8001f00:	2300      	movs	r3, #0
 8001f02:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
                   } 
                   n_c_min= an_x[i] ;
 8001f06:	4a7d      	ldr	r2, [pc, #500]	; (80020fc <maxim_heart_rate_and_oxygen_saturation+0x6b0>)
 8001f08:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001f0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f10:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
                   an_exact_ir_valley_locs[k]=i;
 8001f14:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001f18:	009b      	lsls	r3, r3, #2
 8001f1a:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8001f1e:	4413      	add	r3, r2
 8001f20:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8001f24:	f843 2cd8 	str.w	r2, [r3, #-216]
            for(i= m-5;i<m+5; i++)
 8001f28:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001f2c:	3301      	adds	r3, #1
 8001f2e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001f32:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001f36:	3304      	adds	r3, #4
 8001f38:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8001f3c:	429a      	cmp	r2, r3
 8001f3e:	ddd2      	ble.n	8001ee6 <maxim_heart_rate_and_oxygen_saturation+0x49a>
                }
            if (un_only_once ==0)
 8001f40:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d104      	bne.n	8001f52 <maxim_heart_rate_and_oxygen_saturation+0x506>
                n_exact_ir_valley_locs_count ++ ;
 8001f48:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8001f4c:	3301      	adds	r3, #1
 8001f4e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    for(k=0 ; k<n_npks ;k++){
 8001f52:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001f56:	3301      	adds	r3, #1
 8001f58:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8001f5c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8001f60:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8001f64:	429a      	cmp	r2, r3
 8001f66:	db9f      	blt.n	8001ea8 <maxim_heart_rate_and_oxygen_saturation+0x45c>
        }
    }
    if (n_exact_ir_valley_locs_count <2 ){
 8001f68:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8001f6c:	2b01      	cmp	r3, #1
 8001f6e:	dc08      	bgt.n	8001f82 <maxim_heart_rate_and_oxygen_saturation+0x536>
       *pn_spo2 =  -999 ; // do not use SPO2 since signal ratio is out of range
 8001f70:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8001f74:	4a64      	ldr	r2, [pc, #400]	; (8002108 <maxim_heart_rate_and_oxygen_saturation+0x6bc>)
 8001f76:	601a      	str	r2, [r3, #0]
       *pch_spo2_valid  = 0; 
 8001f78:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	701a      	strb	r2, [r3, #0]
       return;
 8001f80:	e236      	b.n	80023f0 <maxim_heart_rate_and_oxygen_saturation+0x9a4>
    }
    // 4 pt MA
    for(k=0; k< BUFFER_SIZE-MA4_SIZE; k++){
 8001f82:	2300      	movs	r3, #0
 8001f84:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8001f88:	e04c      	b.n	8002024 <maxim_heart_rate_and_oxygen_saturation+0x5d8>
        an_x[k]=( an_x[k]+an_x[k+1]+ an_x[k+2]+ an_x[k+3])/(int32_t)4;
 8001f8a:	4a5c      	ldr	r2, [pc, #368]	; (80020fc <maxim_heart_rate_and_oxygen_saturation+0x6b0>)
 8001f8c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001f90:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001f94:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001f98:	3301      	adds	r3, #1
 8001f9a:	4958      	ldr	r1, [pc, #352]	; (80020fc <maxim_heart_rate_and_oxygen_saturation+0x6b0>)
 8001f9c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001fa0:	441a      	add	r2, r3
 8001fa2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001fa6:	3302      	adds	r3, #2
 8001fa8:	4954      	ldr	r1, [pc, #336]	; (80020fc <maxim_heart_rate_and_oxygen_saturation+0x6b0>)
 8001faa:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001fae:	441a      	add	r2, r3
 8001fb0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001fb4:	3303      	adds	r3, #3
 8001fb6:	4951      	ldr	r1, [pc, #324]	; (80020fc <maxim_heart_rate_and_oxygen_saturation+0x6b0>)
 8001fb8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001fbc:	4413      	add	r3, r2
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	da00      	bge.n	8001fc4 <maxim_heart_rate_and_oxygen_saturation+0x578>
 8001fc2:	3303      	adds	r3, #3
 8001fc4:	109b      	asrs	r3, r3, #2
 8001fc6:	4619      	mov	r1, r3
 8001fc8:	4a4c      	ldr	r2, [pc, #304]	; (80020fc <maxim_heart_rate_and_oxygen_saturation+0x6b0>)
 8001fca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001fce:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        an_y[k]=( an_y[k]+an_y[k+1]+ an_y[k+2]+ an_y[k+3])/(int32_t)4;
 8001fd2:	4a4b      	ldr	r2, [pc, #300]	; (8002100 <maxim_heart_rate_and_oxygen_saturation+0x6b4>)
 8001fd4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001fd8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001fdc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001fe0:	3301      	adds	r3, #1
 8001fe2:	4947      	ldr	r1, [pc, #284]	; (8002100 <maxim_heart_rate_and_oxygen_saturation+0x6b4>)
 8001fe4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001fe8:	441a      	add	r2, r3
 8001fea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001fee:	3302      	adds	r3, #2
 8001ff0:	4943      	ldr	r1, [pc, #268]	; (8002100 <maxim_heart_rate_and_oxygen_saturation+0x6b4>)
 8001ff2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001ff6:	441a      	add	r2, r3
 8001ff8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001ffc:	3303      	adds	r3, #3
 8001ffe:	4940      	ldr	r1, [pc, #256]	; (8002100 <maxim_heart_rate_and_oxygen_saturation+0x6b4>)
 8002000:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002004:	4413      	add	r3, r2
 8002006:	2b00      	cmp	r3, #0
 8002008:	da00      	bge.n	800200c <maxim_heart_rate_and_oxygen_saturation+0x5c0>
 800200a:	3303      	adds	r3, #3
 800200c:	109b      	asrs	r3, r3, #2
 800200e:	4619      	mov	r1, r3
 8002010:	4a3b      	ldr	r2, [pc, #236]	; (8002100 <maxim_heart_rate_and_oxygen_saturation+0x6b4>)
 8002012:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8002016:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for(k=0; k< BUFFER_SIZE-MA4_SIZE; k++){
 800201a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800201e:	3301      	adds	r3, #1
 8002020:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8002024:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8002028:	2bf5      	cmp	r3, #245	; 0xf5
 800202a:	ddae      	ble.n	8001f8a <maxim_heart_rate_and_oxygen_saturation+0x53e>
    }

    //using an_exact_ir_valley_locs , find ir-red DC andir-red AC for SPO2 calibration ratio
    //finding AC/DC maximum of raw ir * red between two valley locations
    n_ratio_average =0; 
 800202c:	2300      	movs	r3, #0
 800202e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    n_i_ratio_count =0; 
 8002032:	2300      	movs	r3, #0
 8002034:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    
    for(k=0; k< 5; k++) an_ratio[k]=0;
 8002038:	2300      	movs	r3, #0
 800203a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800203e:	e00b      	b.n	8002058 <maxim_heart_rate_and_oxygen_saturation+0x60c>
 8002040:	f107 0310 	add.w	r3, r7, #16
 8002044:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8002048:	2100      	movs	r1, #0
 800204a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800204e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8002052:	3301      	adds	r3, #1
 8002054:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8002058:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800205c:	2b04      	cmp	r3, #4
 800205e:	ddef      	ble.n	8002040 <maxim_heart_rate_and_oxygen_saturation+0x5f4>
    for (k=0; k< n_exact_ir_valley_locs_count; k++){
 8002060:	2300      	movs	r3, #0
 8002062:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8002066:	e017      	b.n	8002098 <maxim_heart_rate_and_oxygen_saturation+0x64c>
        if (an_exact_ir_valley_locs[k] > BUFFER_SIZE ){             
 8002068:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800206c:	009b      	lsls	r3, r3, #2
 800206e:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8002072:	4413      	add	r3, r2
 8002074:	f853 3cd8 	ldr.w	r3, [r3, #-216]
 8002078:	2bfa      	cmp	r3, #250	; 0xfa
 800207a:	dd08      	ble.n	800208e <maxim_heart_rate_and_oxygen_saturation+0x642>
            *pn_spo2 =  -999 ; // do not use SPO2 since valley loc is out of range
 800207c:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8002080:	4a21      	ldr	r2, [pc, #132]	; (8002108 <maxim_heart_rate_and_oxygen_saturation+0x6bc>)
 8002082:	601a      	str	r2, [r3, #0]
            *pch_spo2_valid  = 0; 
 8002084:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002088:	2200      	movs	r2, #0
 800208a:	701a      	strb	r2, [r3, #0]
            return;
 800208c:	e1b0      	b.n	80023f0 <maxim_heart_rate_and_oxygen_saturation+0x9a4>
    for (k=0; k< n_exact_ir_valley_locs_count; k++){
 800208e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8002092:	3301      	adds	r3, #1
 8002094:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8002098:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 800209c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80020a0:	429a      	cmp	r2, r3
 80020a2:	dbe1      	blt.n	8002068 <maxim_heart_rate_and_oxygen_saturation+0x61c>
        }
    }
    // find max between two valley locations 
    // and use ratio betwen AC compoent of Ir & Red and DC compoent of Ir & Red for SPO2 

    for (k=0; k< n_exact_ir_valley_locs_count-1; k++){
 80020a4:	2300      	movs	r3, #0
 80020a6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 80020aa:	e14a      	b.n	8002342 <maxim_heart_rate_and_oxygen_saturation+0x8f6>
        n_y_dc_max= -16777216 ; 
 80020ac:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 80020b0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        n_x_dc_max= - 16777216; 
 80020b4:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 80020b8:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
        if (an_exact_ir_valley_locs[k+1]-an_exact_ir_valley_locs[k] >10){
 80020bc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80020c0:	3301      	adds	r3, #1
 80020c2:	009b      	lsls	r3, r3, #2
 80020c4:	f507 729c 	add.w	r2, r7, #312	; 0x138
 80020c8:	4413      	add	r3, r2
 80020ca:	f853 2cd8 	ldr.w	r2, [r3, #-216]
 80020ce:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80020d2:	009b      	lsls	r3, r3, #2
 80020d4:	f507 719c 	add.w	r1, r7, #312	; 0x138
 80020d8:	440b      	add	r3, r1
 80020da:	f853 3cd8 	ldr.w	r3, [r3, #-216]
 80020de:	1ad3      	subs	r3, r2, r3
 80020e0:	2b0a      	cmp	r3, #10
 80020e2:	f340 8129 	ble.w	8002338 <maxim_heart_rate_and_oxygen_saturation+0x8ec>
            for (i=an_exact_ir_valley_locs[k]; i< an_exact_ir_valley_locs[k+1]; i++){
 80020e6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80020ea:	009b      	lsls	r3, r3, #2
 80020ec:	f507 729c 	add.w	r2, r7, #312	; 0x138
 80020f0:	4413      	add	r3, r2
 80020f2:	f853 3cd8 	ldr.w	r3, [r3, #-216]
 80020f6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80020fa:	e034      	b.n	8002166 <maxim_heart_rate_and_oxygen_saturation+0x71a>
 80020fc:	200005e0 	.word	0x200005e0
 8002100:	200009c8 	.word	0x200009c8
 8002104:	1b4e81b5 	.word	0x1b4e81b5
 8002108:	fffffc19 	.word	0xfffffc19
                if (an_x[i]> n_x_dc_max) {n_x_dc_max =an_x[i];n_x_dc_max_idx =i; }
 800210c:	4aba      	ldr	r2, [pc, #744]	; (80023f8 <maxim_heart_rate_and_oxygen_saturation+0x9ac>)
 800210e:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8002112:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002116:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 800211a:	429a      	cmp	r2, r3
 800211c:	da0a      	bge.n	8002134 <maxim_heart_rate_and_oxygen_saturation+0x6e8>
 800211e:	4ab6      	ldr	r2, [pc, #728]	; (80023f8 <maxim_heart_rate_and_oxygen_saturation+0x9ac>)
 8002120:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8002124:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002128:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800212c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8002130:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
                if (an_y[i]> n_y_dc_max) {n_y_dc_max =an_y[i];n_y_dc_max_idx=i;}
 8002134:	4ab1      	ldr	r2, [pc, #708]	; (80023fc <maxim_heart_rate_and_oxygen_saturation+0x9b0>)
 8002136:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800213a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800213e:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8002142:	429a      	cmp	r2, r3
 8002144:	da0a      	bge.n	800215c <maxim_heart_rate_and_oxygen_saturation+0x710>
 8002146:	4aad      	ldr	r2, [pc, #692]	; (80023fc <maxim_heart_rate_and_oxygen_saturation+0x9b0>)
 8002148:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800214c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002150:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8002154:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8002158:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
            for (i=an_exact_ir_valley_locs[k]; i< an_exact_ir_valley_locs[k+1]; i++){
 800215c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8002160:	3301      	adds	r3, #1
 8002162:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002166:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800216a:	3301      	adds	r3, #1
 800216c:	009b      	lsls	r3, r3, #2
 800216e:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8002172:	4413      	add	r3, r2
 8002174:	f853 3cd8 	ldr.w	r3, [r3, #-216]
 8002178:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 800217c:	429a      	cmp	r2, r3
 800217e:	dbc5      	blt.n	800210c <maxim_heart_rate_and_oxygen_saturation+0x6c0>
            }
            n_y_ac= (an_y[an_exact_ir_valley_locs[k+1]] - an_y[an_exact_ir_valley_locs[k] ] )*(n_y_dc_max_idx -an_exact_ir_valley_locs[k]); //red
 8002180:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8002184:	3301      	adds	r3, #1
 8002186:	009b      	lsls	r3, r3, #2
 8002188:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800218c:	4413      	add	r3, r2
 800218e:	f853 3cd8 	ldr.w	r3, [r3, #-216]
 8002192:	4a9a      	ldr	r2, [pc, #616]	; (80023fc <maxim_heart_rate_and_oxygen_saturation+0x9b0>)
 8002194:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002198:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800219c:	009b      	lsls	r3, r3, #2
 800219e:	f507 719c 	add.w	r1, r7, #312	; 0x138
 80021a2:	440b      	add	r3, r1
 80021a4:	f853 3cd8 	ldr.w	r3, [r3, #-216]
 80021a8:	4994      	ldr	r1, [pc, #592]	; (80023fc <maxim_heart_rate_and_oxygen_saturation+0x9b0>)
 80021aa:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80021ae:	1ad2      	subs	r2, r2, r3
 80021b0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80021b4:	009b      	lsls	r3, r3, #2
 80021b6:	f507 719c 	add.w	r1, r7, #312	; 0x138
 80021ba:	440b      	add	r3, r1
 80021bc:	f853 3cd8 	ldr.w	r3, [r3, #-216]
 80021c0:	f8d7 1104 	ldr.w	r1, [r7, #260]	; 0x104
 80021c4:	1acb      	subs	r3, r1, r3
 80021c6:	fb03 f302 	mul.w	r3, r3, r2
 80021ca:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
            n_y_ac=  an_y[an_exact_ir_valley_locs[k]] + n_y_ac/ (an_exact_ir_valley_locs[k+1] - an_exact_ir_valley_locs[k])  ; 
 80021ce:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80021d2:	009b      	lsls	r3, r3, #2
 80021d4:	f507 729c 	add.w	r2, r7, #312	; 0x138
 80021d8:	4413      	add	r3, r2
 80021da:	f853 3cd8 	ldr.w	r3, [r3, #-216]
 80021de:	4a87      	ldr	r2, [pc, #540]	; (80023fc <maxim_heart_rate_and_oxygen_saturation+0x9b0>)
 80021e0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80021e4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80021e8:	3301      	adds	r3, #1
 80021ea:	009b      	lsls	r3, r3, #2
 80021ec:	f507 719c 	add.w	r1, r7, #312	; 0x138
 80021f0:	440b      	add	r3, r1
 80021f2:	f853 1cd8 	ldr.w	r1, [r3, #-216]
 80021f6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80021fa:	009b      	lsls	r3, r3, #2
 80021fc:	f507 709c 	add.w	r0, r7, #312	; 0x138
 8002200:	4403      	add	r3, r0
 8002202:	f853 3cd8 	ldr.w	r3, [r3, #-216]
 8002206:	1acb      	subs	r3, r1, r3
 8002208:	f8d7 10ec 	ldr.w	r1, [r7, #236]	; 0xec
 800220c:	fb91 f3f3 	sdiv	r3, r1, r3
 8002210:	4413      	add	r3, r2
 8002212:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
        
        
            n_y_ac=  an_y[n_y_dc_max_idx] - n_y_ac;    // subracting linear DC compoenents from raw 
 8002216:	4a79      	ldr	r2, [pc, #484]	; (80023fc <maxim_heart_rate_and_oxygen_saturation+0x9b0>)
 8002218:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800221c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002220:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8002224:	1ad3      	subs	r3, r2, r3
 8002226:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
            n_x_ac= (an_x[an_exact_ir_valley_locs[k+1]] - an_x[an_exact_ir_valley_locs[k] ] )*(n_x_dc_max_idx -an_exact_ir_valley_locs[k]); // ir
 800222a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800222e:	3301      	adds	r3, #1
 8002230:	009b      	lsls	r3, r3, #2
 8002232:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8002236:	4413      	add	r3, r2
 8002238:	f853 3cd8 	ldr.w	r3, [r3, #-216]
 800223c:	4a6e      	ldr	r2, [pc, #440]	; (80023f8 <maxim_heart_rate_and_oxygen_saturation+0x9ac>)
 800223e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002242:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8002246:	009b      	lsls	r3, r3, #2
 8002248:	f507 719c 	add.w	r1, r7, #312	; 0x138
 800224c:	440b      	add	r3, r1
 800224e:	f853 3cd8 	ldr.w	r3, [r3, #-216]
 8002252:	4969      	ldr	r1, [pc, #420]	; (80023f8 <maxim_heart_rate_and_oxygen_saturation+0x9ac>)
 8002254:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002258:	1ad2      	subs	r2, r2, r3
 800225a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800225e:	009b      	lsls	r3, r3, #2
 8002260:	f507 719c 	add.w	r1, r7, #312	; 0x138
 8002264:	440b      	add	r3, r1
 8002266:	f853 3cd8 	ldr.w	r3, [r3, #-216]
 800226a:	f8d7 1100 	ldr.w	r1, [r7, #256]	; 0x100
 800226e:	1acb      	subs	r3, r1, r3
 8002270:	fb03 f302 	mul.w	r3, r3, r2
 8002274:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
            n_x_ac=  an_x[an_exact_ir_valley_locs[k]] + n_x_ac/ (an_exact_ir_valley_locs[k+1] - an_exact_ir_valley_locs[k]); 
 8002278:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800227c:	009b      	lsls	r3, r3, #2
 800227e:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8002282:	4413      	add	r3, r2
 8002284:	f853 3cd8 	ldr.w	r3, [r3, #-216]
 8002288:	4a5b      	ldr	r2, [pc, #364]	; (80023f8 <maxim_heart_rate_and_oxygen_saturation+0x9ac>)
 800228a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800228e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8002292:	3301      	adds	r3, #1
 8002294:	009b      	lsls	r3, r3, #2
 8002296:	f507 719c 	add.w	r1, r7, #312	; 0x138
 800229a:	440b      	add	r3, r1
 800229c:	f853 1cd8 	ldr.w	r1, [r3, #-216]
 80022a0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80022a4:	009b      	lsls	r3, r3, #2
 80022a6:	f507 709c 	add.w	r0, r7, #312	; 0x138
 80022aa:	4403      	add	r3, r0
 80022ac:	f853 3cd8 	ldr.w	r3, [r3, #-216]
 80022b0:	1acb      	subs	r3, r1, r3
 80022b2:	f8d7 10e8 	ldr.w	r1, [r7, #232]	; 0xe8
 80022b6:	fb91 f3f3 	sdiv	r3, r1, r3
 80022ba:	4413      	add	r3, r2
 80022bc:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
            n_x_ac=  an_x[n_y_dc_max_idx] - n_x_ac;      // subracting linear DC compoenents from raw 
 80022c0:	4a4d      	ldr	r2, [pc, #308]	; (80023f8 <maxim_heart_rate_and_oxygen_saturation+0x9ac>)
 80022c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80022c6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80022ca:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80022ce:	1ad3      	subs	r3, r2, r3
 80022d0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
            n_nume=( n_y_ac *n_x_dc_max)>>7 ; //prepare X100 to preserve floating value
 80022d4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80022d8:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 80022dc:	fb02 f303 	mul.w	r3, r2, r3
 80022e0:	11db      	asrs	r3, r3, #7
 80022e2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
            n_denom= ( n_x_ac *n_y_dc_max)>>7;
 80022e6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80022ea:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 80022ee:	fb02 f303 	mul.w	r3, r2, r3
 80022f2:	11db      	asrs	r3, r3, #7
 80022f4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
            if (n_denom>0  && n_i_ratio_count <5 &&  n_nume != 0)
 80022f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	dd1b      	ble.n	8002338 <maxim_heart_rate_and_oxygen_saturation+0x8ec>
 8002300:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8002304:	2b04      	cmp	r3, #4
 8002306:	dc17      	bgt.n	8002338 <maxim_heart_rate_and_oxygen_saturation+0x8ec>
 8002308:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800230c:	2b00      	cmp	r3, #0
 800230e:	d013      	beq.n	8002338 <maxim_heart_rate_and_oxygen_saturation+0x8ec>
            {   
                an_ratio[n_i_ratio_count]= (n_nume*100)/n_denom ; //formular is ( n_y_ac *n_x_dc_max) / ( n_x_ac *n_y_dc_max) ;
 8002310:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002314:	2264      	movs	r2, #100	; 0x64
 8002316:	fb02 f203 	mul.w	r2, r2, r3
 800231a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800231e:	fb92 f1f3 	sdiv	r1, r2, r3
 8002322:	f107 0310 	add.w	r3, r7, #16
 8002326:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800232a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                n_i_ratio_count++;
 800232e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8002332:	3301      	adds	r3, #1
 8002334:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    for (k=0; k< n_exact_ir_valley_locs_count-1; k++){
 8002338:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800233c:	3301      	adds	r3, #1
 800233e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8002342:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002346:	3b01      	subs	r3, #1
 8002348:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 800234c:	429a      	cmp	r2, r3
 800234e:	f6ff aead 	blt.w	80020ac <maxim_heart_rate_and_oxygen_saturation+0x660>
            }
        }
    }

    maxim_sort_ascend(an_ratio, n_i_ratio_count);
 8002352:	f107 0310 	add.w	r3, r7, #16
 8002356:	f8d7 1128 	ldr.w	r1, [r7, #296]	; 0x128
 800235a:	4618      	mov	r0, r3
 800235c:	f000 f948 	bl	80025f0 <maxim_sort_ascend>
    n_middle_idx= n_i_ratio_count/2;
 8002360:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8002364:	0fda      	lsrs	r2, r3, #31
 8002366:	4413      	add	r3, r2
 8002368:	105b      	asrs	r3, r3, #1
 800236a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4

    if (n_middle_idx >1)
 800236e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002372:	2b01      	cmp	r3, #1
 8002374:	dd13      	ble.n	800239e <maxim_heart_rate_and_oxygen_saturation+0x952>
        n_ratio_average =( an_ratio[n_middle_idx-1] +an_ratio[n_middle_idx])/2; // use median
 8002376:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800237a:	1e5a      	subs	r2, r3, #1
 800237c:	f107 0310 	add.w	r3, r7, #16
 8002380:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002384:	f107 0310 	add.w	r3, r7, #16
 8002388:	f8d7 10f4 	ldr.w	r1, [r7, #244]	; 0xf4
 800238c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002390:	4413      	add	r3, r2
 8002392:	0fda      	lsrs	r2, r3, #31
 8002394:	4413      	add	r3, r2
 8002396:	105b      	asrs	r3, r3, #1
 8002398:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800239c:	e007      	b.n	80023ae <maxim_heart_rate_and_oxygen_saturation+0x962>
    else
        n_ratio_average = an_ratio[n_middle_idx ];
 800239e:	f107 0310 	add.w	r3, r7, #16
 80023a2:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 80023a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023aa:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc

    if( n_ratio_average>2 && n_ratio_average <184){
 80023ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80023b2:	2b02      	cmp	r3, #2
 80023b4:	dd14      	ble.n	80023e0 <maxim_heart_rate_and_oxygen_saturation+0x994>
 80023b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80023ba:	2bb7      	cmp	r3, #183	; 0xb7
 80023bc:	dc10      	bgt.n	80023e0 <maxim_heart_rate_and_oxygen_saturation+0x994>
        n_spo2_calc= uch_spo2_table[n_ratio_average] ;
 80023be:	4a10      	ldr	r2, [pc, #64]	; (8002400 <maxim_heart_rate_and_oxygen_saturation+0x9b4>)
 80023c0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80023c4:	4413      	add	r3, r2
 80023c6:	781b      	ldrb	r3, [r3, #0]
 80023c8:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
        *pn_spo2 = n_spo2_calc ;
 80023cc:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 80023d0:	f8d7 20f0 	ldr.w	r2, [r7, #240]	; 0xf0
 80023d4:	601a      	str	r2, [r3, #0]
        *pch_spo2_valid  = 1;//  float_SPO2 =  -45.060*n_ratio_average* n_ratio_average/10000 + 30.354 *n_ratio_average/100 + 94.845 ;  // for comparison with table
 80023d6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80023da:	2201      	movs	r2, #1
 80023dc:	701a      	strb	r2, [r3, #0]
 80023de:	e007      	b.n	80023f0 <maxim_heart_rate_and_oxygen_saturation+0x9a4>
    }
    else{
        *pn_spo2 =  -999 ; // do not use SPO2 since signal ratio is out of range
 80023e0:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 80023e4:	4a07      	ldr	r2, [pc, #28]	; (8002404 <maxim_heart_rate_and_oxygen_saturation+0x9b8>)
 80023e6:	601a      	str	r2, [r3, #0]
        *pch_spo2_valid  = 0; 
 80023e8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80023ec:	2200      	movs	r2, #0
 80023ee:	701a      	strb	r2, [r3, #0]
    }
}
 80023f0:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 80023f4:	46bd      	mov	sp, r7
 80023f6:	bd90      	pop	{r4, r7, pc}
 80023f8:	200005e0 	.word	0x200005e0
 80023fc:	200009c8 	.word	0x200009c8
 8002400:	0800ac68 	.word	0x0800ac68
 8002404:	fffffc19 	.word	0xfffffc19

08002408 <maxim_find_peaks>:
* \par          Details
*               Find at most MAX_NUM peaks above MIN_HEIGHT separated by at least MIN_DISTANCE
*
* \retval       None
*/
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b086      	sub	sp, #24
 800240c:	af02      	add	r7, sp, #8
 800240e:	60f8      	str	r0, [r7, #12]
 8002410:	60b9      	str	r1, [r7, #8]
 8002412:	607a      	str	r2, [r7, #4]
 8002414:	603b      	str	r3, [r7, #0]
    maxim_peaks_above_min_height( pn_locs, pn_npks, pn_x, n_size, n_min_height );
 8002416:	69bb      	ldr	r3, [r7, #24]
 8002418:	9300      	str	r3, [sp, #0]
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	687a      	ldr	r2, [r7, #4]
 800241e:	68b9      	ldr	r1, [r7, #8]
 8002420:	68f8      	ldr	r0, [r7, #12]
 8002422:	f000 f812 	bl	800244a <maxim_peaks_above_min_height>
    maxim_remove_close_peaks( pn_locs, pn_npks, pn_x, n_min_distance );
 8002426:	69fb      	ldr	r3, [r7, #28]
 8002428:	687a      	ldr	r2, [r7, #4]
 800242a:	68b9      	ldr	r1, [r7, #8]
 800242c:	68f8      	ldr	r0, [r7, #12]
 800242e:	f000 f87f 	bl	8002530 <maxim_remove_close_peaks>
    *pn_npks = min( *pn_npks, n_max_num );
 8002432:	68bb      	ldr	r3, [r7, #8]
 8002434:	681a      	ldr	r2, [r3, #0]
 8002436:	6a3b      	ldr	r3, [r7, #32]
 8002438:	429a      	cmp	r2, r3
 800243a:	bfa8      	it	ge
 800243c:	461a      	movge	r2, r3
 800243e:	68bb      	ldr	r3, [r7, #8]
 8002440:	601a      	str	r2, [r3, #0]
}
 8002442:	bf00      	nop
 8002444:	3710      	adds	r7, #16
 8002446:	46bd      	mov	sp, r7
 8002448:	bd80      	pop	{r7, pc}

0800244a <maxim_peaks_above_min_height>:
* \par          Details
*               Find all peaks above MIN_HEIGHT
*
* \retval       None
*/
{
 800244a:	b480      	push	{r7}
 800244c:	b087      	sub	sp, #28
 800244e:	af00      	add	r7, sp, #0
 8002450:	60f8      	str	r0, [r7, #12]
 8002452:	60b9      	str	r1, [r7, #8]
 8002454:	607a      	str	r2, [r7, #4]
 8002456:	603b      	str	r3, [r7, #0]
    int32_t i = 1, n_width;
 8002458:	2301      	movs	r3, #1
 800245a:	617b      	str	r3, [r7, #20]
    *pn_npks = 0;
 800245c:	68bb      	ldr	r3, [r7, #8]
 800245e:	2200      	movs	r2, #0
 8002460:	601a      	str	r2, [r3, #0]
    
    while (i < n_size-1){
 8002462:	e05a      	b.n	800251a <maxim_peaks_above_min_height+0xd0>
        if (pn_x[i] > n_min_height && pn_x[i] > pn_x[i-1]){            // find left edge of potential peaks
 8002464:	697b      	ldr	r3, [r7, #20]
 8002466:	009b      	lsls	r3, r3, #2
 8002468:	687a      	ldr	r2, [r7, #4]
 800246a:	4413      	add	r3, r2
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	6a3a      	ldr	r2, [r7, #32]
 8002470:	429a      	cmp	r2, r3
 8002472:	da4f      	bge.n	8002514 <maxim_peaks_above_min_height+0xca>
 8002474:	697b      	ldr	r3, [r7, #20]
 8002476:	009b      	lsls	r3, r3, #2
 8002478:	687a      	ldr	r2, [r7, #4]
 800247a:	4413      	add	r3, r2
 800247c:	681a      	ldr	r2, [r3, #0]
 800247e:	697b      	ldr	r3, [r7, #20]
 8002480:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002484:	3b01      	subs	r3, #1
 8002486:	009b      	lsls	r3, r3, #2
 8002488:	6879      	ldr	r1, [r7, #4]
 800248a:	440b      	add	r3, r1
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	429a      	cmp	r2, r3
 8002490:	dd40      	ble.n	8002514 <maxim_peaks_above_min_height+0xca>
            n_width = 1;
 8002492:	2301      	movs	r3, #1
 8002494:	613b      	str	r3, [r7, #16]
            while (i+n_width < n_size && pn_x[i] == pn_x[i+n_width])    // find flat peaks
 8002496:	e002      	b.n	800249e <maxim_peaks_above_min_height+0x54>
                n_width++;
 8002498:	693b      	ldr	r3, [r7, #16]
 800249a:	3301      	adds	r3, #1
 800249c:	613b      	str	r3, [r7, #16]
            while (i+n_width < n_size && pn_x[i] == pn_x[i+n_width])    // find flat peaks
 800249e:	697a      	ldr	r2, [r7, #20]
 80024a0:	693b      	ldr	r3, [r7, #16]
 80024a2:	4413      	add	r3, r2
 80024a4:	683a      	ldr	r2, [r7, #0]
 80024a6:	429a      	cmp	r2, r3
 80024a8:	dd0d      	ble.n	80024c6 <maxim_peaks_above_min_height+0x7c>
 80024aa:	697b      	ldr	r3, [r7, #20]
 80024ac:	009b      	lsls	r3, r3, #2
 80024ae:	687a      	ldr	r2, [r7, #4]
 80024b0:	4413      	add	r3, r2
 80024b2:	681a      	ldr	r2, [r3, #0]
 80024b4:	6979      	ldr	r1, [r7, #20]
 80024b6:	693b      	ldr	r3, [r7, #16]
 80024b8:	440b      	add	r3, r1
 80024ba:	009b      	lsls	r3, r3, #2
 80024bc:	6879      	ldr	r1, [r7, #4]
 80024be:	440b      	add	r3, r1
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	429a      	cmp	r2, r3
 80024c4:	d0e8      	beq.n	8002498 <maxim_peaks_above_min_height+0x4e>
            if (pn_x[i] > pn_x[i+n_width] && (*pn_npks) < 15 ){                            // find right edge of peaks
 80024c6:	697b      	ldr	r3, [r7, #20]
 80024c8:	009b      	lsls	r3, r3, #2
 80024ca:	687a      	ldr	r2, [r7, #4]
 80024cc:	4413      	add	r3, r2
 80024ce:	681a      	ldr	r2, [r3, #0]
 80024d0:	6979      	ldr	r1, [r7, #20]
 80024d2:	693b      	ldr	r3, [r7, #16]
 80024d4:	440b      	add	r3, r1
 80024d6:	009b      	lsls	r3, r3, #2
 80024d8:	6879      	ldr	r1, [r7, #4]
 80024da:	440b      	add	r3, r1
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	429a      	cmp	r2, r3
 80024e0:	dd13      	ble.n	800250a <maxim_peaks_above_min_height+0xc0>
 80024e2:	68bb      	ldr	r3, [r7, #8]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	2b0e      	cmp	r3, #14
 80024e8:	dc0f      	bgt.n	800250a <maxim_peaks_above_min_height+0xc0>
                pn_locs[(*pn_npks)++] = i;        
 80024ea:	68bb      	ldr	r3, [r7, #8]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	1c59      	adds	r1, r3, #1
 80024f0:	68ba      	ldr	r2, [r7, #8]
 80024f2:	6011      	str	r1, [r2, #0]
 80024f4:	009b      	lsls	r3, r3, #2
 80024f6:	68fa      	ldr	r2, [r7, #12]
 80024f8:	4413      	add	r3, r2
 80024fa:	697a      	ldr	r2, [r7, #20]
 80024fc:	601a      	str	r2, [r3, #0]
                // for flat peaks, peak location is left edge
                i += n_width+1;
 80024fe:	693b      	ldr	r3, [r7, #16]
 8002500:	3301      	adds	r3, #1
 8002502:	697a      	ldr	r2, [r7, #20]
 8002504:	4413      	add	r3, r2
 8002506:	617b      	str	r3, [r7, #20]
 8002508:	e003      	b.n	8002512 <maxim_peaks_above_min_height+0xc8>
            }
            else
                i += n_width;
 800250a:	697a      	ldr	r2, [r7, #20]
 800250c:	693b      	ldr	r3, [r7, #16]
 800250e:	4413      	add	r3, r2
 8002510:	617b      	str	r3, [r7, #20]
            if (pn_x[i] > pn_x[i+n_width] && (*pn_npks) < 15 ){                            // find right edge of peaks
 8002512:	e002      	b.n	800251a <maxim_peaks_above_min_height+0xd0>
        }
        else
            i++;
 8002514:	697b      	ldr	r3, [r7, #20]
 8002516:	3301      	adds	r3, #1
 8002518:	617b      	str	r3, [r7, #20]
    while (i < n_size-1){
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	3b01      	subs	r3, #1
 800251e:	697a      	ldr	r2, [r7, #20]
 8002520:	429a      	cmp	r2, r3
 8002522:	db9f      	blt.n	8002464 <maxim_peaks_above_min_height+0x1a>
    }
}
 8002524:	bf00      	nop
 8002526:	bf00      	nop
 8002528:	371c      	adds	r7, #28
 800252a:	46bd      	mov	sp, r7
 800252c:	bc80      	pop	{r7}
 800252e:	4770      	bx	lr

08002530 <maxim_remove_close_peaks>:
* \par          Details
*               Remove peaks separated by less than MIN_DISTANCE
*
* \retval       None
*/
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b088      	sub	sp, #32
 8002534:	af00      	add	r7, sp, #0
 8002536:	60f8      	str	r0, [r7, #12]
 8002538:	60b9      	str	r1, [r7, #8]
 800253a:	607a      	str	r2, [r7, #4]
 800253c:	603b      	str	r3, [r7, #0]
    
    int32_t i, j, n_old_npks, n_dist;
    
    /* Order peaks from large to small */
    maxim_sort_indices_descend( pn_x, pn_locs, *pn_npks );
 800253e:	68bb      	ldr	r3, [r7, #8]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	461a      	mov	r2, r3
 8002544:	68f9      	ldr	r1, [r7, #12]
 8002546:	6878      	ldr	r0, [r7, #4]
 8002548:	f000 f894 	bl	8002674 <maxim_sort_indices_descend>

    for ( i = -1; i < *pn_npks; i++ ){
 800254c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002550:	61fb      	str	r3, [r7, #28]
 8002552:	e03e      	b.n	80025d2 <maxim_remove_close_peaks+0xa2>
        n_old_npks = *pn_npks;
 8002554:	68bb      	ldr	r3, [r7, #8]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	617b      	str	r3, [r7, #20]
        *pn_npks = i+1;
 800255a:	69fb      	ldr	r3, [r7, #28]
 800255c:	1c5a      	adds	r2, r3, #1
 800255e:	68bb      	ldr	r3, [r7, #8]
 8002560:	601a      	str	r2, [r3, #0]
        for ( j = i+1; j < n_old_npks; j++ ){
 8002562:	69fb      	ldr	r3, [r7, #28]
 8002564:	3301      	adds	r3, #1
 8002566:	61bb      	str	r3, [r7, #24]
 8002568:	e02c      	b.n	80025c4 <maxim_remove_close_peaks+0x94>
            n_dist =  pn_locs[j] - ( i == -1 ? -1 : pn_locs[i] ); // lag-zero peak of autocorr is at index -1
 800256a:	69bb      	ldr	r3, [r7, #24]
 800256c:	009b      	lsls	r3, r3, #2
 800256e:	68fa      	ldr	r2, [r7, #12]
 8002570:	4413      	add	r3, r2
 8002572:	681a      	ldr	r2, [r3, #0]
 8002574:	69fb      	ldr	r3, [r7, #28]
 8002576:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800257a:	d005      	beq.n	8002588 <maxim_remove_close_peaks+0x58>
 800257c:	69fb      	ldr	r3, [r7, #28]
 800257e:	009b      	lsls	r3, r3, #2
 8002580:	68f9      	ldr	r1, [r7, #12]
 8002582:	440b      	add	r3, r1
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	e001      	b.n	800258c <maxim_remove_close_peaks+0x5c>
 8002588:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800258c:	1ad3      	subs	r3, r2, r3
 800258e:	613b      	str	r3, [r7, #16]
            if ( n_dist > n_min_distance || n_dist < -n_min_distance )
 8002590:	693a      	ldr	r2, [r7, #16]
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	429a      	cmp	r2, r3
 8002596:	dc04      	bgt.n	80025a2 <maxim_remove_close_peaks+0x72>
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	425b      	negs	r3, r3
 800259c:	693a      	ldr	r2, [r7, #16]
 800259e:	429a      	cmp	r2, r3
 80025a0:	da0d      	bge.n	80025be <maxim_remove_close_peaks+0x8e>
                pn_locs[(*pn_npks)++] = pn_locs[j];
 80025a2:	69bb      	ldr	r3, [r7, #24]
 80025a4:	009b      	lsls	r3, r3, #2
 80025a6:	68fa      	ldr	r2, [r7, #12]
 80025a8:	441a      	add	r2, r3
 80025aa:	68bb      	ldr	r3, [r7, #8]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	1c58      	adds	r0, r3, #1
 80025b0:	68b9      	ldr	r1, [r7, #8]
 80025b2:	6008      	str	r0, [r1, #0]
 80025b4:	009b      	lsls	r3, r3, #2
 80025b6:	68f9      	ldr	r1, [r7, #12]
 80025b8:	440b      	add	r3, r1
 80025ba:	6812      	ldr	r2, [r2, #0]
 80025bc:	601a      	str	r2, [r3, #0]
        for ( j = i+1; j < n_old_npks; j++ ){
 80025be:	69bb      	ldr	r3, [r7, #24]
 80025c0:	3301      	adds	r3, #1
 80025c2:	61bb      	str	r3, [r7, #24]
 80025c4:	69ba      	ldr	r2, [r7, #24]
 80025c6:	697b      	ldr	r3, [r7, #20]
 80025c8:	429a      	cmp	r2, r3
 80025ca:	dbce      	blt.n	800256a <maxim_remove_close_peaks+0x3a>
    for ( i = -1; i < *pn_npks; i++ ){
 80025cc:	69fb      	ldr	r3, [r7, #28]
 80025ce:	3301      	adds	r3, #1
 80025d0:	61fb      	str	r3, [r7, #28]
 80025d2:	68bb      	ldr	r3, [r7, #8]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	69fa      	ldr	r2, [r7, #28]
 80025d8:	429a      	cmp	r2, r3
 80025da:	dbbb      	blt.n	8002554 <maxim_remove_close_peaks+0x24>
        }
    }

    // Resort indices longo ascending order
    maxim_sort_ascend( pn_locs, *pn_npks );
 80025dc:	68bb      	ldr	r3, [r7, #8]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	4619      	mov	r1, r3
 80025e2:	68f8      	ldr	r0, [r7, #12]
 80025e4:	f000 f804 	bl	80025f0 <maxim_sort_ascend>
}
 80025e8:	bf00      	nop
 80025ea:	3720      	adds	r7, #32
 80025ec:	46bd      	mov	sp, r7
 80025ee:	bd80      	pop	{r7, pc}

080025f0 <maxim_sort_ascend>:
* \par          Details
*               Sort array in ascending order (insertion sort algorithm)
*
* \retval       None
*/
{
 80025f0:	b480      	push	{r7}
 80025f2:	b087      	sub	sp, #28
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
 80025f8:	6039      	str	r1, [r7, #0]
    int32_t i, j, n_temp;
    for (i = 1; i < n_size; i++) {
 80025fa:	2301      	movs	r3, #1
 80025fc:	617b      	str	r3, [r7, #20]
 80025fe:	e02f      	b.n	8002660 <maxim_sort_ascend+0x70>
        n_temp = pn_x[i];
 8002600:	697b      	ldr	r3, [r7, #20]
 8002602:	009b      	lsls	r3, r3, #2
 8002604:	687a      	ldr	r2, [r7, #4]
 8002606:	4413      	add	r3, r2
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	60fb      	str	r3, [r7, #12]
        for (j = i; j > 0 && n_temp < pn_x[j-1]; j--)
 800260c:	697b      	ldr	r3, [r7, #20]
 800260e:	613b      	str	r3, [r7, #16]
 8002610:	e00f      	b.n	8002632 <maxim_sort_ascend+0x42>
            pn_x[j] = pn_x[j-1];
 8002612:	693b      	ldr	r3, [r7, #16]
 8002614:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002618:	3b01      	subs	r3, #1
 800261a:	009b      	lsls	r3, r3, #2
 800261c:	687a      	ldr	r2, [r7, #4]
 800261e:	441a      	add	r2, r3
 8002620:	693b      	ldr	r3, [r7, #16]
 8002622:	009b      	lsls	r3, r3, #2
 8002624:	6879      	ldr	r1, [r7, #4]
 8002626:	440b      	add	r3, r1
 8002628:	6812      	ldr	r2, [r2, #0]
 800262a:	601a      	str	r2, [r3, #0]
        for (j = i; j > 0 && n_temp < pn_x[j-1]; j--)
 800262c:	693b      	ldr	r3, [r7, #16]
 800262e:	3b01      	subs	r3, #1
 8002630:	613b      	str	r3, [r7, #16]
 8002632:	693b      	ldr	r3, [r7, #16]
 8002634:	2b00      	cmp	r3, #0
 8002636:	dd0a      	ble.n	800264e <maxim_sort_ascend+0x5e>
 8002638:	693b      	ldr	r3, [r7, #16]
 800263a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800263e:	3b01      	subs	r3, #1
 8002640:	009b      	lsls	r3, r3, #2
 8002642:	687a      	ldr	r2, [r7, #4]
 8002644:	4413      	add	r3, r2
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	68fa      	ldr	r2, [r7, #12]
 800264a:	429a      	cmp	r2, r3
 800264c:	dbe1      	blt.n	8002612 <maxim_sort_ascend+0x22>
        pn_x[j] = n_temp;
 800264e:	693b      	ldr	r3, [r7, #16]
 8002650:	009b      	lsls	r3, r3, #2
 8002652:	687a      	ldr	r2, [r7, #4]
 8002654:	4413      	add	r3, r2
 8002656:	68fa      	ldr	r2, [r7, #12]
 8002658:	601a      	str	r2, [r3, #0]
    for (i = 1; i < n_size; i++) {
 800265a:	697b      	ldr	r3, [r7, #20]
 800265c:	3301      	adds	r3, #1
 800265e:	617b      	str	r3, [r7, #20]
 8002660:	697a      	ldr	r2, [r7, #20]
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	429a      	cmp	r2, r3
 8002666:	dbcb      	blt.n	8002600 <maxim_sort_ascend+0x10>
    }
}
 8002668:	bf00      	nop
 800266a:	bf00      	nop
 800266c:	371c      	adds	r7, #28
 800266e:	46bd      	mov	sp, r7
 8002670:	bc80      	pop	{r7}
 8002672:	4770      	bx	lr

08002674 <maxim_sort_indices_descend>:
* \par          Details
*               Sort indices according to descending order (insertion sort algorithm)
*
* \retval       None
*/ 
{
 8002674:	b480      	push	{r7}
 8002676:	b089      	sub	sp, #36	; 0x24
 8002678:	af00      	add	r7, sp, #0
 800267a:	60f8      	str	r0, [r7, #12]
 800267c:	60b9      	str	r1, [r7, #8]
 800267e:	607a      	str	r2, [r7, #4]
    int32_t i, j, n_temp;
    for (i = 1; i < n_size; i++) {
 8002680:	2301      	movs	r3, #1
 8002682:	61fb      	str	r3, [r7, #28]
 8002684:	e037      	b.n	80026f6 <maxim_sort_indices_descend+0x82>
        n_temp = pn_indx[i];
 8002686:	69fb      	ldr	r3, [r7, #28]
 8002688:	009b      	lsls	r3, r3, #2
 800268a:	68ba      	ldr	r2, [r7, #8]
 800268c:	4413      	add	r3, r2
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	617b      	str	r3, [r7, #20]
        for (j = i; j > 0 && pn_x[n_temp] > pn_x[pn_indx[j-1]]; j--)
 8002692:	69fb      	ldr	r3, [r7, #28]
 8002694:	61bb      	str	r3, [r7, #24]
 8002696:	e00f      	b.n	80026b8 <maxim_sort_indices_descend+0x44>
            pn_indx[j] = pn_indx[j-1];
 8002698:	69bb      	ldr	r3, [r7, #24]
 800269a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800269e:	3b01      	subs	r3, #1
 80026a0:	009b      	lsls	r3, r3, #2
 80026a2:	68ba      	ldr	r2, [r7, #8]
 80026a4:	441a      	add	r2, r3
 80026a6:	69bb      	ldr	r3, [r7, #24]
 80026a8:	009b      	lsls	r3, r3, #2
 80026aa:	68b9      	ldr	r1, [r7, #8]
 80026ac:	440b      	add	r3, r1
 80026ae:	6812      	ldr	r2, [r2, #0]
 80026b0:	601a      	str	r2, [r3, #0]
        for (j = i; j > 0 && pn_x[n_temp] > pn_x[pn_indx[j-1]]; j--)
 80026b2:	69bb      	ldr	r3, [r7, #24]
 80026b4:	3b01      	subs	r3, #1
 80026b6:	61bb      	str	r3, [r7, #24]
 80026b8:	69bb      	ldr	r3, [r7, #24]
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	dd12      	ble.n	80026e4 <maxim_sort_indices_descend+0x70>
 80026be:	697b      	ldr	r3, [r7, #20]
 80026c0:	009b      	lsls	r3, r3, #2
 80026c2:	68fa      	ldr	r2, [r7, #12]
 80026c4:	4413      	add	r3, r2
 80026c6:	681a      	ldr	r2, [r3, #0]
 80026c8:	69bb      	ldr	r3, [r7, #24]
 80026ca:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80026ce:	3b01      	subs	r3, #1
 80026d0:	009b      	lsls	r3, r3, #2
 80026d2:	68b9      	ldr	r1, [r7, #8]
 80026d4:	440b      	add	r3, r1
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	009b      	lsls	r3, r3, #2
 80026da:	68f9      	ldr	r1, [r7, #12]
 80026dc:	440b      	add	r3, r1
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	429a      	cmp	r2, r3
 80026e2:	dcd9      	bgt.n	8002698 <maxim_sort_indices_descend+0x24>
        pn_indx[j] = n_temp;
 80026e4:	69bb      	ldr	r3, [r7, #24]
 80026e6:	009b      	lsls	r3, r3, #2
 80026e8:	68ba      	ldr	r2, [r7, #8]
 80026ea:	4413      	add	r3, r2
 80026ec:	697a      	ldr	r2, [r7, #20]
 80026ee:	601a      	str	r2, [r3, #0]
    for (i = 1; i < n_size; i++) {
 80026f0:	69fb      	ldr	r3, [r7, #28]
 80026f2:	3301      	adds	r3, #1
 80026f4:	61fb      	str	r3, [r7, #28]
 80026f6:	69fa      	ldr	r2, [r7, #28]
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	429a      	cmp	r2, r3
 80026fc:	dbc3      	blt.n	8002686 <maxim_sort_indices_descend+0x12>
    }
}
 80026fe:	bf00      	nop
 8002700:	bf00      	nop
 8002702:	3724      	adds	r7, #36	; 0x24
 8002704:	46bd      	mov	sp, r7
 8002706:	bc80      	pop	{r7}
 8002708:	4770      	bx	lr
	...

0800270c <SSD1306_Init>:
  else SSD1306_WRITECOMMAND (SSD1306_NORMALDISPLAY);

}


uint8_t SSD1306_Init(void) {
 800270c:	b580      	push	{r7, lr}
 800270e:	b082      	sub	sp, #8
 8002710:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 8002712:	f000 fa1f 	bl	8002b54 <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8002716:	f644 6320 	movw	r3, #20000	; 0x4e20
 800271a:	2201      	movs	r2, #1
 800271c:	2178      	movs	r1, #120	; 0x78
 800271e:	485b      	ldr	r0, [pc, #364]	; (800288c <SSD1306_Init+0x180>)
 8002720:	f002 ff68 	bl	80055f4 <HAL_I2C_IsDeviceReady>
 8002724:	4603      	mov	r3, r0
 8002726:	2b00      	cmp	r3, #0
 8002728:	d001      	beq.n	800272e <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 800272a:	2300      	movs	r3, #0
 800272c:	e0a9      	b.n	8002882 <SSD1306_Init+0x176>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 800272e:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8002732:	607b      	str	r3, [r7, #4]
	while(p>0)
 8002734:	e002      	b.n	800273c <SSD1306_Init+0x30>
		p--;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	3b01      	subs	r3, #1
 800273a:	607b      	str	r3, [r7, #4]
	while(p>0)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2b00      	cmp	r3, #0
 8002740:	d1f9      	bne.n	8002736 <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8002742:	22ae      	movs	r2, #174	; 0xae
 8002744:	2100      	movs	r1, #0
 8002746:	2078      	movs	r0, #120	; 0x78
 8002748:	f000 fa60 	bl	8002c0c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 800274c:	2220      	movs	r2, #32
 800274e:	2100      	movs	r1, #0
 8002750:	2078      	movs	r0, #120	; 0x78
 8002752:	f000 fa5b 	bl	8002c0c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8002756:	2210      	movs	r2, #16
 8002758:	2100      	movs	r1, #0
 800275a:	2078      	movs	r0, #120	; 0x78
 800275c:	f000 fa56 	bl	8002c0c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8002760:	22b0      	movs	r2, #176	; 0xb0
 8002762:	2100      	movs	r1, #0
 8002764:	2078      	movs	r0, #120	; 0x78
 8002766:	f000 fa51 	bl	8002c0c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 800276a:	22c8      	movs	r2, #200	; 0xc8
 800276c:	2100      	movs	r1, #0
 800276e:	2078      	movs	r0, #120	; 0x78
 8002770:	f000 fa4c 	bl	8002c0c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8002774:	2200      	movs	r2, #0
 8002776:	2100      	movs	r1, #0
 8002778:	2078      	movs	r0, #120	; 0x78
 800277a:	f000 fa47 	bl	8002c0c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 800277e:	2210      	movs	r2, #16
 8002780:	2100      	movs	r1, #0
 8002782:	2078      	movs	r0, #120	; 0x78
 8002784:	f000 fa42 	bl	8002c0c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8002788:	2240      	movs	r2, #64	; 0x40
 800278a:	2100      	movs	r1, #0
 800278c:	2078      	movs	r0, #120	; 0x78
 800278e:	f000 fa3d 	bl	8002c0c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8002792:	2281      	movs	r2, #129	; 0x81
 8002794:	2100      	movs	r1, #0
 8002796:	2078      	movs	r0, #120	; 0x78
 8002798:	f000 fa38 	bl	8002c0c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 800279c:	22ff      	movs	r2, #255	; 0xff
 800279e:	2100      	movs	r1, #0
 80027a0:	2078      	movs	r0, #120	; 0x78
 80027a2:	f000 fa33 	bl	8002c0c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 80027a6:	22a1      	movs	r2, #161	; 0xa1
 80027a8:	2100      	movs	r1, #0
 80027aa:	2078      	movs	r0, #120	; 0x78
 80027ac:	f000 fa2e 	bl	8002c0c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 80027b0:	22a6      	movs	r2, #166	; 0xa6
 80027b2:	2100      	movs	r1, #0
 80027b4:	2078      	movs	r0, #120	; 0x78
 80027b6:	f000 fa29 	bl	8002c0c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 80027ba:	22a8      	movs	r2, #168	; 0xa8
 80027bc:	2100      	movs	r1, #0
 80027be:	2078      	movs	r0, #120	; 0x78
 80027c0:	f000 fa24 	bl	8002c0c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 80027c4:	223f      	movs	r2, #63	; 0x3f
 80027c6:	2100      	movs	r1, #0
 80027c8:	2078      	movs	r0, #120	; 0x78
 80027ca:	f000 fa1f 	bl	8002c0c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80027ce:	22a4      	movs	r2, #164	; 0xa4
 80027d0:	2100      	movs	r1, #0
 80027d2:	2078      	movs	r0, #120	; 0x78
 80027d4:	f000 fa1a 	bl	8002c0c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 80027d8:	22d3      	movs	r2, #211	; 0xd3
 80027da:	2100      	movs	r1, #0
 80027dc:	2078      	movs	r0, #120	; 0x78
 80027de:	f000 fa15 	bl	8002c0c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 80027e2:	2200      	movs	r2, #0
 80027e4:	2100      	movs	r1, #0
 80027e6:	2078      	movs	r0, #120	; 0x78
 80027e8:	f000 fa10 	bl	8002c0c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 80027ec:	22d5      	movs	r2, #213	; 0xd5
 80027ee:	2100      	movs	r1, #0
 80027f0:	2078      	movs	r0, #120	; 0x78
 80027f2:	f000 fa0b 	bl	8002c0c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 80027f6:	22f0      	movs	r2, #240	; 0xf0
 80027f8:	2100      	movs	r1, #0
 80027fa:	2078      	movs	r0, #120	; 0x78
 80027fc:	f000 fa06 	bl	8002c0c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8002800:	22d9      	movs	r2, #217	; 0xd9
 8002802:	2100      	movs	r1, #0
 8002804:	2078      	movs	r0, #120	; 0x78
 8002806:	f000 fa01 	bl	8002c0c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 800280a:	2222      	movs	r2, #34	; 0x22
 800280c:	2100      	movs	r1, #0
 800280e:	2078      	movs	r0, #120	; 0x78
 8002810:	f000 f9fc 	bl	8002c0c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8002814:	22da      	movs	r2, #218	; 0xda
 8002816:	2100      	movs	r1, #0
 8002818:	2078      	movs	r0, #120	; 0x78
 800281a:	f000 f9f7 	bl	8002c0c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 800281e:	2212      	movs	r2, #18
 8002820:	2100      	movs	r1, #0
 8002822:	2078      	movs	r0, #120	; 0x78
 8002824:	f000 f9f2 	bl	8002c0c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8002828:	22db      	movs	r2, #219	; 0xdb
 800282a:	2100      	movs	r1, #0
 800282c:	2078      	movs	r0, #120	; 0x78
 800282e:	f000 f9ed 	bl	8002c0c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8002832:	2220      	movs	r2, #32
 8002834:	2100      	movs	r1, #0
 8002836:	2078      	movs	r0, #120	; 0x78
 8002838:	f000 f9e8 	bl	8002c0c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 800283c:	228d      	movs	r2, #141	; 0x8d
 800283e:	2100      	movs	r1, #0
 8002840:	2078      	movs	r0, #120	; 0x78
 8002842:	f000 f9e3 	bl	8002c0c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8002846:	2214      	movs	r2, #20
 8002848:	2100      	movs	r1, #0
 800284a:	2078      	movs	r0, #120	; 0x78
 800284c:	f000 f9de 	bl	8002c0c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8002850:	22af      	movs	r2, #175	; 0xaf
 8002852:	2100      	movs	r1, #0
 8002854:	2078      	movs	r0, #120	; 0x78
 8002856:	f000 f9d9 	bl	8002c0c <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 800285a:	222e      	movs	r2, #46	; 0x2e
 800285c:	2100      	movs	r1, #0
 800285e:	2078      	movs	r0, #120	; 0x78
 8002860:	f000 f9d4 	bl	8002c0c <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8002864:	2000      	movs	r0, #0
 8002866:	f000 f843 	bl	80028f0 <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 800286a:	f000 f813 	bl	8002894 <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 800286e:	4b08      	ldr	r3, [pc, #32]	; (8002890 <SSD1306_Init+0x184>)
 8002870:	2200      	movs	r2, #0
 8002872:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8002874:	4b06      	ldr	r3, [pc, #24]	; (8002890 <SSD1306_Init+0x184>)
 8002876:	2200      	movs	r2, #0
 8002878:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 800287a:	4b05      	ldr	r3, [pc, #20]	; (8002890 <SSD1306_Init+0x184>)
 800287c:	2201      	movs	r2, #1
 800287e:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 8002880:	2301      	movs	r3, #1
}
 8002882:	4618      	mov	r0, r3
 8002884:	3708      	adds	r7, #8
 8002886:	46bd      	mov	sp, r7
 8002888:	bd80      	pop	{r7, pc}
 800288a:	bf00      	nop
 800288c:	20001b54 	.word	0x20001b54
 8002890:	200011b0 	.word	0x200011b0

08002894 <SSD1306_UpdateScreen>:


void SSD1306_UpdateScreen(void) {
 8002894:	b580      	push	{r7, lr}
 8002896:	b082      	sub	sp, #8
 8002898:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 800289a:	2300      	movs	r3, #0
 800289c:	71fb      	strb	r3, [r7, #7]
 800289e:	e01d      	b.n	80028dc <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 80028a0:	79fb      	ldrb	r3, [r7, #7]
 80028a2:	3b50      	subs	r3, #80	; 0x50
 80028a4:	b2db      	uxtb	r3, r3
 80028a6:	461a      	mov	r2, r3
 80028a8:	2100      	movs	r1, #0
 80028aa:	2078      	movs	r0, #120	; 0x78
 80028ac:	f000 f9ae 	bl	8002c0c <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 80028b0:	2200      	movs	r2, #0
 80028b2:	2100      	movs	r1, #0
 80028b4:	2078      	movs	r0, #120	; 0x78
 80028b6:	f000 f9a9 	bl	8002c0c <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 80028ba:	2210      	movs	r2, #16
 80028bc:	2100      	movs	r1, #0
 80028be:	2078      	movs	r0, #120	; 0x78
 80028c0:	f000 f9a4 	bl	8002c0c <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 80028c4:	79fb      	ldrb	r3, [r7, #7]
 80028c6:	01db      	lsls	r3, r3, #7
 80028c8:	4a08      	ldr	r2, [pc, #32]	; (80028ec <SSD1306_UpdateScreen+0x58>)
 80028ca:	441a      	add	r2, r3
 80028cc:	2380      	movs	r3, #128	; 0x80
 80028ce:	2140      	movs	r1, #64	; 0x40
 80028d0:	2078      	movs	r0, #120	; 0x78
 80028d2:	f000 f953 	bl	8002b7c <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 80028d6:	79fb      	ldrb	r3, [r7, #7]
 80028d8:	3301      	adds	r3, #1
 80028da:	71fb      	strb	r3, [r7, #7]
 80028dc:	79fb      	ldrb	r3, [r7, #7]
 80028de:	2b07      	cmp	r3, #7
 80028e0:	d9de      	bls.n	80028a0 <SSD1306_UpdateScreen+0xc>
	}
}
 80028e2:	bf00      	nop
 80028e4:	bf00      	nop
 80028e6:	3708      	adds	r7, #8
 80028e8:	46bd      	mov	sp, r7
 80028ea:	bd80      	pop	{r7, pc}
 80028ec:	20000db0 	.word	0x20000db0

080028f0 <SSD1306_Fill>:
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}


void SSD1306_Fill(SSD1306_COLOR_t color) {
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b082      	sub	sp, #8
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	4603      	mov	r3, r0
 80028f8:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 80028fa:	79fb      	ldrb	r3, [r7, #7]
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d101      	bne.n	8002904 <SSD1306_Fill+0x14>
 8002900:	2300      	movs	r3, #0
 8002902:	e000      	b.n	8002906 <SSD1306_Fill+0x16>
 8002904:	23ff      	movs	r3, #255	; 0xff
 8002906:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800290a:	4619      	mov	r1, r3
 800290c:	4803      	ldr	r0, [pc, #12]	; (800291c <SSD1306_Fill+0x2c>)
 800290e:	f005 faad 	bl	8007e6c <memset>
}
 8002912:	bf00      	nop
 8002914:	3708      	adds	r7, #8
 8002916:	46bd      	mov	sp, r7
 8002918:	bd80      	pop	{r7, pc}
 800291a:	bf00      	nop
 800291c:	20000db0 	.word	0x20000db0

08002920 <SSD1306_DrawPixel>:


void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8002920:	b480      	push	{r7}
 8002922:	b083      	sub	sp, #12
 8002924:	af00      	add	r7, sp, #0
 8002926:	4603      	mov	r3, r0
 8002928:	80fb      	strh	r3, [r7, #6]
 800292a:	460b      	mov	r3, r1
 800292c:	80bb      	strh	r3, [r7, #4]
 800292e:	4613      	mov	r3, r2
 8002930:	70fb      	strb	r3, [r7, #3]
	if (
 8002932:	88fb      	ldrh	r3, [r7, #6]
 8002934:	2b7f      	cmp	r3, #127	; 0x7f
 8002936:	d848      	bhi.n	80029ca <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8002938:	88bb      	ldrh	r3, [r7, #4]
 800293a:	2b3f      	cmp	r3, #63	; 0x3f
 800293c:	d845      	bhi.n	80029ca <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 800293e:	4b25      	ldr	r3, [pc, #148]	; (80029d4 <SSD1306_DrawPixel+0xb4>)
 8002940:	791b      	ldrb	r3, [r3, #4]
 8002942:	2b00      	cmp	r3, #0
 8002944:	d006      	beq.n	8002954 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8002946:	78fb      	ldrb	r3, [r7, #3]
 8002948:	2b00      	cmp	r3, #0
 800294a:	bf0c      	ite	eq
 800294c:	2301      	moveq	r3, #1
 800294e:	2300      	movne	r3, #0
 8002950:	b2db      	uxtb	r3, r3
 8002952:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8002954:	78fb      	ldrb	r3, [r7, #3]
 8002956:	2b01      	cmp	r3, #1
 8002958:	d11a      	bne.n	8002990 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800295a:	88fa      	ldrh	r2, [r7, #6]
 800295c:	88bb      	ldrh	r3, [r7, #4]
 800295e:	08db      	lsrs	r3, r3, #3
 8002960:	b298      	uxth	r0, r3
 8002962:	4603      	mov	r3, r0
 8002964:	01db      	lsls	r3, r3, #7
 8002966:	4413      	add	r3, r2
 8002968:	4a1b      	ldr	r2, [pc, #108]	; (80029d8 <SSD1306_DrawPixel+0xb8>)
 800296a:	5cd3      	ldrb	r3, [r2, r3]
 800296c:	b25a      	sxtb	r2, r3
 800296e:	88bb      	ldrh	r3, [r7, #4]
 8002970:	f003 0307 	and.w	r3, r3, #7
 8002974:	2101      	movs	r1, #1
 8002976:	fa01 f303 	lsl.w	r3, r1, r3
 800297a:	b25b      	sxtb	r3, r3
 800297c:	4313      	orrs	r3, r2
 800297e:	b259      	sxtb	r1, r3
 8002980:	88fa      	ldrh	r2, [r7, #6]
 8002982:	4603      	mov	r3, r0
 8002984:	01db      	lsls	r3, r3, #7
 8002986:	4413      	add	r3, r2
 8002988:	b2c9      	uxtb	r1, r1
 800298a:	4a13      	ldr	r2, [pc, #76]	; (80029d8 <SSD1306_DrawPixel+0xb8>)
 800298c:	54d1      	strb	r1, [r2, r3]
 800298e:	e01d      	b.n	80029cc <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8002990:	88fa      	ldrh	r2, [r7, #6]
 8002992:	88bb      	ldrh	r3, [r7, #4]
 8002994:	08db      	lsrs	r3, r3, #3
 8002996:	b298      	uxth	r0, r3
 8002998:	4603      	mov	r3, r0
 800299a:	01db      	lsls	r3, r3, #7
 800299c:	4413      	add	r3, r2
 800299e:	4a0e      	ldr	r2, [pc, #56]	; (80029d8 <SSD1306_DrawPixel+0xb8>)
 80029a0:	5cd3      	ldrb	r3, [r2, r3]
 80029a2:	b25a      	sxtb	r2, r3
 80029a4:	88bb      	ldrh	r3, [r7, #4]
 80029a6:	f003 0307 	and.w	r3, r3, #7
 80029aa:	2101      	movs	r1, #1
 80029ac:	fa01 f303 	lsl.w	r3, r1, r3
 80029b0:	b25b      	sxtb	r3, r3
 80029b2:	43db      	mvns	r3, r3
 80029b4:	b25b      	sxtb	r3, r3
 80029b6:	4013      	ands	r3, r2
 80029b8:	b259      	sxtb	r1, r3
 80029ba:	88fa      	ldrh	r2, [r7, #6]
 80029bc:	4603      	mov	r3, r0
 80029be:	01db      	lsls	r3, r3, #7
 80029c0:	4413      	add	r3, r2
 80029c2:	b2c9      	uxtb	r1, r1
 80029c4:	4a04      	ldr	r2, [pc, #16]	; (80029d8 <SSD1306_DrawPixel+0xb8>)
 80029c6:	54d1      	strb	r1, [r2, r3]
 80029c8:	e000      	b.n	80029cc <SSD1306_DrawPixel+0xac>
		return;
 80029ca:	bf00      	nop
	}
}
 80029cc:	370c      	adds	r7, #12
 80029ce:	46bd      	mov	sp, r7
 80029d0:	bc80      	pop	{r7}
 80029d2:	4770      	bx	lr
 80029d4:	200011b0 	.word	0x200011b0
 80029d8:	20000db0 	.word	0x20000db0

080029dc <SSD1306_SetPosition>:


void SSD1306_SetPosition(uint16_t x, uint16_t y) {
 80029dc:	b480      	push	{r7}
 80029de:	b083      	sub	sp, #12
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	4603      	mov	r3, r0
 80029e4:	460a      	mov	r2, r1
 80029e6:	80fb      	strh	r3, [r7, #6]
 80029e8:	4613      	mov	r3, r2
 80029ea:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 80029ec:	4a05      	ldr	r2, [pc, #20]	; (8002a04 <SSD1306_SetPosition+0x28>)
 80029ee:	88fb      	ldrh	r3, [r7, #6]
 80029f0:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 80029f2:	4a04      	ldr	r2, [pc, #16]	; (8002a04 <SSD1306_SetPosition+0x28>)
 80029f4:	88bb      	ldrh	r3, [r7, #4]
 80029f6:	8053      	strh	r3, [r2, #2]
}
 80029f8:	bf00      	nop
 80029fa:	370c      	adds	r7, #12
 80029fc:	46bd      	mov	sp, r7
 80029fe:	bc80      	pop	{r7}
 8002a00:	4770      	bx	lr
 8002a02:	bf00      	nop
 8002a04:	200011b0 	.word	0x200011b0

08002a08 <SSD1306_PrintCharacter>:


char SSD1306_PrintCharacter(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b086      	sub	sp, #24
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	4603      	mov	r3, r0
 8002a10:	6039      	str	r1, [r7, #0]
 8002a12:	71fb      	strb	r3, [r7, #7]
 8002a14:	4613      	mov	r3, r2
 8002a16:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8002a18:	4b3a      	ldr	r3, [pc, #232]	; (8002b04 <SSD1306_PrintCharacter+0xfc>)
 8002a1a:	881b      	ldrh	r3, [r3, #0]
 8002a1c:	461a      	mov	r2, r3
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	781b      	ldrb	r3, [r3, #0]
 8002a22:	4413      	add	r3, r2
	if (
 8002a24:	2b7f      	cmp	r3, #127	; 0x7f
 8002a26:	dc07      	bgt.n	8002a38 <SSD1306_PrintCharacter+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8002a28:	4b36      	ldr	r3, [pc, #216]	; (8002b04 <SSD1306_PrintCharacter+0xfc>)
 8002a2a:	885b      	ldrh	r3, [r3, #2]
 8002a2c:	461a      	mov	r2, r3
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	785b      	ldrb	r3, [r3, #1]
 8002a32:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8002a34:	2b3f      	cmp	r3, #63	; 0x3f
 8002a36:	dd01      	ble.n	8002a3c <SSD1306_PrintCharacter+0x34>
	) {
		/* Error */
		return 0;
 8002a38:	2300      	movs	r3, #0
 8002a3a:	e05e      	b.n	8002afa <SSD1306_PrintCharacter+0xf2>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	617b      	str	r3, [r7, #20]
 8002a40:	e04b      	b.n	8002ada <SSD1306_PrintCharacter+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	685a      	ldr	r2, [r3, #4]
 8002a46:	79fb      	ldrb	r3, [r7, #7]
 8002a48:	3b20      	subs	r3, #32
 8002a4a:	6839      	ldr	r1, [r7, #0]
 8002a4c:	7849      	ldrb	r1, [r1, #1]
 8002a4e:	fb01 f303 	mul.w	r3, r1, r3
 8002a52:	4619      	mov	r1, r3
 8002a54:	697b      	ldr	r3, [r7, #20]
 8002a56:	440b      	add	r3, r1
 8002a58:	005b      	lsls	r3, r3, #1
 8002a5a:	4413      	add	r3, r2
 8002a5c:	881b      	ldrh	r3, [r3, #0]
 8002a5e:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8002a60:	2300      	movs	r3, #0
 8002a62:	613b      	str	r3, [r7, #16]
 8002a64:	e030      	b.n	8002ac8 <SSD1306_PrintCharacter+0xc0>
			if ((b << j) & 0x8000) {
 8002a66:	68fa      	ldr	r2, [r7, #12]
 8002a68:	693b      	ldr	r3, [r7, #16]
 8002a6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a6e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d010      	beq.n	8002a98 <SSD1306_PrintCharacter+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8002a76:	4b23      	ldr	r3, [pc, #140]	; (8002b04 <SSD1306_PrintCharacter+0xfc>)
 8002a78:	881a      	ldrh	r2, [r3, #0]
 8002a7a:	693b      	ldr	r3, [r7, #16]
 8002a7c:	b29b      	uxth	r3, r3
 8002a7e:	4413      	add	r3, r2
 8002a80:	b298      	uxth	r0, r3
 8002a82:	4b20      	ldr	r3, [pc, #128]	; (8002b04 <SSD1306_PrintCharacter+0xfc>)
 8002a84:	885a      	ldrh	r2, [r3, #2]
 8002a86:	697b      	ldr	r3, [r7, #20]
 8002a88:	b29b      	uxth	r3, r3
 8002a8a:	4413      	add	r3, r2
 8002a8c:	b29b      	uxth	r3, r3
 8002a8e:	79ba      	ldrb	r2, [r7, #6]
 8002a90:	4619      	mov	r1, r3
 8002a92:	f7ff ff45 	bl	8002920 <SSD1306_DrawPixel>
 8002a96:	e014      	b.n	8002ac2 <SSD1306_PrintCharacter+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8002a98:	4b1a      	ldr	r3, [pc, #104]	; (8002b04 <SSD1306_PrintCharacter+0xfc>)
 8002a9a:	881a      	ldrh	r2, [r3, #0]
 8002a9c:	693b      	ldr	r3, [r7, #16]
 8002a9e:	b29b      	uxth	r3, r3
 8002aa0:	4413      	add	r3, r2
 8002aa2:	b298      	uxth	r0, r3
 8002aa4:	4b17      	ldr	r3, [pc, #92]	; (8002b04 <SSD1306_PrintCharacter+0xfc>)
 8002aa6:	885a      	ldrh	r2, [r3, #2]
 8002aa8:	697b      	ldr	r3, [r7, #20]
 8002aaa:	b29b      	uxth	r3, r3
 8002aac:	4413      	add	r3, r2
 8002aae:	b299      	uxth	r1, r3
 8002ab0:	79bb      	ldrb	r3, [r7, #6]
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	bf0c      	ite	eq
 8002ab6:	2301      	moveq	r3, #1
 8002ab8:	2300      	movne	r3, #0
 8002aba:	b2db      	uxtb	r3, r3
 8002abc:	461a      	mov	r2, r3
 8002abe:	f7ff ff2f 	bl	8002920 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8002ac2:	693b      	ldr	r3, [r7, #16]
 8002ac4:	3301      	adds	r3, #1
 8002ac6:	613b      	str	r3, [r7, #16]
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	781b      	ldrb	r3, [r3, #0]
 8002acc:	461a      	mov	r2, r3
 8002ace:	693b      	ldr	r3, [r7, #16]
 8002ad0:	4293      	cmp	r3, r2
 8002ad2:	d3c8      	bcc.n	8002a66 <SSD1306_PrintCharacter+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8002ad4:	697b      	ldr	r3, [r7, #20]
 8002ad6:	3301      	adds	r3, #1
 8002ad8:	617b      	str	r3, [r7, #20]
 8002ada:	683b      	ldr	r3, [r7, #0]
 8002adc:	785b      	ldrb	r3, [r3, #1]
 8002ade:	461a      	mov	r2, r3
 8002ae0:	697b      	ldr	r3, [r7, #20]
 8002ae2:	4293      	cmp	r3, r2
 8002ae4:	d3ad      	bcc.n	8002a42 <SSD1306_PrintCharacter+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8002ae6:	4b07      	ldr	r3, [pc, #28]	; (8002b04 <SSD1306_PrintCharacter+0xfc>)
 8002ae8:	881a      	ldrh	r2, [r3, #0]
 8002aea:	683b      	ldr	r3, [r7, #0]
 8002aec:	781b      	ldrb	r3, [r3, #0]
 8002aee:	b29b      	uxth	r3, r3
 8002af0:	4413      	add	r3, r2
 8002af2:	b29a      	uxth	r2, r3
 8002af4:	4b03      	ldr	r3, [pc, #12]	; (8002b04 <SSD1306_PrintCharacter+0xfc>)
 8002af6:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 8002af8:	79fb      	ldrb	r3, [r7, #7]
}
 8002afa:	4618      	mov	r0, r3
 8002afc:	3718      	adds	r7, #24
 8002afe:	46bd      	mov	sp, r7
 8002b00:	bd80      	pop	{r7, pc}
 8002b02:	bf00      	nop
 8002b04:	200011b0 	.word	0x200011b0

08002b08 <SSD1306_PrintString>:


char SSD1306_PrintString(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b084      	sub	sp, #16
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	60f8      	str	r0, [r7, #12]
 8002b10:	60b9      	str	r1, [r7, #8]
 8002b12:	4613      	mov	r3, r2
 8002b14:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 8002b16:	e012      	b.n	8002b3e <SSD1306_PrintString+0x36>
		/* Write character by character */
		if (SSD1306_PrintCharacter(*str, Font, color) != *str) {
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	781b      	ldrb	r3, [r3, #0]
 8002b1c:	79fa      	ldrb	r2, [r7, #7]
 8002b1e:	68b9      	ldr	r1, [r7, #8]
 8002b20:	4618      	mov	r0, r3
 8002b22:	f7ff ff71 	bl	8002a08 <SSD1306_PrintCharacter>
 8002b26:	4603      	mov	r3, r0
 8002b28:	461a      	mov	r2, r3
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	781b      	ldrb	r3, [r3, #0]
 8002b2e:	429a      	cmp	r2, r3
 8002b30:	d002      	beq.n	8002b38 <SSD1306_PrintString+0x30>
			/* Return error */
			return *str;
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	781b      	ldrb	r3, [r3, #0]
 8002b36:	e008      	b.n	8002b4a <SSD1306_PrintString+0x42>
		}
		
		/* Increase string pointer */
		str++;
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	3301      	adds	r3, #1
 8002b3c:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	781b      	ldrb	r3, [r3, #0]
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d1e8      	bne.n	8002b18 <SSD1306_PrintString+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	781b      	ldrb	r3, [r3, #0]
}
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	3710      	adds	r7, #16
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	bd80      	pop	{r7, pc}
	...

08002b54 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8002b54:	b480      	push	{r7}
 8002b56:	b083      	sub	sp, #12
 8002b58:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8002b5a:	4b07      	ldr	r3, [pc, #28]	; (8002b78 <ssd1306_I2C_Init+0x24>)
 8002b5c:	607b      	str	r3, [r7, #4]
	while(p>0)
 8002b5e:	e002      	b.n	8002b66 <ssd1306_I2C_Init+0x12>
		p--;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	3b01      	subs	r3, #1
 8002b64:	607b      	str	r3, [r7, #4]
	while(p>0)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d1f9      	bne.n	8002b60 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8002b6c:	bf00      	nop
 8002b6e:	bf00      	nop
 8002b70:	370c      	adds	r7, #12
 8002b72:	46bd      	mov	sp, r7
 8002b74:	bc80      	pop	{r7}
 8002b76:	4770      	bx	lr
 8002b78:	0003d090 	.word	0x0003d090

08002b7c <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8002b7c:	b590      	push	{r4, r7, lr}
 8002b7e:	b0c7      	sub	sp, #284	; 0x11c
 8002b80:	af02      	add	r7, sp, #8
 8002b82:	4604      	mov	r4, r0
 8002b84:	4608      	mov	r0, r1
 8002b86:	4639      	mov	r1, r7
 8002b88:	600a      	str	r2, [r1, #0]
 8002b8a:	4619      	mov	r1, r3
 8002b8c:	1dfb      	adds	r3, r7, #7
 8002b8e:	4622      	mov	r2, r4
 8002b90:	701a      	strb	r2, [r3, #0]
 8002b92:	1dbb      	adds	r3, r7, #6
 8002b94:	4602      	mov	r2, r0
 8002b96:	701a      	strb	r2, [r3, #0]
 8002b98:	1d3b      	adds	r3, r7, #4
 8002b9a:	460a      	mov	r2, r1
 8002b9c:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8002b9e:	f107 030c 	add.w	r3, r7, #12
 8002ba2:	1dba      	adds	r2, r7, #6
 8002ba4:	7812      	ldrb	r2, [r2, #0]
 8002ba6:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8002ba8:	2300      	movs	r3, #0
 8002baa:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8002bae:	e010      	b.n	8002bd2 <ssd1306_I2C_WriteMulti+0x56>
dt[i+1] = data[i];
 8002bb0:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8002bb4:	463a      	mov	r2, r7
 8002bb6:	6812      	ldr	r2, [r2, #0]
 8002bb8:	441a      	add	r2, r3
 8002bba:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8002bbe:	3301      	adds	r3, #1
 8002bc0:	7811      	ldrb	r1, [r2, #0]
 8002bc2:	f107 020c 	add.w	r2, r7, #12
 8002bc6:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8002bc8:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8002bcc:	3301      	adds	r3, #1
 8002bce:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8002bd2:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8002bd6:	b29b      	uxth	r3, r3
 8002bd8:	1d3a      	adds	r2, r7, #4
 8002bda:	8812      	ldrh	r2, [r2, #0]
 8002bdc:	429a      	cmp	r2, r3
 8002bde:	d8e7      	bhi.n	8002bb0 <ssd1306_I2C_WriteMulti+0x34>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 8002be0:	1dfb      	adds	r3, r7, #7
 8002be2:	781b      	ldrb	r3, [r3, #0]
 8002be4:	b299      	uxth	r1, r3
 8002be6:	1d3b      	adds	r3, r7, #4
 8002be8:	881b      	ldrh	r3, [r3, #0]
 8002bea:	3301      	adds	r3, #1
 8002bec:	b29b      	uxth	r3, r3
 8002bee:	f107 020c 	add.w	r2, r7, #12
 8002bf2:	200a      	movs	r0, #10
 8002bf4:	9000      	str	r0, [sp, #0]
 8002bf6:	4804      	ldr	r0, [pc, #16]	; (8002c08 <ssd1306_I2C_WriteMulti+0x8c>)
 8002bf8:	f002 f89c 	bl	8004d34 <HAL_I2C_Master_Transmit>
}
 8002bfc:	bf00      	nop
 8002bfe:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8002c02:	46bd      	mov	sp, r7
 8002c04:	bd90      	pop	{r4, r7, pc}
 8002c06:	bf00      	nop
 8002c08:	20001b54 	.word	0x20001b54

08002c0c <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b086      	sub	sp, #24
 8002c10:	af02      	add	r7, sp, #8
 8002c12:	4603      	mov	r3, r0
 8002c14:	71fb      	strb	r3, [r7, #7]
 8002c16:	460b      	mov	r3, r1
 8002c18:	71bb      	strb	r3, [r7, #6]
 8002c1a:	4613      	mov	r3, r2
 8002c1c:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8002c1e:	79bb      	ldrb	r3, [r7, #6]
 8002c20:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8002c22:	797b      	ldrb	r3, [r7, #5]
 8002c24:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 8002c26:	79fb      	ldrb	r3, [r7, #7]
 8002c28:	b299      	uxth	r1, r3
 8002c2a:	f107 020c 	add.w	r2, r7, #12
 8002c2e:	230a      	movs	r3, #10
 8002c30:	9300      	str	r3, [sp, #0]
 8002c32:	2302      	movs	r3, #2
 8002c34:	4803      	ldr	r0, [pc, #12]	; (8002c44 <ssd1306_I2C_Write+0x38>)
 8002c36:	f002 f87d 	bl	8004d34 <HAL_I2C_Master_Transmit>
}
 8002c3a:	bf00      	nop
 8002c3c:	3710      	adds	r7, #16
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	bd80      	pop	{r7, pc}
 8002c42:	bf00      	nop
 8002c44:	20001b54 	.word	0x20001b54

08002c48 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002c48:	b590      	push	{r4, r7, lr}
 8002c4a:	b085      	sub	sp, #20
 8002c4c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002c4e:	f000 fec3 	bl	80039d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002c52:	f000 f8b9 	bl	8002dc8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002c56:	f000 fa73 	bl	8003140 <MX_GPIO_Init>
  MX_I2C1_Init();
 8002c5a:	f000 f94f 	bl	8002efc <MX_I2C1_Init>
  MX_TIM2_Init();
 8002c5e:	f000 f9a9 	bl	8002fb4 <MX_TIM2_Init>
  MX_ADC1_Init();
 8002c62:	f000 f90d 	bl	8002e80 <MX_ADC1_Init>
  MX_USART2_UART_Init();
 8002c66:	f000 fa41 	bl	80030ec <MX_USART2_UART_Init>
  MX_I2C2_Init();
 8002c6a:	f000 f975 	bl	8002f58 <MX_I2C2_Init>
  MX_TIM3_Init();
 8002c6e:	f000 f9ef 	bl	8003050 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  // Boot up sequence
  _BootUpSequence();
 8002c72:	f000 faeb 	bl	800324c <_BootUpSequence>

  SSD1306_Init();
 8002c76:	f7ff fd49 	bl	800270c <SSD1306_Init>
  HAL_TIM_Base_Start_IT(&htim2);
 8002c7a:	4846      	ldr	r0, [pc, #280]	; (8002d94 <main+0x14c>)
 8002c7c:	f003 ffa8 	bl	8006bd0 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim3);
 8002c80:	4845      	ldr	r0, [pc, #276]	; (8002d98 <main+0x150>)
 8002c82:	f003 ffa5 	bl	8006bd0 <HAL_TIM_Base_Start_IT>
  Max30102_Init(&hi2c2);
 8002c86:	4845      	ldr	r0, [pc, #276]	; (8002d9c <main+0x154>)
 8002c88:	f7fe fe4a 	bl	8001920 <Max30102_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	 Max30102_Task();
 8002c8c:	f7fe fd94 	bl	80017b8 <Max30102_Task>

	 if(_timer_3_interrupt)
 8002c90:	4b43      	ldr	r3, [pc, #268]	; (8002da0 <main+0x158>)
 8002c92:	781b      	ldrb	r3, [r3, #0]
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d01d      	beq.n	8002cd4 <main+0x8c>
	 {
		 if(blueToothInput == SPO2ORHR_HR){
 8002c98:	4b42      	ldr	r3, [pc, #264]	; (8002da4 <main+0x15c>)
 8002c9a:	781b      	ldrb	r3, [r3, #0]
 8002c9c:	2b68      	cmp	r3, #104	; 0x68
 8002c9e:	d116      	bne.n	8002cce <main+0x86>
			 _heartRate = (uint8_t)Max30102_GetHeartRate();
 8002ca0:	f7fe fd76 	bl	8001790 <Max30102_GetHeartRate>
 8002ca4:	4603      	mov	r3, r0
 8002ca6:	b2da      	uxtb	r2, r3
 8002ca8:	4b3f      	ldr	r3, [pc, #252]	; (8002da8 <main+0x160>)
 8002caa:	701a      	strb	r2, [r3, #0]

			 // Sending the heart rate value with bluetooth
			 _BluetoothSend(_heartRate, SPO2ORHR_HR);
 8002cac:	4b3e      	ldr	r3, [pc, #248]	; (8002da8 <main+0x160>)
 8002cae:	781b      	ldrb	r3, [r3, #0]
 8002cb0:	2168      	movs	r1, #104	; 0x68
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	f000 fb7e 	bl	80033b4 <_BluetoothSend>

			 // Showing heart rate on the display
			 _Show_HeartRate_SPO2(_heartRate, SPO2ORHR_HR);
 8002cb8:	4b3b      	ldr	r3, [pc, #236]	; (8002da8 <main+0x160>)
 8002cba:	781b      	ldrb	r3, [r3, #0]
 8002cbc:	2168      	movs	r1, #104	; 0x68
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	f000 faf2 	bl	80032a8 <_Show_HeartRate_SPO2>


			 HAL_GPIO_TogglePin(User_Led_GPIO_Port, User_Led_Pin);
 8002cc4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002cc8:	4838      	ldr	r0, [pc, #224]	; (8002dac <main+0x164>)
 8002cca:	f001 febd 	bl	8004a48 <HAL_GPIO_TogglePin>
		 }

		 _timer_3_interrupt = 0;
 8002cce:	4b34      	ldr	r3, [pc, #208]	; (8002da0 <main+0x158>)
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	701a      	strb	r2, [r3, #0]
	 }

	 if(_timer_2_interrupt)
 8002cd4:	4b36      	ldr	r3, [pc, #216]	; (8002db0 <main+0x168>)
 8002cd6:	781b      	ldrb	r3, [r3, #0]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d0d7      	beq.n	8002c8c <main+0x44>
	  /*
	   * Battery voltage exhibition section
	   */
	  // Preparing to convert the float value into string to be shown on display
	  char voltageText[10];
	  float BAT_Voltage = _BatteryVoltage();
 8002cdc:	f000 fb28 	bl	8003330 <_BatteryVoltage>
 8002ce0:	60f8      	str	r0, [r7, #12]
	  _BAT_Voltage_AVG += BAT_Voltage;
 8002ce2:	4b34      	ldr	r3, [pc, #208]	; (8002db4 <main+0x16c>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	68f9      	ldr	r1, [r7, #12]
 8002ce8:	4618      	mov	r0, r3
 8002cea:	f7fd ff23 	bl	8000b34 <__addsf3>
 8002cee:	4603      	mov	r3, r0
 8002cf0:	461a      	mov	r2, r3
 8002cf2:	4b30      	ldr	r3, [pc, #192]	; (8002db4 <main+0x16c>)
 8002cf4:	601a      	str	r2, [r3, #0]
	  _counter++;
 8002cf6:	4b30      	ldr	r3, [pc, #192]	; (8002db8 <main+0x170>)
 8002cf8:	781b      	ldrb	r3, [r3, #0]
 8002cfa:	3301      	adds	r3, #1
 8002cfc:	b2da      	uxtb	r2, r3
 8002cfe:	4b2e      	ldr	r3, [pc, #184]	; (8002db8 <main+0x170>)
 8002d00:	701a      	strb	r2, [r3, #0]

	  if(_counter == NUM_BAT_ADC_READ_AVG)
 8002d02:	4b2d      	ldr	r3, [pc, #180]	; (8002db8 <main+0x170>)
 8002d04:	781b      	ldrb	r3, [r3, #0]
 8002d06:	2b32      	cmp	r3, #50	; 0x32
 8002d08:	d129      	bne.n	8002d5e <main+0x116>
	  {
		  _BAT_Voltage_AVG /= _counter;
 8002d0a:	4b2a      	ldr	r3, [pc, #168]	; (8002db4 <main+0x16c>)
 8002d0c:	681c      	ldr	r4, [r3, #0]
 8002d0e:	4b2a      	ldr	r3, [pc, #168]	; (8002db8 <main+0x170>)
 8002d10:	781b      	ldrb	r3, [r3, #0]
 8002d12:	4618      	mov	r0, r3
 8002d14:	f7fd ffc2 	bl	8000c9c <__aeabi_i2f>
 8002d18:	4603      	mov	r3, r0
 8002d1a:	4619      	mov	r1, r3
 8002d1c:	4620      	mov	r0, r4
 8002d1e:	f7fe f8c5 	bl	8000eac <__aeabi_fdiv>
 8002d22:	4603      	mov	r3, r0
 8002d24:	461a      	mov	r2, r3
 8002d26:	4b23      	ldr	r3, [pc, #140]	; (8002db4 <main+0x16c>)
 8002d28:	601a      	str	r2, [r3, #0]
		  sprintf(voltageText, "Bat_Vol: %.2f", _BAT_Voltage_AVG);
 8002d2a:	4b22      	ldr	r3, [pc, #136]	; (8002db4 <main+0x16c>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	4618      	mov	r0, r3
 8002d30:	f7fd fb7a 	bl	8000428 <__aeabi_f2d>
 8002d34:	4602      	mov	r2, r0
 8002d36:	460b      	mov	r3, r1
 8002d38:	4638      	mov	r0, r7
 8002d3a:	4920      	ldr	r1, [pc, #128]	; (8002dbc <main+0x174>)
 8002d3c:	f005 fcfe 	bl	800873c <siprintf>
		  // Printing the battery voltage value on display
		  SSD1306_SetPosition(0, 0);
 8002d40:	2100      	movs	r1, #0
 8002d42:	2000      	movs	r0, #0
 8002d44:	f7ff fe4a 	bl	80029dc <SSD1306_SetPosition>
		  SSD1306_PrintString(voltageText, &Font_7x10, SSD1306_COLOR_WHITE);
 8002d48:	463b      	mov	r3, r7
 8002d4a:	2201      	movs	r2, #1
 8002d4c:	491c      	ldr	r1, [pc, #112]	; (8002dc0 <main+0x178>)
 8002d4e:	4618      	mov	r0, r3
 8002d50:	f7ff feda 	bl	8002b08 <SSD1306_PrintString>
		  SSD1306_UpdateScreen();
 8002d54:	f7ff fd9e 	bl	8002894 <SSD1306_UpdateScreen>
		  _counter = 0;
 8002d58:	4b17      	ldr	r3, [pc, #92]	; (8002db8 <main+0x170>)
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	701a      	strb	r2, [r3, #0]
	  }

	  if(blueToothInput == SPO2ORHR_SPO2){
 8002d5e:	4b11      	ldr	r3, [pc, #68]	; (8002da4 <main+0x15c>)
 8002d60:	781b      	ldrb	r3, [r3, #0]
 8002d62:	2b73      	cmp	r3, #115	; 0x73
 8002d64:	d111      	bne.n	8002d8a <main+0x142>
		 // TODO read and normalize the SPO2 value

		 _SPO2 = (uint8_t) Max30102_GetSpO2Value();
 8002d66:	f7fe fd1d 	bl	80017a4 <Max30102_GetSpO2Value>
 8002d6a:	4603      	mov	r3, r0
 8002d6c:	b2da      	uxtb	r2, r3
 8002d6e:	4b15      	ldr	r3, [pc, #84]	; (8002dc4 <main+0x17c>)
 8002d70:	701a      	strb	r2, [r3, #0]

		 // Sending the heart rate value with bluetooth
		 _BluetoothSend(_SPO2, SPO2ORHR_SPO2);
 8002d72:	4b14      	ldr	r3, [pc, #80]	; (8002dc4 <main+0x17c>)
 8002d74:	781b      	ldrb	r3, [r3, #0]
 8002d76:	2173      	movs	r1, #115	; 0x73
 8002d78:	4618      	mov	r0, r3
 8002d7a:	f000 fb1b 	bl	80033b4 <_BluetoothSend>

		 // Showing heart rate on the display
		 _Show_HeartRate_SPO2(_SPO2, SPO2ORHR_SPO2);
 8002d7e:	4b11      	ldr	r3, [pc, #68]	; (8002dc4 <main+0x17c>)
 8002d80:	781b      	ldrb	r3, [r3, #0]
 8002d82:	2173      	movs	r1, #115	; 0x73
 8002d84:	4618      	mov	r0, r3
 8002d86:	f000 fa8f 	bl	80032a8 <_Show_HeartRate_SPO2>
	  }


	  //_BluetoothSend(Max30102_GetSpO2Value(), SPO2ORHR_SPO2);

	  _timer_2_interrupt = 0;
 8002d8a:	4b09      	ldr	r3, [pc, #36]	; (8002db0 <main+0x168>)
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	701a      	strb	r2, [r3, #0]
	 Max30102_Task();
 8002d90:	e77c      	b.n	8002c8c <main+0x44>
 8002d92:	bf00      	nop
 8002d94:	20001c74 	.word	0x20001c74
 8002d98:	20001bfc 	.word	0x20001bfc
 8002d9c:	20001ba8 	.word	0x20001ba8
 8002da0:	200011bc 	.word	0x200011bc
 8002da4:	20001b50 	.word	0x20001b50
 8002da8:	200011be 	.word	0x200011be
 8002dac:	40011000 	.word	0x40011000
 8002db0:	200011bd 	.word	0x200011bd
 8002db4:	200011b8 	.word	0x200011b8
 8002db8:	200011b6 	.word	0x200011b6
 8002dbc:	0800abc8 	.word	0x0800abc8
 8002dc0:	20000000 	.word	0x20000000
 8002dc4:	200011bf 	.word	0x200011bf

08002dc8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b094      	sub	sp, #80	; 0x50
 8002dcc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002dce:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002dd2:	2228      	movs	r2, #40	; 0x28
 8002dd4:	2100      	movs	r1, #0
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	f005 f848 	bl	8007e6c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002ddc:	f107 0314 	add.w	r3, r7, #20
 8002de0:	2200      	movs	r2, #0
 8002de2:	601a      	str	r2, [r3, #0]
 8002de4:	605a      	str	r2, [r3, #4]
 8002de6:	609a      	str	r2, [r3, #8]
 8002de8:	60da      	str	r2, [r3, #12]
 8002dea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002dec:	1d3b      	adds	r3, r7, #4
 8002dee:	2200      	movs	r2, #0
 8002df0:	601a      	str	r2, [r3, #0]
 8002df2:	605a      	str	r2, [r3, #4]
 8002df4:	609a      	str	r2, [r3, #8]
 8002df6:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002df8:	2301      	movs	r3, #1
 8002dfa:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002dfc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002e00:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8002e02:	2300      	movs	r3, #0
 8002e04:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002e06:	2301      	movs	r3, #1
 8002e08:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002e0a:	2302      	movs	r3, #2
 8002e0c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002e0e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002e12:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002e14:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8002e18:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002e1a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002e1e:	4618      	mov	r0, r3
 8002e20:	f003 f8f2 	bl	8006008 <HAL_RCC_OscConfig>
 8002e24:	4603      	mov	r3, r0
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d001      	beq.n	8002e2e <SystemClock_Config+0x66>
  {
    Error_Handler();
 8002e2a:	f000 fb29 	bl	8003480 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002e2e:	230f      	movs	r3, #15
 8002e30:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002e32:	2302      	movs	r3, #2
 8002e34:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002e36:	2300      	movs	r3, #0
 8002e38:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002e3a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002e3e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002e40:	2300      	movs	r3, #0
 8002e42:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002e44:	f107 0314 	add.w	r3, r7, #20
 8002e48:	2102      	movs	r1, #2
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	f003 fb5c 	bl	8006508 <HAL_RCC_ClockConfig>
 8002e50:	4603      	mov	r3, r0
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d001      	beq.n	8002e5a <SystemClock_Config+0x92>
  {
    Error_Handler();
 8002e56:	f000 fb13 	bl	8003480 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8002e5a:	2302      	movs	r3, #2
 8002e5c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8002e5e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002e62:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002e64:	1d3b      	adds	r3, r7, #4
 8002e66:	4618      	mov	r0, r3
 8002e68:	f003 fce8 	bl	800683c <HAL_RCCEx_PeriphCLKConfig>
 8002e6c:	4603      	mov	r3, r0
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d001      	beq.n	8002e76 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8002e72:	f000 fb05 	bl	8003480 <Error_Handler>
  }
}
 8002e76:	bf00      	nop
 8002e78:	3750      	adds	r7, #80	; 0x50
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	bd80      	pop	{r7, pc}
	...

08002e80 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b084      	sub	sp, #16
 8002e84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002e86:	1d3b      	adds	r3, r7, #4
 8002e88:	2200      	movs	r2, #0
 8002e8a:	601a      	str	r2, [r3, #0]
 8002e8c:	605a      	str	r2, [r3, #4]
 8002e8e:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8002e90:	4b18      	ldr	r3, [pc, #96]	; (8002ef4 <MX_ADC1_Init+0x74>)
 8002e92:	4a19      	ldr	r2, [pc, #100]	; (8002ef8 <MX_ADC1_Init+0x78>)
 8002e94:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002e96:	4b17      	ldr	r3, [pc, #92]	; (8002ef4 <MX_ADC1_Init+0x74>)
 8002e98:	2200      	movs	r2, #0
 8002e9a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002e9c:	4b15      	ldr	r3, [pc, #84]	; (8002ef4 <MX_ADC1_Init+0x74>)
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002ea2:	4b14      	ldr	r3, [pc, #80]	; (8002ef4 <MX_ADC1_Init+0x74>)
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002ea8:	4b12      	ldr	r3, [pc, #72]	; (8002ef4 <MX_ADC1_Init+0x74>)
 8002eaa:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8002eae:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002eb0:	4b10      	ldr	r3, [pc, #64]	; (8002ef4 <MX_ADC1_Init+0x74>)
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8002eb6:	4b0f      	ldr	r3, [pc, #60]	; (8002ef4 <MX_ADC1_Init+0x74>)
 8002eb8:	2201      	movs	r2, #1
 8002eba:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002ebc:	480d      	ldr	r0, [pc, #52]	; (8002ef4 <MX_ADC1_Init+0x74>)
 8002ebe:	f000 fe11 	bl	8003ae4 <HAL_ADC_Init>
 8002ec2:	4603      	mov	r3, r0
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d001      	beq.n	8002ecc <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8002ec8:	f000 fada 	bl	8003480 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8002ecc:	2300      	movs	r3, #0
 8002ece:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002ed0:	2301      	movs	r3, #1
 8002ed2:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_55CYCLES_5;
 8002ed4:	2305      	movs	r3, #5
 8002ed6:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002ed8:	1d3b      	adds	r3, r7, #4
 8002eda:	4619      	mov	r1, r3
 8002edc:	4805      	ldr	r0, [pc, #20]	; (8002ef4 <MX_ADC1_Init+0x74>)
 8002ede:	f001 f8c5 	bl	800406c <HAL_ADC_ConfigChannel>
 8002ee2:	4603      	mov	r3, r0
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d001      	beq.n	8002eec <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8002ee8:	f000 faca 	bl	8003480 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002eec:	bf00      	nop
 8002eee:	3710      	adds	r7, #16
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	bd80      	pop	{r7, pc}
 8002ef4:	20001c44 	.word	0x20001c44
 8002ef8:	40012400 	.word	0x40012400

08002efc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002f00:	4b12      	ldr	r3, [pc, #72]	; (8002f4c <MX_I2C1_Init+0x50>)
 8002f02:	4a13      	ldr	r2, [pc, #76]	; (8002f50 <MX_I2C1_Init+0x54>)
 8002f04:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8002f06:	4b11      	ldr	r3, [pc, #68]	; (8002f4c <MX_I2C1_Init+0x50>)
 8002f08:	4a12      	ldr	r2, [pc, #72]	; (8002f54 <MX_I2C1_Init+0x58>)
 8002f0a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002f0c:	4b0f      	ldr	r3, [pc, #60]	; (8002f4c <MX_I2C1_Init+0x50>)
 8002f0e:	2200      	movs	r2, #0
 8002f10:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002f12:	4b0e      	ldr	r3, [pc, #56]	; (8002f4c <MX_I2C1_Init+0x50>)
 8002f14:	2200      	movs	r2, #0
 8002f16:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002f18:	4b0c      	ldr	r3, [pc, #48]	; (8002f4c <MX_I2C1_Init+0x50>)
 8002f1a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002f1e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002f20:	4b0a      	ldr	r3, [pc, #40]	; (8002f4c <MX_I2C1_Init+0x50>)
 8002f22:	2200      	movs	r2, #0
 8002f24:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002f26:	4b09      	ldr	r3, [pc, #36]	; (8002f4c <MX_I2C1_Init+0x50>)
 8002f28:	2200      	movs	r2, #0
 8002f2a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002f2c:	4b07      	ldr	r3, [pc, #28]	; (8002f4c <MX_I2C1_Init+0x50>)
 8002f2e:	2200      	movs	r2, #0
 8002f30:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002f32:	4b06      	ldr	r3, [pc, #24]	; (8002f4c <MX_I2C1_Init+0x50>)
 8002f34:	2200      	movs	r2, #0
 8002f36:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002f38:	4804      	ldr	r0, [pc, #16]	; (8002f4c <MX_I2C1_Init+0x50>)
 8002f3a:	f001 fdb7 	bl	8004aac <HAL_I2C_Init>
 8002f3e:	4603      	mov	r3, r0
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d001      	beq.n	8002f48 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002f44:	f000 fa9c 	bl	8003480 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002f48:	bf00      	nop
 8002f4a:	bd80      	pop	{r7, pc}
 8002f4c:	20001b54 	.word	0x20001b54
 8002f50:	40005400 	.word	0x40005400
 8002f54:	00061a80 	.word	0x00061a80

08002f58 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8002f5c:	4b12      	ldr	r3, [pc, #72]	; (8002fa8 <MX_I2C2_Init+0x50>)
 8002f5e:	4a13      	ldr	r2, [pc, #76]	; (8002fac <MX_I2C2_Init+0x54>)
 8002f60:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 8002f62:	4b11      	ldr	r3, [pc, #68]	; (8002fa8 <MX_I2C2_Init+0x50>)
 8002f64:	4a12      	ldr	r2, [pc, #72]	; (8002fb0 <MX_I2C2_Init+0x58>)
 8002f66:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002f68:	4b0f      	ldr	r3, [pc, #60]	; (8002fa8 <MX_I2C2_Init+0x50>)
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8002f6e:	4b0e      	ldr	r3, [pc, #56]	; (8002fa8 <MX_I2C2_Init+0x50>)
 8002f70:	2200      	movs	r2, #0
 8002f72:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002f74:	4b0c      	ldr	r3, [pc, #48]	; (8002fa8 <MX_I2C2_Init+0x50>)
 8002f76:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002f7a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002f7c:	4b0a      	ldr	r3, [pc, #40]	; (8002fa8 <MX_I2C2_Init+0x50>)
 8002f7e:	2200      	movs	r2, #0
 8002f80:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8002f82:	4b09      	ldr	r3, [pc, #36]	; (8002fa8 <MX_I2C2_Init+0x50>)
 8002f84:	2200      	movs	r2, #0
 8002f86:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002f88:	4b07      	ldr	r3, [pc, #28]	; (8002fa8 <MX_I2C2_Init+0x50>)
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002f8e:	4b06      	ldr	r3, [pc, #24]	; (8002fa8 <MX_I2C2_Init+0x50>)
 8002f90:	2200      	movs	r2, #0
 8002f92:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8002f94:	4804      	ldr	r0, [pc, #16]	; (8002fa8 <MX_I2C2_Init+0x50>)
 8002f96:	f001 fd89 	bl	8004aac <HAL_I2C_Init>
 8002f9a:	4603      	mov	r3, r0
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d001      	beq.n	8002fa4 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8002fa0:	f000 fa6e 	bl	8003480 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8002fa4:	bf00      	nop
 8002fa6:	bd80      	pop	{r7, pc}
 8002fa8:	20001ba8 	.word	0x20001ba8
 8002fac:	40005800 	.word	0x40005800
 8002fb0:	00061a80 	.word	0x00061a80

08002fb4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b086      	sub	sp, #24
 8002fb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002fba:	f107 0308 	add.w	r3, r7, #8
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	601a      	str	r2, [r3, #0]
 8002fc2:	605a      	str	r2, [r3, #4]
 8002fc4:	609a      	str	r2, [r3, #8]
 8002fc6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002fc8:	463b      	mov	r3, r7
 8002fca:	2200      	movs	r2, #0
 8002fcc:	601a      	str	r2, [r3, #0]
 8002fce:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002fd0:	4b1e      	ldr	r3, [pc, #120]	; (800304c <MX_TIM2_Init+0x98>)
 8002fd2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002fd6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1000-1;
 8002fd8:	4b1c      	ldr	r3, [pc, #112]	; (800304c <MX_TIM2_Init+0x98>)
 8002fda:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002fde:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002fe0:	4b1a      	ldr	r3, [pc, #104]	; (800304c <MX_TIM2_Init+0x98>)
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2400;
 8002fe6:	4b19      	ldr	r3, [pc, #100]	; (800304c <MX_TIM2_Init+0x98>)
 8002fe8:	f44f 6216 	mov.w	r2, #2400	; 0x960
 8002fec:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002fee:	4b17      	ldr	r3, [pc, #92]	; (800304c <MX_TIM2_Init+0x98>)
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002ff4:	4b15      	ldr	r3, [pc, #84]	; (800304c <MX_TIM2_Init+0x98>)
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002ffa:	4814      	ldr	r0, [pc, #80]	; (800304c <MX_TIM2_Init+0x98>)
 8002ffc:	f003 fd98 	bl	8006b30 <HAL_TIM_Base_Init>
 8003000:	4603      	mov	r3, r0
 8003002:	2b00      	cmp	r3, #0
 8003004:	d001      	beq.n	800300a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8003006:	f000 fa3b 	bl	8003480 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800300a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800300e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003010:	f107 0308 	add.w	r3, r7, #8
 8003014:	4619      	mov	r1, r3
 8003016:	480d      	ldr	r0, [pc, #52]	; (800304c <MX_TIM2_Init+0x98>)
 8003018:	f003 ff34 	bl	8006e84 <HAL_TIM_ConfigClockSource>
 800301c:	4603      	mov	r3, r0
 800301e:	2b00      	cmp	r3, #0
 8003020:	d001      	beq.n	8003026 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8003022:	f000 fa2d 	bl	8003480 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003026:	2300      	movs	r3, #0
 8003028:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800302a:	2300      	movs	r3, #0
 800302c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800302e:	463b      	mov	r3, r7
 8003030:	4619      	mov	r1, r3
 8003032:	4806      	ldr	r0, [pc, #24]	; (800304c <MX_TIM2_Init+0x98>)
 8003034:	f004 f906 	bl	8007244 <HAL_TIMEx_MasterConfigSynchronization>
 8003038:	4603      	mov	r3, r0
 800303a:	2b00      	cmp	r3, #0
 800303c:	d001      	beq.n	8003042 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800303e:	f000 fa1f 	bl	8003480 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8003042:	bf00      	nop
 8003044:	3718      	adds	r7, #24
 8003046:	46bd      	mov	sp, r7
 8003048:	bd80      	pop	{r7, pc}
 800304a:	bf00      	nop
 800304c:	20001c74 	.word	0x20001c74

08003050 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	b086      	sub	sp, #24
 8003054:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003056:	f107 0308 	add.w	r3, r7, #8
 800305a:	2200      	movs	r2, #0
 800305c:	601a      	str	r2, [r3, #0]
 800305e:	605a      	str	r2, [r3, #4]
 8003060:	609a      	str	r2, [r3, #8]
 8003062:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003064:	463b      	mov	r3, r7
 8003066:	2200      	movs	r2, #0
 8003068:	601a      	str	r2, [r3, #0]
 800306a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800306c:	4b1d      	ldr	r3, [pc, #116]	; (80030e4 <MX_TIM3_Init+0x94>)
 800306e:	4a1e      	ldr	r2, [pc, #120]	; (80030e8 <MX_TIM3_Init+0x98>)
 8003070:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1000-1;
 8003072:	4b1c      	ldr	r3, [pc, #112]	; (80030e4 <MX_TIM3_Init+0x94>)
 8003074:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003078:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800307a:	4b1a      	ldr	r3, [pc, #104]	; (80030e4 <MX_TIM3_Init+0x94>)
 800307c:	2200      	movs	r2, #0
 800307e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 4000;
 8003080:	4b18      	ldr	r3, [pc, #96]	; (80030e4 <MX_TIM3_Init+0x94>)
 8003082:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8003086:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003088:	4b16      	ldr	r3, [pc, #88]	; (80030e4 <MX_TIM3_Init+0x94>)
 800308a:	2200      	movs	r2, #0
 800308c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800308e:	4b15      	ldr	r3, [pc, #84]	; (80030e4 <MX_TIM3_Init+0x94>)
 8003090:	2200      	movs	r2, #0
 8003092:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003094:	4813      	ldr	r0, [pc, #76]	; (80030e4 <MX_TIM3_Init+0x94>)
 8003096:	f003 fd4b 	bl	8006b30 <HAL_TIM_Base_Init>
 800309a:	4603      	mov	r3, r0
 800309c:	2b00      	cmp	r3, #0
 800309e:	d001      	beq.n	80030a4 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 80030a0:	f000 f9ee 	bl	8003480 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80030a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80030a8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80030aa:	f107 0308 	add.w	r3, r7, #8
 80030ae:	4619      	mov	r1, r3
 80030b0:	480c      	ldr	r0, [pc, #48]	; (80030e4 <MX_TIM3_Init+0x94>)
 80030b2:	f003 fee7 	bl	8006e84 <HAL_TIM_ConfigClockSource>
 80030b6:	4603      	mov	r3, r0
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d001      	beq.n	80030c0 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 80030bc:	f000 f9e0 	bl	8003480 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80030c0:	2300      	movs	r3, #0
 80030c2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80030c4:	2300      	movs	r3, #0
 80030c6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80030c8:	463b      	mov	r3, r7
 80030ca:	4619      	mov	r1, r3
 80030cc:	4805      	ldr	r0, [pc, #20]	; (80030e4 <MX_TIM3_Init+0x94>)
 80030ce:	f004 f8b9 	bl	8007244 <HAL_TIMEx_MasterConfigSynchronization>
 80030d2:	4603      	mov	r3, r0
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d001      	beq.n	80030dc <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80030d8:	f000 f9d2 	bl	8003480 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80030dc:	bf00      	nop
 80030de:	3718      	adds	r7, #24
 80030e0:	46bd      	mov	sp, r7
 80030e2:	bd80      	pop	{r7, pc}
 80030e4:	20001bfc 	.word	0x20001bfc
 80030e8:	40000400 	.word	0x40000400

080030ec <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80030f0:	4b11      	ldr	r3, [pc, #68]	; (8003138 <MX_USART2_UART_Init+0x4c>)
 80030f2:	4a12      	ldr	r2, [pc, #72]	; (800313c <MX_USART2_UART_Init+0x50>)
 80030f4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80030f6:	4b10      	ldr	r3, [pc, #64]	; (8003138 <MX_USART2_UART_Init+0x4c>)
 80030f8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80030fc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80030fe:	4b0e      	ldr	r3, [pc, #56]	; (8003138 <MX_USART2_UART_Init+0x4c>)
 8003100:	2200      	movs	r2, #0
 8003102:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003104:	4b0c      	ldr	r3, [pc, #48]	; (8003138 <MX_USART2_UART_Init+0x4c>)
 8003106:	2200      	movs	r2, #0
 8003108:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800310a:	4b0b      	ldr	r3, [pc, #44]	; (8003138 <MX_USART2_UART_Init+0x4c>)
 800310c:	2200      	movs	r2, #0
 800310e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003110:	4b09      	ldr	r3, [pc, #36]	; (8003138 <MX_USART2_UART_Init+0x4c>)
 8003112:	220c      	movs	r2, #12
 8003114:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003116:	4b08      	ldr	r3, [pc, #32]	; (8003138 <MX_USART2_UART_Init+0x4c>)
 8003118:	2200      	movs	r2, #0
 800311a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800311c:	4b06      	ldr	r3, [pc, #24]	; (8003138 <MX_USART2_UART_Init+0x4c>)
 800311e:	2200      	movs	r2, #0
 8003120:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003122:	4805      	ldr	r0, [pc, #20]	; (8003138 <MX_USART2_UART_Init+0x4c>)
 8003124:	f004 f8fe 	bl	8007324 <HAL_UART_Init>
 8003128:	4603      	mov	r3, r0
 800312a:	2b00      	cmp	r3, #0
 800312c:	d001      	beq.n	8003132 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800312e:	f000 f9a7 	bl	8003480 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003132:	bf00      	nop
 8003134:	bd80      	pop	{r7, pc}
 8003136:	bf00      	nop
 8003138:	20001cbc 	.word	0x20001cbc
 800313c:	40004400 	.word	0x40004400

08003140 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	b088      	sub	sp, #32
 8003144:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003146:	f107 0310 	add.w	r3, r7, #16
 800314a:	2200      	movs	r2, #0
 800314c:	601a      	str	r2, [r3, #0]
 800314e:	605a      	str	r2, [r3, #4]
 8003150:	609a      	str	r2, [r3, #8]
 8003152:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003154:	4b38      	ldr	r3, [pc, #224]	; (8003238 <MX_GPIO_Init+0xf8>)
 8003156:	699b      	ldr	r3, [r3, #24]
 8003158:	4a37      	ldr	r2, [pc, #220]	; (8003238 <MX_GPIO_Init+0xf8>)
 800315a:	f043 0310 	orr.w	r3, r3, #16
 800315e:	6193      	str	r3, [r2, #24]
 8003160:	4b35      	ldr	r3, [pc, #212]	; (8003238 <MX_GPIO_Init+0xf8>)
 8003162:	699b      	ldr	r3, [r3, #24]
 8003164:	f003 0310 	and.w	r3, r3, #16
 8003168:	60fb      	str	r3, [r7, #12]
 800316a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800316c:	4b32      	ldr	r3, [pc, #200]	; (8003238 <MX_GPIO_Init+0xf8>)
 800316e:	699b      	ldr	r3, [r3, #24]
 8003170:	4a31      	ldr	r2, [pc, #196]	; (8003238 <MX_GPIO_Init+0xf8>)
 8003172:	f043 0320 	orr.w	r3, r3, #32
 8003176:	6193      	str	r3, [r2, #24]
 8003178:	4b2f      	ldr	r3, [pc, #188]	; (8003238 <MX_GPIO_Init+0xf8>)
 800317a:	699b      	ldr	r3, [r3, #24]
 800317c:	f003 0320 	and.w	r3, r3, #32
 8003180:	60bb      	str	r3, [r7, #8]
 8003182:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003184:	4b2c      	ldr	r3, [pc, #176]	; (8003238 <MX_GPIO_Init+0xf8>)
 8003186:	699b      	ldr	r3, [r3, #24]
 8003188:	4a2b      	ldr	r2, [pc, #172]	; (8003238 <MX_GPIO_Init+0xf8>)
 800318a:	f043 0304 	orr.w	r3, r3, #4
 800318e:	6193      	str	r3, [r2, #24]
 8003190:	4b29      	ldr	r3, [pc, #164]	; (8003238 <MX_GPIO_Init+0xf8>)
 8003192:	699b      	ldr	r3, [r3, #24]
 8003194:	f003 0304 	and.w	r3, r3, #4
 8003198:	607b      	str	r3, [r7, #4]
 800319a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800319c:	4b26      	ldr	r3, [pc, #152]	; (8003238 <MX_GPIO_Init+0xf8>)
 800319e:	699b      	ldr	r3, [r3, #24]
 80031a0:	4a25      	ldr	r2, [pc, #148]	; (8003238 <MX_GPIO_Init+0xf8>)
 80031a2:	f043 0308 	orr.w	r3, r3, #8
 80031a6:	6193      	str	r3, [r2, #24]
 80031a8:	4b23      	ldr	r3, [pc, #140]	; (8003238 <MX_GPIO_Init+0xf8>)
 80031aa:	699b      	ldr	r3, [r3, #24]
 80031ac:	f003 0308 	and.w	r3, r3, #8
 80031b0:	603b      	str	r3, [r7, #0]
 80031b2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(User_Led_GPIO_Port, User_Led_Pin, GPIO_PIN_RESET);
 80031b4:	2200      	movs	r2, #0
 80031b6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80031ba:	4820      	ldr	r0, [pc, #128]	; (800323c <MX_GPIO_Init+0xfc>)
 80031bc:	f001 fc2c 	bl	8004a18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Motor_GPIO_Port, Motor_Pin, GPIO_PIN_SET);
 80031c0:	2201      	movs	r2, #1
 80031c2:	2102      	movs	r1, #2
 80031c4:	481e      	ldr	r0, [pc, #120]	; (8003240 <MX_GPIO_Init+0x100>)
 80031c6:	f001 fc27 	bl	8004a18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : User_Led_Pin */
  GPIO_InitStruct.Pin = User_Led_Pin;
 80031ca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80031ce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80031d0:	2301      	movs	r3, #1
 80031d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031d4:	2300      	movs	r3, #0
 80031d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031d8:	2302      	movs	r3, #2
 80031da:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(User_Led_GPIO_Port, &GPIO_InitStruct);
 80031dc:	f107 0310 	add.w	r3, r7, #16
 80031e0:	4619      	mov	r1, r3
 80031e2:	4816      	ldr	r0, [pc, #88]	; (800323c <MX_GPIO_Init+0xfc>)
 80031e4:	f001 fa94 	bl	8004710 <HAL_GPIO_Init>

  /*Configure GPIO pin : Motor_Pin */
  GPIO_InitStruct.Pin = Motor_Pin;
 80031e8:	2302      	movs	r3, #2
 80031ea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80031ec:	2301      	movs	r3, #1
 80031ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031f0:	2300      	movs	r3, #0
 80031f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031f4:	2302      	movs	r3, #2
 80031f6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Motor_GPIO_Port, &GPIO_InitStruct);
 80031f8:	f107 0310 	add.w	r3, r7, #16
 80031fc:	4619      	mov	r1, r3
 80031fe:	4810      	ldr	r0, [pc, #64]	; (8003240 <MX_GPIO_Init+0x100>)
 8003200:	f001 fa86 	bl	8004710 <HAL_GPIO_Init>

  /*Configure GPIO pin : INT_Pin */
  GPIO_InitStruct.Pin = INT_Pin;
 8003204:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003208:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800320a:	4b0e      	ldr	r3, [pc, #56]	; (8003244 <MX_GPIO_Init+0x104>)
 800320c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800320e:	2300      	movs	r3, #0
 8003210:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(INT_GPIO_Port, &GPIO_InitStruct);
 8003212:	f107 0310 	add.w	r3, r7, #16
 8003216:	4619      	mov	r1, r3
 8003218:	480b      	ldr	r0, [pc, #44]	; (8003248 <MX_GPIO_Init+0x108>)
 800321a:	f001 fa79 	bl	8004710 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800321e:	2200      	movs	r2, #0
 8003220:	2100      	movs	r1, #0
 8003222:	2017      	movs	r0, #23
 8003224:	f001 f98d 	bl	8004542 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8003228:	2017      	movs	r0, #23
 800322a:	f001 f9a6 	bl	800457a <HAL_NVIC_EnableIRQ>

}
 800322e:	bf00      	nop
 8003230:	3720      	adds	r7, #32
 8003232:	46bd      	mov	sp, r7
 8003234:	bd80      	pop	{r7, pc}
 8003236:	bf00      	nop
 8003238:	40021000 	.word	0x40021000
 800323c:	40011000 	.word	0x40011000
 8003240:	40010c00 	.word	0x40010c00
 8003244:	10210000 	.word	0x10210000
 8003248:	40010800 	.word	0x40010800

0800324c <_BootUpSequence>:

/* USER CODE BEGIN 4 */

// Boot up sequence
void _BootUpSequence(void){
 800324c:	b580      	push	{r7, lr}
 800324e:	af00      	add	r7, sp, #0

	SSD1306_SetPosition(0, 0);
 8003250:	2100      	movs	r1, #0
 8003252:	2000      	movs	r0, #0
 8003254:	f7ff fbc2 	bl	80029dc <SSD1306_SetPosition>
	SSD1306_PrintString("choose HR or SPO2", &Font_7x10, SSD1306_COLOR_WHITE);
 8003258:	2201      	movs	r2, #1
 800325a:	4907      	ldr	r1, [pc, #28]	; (8003278 <_BootUpSequence+0x2c>)
 800325c:	4807      	ldr	r0, [pc, #28]	; (800327c <_BootUpSequence+0x30>)
 800325e:	f7ff fc53 	bl	8002b08 <SSD1306_PrintString>
	SSD1306_UpdateScreen();
 8003262:	f7ff fb17 	bl	8002894 <SSD1306_UpdateScreen>

	blueToothInput = _BluetoothReceive();
 8003266:	f000 f80d 	bl	8003284 <_BluetoothReceive>
 800326a:	4603      	mov	r3, r0
 800326c:	461a      	mov	r2, r3
 800326e:	4b04      	ldr	r3, [pc, #16]	; (8003280 <_BootUpSequence+0x34>)
 8003270:	701a      	strb	r2, [r3, #0]
//		// Reading user's choice of HR or SPO2
//		blueToothInput = _BluetoothReceive();
//		if((blueToothInput == SPO2ORHR_HR) || (blueToothInput == SPO2ORHR_SPO2))
//			break;
//	}
}
 8003272:	bf00      	nop
 8003274:	bd80      	pop	{r7, pc}
 8003276:	bf00      	nop
 8003278:	20000000 	.word	0x20000000
 800327c:	0800abd8 	.word	0x0800abd8
 8003280:	20001b50 	.word	0x20001b50

08003284 <_BluetoothReceive>:

// receiving the user choice of HR or SPO2
char _BluetoothReceive(void){
 8003284:	b580      	push	{r7, lr}
 8003286:	b082      	sub	sp, #8
 8003288:	af00      	add	r7, sp, #0
	char value;
	HAL_UART_Receive(&huart2, &value, sizeof(value), 5000);
 800328a:	1df9      	adds	r1, r7, #7
 800328c:	f241 3388 	movw	r3, #5000	; 0x1388
 8003290:	2201      	movs	r2, #1
 8003292:	4804      	ldr	r0, [pc, #16]	; (80032a4 <_BluetoothReceive+0x20>)
 8003294:	f004 f925 	bl	80074e2 <HAL_UART_Receive>
	return value;
 8003298:	79fb      	ldrb	r3, [r7, #7]
}
 800329a:	4618      	mov	r0, r3
 800329c:	3708      	adds	r7, #8
 800329e:	46bd      	mov	sp, r7
 80032a0:	bd80      	pop	{r7, pc}
 80032a2:	bf00      	nop
 80032a4:	20001cbc 	.word	0x20001cbc

080032a8 <_Show_HeartRate_SPO2>:

// Get and show heart rate and blood oxygen level
void _Show_HeartRate_SPO2(uint8_t value, uint8_t SPO2_OR_HR){
 80032a8:	b580      	push	{r7, lr}
 80032aa:	b088      	sub	sp, #32
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	4603      	mov	r3, r0
 80032b0:	460a      	mov	r2, r1
 80032b2:	71fb      	strb	r3, [r7, #7]
 80032b4:	4613      	mov	r3, r2
 80032b6:	71bb      	strb	r3, [r7, #6]

	// if SPO2 is selected
	if(SPO2_OR_HR == SPO2ORHR_SPO2){
 80032b8:	79bb      	ldrb	r3, [r7, #6]
 80032ba:	2b73      	cmp	r3, #115	; 0x73
 80032bc:	d114      	bne.n	80032e8 <_Show_HeartRate_SPO2+0x40>
		char _valueText[9];
		sprintf(_valueText, "SPO2:   %3d", value);
 80032be:	79fa      	ldrb	r2, [r7, #7]
 80032c0:	f107 0314 	add.w	r3, r7, #20
 80032c4:	4916      	ldr	r1, [pc, #88]	; (8003320 <_Show_HeartRate_SPO2+0x78>)
 80032c6:	4618      	mov	r0, r3
 80032c8:	f005 fa38 	bl	800873c <siprintf>
		SSD1306_SetPosition(0, 25);
 80032cc:	2119      	movs	r1, #25
 80032ce:	2000      	movs	r0, #0
 80032d0:	f7ff fb84 	bl	80029dc <SSD1306_SetPosition>
		SSD1306_PrintString(_valueText, &Font_11x18, SSD1306_COLOR_WHITE);
 80032d4:	f107 0314 	add.w	r3, r7, #20
 80032d8:	2201      	movs	r2, #1
 80032da:	4912      	ldr	r1, [pc, #72]	; (8003324 <_Show_HeartRate_SPO2+0x7c>)
 80032dc:	4618      	mov	r0, r3
 80032de:	f7ff fc13 	bl	8002b08 <SSD1306_PrintString>
		SSD1306_UpdateScreen();
 80032e2:	f7ff fad7 	bl	8002894 <SSD1306_UpdateScreen>
		sprintf(_valueText, "BPM:    %3d", value);
		SSD1306_SetPosition(0, 25);
		SSD1306_PrintString(_valueText, &Font_11x18, SSD1306_COLOR_WHITE);
		SSD1306_UpdateScreen();
	}
}
 80032e6:	e016      	b.n	8003316 <_Show_HeartRate_SPO2+0x6e>
	else if(SPO2_OR_HR == SPO2ORHR_HR){
 80032e8:	79bb      	ldrb	r3, [r7, #6]
 80032ea:	2b68      	cmp	r3, #104	; 0x68
 80032ec:	d113      	bne.n	8003316 <_Show_HeartRate_SPO2+0x6e>
		sprintf(_valueText, "BPM:    %3d", value);
 80032ee:	79fa      	ldrb	r2, [r7, #7]
 80032f0:	f107 0308 	add.w	r3, r7, #8
 80032f4:	490c      	ldr	r1, [pc, #48]	; (8003328 <_Show_HeartRate_SPO2+0x80>)
 80032f6:	4618      	mov	r0, r3
 80032f8:	f005 fa20 	bl	800873c <siprintf>
		SSD1306_SetPosition(0, 25);
 80032fc:	2119      	movs	r1, #25
 80032fe:	2000      	movs	r0, #0
 8003300:	f7ff fb6c 	bl	80029dc <SSD1306_SetPosition>
		SSD1306_PrintString(_valueText, &Font_11x18, SSD1306_COLOR_WHITE);
 8003304:	f107 0308 	add.w	r3, r7, #8
 8003308:	2201      	movs	r2, #1
 800330a:	4906      	ldr	r1, [pc, #24]	; (8003324 <_Show_HeartRate_SPO2+0x7c>)
 800330c:	4618      	mov	r0, r3
 800330e:	f7ff fbfb 	bl	8002b08 <SSD1306_PrintString>
		SSD1306_UpdateScreen();
 8003312:	f7ff fabf 	bl	8002894 <SSD1306_UpdateScreen>
}
 8003316:	bf00      	nop
 8003318:	3720      	adds	r7, #32
 800331a:	46bd      	mov	sp, r7
 800331c:	bd80      	pop	{r7, pc}
 800331e:	bf00      	nop
 8003320:	0800abec 	.word	0x0800abec
 8003324:	20000008 	.word	0x20000008
 8003328:	0800abf8 	.word	0x0800abf8
 800332c:	00000000 	.word	0x00000000

08003330 <_BatteryVoltage>:


// Battery voltage reading
float _BatteryVoltage(void){
 8003330:	b580      	push	{r7, lr}
 8003332:	b082      	sub	sp, #8
 8003334:	af00      	add	r7, sp, #0
	uint16_t rawAnalogVal = 0;
 8003336:	2300      	movs	r3, #0
 8003338:	80fb      	strh	r3, [r7, #6]
	float batteryVoltage = 0.0;
 800333a:	f04f 0300 	mov.w	r3, #0
 800333e:	603b      	str	r3, [r7, #0]

	// Initializing the ADC
	HAL_ADC_Start(&hadc1);
 8003340:	481b      	ldr	r0, [pc, #108]	; (80033b0 <_BatteryVoltage+0x80>)
 8003342:	f000 fca7 	bl	8003c94 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 100);
 8003346:	2164      	movs	r1, #100	; 0x64
 8003348:	4819      	ldr	r0, [pc, #100]	; (80033b0 <_BatteryVoltage+0x80>)
 800334a:	f000 fd7d 	bl	8003e48 <HAL_ADC_PollForConversion>

	// Reading ADC Value
	// NOTE: it is a 12-bit ADC
	rawAnalogVal = HAL_ADC_GetValue(&hadc1);
 800334e:	4818      	ldr	r0, [pc, #96]	; (80033b0 <_BatteryVoltage+0x80>)
 8003350:	f000 fe80 	bl	8004054 <HAL_ADC_GetValue>
 8003354:	4603      	mov	r3, r0
 8003356:	80fb      	strh	r3, [r7, #6]

	// Mapping the ADC value to readable voltage
	// NOTE: the value is multiplied by 2 because of the voltage divider circuit
	// which divides the voltage by 2
	batteryVoltage = (rawAnalogVal * 2  / 4095.00) * 3.30;
 8003358:	88fb      	ldrh	r3, [r7, #6]
 800335a:	005b      	lsls	r3, r3, #1
 800335c:	4618      	mov	r0, r3
 800335e:	f7fd f851 	bl	8000404 <__aeabi_i2d>
 8003362:	a30f      	add	r3, pc, #60	; (adr r3, 80033a0 <_BatteryVoltage+0x70>)
 8003364:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003368:	f7fd f9e0 	bl	800072c <__aeabi_ddiv>
 800336c:	4602      	mov	r2, r0
 800336e:	460b      	mov	r3, r1
 8003370:	4610      	mov	r0, r2
 8003372:	4619      	mov	r1, r3
 8003374:	a30c      	add	r3, pc, #48	; (adr r3, 80033a8 <_BatteryVoltage+0x78>)
 8003376:	e9d3 2300 	ldrd	r2, r3, [r3]
 800337a:	f7fd f8ad 	bl	80004d8 <__aeabi_dmul>
 800337e:	4602      	mov	r2, r0
 8003380:	460b      	mov	r3, r1
 8003382:	4610      	mov	r0, r2
 8003384:	4619      	mov	r1, r3
 8003386:	f7fd fb7f 	bl	8000a88 <__aeabi_d2f>
 800338a:	4603      	mov	r3, r0
 800338c:	603b      	str	r3, [r7, #0]
	// Removing some inefficiency
	//batteryVoltage += 0.1;
	HAL_ADC_Stop(&hadc1);
 800338e:	4808      	ldr	r0, [pc, #32]	; (80033b0 <_BatteryVoltage+0x80>)
 8003390:	f000 fd2e 	bl	8003df0 <HAL_ADC_Stop>
	return batteryVoltage;
 8003394:	683b      	ldr	r3, [r7, #0]
}
 8003396:	4618      	mov	r0, r3
 8003398:	3708      	adds	r7, #8
 800339a:	46bd      	mov	sp, r7
 800339c:	bd80      	pop	{r7, pc}
 800339e:	bf00      	nop
 80033a0:	00000000 	.word	0x00000000
 80033a4:	40affe00 	.word	0x40affe00
 80033a8:	66666666 	.word	0x66666666
 80033ac:	400a6666 	.word	0x400a6666
 80033b0:	20001c44 	.word	0x20001c44

080033b4 <_BluetoothSend>:


void _BluetoothSend(uint8_t value, uint8_t SPO2_OR_HR){
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b084      	sub	sp, #16
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	4603      	mov	r3, r0
 80033bc:	460a      	mov	r2, r1
 80033be:	71fb      	strb	r3, [r7, #7]
 80033c0:	4613      	mov	r3, r2
 80033c2:	71bb      	strb	r3, [r7, #6]
	char UartBuffer[8];
	//uint8_t val = (uint8_t)value;
	if(SPO2_OR_HR == SPO2ORHR_HR)
 80033c4:	79bb      	ldrb	r3, [r7, #6]
 80033c6:	2b68      	cmp	r3, #104	; 0x68
 80033c8:	d117      	bne.n	80033fa <_BluetoothSend+0x46>
	{
		sprintf(UartBuffer, "%d",  value);
 80033ca:	79fa      	ldrb	r2, [r7, #7]
 80033cc:	f107 0308 	add.w	r3, r7, #8
 80033d0:	4911      	ldr	r1, [pc, #68]	; (8003418 <_BluetoothSend+0x64>)
 80033d2:	4618      	mov	r0, r3
 80033d4:	f005 f9b2 	bl	800873c <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*)UartBuffer, strlen(UartBuffer), 100);
 80033d8:	f107 0308 	add.w	r3, r7, #8
 80033dc:	4618      	mov	r0, r3
 80033de:	f7fc feb7 	bl	8000150 <strlen>
 80033e2:	4603      	mov	r3, r0
 80033e4:	b29a      	uxth	r2, r3
 80033e6:	f107 0108 	add.w	r1, r7, #8
 80033ea:	2364      	movs	r3, #100	; 0x64
 80033ec:	480b      	ldr	r0, [pc, #44]	; (800341c <_BluetoothSend+0x68>)
 80033ee:	f003 ffe6 	bl	80073be <HAL_UART_Transmit>
		HAL_Delay(100);
 80033f2:	2064      	movs	r0, #100	; 0x64
 80033f4:	f000 fb52 	bl	8003a9c <HAL_Delay>
	else if(SPO2_OR_HR == SPO2ORHR_SPO2){
		//sprintf(UartBuffer, "%d", value);
		HAL_UART_Transmit(&huart2, (uint8_t*)value, sizeof(value), 50);
		//HAL_Delay(100);
	}
}
 80033f8:	e009      	b.n	800340e <_BluetoothSend+0x5a>
	else if(SPO2_OR_HR == SPO2ORHR_SPO2){
 80033fa:	79bb      	ldrb	r3, [r7, #6]
 80033fc:	2b73      	cmp	r3, #115	; 0x73
 80033fe:	d106      	bne.n	800340e <_BluetoothSend+0x5a>
		HAL_UART_Transmit(&huart2, (uint8_t*)value, sizeof(value), 50);
 8003400:	79fb      	ldrb	r3, [r7, #7]
 8003402:	4619      	mov	r1, r3
 8003404:	2332      	movs	r3, #50	; 0x32
 8003406:	2201      	movs	r2, #1
 8003408:	4804      	ldr	r0, [pc, #16]	; (800341c <_BluetoothSend+0x68>)
 800340a:	f003 ffd8 	bl	80073be <HAL_UART_Transmit>
}
 800340e:	bf00      	nop
 8003410:	3710      	adds	r7, #16
 8003412:	46bd      	mov	sp, r7
 8003414:	bd80      	pop	{r7, pc}
 8003416:	bf00      	nop
 8003418:	0800ac04 	.word	0x0800ac04
 800341c:	20001cbc 	.word	0x20001cbc

08003420 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8003420:	b580      	push	{r7, lr}
 8003422:	b082      	sub	sp, #8
 8003424:	af00      	add	r7, sp, #0
 8003426:	4603      	mov	r3, r0
 8003428:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == INT_Pin) {
 800342a:	88fb      	ldrh	r3, [r7, #6]
 800342c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003430:	d101      	bne.n	8003436 <HAL_GPIO_EXTI_Callback+0x16>
		Max30102_InterruptCallback();
 8003432:	f7fd ff31 	bl	8001298 <Max30102_InterruptCallback>
	}
}
 8003436:	bf00      	nop
 8003438:	3708      	adds	r7, #8
 800343a:	46bd      	mov	sp, r7
 800343c:	bd80      	pop	{r7, pc}
	...

08003440 <HAL_TIM_PeriodElapsedCallback>:


// Timer_2 ISR
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8003440:	b480      	push	{r7}
 8003442:	b083      	sub	sp, #12
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
  if(htim->Instance == TIM2)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003450:	d103      	bne.n	800345a <HAL_TIM_PeriodElapsedCallback+0x1a>
	  _timer_2_interrupt = 1;
 8003452:	4b08      	ldr	r3, [pc, #32]	; (8003474 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8003454:	2201      	movs	r2, #1
 8003456:	701a      	strb	r2, [r3, #0]
  else if(htim->Instance == TIM3)
	  _timer_3_interrupt = 1;
}
 8003458:	e007      	b.n	800346a <HAL_TIM_PeriodElapsedCallback+0x2a>
  else if(htim->Instance == TIM3)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	4a06      	ldr	r2, [pc, #24]	; (8003478 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8003460:	4293      	cmp	r3, r2
 8003462:	d102      	bne.n	800346a <HAL_TIM_PeriodElapsedCallback+0x2a>
	  _timer_3_interrupt = 1;
 8003464:	4b05      	ldr	r3, [pc, #20]	; (800347c <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8003466:	2201      	movs	r2, #1
 8003468:	701a      	strb	r2, [r3, #0]
}
 800346a:	bf00      	nop
 800346c:	370c      	adds	r7, #12
 800346e:	46bd      	mov	sp, r7
 8003470:	bc80      	pop	{r7}
 8003472:	4770      	bx	lr
 8003474:	200011bd 	.word	0x200011bd
 8003478:	40000400 	.word	0x40000400
 800347c:	200011bc 	.word	0x200011bc

08003480 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003480:	b480      	push	{r7}
 8003482:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003484:	b672      	cpsid	i
}
 8003486:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003488:	e7fe      	b.n	8003488 <Error_Handler+0x8>
	...

0800348c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800348c:	b480      	push	{r7}
 800348e:	b085      	sub	sp, #20
 8003490:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8003492:	4b15      	ldr	r3, [pc, #84]	; (80034e8 <HAL_MspInit+0x5c>)
 8003494:	699b      	ldr	r3, [r3, #24]
 8003496:	4a14      	ldr	r2, [pc, #80]	; (80034e8 <HAL_MspInit+0x5c>)
 8003498:	f043 0301 	orr.w	r3, r3, #1
 800349c:	6193      	str	r3, [r2, #24]
 800349e:	4b12      	ldr	r3, [pc, #72]	; (80034e8 <HAL_MspInit+0x5c>)
 80034a0:	699b      	ldr	r3, [r3, #24]
 80034a2:	f003 0301 	and.w	r3, r3, #1
 80034a6:	60bb      	str	r3, [r7, #8]
 80034a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80034aa:	4b0f      	ldr	r3, [pc, #60]	; (80034e8 <HAL_MspInit+0x5c>)
 80034ac:	69db      	ldr	r3, [r3, #28]
 80034ae:	4a0e      	ldr	r2, [pc, #56]	; (80034e8 <HAL_MspInit+0x5c>)
 80034b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034b4:	61d3      	str	r3, [r2, #28]
 80034b6:	4b0c      	ldr	r3, [pc, #48]	; (80034e8 <HAL_MspInit+0x5c>)
 80034b8:	69db      	ldr	r3, [r3, #28]
 80034ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034be:	607b      	str	r3, [r7, #4]
 80034c0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80034c2:	4b0a      	ldr	r3, [pc, #40]	; (80034ec <HAL_MspInit+0x60>)
 80034c4:	685b      	ldr	r3, [r3, #4]
 80034c6:	60fb      	str	r3, [r7, #12]
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80034ce:	60fb      	str	r3, [r7, #12]
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80034d6:	60fb      	str	r3, [r7, #12]
 80034d8:	4a04      	ldr	r2, [pc, #16]	; (80034ec <HAL_MspInit+0x60>)
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80034de:	bf00      	nop
 80034e0:	3714      	adds	r7, #20
 80034e2:	46bd      	mov	sp, r7
 80034e4:	bc80      	pop	{r7}
 80034e6:	4770      	bx	lr
 80034e8:	40021000 	.word	0x40021000
 80034ec:	40010000 	.word	0x40010000

080034f0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b088      	sub	sp, #32
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034f8:	f107 0310 	add.w	r3, r7, #16
 80034fc:	2200      	movs	r2, #0
 80034fe:	601a      	str	r2, [r3, #0]
 8003500:	605a      	str	r2, [r3, #4]
 8003502:	609a      	str	r2, [r3, #8]
 8003504:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	4a14      	ldr	r2, [pc, #80]	; (800355c <HAL_ADC_MspInit+0x6c>)
 800350c:	4293      	cmp	r3, r2
 800350e:	d121      	bne.n	8003554 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003510:	4b13      	ldr	r3, [pc, #76]	; (8003560 <HAL_ADC_MspInit+0x70>)
 8003512:	699b      	ldr	r3, [r3, #24]
 8003514:	4a12      	ldr	r2, [pc, #72]	; (8003560 <HAL_ADC_MspInit+0x70>)
 8003516:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800351a:	6193      	str	r3, [r2, #24]
 800351c:	4b10      	ldr	r3, [pc, #64]	; (8003560 <HAL_ADC_MspInit+0x70>)
 800351e:	699b      	ldr	r3, [r3, #24]
 8003520:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003524:	60fb      	str	r3, [r7, #12]
 8003526:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003528:	4b0d      	ldr	r3, [pc, #52]	; (8003560 <HAL_ADC_MspInit+0x70>)
 800352a:	699b      	ldr	r3, [r3, #24]
 800352c:	4a0c      	ldr	r2, [pc, #48]	; (8003560 <HAL_ADC_MspInit+0x70>)
 800352e:	f043 0304 	orr.w	r3, r3, #4
 8003532:	6193      	str	r3, [r2, #24]
 8003534:	4b0a      	ldr	r3, [pc, #40]	; (8003560 <HAL_ADC_MspInit+0x70>)
 8003536:	699b      	ldr	r3, [r3, #24]
 8003538:	f003 0304 	and.w	r3, r3, #4
 800353c:	60bb      	str	r3, [r7, #8]
 800353e:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003540:	2301      	movs	r3, #1
 8003542:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003544:	2303      	movs	r3, #3
 8003546:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003548:	f107 0310 	add.w	r3, r7, #16
 800354c:	4619      	mov	r1, r3
 800354e:	4805      	ldr	r0, [pc, #20]	; (8003564 <HAL_ADC_MspInit+0x74>)
 8003550:	f001 f8de 	bl	8004710 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003554:	bf00      	nop
 8003556:	3720      	adds	r7, #32
 8003558:	46bd      	mov	sp, r7
 800355a:	bd80      	pop	{r7, pc}
 800355c:	40012400 	.word	0x40012400
 8003560:	40021000 	.word	0x40021000
 8003564:	40010800 	.word	0x40010800

08003568 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003568:	b580      	push	{r7, lr}
 800356a:	b08a      	sub	sp, #40	; 0x28
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003570:	f107 0318 	add.w	r3, r7, #24
 8003574:	2200      	movs	r2, #0
 8003576:	601a      	str	r2, [r3, #0]
 8003578:	605a      	str	r2, [r3, #4]
 800357a:	609a      	str	r2, [r3, #8]
 800357c:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	4a2b      	ldr	r2, [pc, #172]	; (8003630 <HAL_I2C_MspInit+0xc8>)
 8003584:	4293      	cmp	r3, r2
 8003586:	d124      	bne.n	80035d2 <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003588:	4b2a      	ldr	r3, [pc, #168]	; (8003634 <HAL_I2C_MspInit+0xcc>)
 800358a:	699b      	ldr	r3, [r3, #24]
 800358c:	4a29      	ldr	r2, [pc, #164]	; (8003634 <HAL_I2C_MspInit+0xcc>)
 800358e:	f043 0308 	orr.w	r3, r3, #8
 8003592:	6193      	str	r3, [r2, #24]
 8003594:	4b27      	ldr	r3, [pc, #156]	; (8003634 <HAL_I2C_MspInit+0xcc>)
 8003596:	699b      	ldr	r3, [r3, #24]
 8003598:	f003 0308 	and.w	r3, r3, #8
 800359c:	617b      	str	r3, [r7, #20]
 800359e:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80035a0:	23c0      	movs	r3, #192	; 0xc0
 80035a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80035a4:	2312      	movs	r3, #18
 80035a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80035a8:	2303      	movs	r3, #3
 80035aa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80035ac:	f107 0318 	add.w	r3, r7, #24
 80035b0:	4619      	mov	r1, r3
 80035b2:	4821      	ldr	r0, [pc, #132]	; (8003638 <HAL_I2C_MspInit+0xd0>)
 80035b4:	f001 f8ac 	bl	8004710 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80035b8:	4b1e      	ldr	r3, [pc, #120]	; (8003634 <HAL_I2C_MspInit+0xcc>)
 80035ba:	69db      	ldr	r3, [r3, #28]
 80035bc:	4a1d      	ldr	r2, [pc, #116]	; (8003634 <HAL_I2C_MspInit+0xcc>)
 80035be:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80035c2:	61d3      	str	r3, [r2, #28]
 80035c4:	4b1b      	ldr	r3, [pc, #108]	; (8003634 <HAL_I2C_MspInit+0xcc>)
 80035c6:	69db      	ldr	r3, [r3, #28]
 80035c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80035cc:	613b      	str	r3, [r7, #16]
 80035ce:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80035d0:	e029      	b.n	8003626 <HAL_I2C_MspInit+0xbe>
  else if(hi2c->Instance==I2C2)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	4a19      	ldr	r2, [pc, #100]	; (800363c <HAL_I2C_MspInit+0xd4>)
 80035d8:	4293      	cmp	r3, r2
 80035da:	d124      	bne.n	8003626 <HAL_I2C_MspInit+0xbe>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80035dc:	4b15      	ldr	r3, [pc, #84]	; (8003634 <HAL_I2C_MspInit+0xcc>)
 80035de:	699b      	ldr	r3, [r3, #24]
 80035e0:	4a14      	ldr	r2, [pc, #80]	; (8003634 <HAL_I2C_MspInit+0xcc>)
 80035e2:	f043 0308 	orr.w	r3, r3, #8
 80035e6:	6193      	str	r3, [r2, #24]
 80035e8:	4b12      	ldr	r3, [pc, #72]	; (8003634 <HAL_I2C_MspInit+0xcc>)
 80035ea:	699b      	ldr	r3, [r3, #24]
 80035ec:	f003 0308 	and.w	r3, r3, #8
 80035f0:	60fb      	str	r3, [r7, #12]
 80035f2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80035f4:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80035f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80035fa:	2312      	movs	r3, #18
 80035fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80035fe:	2303      	movs	r3, #3
 8003600:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003602:	f107 0318 	add.w	r3, r7, #24
 8003606:	4619      	mov	r1, r3
 8003608:	480b      	ldr	r0, [pc, #44]	; (8003638 <HAL_I2C_MspInit+0xd0>)
 800360a:	f001 f881 	bl	8004710 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800360e:	4b09      	ldr	r3, [pc, #36]	; (8003634 <HAL_I2C_MspInit+0xcc>)
 8003610:	69db      	ldr	r3, [r3, #28]
 8003612:	4a08      	ldr	r2, [pc, #32]	; (8003634 <HAL_I2C_MspInit+0xcc>)
 8003614:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003618:	61d3      	str	r3, [r2, #28]
 800361a:	4b06      	ldr	r3, [pc, #24]	; (8003634 <HAL_I2C_MspInit+0xcc>)
 800361c:	69db      	ldr	r3, [r3, #28]
 800361e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003622:	60bb      	str	r3, [r7, #8]
 8003624:	68bb      	ldr	r3, [r7, #8]
}
 8003626:	bf00      	nop
 8003628:	3728      	adds	r7, #40	; 0x28
 800362a:	46bd      	mov	sp, r7
 800362c:	bd80      	pop	{r7, pc}
 800362e:	bf00      	nop
 8003630:	40005400 	.word	0x40005400
 8003634:	40021000 	.word	0x40021000
 8003638:	40010c00 	.word	0x40010c00
 800363c:	40005800 	.word	0x40005800

08003640 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003640:	b580      	push	{r7, lr}
 8003642:	b084      	sub	sp, #16
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003650:	d114      	bne.n	800367c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003652:	4b19      	ldr	r3, [pc, #100]	; (80036b8 <HAL_TIM_Base_MspInit+0x78>)
 8003654:	69db      	ldr	r3, [r3, #28]
 8003656:	4a18      	ldr	r2, [pc, #96]	; (80036b8 <HAL_TIM_Base_MspInit+0x78>)
 8003658:	f043 0301 	orr.w	r3, r3, #1
 800365c:	61d3      	str	r3, [r2, #28]
 800365e:	4b16      	ldr	r3, [pc, #88]	; (80036b8 <HAL_TIM_Base_MspInit+0x78>)
 8003660:	69db      	ldr	r3, [r3, #28]
 8003662:	f003 0301 	and.w	r3, r3, #1
 8003666:	60fb      	str	r3, [r7, #12]
 8003668:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800366a:	2200      	movs	r2, #0
 800366c:	2100      	movs	r1, #0
 800366e:	201c      	movs	r0, #28
 8003670:	f000 ff67 	bl	8004542 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003674:	201c      	movs	r0, #28
 8003676:	f000 ff80 	bl	800457a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800367a:	e018      	b.n	80036ae <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM3)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	4a0e      	ldr	r2, [pc, #56]	; (80036bc <HAL_TIM_Base_MspInit+0x7c>)
 8003682:	4293      	cmp	r3, r2
 8003684:	d113      	bne.n	80036ae <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003686:	4b0c      	ldr	r3, [pc, #48]	; (80036b8 <HAL_TIM_Base_MspInit+0x78>)
 8003688:	69db      	ldr	r3, [r3, #28]
 800368a:	4a0b      	ldr	r2, [pc, #44]	; (80036b8 <HAL_TIM_Base_MspInit+0x78>)
 800368c:	f043 0302 	orr.w	r3, r3, #2
 8003690:	61d3      	str	r3, [r2, #28]
 8003692:	4b09      	ldr	r3, [pc, #36]	; (80036b8 <HAL_TIM_Base_MspInit+0x78>)
 8003694:	69db      	ldr	r3, [r3, #28]
 8003696:	f003 0302 	and.w	r3, r3, #2
 800369a:	60bb      	str	r3, [r7, #8]
 800369c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800369e:	2200      	movs	r2, #0
 80036a0:	2100      	movs	r1, #0
 80036a2:	201d      	movs	r0, #29
 80036a4:	f000 ff4d 	bl	8004542 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80036a8:	201d      	movs	r0, #29
 80036aa:	f000 ff66 	bl	800457a <HAL_NVIC_EnableIRQ>
}
 80036ae:	bf00      	nop
 80036b0:	3710      	adds	r7, #16
 80036b2:	46bd      	mov	sp, r7
 80036b4:	bd80      	pop	{r7, pc}
 80036b6:	bf00      	nop
 80036b8:	40021000 	.word	0x40021000
 80036bc:	40000400 	.word	0x40000400

080036c0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b088      	sub	sp, #32
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80036c8:	f107 0310 	add.w	r3, r7, #16
 80036cc:	2200      	movs	r2, #0
 80036ce:	601a      	str	r2, [r3, #0]
 80036d0:	605a      	str	r2, [r3, #4]
 80036d2:	609a      	str	r2, [r3, #8]
 80036d4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	4a1f      	ldr	r2, [pc, #124]	; (8003758 <HAL_UART_MspInit+0x98>)
 80036dc:	4293      	cmp	r3, r2
 80036de:	d137      	bne.n	8003750 <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80036e0:	4b1e      	ldr	r3, [pc, #120]	; (800375c <HAL_UART_MspInit+0x9c>)
 80036e2:	69db      	ldr	r3, [r3, #28]
 80036e4:	4a1d      	ldr	r2, [pc, #116]	; (800375c <HAL_UART_MspInit+0x9c>)
 80036e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80036ea:	61d3      	str	r3, [r2, #28]
 80036ec:	4b1b      	ldr	r3, [pc, #108]	; (800375c <HAL_UART_MspInit+0x9c>)
 80036ee:	69db      	ldr	r3, [r3, #28]
 80036f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036f4:	60fb      	str	r3, [r7, #12]
 80036f6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80036f8:	4b18      	ldr	r3, [pc, #96]	; (800375c <HAL_UART_MspInit+0x9c>)
 80036fa:	699b      	ldr	r3, [r3, #24]
 80036fc:	4a17      	ldr	r2, [pc, #92]	; (800375c <HAL_UART_MspInit+0x9c>)
 80036fe:	f043 0304 	orr.w	r3, r3, #4
 8003702:	6193      	str	r3, [r2, #24]
 8003704:	4b15      	ldr	r3, [pc, #84]	; (800375c <HAL_UART_MspInit+0x9c>)
 8003706:	699b      	ldr	r3, [r3, #24]
 8003708:	f003 0304 	and.w	r3, r3, #4
 800370c:	60bb      	str	r3, [r7, #8]
 800370e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003710:	2304      	movs	r3, #4
 8003712:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003714:	2302      	movs	r3, #2
 8003716:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003718:	2303      	movs	r3, #3
 800371a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800371c:	f107 0310 	add.w	r3, r7, #16
 8003720:	4619      	mov	r1, r3
 8003722:	480f      	ldr	r0, [pc, #60]	; (8003760 <HAL_UART_MspInit+0xa0>)
 8003724:	f000 fff4 	bl	8004710 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003728:	2308      	movs	r3, #8
 800372a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800372c:	2300      	movs	r3, #0
 800372e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003730:	2300      	movs	r3, #0
 8003732:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003734:	f107 0310 	add.w	r3, r7, #16
 8003738:	4619      	mov	r1, r3
 800373a:	4809      	ldr	r0, [pc, #36]	; (8003760 <HAL_UART_MspInit+0xa0>)
 800373c:	f000 ffe8 	bl	8004710 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8003740:	2200      	movs	r2, #0
 8003742:	2100      	movs	r1, #0
 8003744:	2026      	movs	r0, #38	; 0x26
 8003746:	f000 fefc 	bl	8004542 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800374a:	2026      	movs	r0, #38	; 0x26
 800374c:	f000 ff15 	bl	800457a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003750:	bf00      	nop
 8003752:	3720      	adds	r7, #32
 8003754:	46bd      	mov	sp, r7
 8003756:	bd80      	pop	{r7, pc}
 8003758:	40004400 	.word	0x40004400
 800375c:	40021000 	.word	0x40021000
 8003760:	40010800 	.word	0x40010800

08003764 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003764:	b480      	push	{r7}
 8003766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003768:	e7fe      	b.n	8003768 <NMI_Handler+0x4>

0800376a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800376a:	b480      	push	{r7}
 800376c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800376e:	e7fe      	b.n	800376e <HardFault_Handler+0x4>

08003770 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003770:	b480      	push	{r7}
 8003772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003774:	e7fe      	b.n	8003774 <MemManage_Handler+0x4>

08003776 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003776:	b480      	push	{r7}
 8003778:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800377a:	e7fe      	b.n	800377a <BusFault_Handler+0x4>

0800377c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800377c:	b480      	push	{r7}
 800377e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003780:	e7fe      	b.n	8003780 <UsageFault_Handler+0x4>

08003782 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003782:	b480      	push	{r7}
 8003784:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003786:	bf00      	nop
 8003788:	46bd      	mov	sp, r7
 800378a:	bc80      	pop	{r7}
 800378c:	4770      	bx	lr

0800378e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800378e:	b480      	push	{r7}
 8003790:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003792:	bf00      	nop
 8003794:	46bd      	mov	sp, r7
 8003796:	bc80      	pop	{r7}
 8003798:	4770      	bx	lr

0800379a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800379a:	b480      	push	{r7}
 800379c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800379e:	bf00      	nop
 80037a0:	46bd      	mov	sp, r7
 80037a2:	bc80      	pop	{r7}
 80037a4:	4770      	bx	lr

080037a6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80037a6:	b580      	push	{r7, lr}
 80037a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80037aa:	f000 f95b 	bl	8003a64 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80037ae:	bf00      	nop
 80037b0:	bd80      	pop	{r7, pc}

080037b2 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80037b2:	b580      	push	{r7, lr}
 80037b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 80037b6:	f44f 7000 	mov.w	r0, #512	; 0x200
 80037ba:	f001 f95f 	bl	8004a7c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80037be:	bf00      	nop
 80037c0:	bd80      	pop	{r7, pc}
	...

080037c4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80037c8:	4802      	ldr	r0, [pc, #8]	; (80037d4 <TIM2_IRQHandler+0x10>)
 80037ca:	f003 fa53 	bl	8006c74 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80037ce:	bf00      	nop
 80037d0:	bd80      	pop	{r7, pc}
 80037d2:	bf00      	nop
 80037d4:	20001c74 	.word	0x20001c74

080037d8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80037dc:	4802      	ldr	r0, [pc, #8]	; (80037e8 <TIM3_IRQHandler+0x10>)
 80037de:	f003 fa49 	bl	8006c74 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80037e2:	bf00      	nop
 80037e4:	bd80      	pop	{r7, pc}
 80037e6:	bf00      	nop
 80037e8:	20001bfc 	.word	0x20001bfc

080037ec <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80037f0:	4802      	ldr	r0, [pc, #8]	; (80037fc <USART2_IRQHandler+0x10>)
 80037f2:	f003 ff19 	bl	8007628 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80037f6:	bf00      	nop
 80037f8:	bd80      	pop	{r7, pc}
 80037fa:	bf00      	nop
 80037fc:	20001cbc 	.word	0x20001cbc

08003800 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003800:	b480      	push	{r7}
 8003802:	af00      	add	r7, sp, #0
	return 1;
 8003804:	2301      	movs	r3, #1
}
 8003806:	4618      	mov	r0, r3
 8003808:	46bd      	mov	sp, r7
 800380a:	bc80      	pop	{r7}
 800380c:	4770      	bx	lr

0800380e <_kill>:

int _kill(int pid, int sig)
{
 800380e:	b580      	push	{r7, lr}
 8003810:	b082      	sub	sp, #8
 8003812:	af00      	add	r7, sp, #0
 8003814:	6078      	str	r0, [r7, #4]
 8003816:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003818:	f004 fafe 	bl	8007e18 <__errno>
 800381c:	4603      	mov	r3, r0
 800381e:	2216      	movs	r2, #22
 8003820:	601a      	str	r2, [r3, #0]
	return -1;
 8003822:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8003826:	4618      	mov	r0, r3
 8003828:	3708      	adds	r7, #8
 800382a:	46bd      	mov	sp, r7
 800382c:	bd80      	pop	{r7, pc}

0800382e <_exit>:

void _exit (int status)
{
 800382e:	b580      	push	{r7, lr}
 8003830:	b082      	sub	sp, #8
 8003832:	af00      	add	r7, sp, #0
 8003834:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003836:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800383a:	6878      	ldr	r0, [r7, #4]
 800383c:	f7ff ffe7 	bl	800380e <_kill>
	while (1) {}		/* Make sure we hang here */
 8003840:	e7fe      	b.n	8003840 <_exit+0x12>

08003842 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003842:	b580      	push	{r7, lr}
 8003844:	b086      	sub	sp, #24
 8003846:	af00      	add	r7, sp, #0
 8003848:	60f8      	str	r0, [r7, #12]
 800384a:	60b9      	str	r1, [r7, #8]
 800384c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800384e:	2300      	movs	r3, #0
 8003850:	617b      	str	r3, [r7, #20]
 8003852:	e00a      	b.n	800386a <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003854:	f3af 8000 	nop.w
 8003858:	4601      	mov	r1, r0
 800385a:	68bb      	ldr	r3, [r7, #8]
 800385c:	1c5a      	adds	r2, r3, #1
 800385e:	60ba      	str	r2, [r7, #8]
 8003860:	b2ca      	uxtb	r2, r1
 8003862:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003864:	697b      	ldr	r3, [r7, #20]
 8003866:	3301      	adds	r3, #1
 8003868:	617b      	str	r3, [r7, #20]
 800386a:	697a      	ldr	r2, [r7, #20]
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	429a      	cmp	r2, r3
 8003870:	dbf0      	blt.n	8003854 <_read+0x12>
	}

return len;
 8003872:	687b      	ldr	r3, [r7, #4]
}
 8003874:	4618      	mov	r0, r3
 8003876:	3718      	adds	r7, #24
 8003878:	46bd      	mov	sp, r7
 800387a:	bd80      	pop	{r7, pc}

0800387c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800387c:	b580      	push	{r7, lr}
 800387e:	b086      	sub	sp, #24
 8003880:	af00      	add	r7, sp, #0
 8003882:	60f8      	str	r0, [r7, #12]
 8003884:	60b9      	str	r1, [r7, #8]
 8003886:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003888:	2300      	movs	r3, #0
 800388a:	617b      	str	r3, [r7, #20]
 800388c:	e009      	b.n	80038a2 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800388e:	68bb      	ldr	r3, [r7, #8]
 8003890:	1c5a      	adds	r2, r3, #1
 8003892:	60ba      	str	r2, [r7, #8]
 8003894:	781b      	ldrb	r3, [r3, #0]
 8003896:	4618      	mov	r0, r3
 8003898:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800389c:	697b      	ldr	r3, [r7, #20]
 800389e:	3301      	adds	r3, #1
 80038a0:	617b      	str	r3, [r7, #20]
 80038a2:	697a      	ldr	r2, [r7, #20]
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	429a      	cmp	r2, r3
 80038a8:	dbf1      	blt.n	800388e <_write+0x12>
	}
	return len;
 80038aa:	687b      	ldr	r3, [r7, #4]
}
 80038ac:	4618      	mov	r0, r3
 80038ae:	3718      	adds	r7, #24
 80038b0:	46bd      	mov	sp, r7
 80038b2:	bd80      	pop	{r7, pc}

080038b4 <_close>:

int _close(int file)
{
 80038b4:	b480      	push	{r7}
 80038b6:	b083      	sub	sp, #12
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]
	return -1;
 80038bc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80038c0:	4618      	mov	r0, r3
 80038c2:	370c      	adds	r7, #12
 80038c4:	46bd      	mov	sp, r7
 80038c6:	bc80      	pop	{r7}
 80038c8:	4770      	bx	lr

080038ca <_fstat>:


int _fstat(int file, struct stat *st)
{
 80038ca:	b480      	push	{r7}
 80038cc:	b083      	sub	sp, #12
 80038ce:	af00      	add	r7, sp, #0
 80038d0:	6078      	str	r0, [r7, #4]
 80038d2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80038d4:	683b      	ldr	r3, [r7, #0]
 80038d6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80038da:	605a      	str	r2, [r3, #4]
	return 0;
 80038dc:	2300      	movs	r3, #0
}
 80038de:	4618      	mov	r0, r3
 80038e0:	370c      	adds	r7, #12
 80038e2:	46bd      	mov	sp, r7
 80038e4:	bc80      	pop	{r7}
 80038e6:	4770      	bx	lr

080038e8 <_isatty>:

int _isatty(int file)
{
 80038e8:	b480      	push	{r7}
 80038ea:	b083      	sub	sp, #12
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
	return 1;
 80038f0:	2301      	movs	r3, #1
}
 80038f2:	4618      	mov	r0, r3
 80038f4:	370c      	adds	r7, #12
 80038f6:	46bd      	mov	sp, r7
 80038f8:	bc80      	pop	{r7}
 80038fa:	4770      	bx	lr

080038fc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80038fc:	b480      	push	{r7}
 80038fe:	b085      	sub	sp, #20
 8003900:	af00      	add	r7, sp, #0
 8003902:	60f8      	str	r0, [r7, #12]
 8003904:	60b9      	str	r1, [r7, #8]
 8003906:	607a      	str	r2, [r7, #4]
	return 0;
 8003908:	2300      	movs	r3, #0
}
 800390a:	4618      	mov	r0, r3
 800390c:	3714      	adds	r7, #20
 800390e:	46bd      	mov	sp, r7
 8003910:	bc80      	pop	{r7}
 8003912:	4770      	bx	lr

08003914 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003914:	b580      	push	{r7, lr}
 8003916:	b086      	sub	sp, #24
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800391c:	4a14      	ldr	r2, [pc, #80]	; (8003970 <_sbrk+0x5c>)
 800391e:	4b15      	ldr	r3, [pc, #84]	; (8003974 <_sbrk+0x60>)
 8003920:	1ad3      	subs	r3, r2, r3
 8003922:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003924:	697b      	ldr	r3, [r7, #20]
 8003926:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003928:	4b13      	ldr	r3, [pc, #76]	; (8003978 <_sbrk+0x64>)
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	2b00      	cmp	r3, #0
 800392e:	d102      	bne.n	8003936 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003930:	4b11      	ldr	r3, [pc, #68]	; (8003978 <_sbrk+0x64>)
 8003932:	4a12      	ldr	r2, [pc, #72]	; (800397c <_sbrk+0x68>)
 8003934:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003936:	4b10      	ldr	r3, [pc, #64]	; (8003978 <_sbrk+0x64>)
 8003938:	681a      	ldr	r2, [r3, #0]
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	4413      	add	r3, r2
 800393e:	693a      	ldr	r2, [r7, #16]
 8003940:	429a      	cmp	r2, r3
 8003942:	d207      	bcs.n	8003954 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003944:	f004 fa68 	bl	8007e18 <__errno>
 8003948:	4603      	mov	r3, r0
 800394a:	220c      	movs	r2, #12
 800394c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800394e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003952:	e009      	b.n	8003968 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003954:	4b08      	ldr	r3, [pc, #32]	; (8003978 <_sbrk+0x64>)
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800395a:	4b07      	ldr	r3, [pc, #28]	; (8003978 <_sbrk+0x64>)
 800395c:	681a      	ldr	r2, [r3, #0]
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	4413      	add	r3, r2
 8003962:	4a05      	ldr	r2, [pc, #20]	; (8003978 <_sbrk+0x64>)
 8003964:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003966:	68fb      	ldr	r3, [r7, #12]
}
 8003968:	4618      	mov	r0, r3
 800396a:	3718      	adds	r7, #24
 800396c:	46bd      	mov	sp, r7
 800396e:	bd80      	pop	{r7, pc}
 8003970:	20005000 	.word	0x20005000
 8003974:	00000400 	.word	0x00000400
 8003978:	200011c0 	.word	0x200011c0
 800397c:	20001d18 	.word	0x20001d18

08003980 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003980:	b480      	push	{r7}
 8003982:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003984:	bf00      	nop
 8003986:	46bd      	mov	sp, r7
 8003988:	bc80      	pop	{r7}
 800398a:	4770      	bx	lr

0800398c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800398c:	480c      	ldr	r0, [pc, #48]	; (80039c0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800398e:	490d      	ldr	r1, [pc, #52]	; (80039c4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003990:	4a0d      	ldr	r2, [pc, #52]	; (80039c8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003992:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003994:	e002      	b.n	800399c <LoopCopyDataInit>

08003996 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003996:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003998:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800399a:	3304      	adds	r3, #4

0800399c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800399c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800399e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80039a0:	d3f9      	bcc.n	8003996 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80039a2:	4a0a      	ldr	r2, [pc, #40]	; (80039cc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80039a4:	4c0a      	ldr	r4, [pc, #40]	; (80039d0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80039a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80039a8:	e001      	b.n	80039ae <LoopFillZerobss>

080039aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80039aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80039ac:	3204      	adds	r2, #4

080039ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80039ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80039b0:	d3fb      	bcc.n	80039aa <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80039b2:	f7ff ffe5 	bl	8003980 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80039b6:	f004 fa35 	bl	8007e24 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80039ba:	f7ff f945 	bl	8002c48 <main>
  bx lr
 80039be:	4770      	bx	lr
  ldr r0, =_sdata
 80039c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80039c4:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 80039c8:	0800c5ec 	.word	0x0800c5ec
  ldr r2, =_sbss
 80039cc:	200001ec 	.word	0x200001ec
  ldr r4, =_ebss
 80039d0:	20001d14 	.word	0x20001d14

080039d4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80039d4:	e7fe      	b.n	80039d4 <ADC1_2_IRQHandler>
	...

080039d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80039d8:	b580      	push	{r7, lr}
 80039da:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80039dc:	4b08      	ldr	r3, [pc, #32]	; (8003a00 <HAL_Init+0x28>)
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	4a07      	ldr	r2, [pc, #28]	; (8003a00 <HAL_Init+0x28>)
 80039e2:	f043 0310 	orr.w	r3, r3, #16
 80039e6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80039e8:	2003      	movs	r0, #3
 80039ea:	f000 fd9f 	bl	800452c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80039ee:	2000      	movs	r0, #0
 80039f0:	f000 f808 	bl	8003a04 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80039f4:	f7ff fd4a 	bl	800348c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80039f8:	2300      	movs	r3, #0
}
 80039fa:	4618      	mov	r0, r3
 80039fc:	bd80      	pop	{r7, pc}
 80039fe:	bf00      	nop
 8003a00:	40022000 	.word	0x40022000

08003a04 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003a04:	b580      	push	{r7, lr}
 8003a06:	b082      	sub	sp, #8
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003a0c:	4b12      	ldr	r3, [pc, #72]	; (8003a58 <HAL_InitTick+0x54>)
 8003a0e:	681a      	ldr	r2, [r3, #0]
 8003a10:	4b12      	ldr	r3, [pc, #72]	; (8003a5c <HAL_InitTick+0x58>)
 8003a12:	781b      	ldrb	r3, [r3, #0]
 8003a14:	4619      	mov	r1, r3
 8003a16:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003a1a:	fbb3 f3f1 	udiv	r3, r3, r1
 8003a1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a22:	4618      	mov	r0, r3
 8003a24:	f000 fdb7 	bl	8004596 <HAL_SYSTICK_Config>
 8003a28:	4603      	mov	r3, r0
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d001      	beq.n	8003a32 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003a2e:	2301      	movs	r3, #1
 8003a30:	e00e      	b.n	8003a50 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	2b0f      	cmp	r3, #15
 8003a36:	d80a      	bhi.n	8003a4e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003a38:	2200      	movs	r2, #0
 8003a3a:	6879      	ldr	r1, [r7, #4]
 8003a3c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003a40:	f000 fd7f 	bl	8004542 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003a44:	4a06      	ldr	r2, [pc, #24]	; (8003a60 <HAL_InitTick+0x5c>)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	e000      	b.n	8003a50 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003a4e:	2301      	movs	r3, #1
}
 8003a50:	4618      	mov	r0, r3
 8003a52:	3708      	adds	r7, #8
 8003a54:	46bd      	mov	sp, r7
 8003a56:	bd80      	pop	{r7, pc}
 8003a58:	20000010 	.word	0x20000010
 8003a5c:	20000018 	.word	0x20000018
 8003a60:	20000014 	.word	0x20000014

08003a64 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003a64:	b480      	push	{r7}
 8003a66:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003a68:	4b05      	ldr	r3, [pc, #20]	; (8003a80 <HAL_IncTick+0x1c>)
 8003a6a:	781b      	ldrb	r3, [r3, #0]
 8003a6c:	461a      	mov	r2, r3
 8003a6e:	4b05      	ldr	r3, [pc, #20]	; (8003a84 <HAL_IncTick+0x20>)
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	4413      	add	r3, r2
 8003a74:	4a03      	ldr	r2, [pc, #12]	; (8003a84 <HAL_IncTick+0x20>)
 8003a76:	6013      	str	r3, [r2, #0]
}
 8003a78:	bf00      	nop
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	bc80      	pop	{r7}
 8003a7e:	4770      	bx	lr
 8003a80:	20000018 	.word	0x20000018
 8003a84:	20001d00 	.word	0x20001d00

08003a88 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003a88:	b480      	push	{r7}
 8003a8a:	af00      	add	r7, sp, #0
  return uwTick;
 8003a8c:	4b02      	ldr	r3, [pc, #8]	; (8003a98 <HAL_GetTick+0x10>)
 8003a8e:	681b      	ldr	r3, [r3, #0]
}
 8003a90:	4618      	mov	r0, r3
 8003a92:	46bd      	mov	sp, r7
 8003a94:	bc80      	pop	{r7}
 8003a96:	4770      	bx	lr
 8003a98:	20001d00 	.word	0x20001d00

08003a9c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	b084      	sub	sp, #16
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003aa4:	f7ff fff0 	bl	8003a88 <HAL_GetTick>
 8003aa8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003ab4:	d005      	beq.n	8003ac2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003ab6:	4b0a      	ldr	r3, [pc, #40]	; (8003ae0 <HAL_Delay+0x44>)
 8003ab8:	781b      	ldrb	r3, [r3, #0]
 8003aba:	461a      	mov	r2, r3
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	4413      	add	r3, r2
 8003ac0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003ac2:	bf00      	nop
 8003ac4:	f7ff ffe0 	bl	8003a88 <HAL_GetTick>
 8003ac8:	4602      	mov	r2, r0
 8003aca:	68bb      	ldr	r3, [r7, #8]
 8003acc:	1ad3      	subs	r3, r2, r3
 8003ace:	68fa      	ldr	r2, [r7, #12]
 8003ad0:	429a      	cmp	r2, r3
 8003ad2:	d8f7      	bhi.n	8003ac4 <HAL_Delay+0x28>
  {
  }
}
 8003ad4:	bf00      	nop
 8003ad6:	bf00      	nop
 8003ad8:	3710      	adds	r7, #16
 8003ada:	46bd      	mov	sp, r7
 8003adc:	bd80      	pop	{r7, pc}
 8003ade:	bf00      	nop
 8003ae0:	20000018 	.word	0x20000018

08003ae4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	b086      	sub	sp, #24
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003aec:	2300      	movs	r3, #0
 8003aee:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8003af0:	2300      	movs	r3, #0
 8003af2:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8003af4:	2300      	movs	r3, #0
 8003af6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8003af8:	2300      	movs	r3, #0
 8003afa:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d101      	bne.n	8003b06 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8003b02:	2301      	movs	r3, #1
 8003b04:	e0be      	b.n	8003c84 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	689b      	ldr	r3, [r3, #8]
 8003b0a:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d109      	bne.n	8003b28 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	2200      	movs	r2, #0
 8003b18:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003b22:	6878      	ldr	r0, [r7, #4]
 8003b24:	f7ff fce4 	bl	80034f0 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8003b28:	6878      	ldr	r0, [r7, #4]
 8003b2a:	f000 fbf1 	bl	8004310 <ADC_ConversionStop_Disable>
 8003b2e:	4603      	mov	r3, r0
 8003b30:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b36:	f003 0310 	and.w	r3, r3, #16
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	f040 8099 	bne.w	8003c72 <HAL_ADC_Init+0x18e>
 8003b40:	7dfb      	ldrb	r3, [r7, #23]
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	f040 8095 	bne.w	8003c72 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b4c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003b50:	f023 0302 	bic.w	r3, r3, #2
 8003b54:	f043 0202 	orr.w	r2, r3, #2
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003b64:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	7b1b      	ldrb	r3, [r3, #12]
 8003b6a:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8003b6c:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003b6e:	68ba      	ldr	r2, [r7, #8]
 8003b70:	4313      	orrs	r3, r2
 8003b72:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	689b      	ldr	r3, [r3, #8]
 8003b78:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b7c:	d003      	beq.n	8003b86 <HAL_ADC_Init+0xa2>
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	689b      	ldr	r3, [r3, #8]
 8003b82:	2b01      	cmp	r3, #1
 8003b84:	d102      	bne.n	8003b8c <HAL_ADC_Init+0xa8>
 8003b86:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003b8a:	e000      	b.n	8003b8e <HAL_ADC_Init+0xaa>
 8003b8c:	2300      	movs	r3, #0
 8003b8e:	693a      	ldr	r2, [r7, #16]
 8003b90:	4313      	orrs	r3, r2
 8003b92:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	7d1b      	ldrb	r3, [r3, #20]
 8003b98:	2b01      	cmp	r3, #1
 8003b9a:	d119      	bne.n	8003bd0 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	7b1b      	ldrb	r3, [r3, #12]
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d109      	bne.n	8003bb8 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	699b      	ldr	r3, [r3, #24]
 8003ba8:	3b01      	subs	r3, #1
 8003baa:	035a      	lsls	r2, r3, #13
 8003bac:	693b      	ldr	r3, [r7, #16]
 8003bae:	4313      	orrs	r3, r2
 8003bb0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003bb4:	613b      	str	r3, [r7, #16]
 8003bb6:	e00b      	b.n	8003bd0 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bbc:	f043 0220 	orr.w	r2, r3, #32
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bc8:	f043 0201 	orr.w	r2, r3, #1
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	685b      	ldr	r3, [r3, #4]
 8003bd6:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	693a      	ldr	r2, [r7, #16]
 8003be0:	430a      	orrs	r2, r1
 8003be2:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	689a      	ldr	r2, [r3, #8]
 8003bea:	4b28      	ldr	r3, [pc, #160]	; (8003c8c <HAL_ADC_Init+0x1a8>)
 8003bec:	4013      	ands	r3, r2
 8003bee:	687a      	ldr	r2, [r7, #4]
 8003bf0:	6812      	ldr	r2, [r2, #0]
 8003bf2:	68b9      	ldr	r1, [r7, #8]
 8003bf4:	430b      	orrs	r3, r1
 8003bf6:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	689b      	ldr	r3, [r3, #8]
 8003bfc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c00:	d003      	beq.n	8003c0a <HAL_ADC_Init+0x126>
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	689b      	ldr	r3, [r3, #8]
 8003c06:	2b01      	cmp	r3, #1
 8003c08:	d104      	bne.n	8003c14 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	691b      	ldr	r3, [r3, #16]
 8003c0e:	3b01      	subs	r3, #1
 8003c10:	051b      	lsls	r3, r3, #20
 8003c12:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c1a:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	68fa      	ldr	r2, [r7, #12]
 8003c24:	430a      	orrs	r2, r1
 8003c26:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	689a      	ldr	r2, [r3, #8]
 8003c2e:	4b18      	ldr	r3, [pc, #96]	; (8003c90 <HAL_ADC_Init+0x1ac>)
 8003c30:	4013      	ands	r3, r2
 8003c32:	68ba      	ldr	r2, [r7, #8]
 8003c34:	429a      	cmp	r2, r3
 8003c36:	d10b      	bne.n	8003c50 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c42:	f023 0303 	bic.w	r3, r3, #3
 8003c46:	f043 0201 	orr.w	r2, r3, #1
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003c4e:	e018      	b.n	8003c82 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c54:	f023 0312 	bic.w	r3, r3, #18
 8003c58:	f043 0210 	orr.w	r2, r3, #16
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c64:	f043 0201 	orr.w	r2, r3, #1
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8003c6c:	2301      	movs	r3, #1
 8003c6e:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003c70:	e007      	b.n	8003c82 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c76:	f043 0210 	orr.w	r2, r3, #16
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8003c7e:	2301      	movs	r3, #1
 8003c80:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8003c82:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c84:	4618      	mov	r0, r3
 8003c86:	3718      	adds	r7, #24
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	bd80      	pop	{r7, pc}
 8003c8c:	ffe1f7fd 	.word	0xffe1f7fd
 8003c90:	ff1f0efe 	.word	0xff1f0efe

08003c94 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8003c94:	b580      	push	{r7, lr}
 8003c96:	b084      	sub	sp, #16
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003c9c:	2300      	movs	r3, #0
 8003c9e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003ca6:	2b01      	cmp	r3, #1
 8003ca8:	d101      	bne.n	8003cae <HAL_ADC_Start+0x1a>
 8003caa:	2302      	movs	r3, #2
 8003cac:	e098      	b.n	8003de0 <HAL_ADC_Start+0x14c>
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	2201      	movs	r2, #1
 8003cb2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8003cb6:	6878      	ldr	r0, [r7, #4]
 8003cb8:	f000 fad0 	bl	800425c <ADC_Enable>
 8003cbc:	4603      	mov	r3, r0
 8003cbe:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8003cc0:	7bfb      	ldrb	r3, [r7, #15]
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	f040 8087 	bne.w	8003dd6 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ccc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003cd0:	f023 0301 	bic.w	r3, r3, #1
 8003cd4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	4a41      	ldr	r2, [pc, #260]	; (8003de8 <HAL_ADC_Start+0x154>)
 8003ce2:	4293      	cmp	r3, r2
 8003ce4:	d105      	bne.n	8003cf2 <HAL_ADC_Start+0x5e>
 8003ce6:	4b41      	ldr	r3, [pc, #260]	; (8003dec <HAL_ADC_Start+0x158>)
 8003ce8:	685b      	ldr	r3, [r3, #4]
 8003cea:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d115      	bne.n	8003d1e <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cf6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	685b      	ldr	r3, [r3, #4]
 8003d04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d026      	beq.n	8003d5a <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d10:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003d14:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003d1c:	e01d      	b.n	8003d5a <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d22:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	4a2f      	ldr	r2, [pc, #188]	; (8003dec <HAL_ADC_Start+0x158>)
 8003d30:	4293      	cmp	r3, r2
 8003d32:	d004      	beq.n	8003d3e <HAL_ADC_Start+0xaa>
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	4a2b      	ldr	r2, [pc, #172]	; (8003de8 <HAL_ADC_Start+0x154>)
 8003d3a:	4293      	cmp	r3, r2
 8003d3c:	d10d      	bne.n	8003d5a <HAL_ADC_Start+0xc6>
 8003d3e:	4b2b      	ldr	r3, [pc, #172]	; (8003dec <HAL_ADC_Start+0x158>)
 8003d40:	685b      	ldr	r3, [r3, #4]
 8003d42:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d007      	beq.n	8003d5a <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d4e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003d52:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d5e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d006      	beq.n	8003d74 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d6a:	f023 0206 	bic.w	r2, r3, #6
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	62da      	str	r2, [r3, #44]	; 0x2c
 8003d72:	e002      	b.n	8003d7a <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2200      	movs	r2, #0
 8003d78:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f06f 0202 	mvn.w	r2, #2
 8003d8a:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	689b      	ldr	r3, [r3, #8]
 8003d92:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8003d96:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8003d9a:	d113      	bne.n	8003dc4 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8003da0:	4a11      	ldr	r2, [pc, #68]	; (8003de8 <HAL_ADC_Start+0x154>)
 8003da2:	4293      	cmp	r3, r2
 8003da4:	d105      	bne.n	8003db2 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8003da6:	4b11      	ldr	r3, [pc, #68]	; (8003dec <HAL_ADC_Start+0x158>)
 8003da8:	685b      	ldr	r3, [r3, #4]
 8003daa:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d108      	bne.n	8003dc4 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	689a      	ldr	r2, [r3, #8]
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8003dc0:	609a      	str	r2, [r3, #8]
 8003dc2:	e00c      	b.n	8003dde <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	689a      	ldr	r2, [r3, #8]
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8003dd2:	609a      	str	r2, [r3, #8]
 8003dd4:	e003      	b.n	8003dde <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	2200      	movs	r2, #0
 8003dda:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8003dde:	7bfb      	ldrb	r3, [r7, #15]
}
 8003de0:	4618      	mov	r0, r3
 8003de2:	3710      	adds	r7, #16
 8003de4:	46bd      	mov	sp, r7
 8003de6:	bd80      	pop	{r7, pc}
 8003de8:	40012800 	.word	0x40012800
 8003dec:	40012400 	.word	0x40012400

08003df0 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8003df0:	b580      	push	{r7, lr}
 8003df2:	b084      	sub	sp, #16
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003df8:	2300      	movs	r3, #0
 8003dfa:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003e02:	2b01      	cmp	r3, #1
 8003e04:	d101      	bne.n	8003e0a <HAL_ADC_Stop+0x1a>
 8003e06:	2302      	movs	r3, #2
 8003e08:	e01a      	b.n	8003e40 <HAL_ADC_Stop+0x50>
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	2201      	movs	r2, #1
 8003e0e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8003e12:	6878      	ldr	r0, [r7, #4]
 8003e14:	f000 fa7c 	bl	8004310 <ADC_ConversionStop_Disable>
 8003e18:	4603      	mov	r3, r0
 8003e1a:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8003e1c:	7bfb      	ldrb	r3, [r7, #15]
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d109      	bne.n	8003e36 <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e26:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003e2a:	f023 0301 	bic.w	r3, r3, #1
 8003e2e:	f043 0201 	orr.w	r2, r3, #1
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	2200      	movs	r2, #0
 8003e3a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8003e3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e40:	4618      	mov	r0, r3
 8003e42:	3710      	adds	r7, #16
 8003e44:	46bd      	mov	sp, r7
 8003e46:	bd80      	pop	{r7, pc}

08003e48 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8003e48:	b590      	push	{r4, r7, lr}
 8003e4a:	b087      	sub	sp, #28
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	6078      	str	r0, [r7, #4]
 8003e50:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003e52:	2300      	movs	r3, #0
 8003e54:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8003e56:	2300      	movs	r3, #0
 8003e58:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8003e5a:	2300      	movs	r3, #0
 8003e5c:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8003e5e:	f7ff fe13 	bl	8003a88 <HAL_GetTick>
 8003e62:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	689b      	ldr	r3, [r3, #8]
 8003e6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d00b      	beq.n	8003e8a <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e76:	f043 0220 	orr.w	r2, r3, #32
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	2200      	movs	r2, #0
 8003e82:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 8003e86:	2301      	movs	r3, #1
 8003e88:	e0d3      	b.n	8004032 <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	685b      	ldr	r3, [r3, #4]
 8003e90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d131      	bne.n	8003efc <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e9e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d12a      	bne.n	8003efc <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8003ea6:	e021      	b.n	8003eec <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8003ea8:	683b      	ldr	r3, [r7, #0]
 8003eaa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003eae:	d01d      	beq.n	8003eec <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8003eb0:	683b      	ldr	r3, [r7, #0]
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d007      	beq.n	8003ec6 <HAL_ADC_PollForConversion+0x7e>
 8003eb6:	f7ff fde7 	bl	8003a88 <HAL_GetTick>
 8003eba:	4602      	mov	r2, r0
 8003ebc:	697b      	ldr	r3, [r7, #20]
 8003ebe:	1ad3      	subs	r3, r2, r3
 8003ec0:	683a      	ldr	r2, [r7, #0]
 8003ec2:	429a      	cmp	r2, r3
 8003ec4:	d212      	bcs.n	8003eec <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f003 0302 	and.w	r3, r3, #2
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d10b      	bne.n	8003eec <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ed8:	f043 0204 	orr.w	r2, r3, #4
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            
            return HAL_TIMEOUT;
 8003ee8:	2303      	movs	r3, #3
 8003eea:	e0a2      	b.n	8004032 <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f003 0302 	and.w	r3, r3, #2
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d0d6      	beq.n	8003ea8 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8003efa:	e070      	b.n	8003fde <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8003efc:	4b4f      	ldr	r3, [pc, #316]	; (800403c <HAL_ADC_PollForConversion+0x1f4>)
 8003efe:	681c      	ldr	r4, [r3, #0]
 8003f00:	2002      	movs	r0, #2
 8003f02:	f002 fd51 	bl	80069a8 <HAL_RCCEx_GetPeriphCLKFreq>
 8003f06:	4603      	mov	r3, r0
 8003f08:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	6919      	ldr	r1, [r3, #16]
 8003f12:	4b4b      	ldr	r3, [pc, #300]	; (8004040 <HAL_ADC_PollForConversion+0x1f8>)
 8003f14:	400b      	ands	r3, r1
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d118      	bne.n	8003f4c <HAL_ADC_PollForConversion+0x104>
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	68d9      	ldr	r1, [r3, #12]
 8003f20:	4b48      	ldr	r3, [pc, #288]	; (8004044 <HAL_ADC_PollForConversion+0x1fc>)
 8003f22:	400b      	ands	r3, r1
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d111      	bne.n	8003f4c <HAL_ADC_PollForConversion+0x104>
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	6919      	ldr	r1, [r3, #16]
 8003f2e:	4b46      	ldr	r3, [pc, #280]	; (8004048 <HAL_ADC_PollForConversion+0x200>)
 8003f30:	400b      	ands	r3, r1
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d108      	bne.n	8003f48 <HAL_ADC_PollForConversion+0x100>
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	68d9      	ldr	r1, [r3, #12]
 8003f3c:	4b43      	ldr	r3, [pc, #268]	; (800404c <HAL_ADC_PollForConversion+0x204>)
 8003f3e:	400b      	ands	r3, r1
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d101      	bne.n	8003f48 <HAL_ADC_PollForConversion+0x100>
 8003f44:	2314      	movs	r3, #20
 8003f46:	e020      	b.n	8003f8a <HAL_ADC_PollForConversion+0x142>
 8003f48:	2329      	movs	r3, #41	; 0x29
 8003f4a:	e01e      	b.n	8003f8a <HAL_ADC_PollForConversion+0x142>
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	6919      	ldr	r1, [r3, #16]
 8003f52:	4b3d      	ldr	r3, [pc, #244]	; (8004048 <HAL_ADC_PollForConversion+0x200>)
 8003f54:	400b      	ands	r3, r1
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d106      	bne.n	8003f68 <HAL_ADC_PollForConversion+0x120>
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	68d9      	ldr	r1, [r3, #12]
 8003f60:	4b3a      	ldr	r3, [pc, #232]	; (800404c <HAL_ADC_PollForConversion+0x204>)
 8003f62:	400b      	ands	r3, r1
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d00d      	beq.n	8003f84 <HAL_ADC_PollForConversion+0x13c>
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	6919      	ldr	r1, [r3, #16]
 8003f6e:	4b38      	ldr	r3, [pc, #224]	; (8004050 <HAL_ADC_PollForConversion+0x208>)
 8003f70:	400b      	ands	r3, r1
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d108      	bne.n	8003f88 <HAL_ADC_PollForConversion+0x140>
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	68d9      	ldr	r1, [r3, #12]
 8003f7c:	4b34      	ldr	r3, [pc, #208]	; (8004050 <HAL_ADC_PollForConversion+0x208>)
 8003f7e:	400b      	ands	r3, r1
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d101      	bne.n	8003f88 <HAL_ADC_PollForConversion+0x140>
 8003f84:	2354      	movs	r3, #84	; 0x54
 8003f86:	e000      	b.n	8003f8a <HAL_ADC_PollForConversion+0x142>
 8003f88:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8003f8a:	fb02 f303 	mul.w	r3, r2, r3
 8003f8e:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8003f90:	e021      	b.n	8003fd6 <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8003f92:	683b      	ldr	r3, [r7, #0]
 8003f94:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003f98:	d01a      	beq.n	8003fd0 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8003f9a:	683b      	ldr	r3, [r7, #0]
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d007      	beq.n	8003fb0 <HAL_ADC_PollForConversion+0x168>
 8003fa0:	f7ff fd72 	bl	8003a88 <HAL_GetTick>
 8003fa4:	4602      	mov	r2, r0
 8003fa6:	697b      	ldr	r3, [r7, #20]
 8003fa8:	1ad3      	subs	r3, r2, r3
 8003faa:	683a      	ldr	r2, [r7, #0]
 8003fac:	429a      	cmp	r2, r3
 8003fae:	d20f      	bcs.n	8003fd0 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	693a      	ldr	r2, [r7, #16]
 8003fb4:	429a      	cmp	r2, r3
 8003fb6:	d90b      	bls.n	8003fd0 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fbc:	f043 0204 	orr.w	r2, r3, #4
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	629a      	str	r2, [r3, #40]	; 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            return HAL_TIMEOUT;
 8003fcc:	2303      	movs	r3, #3
 8003fce:	e030      	b.n	8004032 <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	3301      	adds	r3, #1
 8003fd4:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	693a      	ldr	r2, [r7, #16]
 8003fda:	429a      	cmp	r2, r3
 8003fdc:	d8d9      	bhi.n	8003f92 <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f06f 0212 	mvn.w	r2, #18
 8003fe6:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fec:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	689b      	ldr	r3, [r3, #8]
 8003ffa:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8003ffe:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8004002:	d115      	bne.n	8004030 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8004008:	2b00      	cmp	r3, #0
 800400a:	d111      	bne.n	8004030 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004010:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800401c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004020:	2b00      	cmp	r3, #0
 8004022:	d105      	bne.n	8004030 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004028:	f043 0201 	orr.w	r2, r3, #1
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8004030:	2300      	movs	r3, #0
}
 8004032:	4618      	mov	r0, r3
 8004034:	371c      	adds	r7, #28
 8004036:	46bd      	mov	sp, r7
 8004038:	bd90      	pop	{r4, r7, pc}
 800403a:	bf00      	nop
 800403c:	20000010 	.word	0x20000010
 8004040:	24924924 	.word	0x24924924
 8004044:	00924924 	.word	0x00924924
 8004048:	12492492 	.word	0x12492492
 800404c:	00492492 	.word	0x00492492
 8004050:	00249249 	.word	0x00249249

08004054 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8004054:	b480      	push	{r7}
 8004056:	b083      	sub	sp, #12
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8004062:	4618      	mov	r0, r3
 8004064:	370c      	adds	r7, #12
 8004066:	46bd      	mov	sp, r7
 8004068:	bc80      	pop	{r7}
 800406a:	4770      	bx	lr

0800406c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 800406c:	b480      	push	{r7}
 800406e:	b085      	sub	sp, #20
 8004070:	af00      	add	r7, sp, #0
 8004072:	6078      	str	r0, [r7, #4]
 8004074:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004076:	2300      	movs	r3, #0
 8004078:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800407a:	2300      	movs	r3, #0
 800407c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004084:	2b01      	cmp	r3, #1
 8004086:	d101      	bne.n	800408c <HAL_ADC_ConfigChannel+0x20>
 8004088:	2302      	movs	r3, #2
 800408a:	e0dc      	b.n	8004246 <HAL_ADC_ConfigChannel+0x1da>
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2201      	movs	r2, #1
 8004090:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8004094:	683b      	ldr	r3, [r7, #0]
 8004096:	685b      	ldr	r3, [r3, #4]
 8004098:	2b06      	cmp	r3, #6
 800409a:	d81c      	bhi.n	80040d6 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80040a2:	683b      	ldr	r3, [r7, #0]
 80040a4:	685a      	ldr	r2, [r3, #4]
 80040a6:	4613      	mov	r3, r2
 80040a8:	009b      	lsls	r3, r3, #2
 80040aa:	4413      	add	r3, r2
 80040ac:	3b05      	subs	r3, #5
 80040ae:	221f      	movs	r2, #31
 80040b0:	fa02 f303 	lsl.w	r3, r2, r3
 80040b4:	43db      	mvns	r3, r3
 80040b6:	4019      	ands	r1, r3
 80040b8:	683b      	ldr	r3, [r7, #0]
 80040ba:	6818      	ldr	r0, [r3, #0]
 80040bc:	683b      	ldr	r3, [r7, #0]
 80040be:	685a      	ldr	r2, [r3, #4]
 80040c0:	4613      	mov	r3, r2
 80040c2:	009b      	lsls	r3, r3, #2
 80040c4:	4413      	add	r3, r2
 80040c6:	3b05      	subs	r3, #5
 80040c8:	fa00 f203 	lsl.w	r2, r0, r3
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	430a      	orrs	r2, r1
 80040d2:	635a      	str	r2, [r3, #52]	; 0x34
 80040d4:	e03c      	b.n	8004150 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80040d6:	683b      	ldr	r3, [r7, #0]
 80040d8:	685b      	ldr	r3, [r3, #4]
 80040da:	2b0c      	cmp	r3, #12
 80040dc:	d81c      	bhi.n	8004118 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80040e4:	683b      	ldr	r3, [r7, #0]
 80040e6:	685a      	ldr	r2, [r3, #4]
 80040e8:	4613      	mov	r3, r2
 80040ea:	009b      	lsls	r3, r3, #2
 80040ec:	4413      	add	r3, r2
 80040ee:	3b23      	subs	r3, #35	; 0x23
 80040f0:	221f      	movs	r2, #31
 80040f2:	fa02 f303 	lsl.w	r3, r2, r3
 80040f6:	43db      	mvns	r3, r3
 80040f8:	4019      	ands	r1, r3
 80040fa:	683b      	ldr	r3, [r7, #0]
 80040fc:	6818      	ldr	r0, [r3, #0]
 80040fe:	683b      	ldr	r3, [r7, #0]
 8004100:	685a      	ldr	r2, [r3, #4]
 8004102:	4613      	mov	r3, r2
 8004104:	009b      	lsls	r3, r3, #2
 8004106:	4413      	add	r3, r2
 8004108:	3b23      	subs	r3, #35	; 0x23
 800410a:	fa00 f203 	lsl.w	r2, r0, r3
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	430a      	orrs	r2, r1
 8004114:	631a      	str	r2, [r3, #48]	; 0x30
 8004116:	e01b      	b.n	8004150 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800411e:	683b      	ldr	r3, [r7, #0]
 8004120:	685a      	ldr	r2, [r3, #4]
 8004122:	4613      	mov	r3, r2
 8004124:	009b      	lsls	r3, r3, #2
 8004126:	4413      	add	r3, r2
 8004128:	3b41      	subs	r3, #65	; 0x41
 800412a:	221f      	movs	r2, #31
 800412c:	fa02 f303 	lsl.w	r3, r2, r3
 8004130:	43db      	mvns	r3, r3
 8004132:	4019      	ands	r1, r3
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	6818      	ldr	r0, [r3, #0]
 8004138:	683b      	ldr	r3, [r7, #0]
 800413a:	685a      	ldr	r2, [r3, #4]
 800413c:	4613      	mov	r3, r2
 800413e:	009b      	lsls	r3, r3, #2
 8004140:	4413      	add	r3, r2
 8004142:	3b41      	subs	r3, #65	; 0x41
 8004144:	fa00 f203 	lsl.w	r2, r0, r3
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	430a      	orrs	r2, r1
 800414e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8004150:	683b      	ldr	r3, [r7, #0]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	2b09      	cmp	r3, #9
 8004156:	d91c      	bls.n	8004192 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	68d9      	ldr	r1, [r3, #12]
 800415e:	683b      	ldr	r3, [r7, #0]
 8004160:	681a      	ldr	r2, [r3, #0]
 8004162:	4613      	mov	r3, r2
 8004164:	005b      	lsls	r3, r3, #1
 8004166:	4413      	add	r3, r2
 8004168:	3b1e      	subs	r3, #30
 800416a:	2207      	movs	r2, #7
 800416c:	fa02 f303 	lsl.w	r3, r2, r3
 8004170:	43db      	mvns	r3, r3
 8004172:	4019      	ands	r1, r3
 8004174:	683b      	ldr	r3, [r7, #0]
 8004176:	6898      	ldr	r0, [r3, #8]
 8004178:	683b      	ldr	r3, [r7, #0]
 800417a:	681a      	ldr	r2, [r3, #0]
 800417c:	4613      	mov	r3, r2
 800417e:	005b      	lsls	r3, r3, #1
 8004180:	4413      	add	r3, r2
 8004182:	3b1e      	subs	r3, #30
 8004184:	fa00 f203 	lsl.w	r2, r0, r3
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	430a      	orrs	r2, r1
 800418e:	60da      	str	r2, [r3, #12]
 8004190:	e019      	b.n	80041c6 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	6919      	ldr	r1, [r3, #16]
 8004198:	683b      	ldr	r3, [r7, #0]
 800419a:	681a      	ldr	r2, [r3, #0]
 800419c:	4613      	mov	r3, r2
 800419e:	005b      	lsls	r3, r3, #1
 80041a0:	4413      	add	r3, r2
 80041a2:	2207      	movs	r2, #7
 80041a4:	fa02 f303 	lsl.w	r3, r2, r3
 80041a8:	43db      	mvns	r3, r3
 80041aa:	4019      	ands	r1, r3
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	6898      	ldr	r0, [r3, #8]
 80041b0:	683b      	ldr	r3, [r7, #0]
 80041b2:	681a      	ldr	r2, [r3, #0]
 80041b4:	4613      	mov	r3, r2
 80041b6:	005b      	lsls	r3, r3, #1
 80041b8:	4413      	add	r3, r2
 80041ba:	fa00 f203 	lsl.w	r2, r0, r3
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	430a      	orrs	r2, r1
 80041c4:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	2b10      	cmp	r3, #16
 80041cc:	d003      	beq.n	80041d6 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80041ce:	683b      	ldr	r3, [r7, #0]
 80041d0:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80041d2:	2b11      	cmp	r3, #17
 80041d4:	d132      	bne.n	800423c <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	4a1d      	ldr	r2, [pc, #116]	; (8004250 <HAL_ADC_ConfigChannel+0x1e4>)
 80041dc:	4293      	cmp	r3, r2
 80041de:	d125      	bne.n	800422c <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	689b      	ldr	r3, [r3, #8]
 80041e6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d126      	bne.n	800423c <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	689a      	ldr	r2, [r3, #8]
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80041fc:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80041fe:	683b      	ldr	r3, [r7, #0]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	2b10      	cmp	r3, #16
 8004204:	d11a      	bne.n	800423c <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004206:	4b13      	ldr	r3, [pc, #76]	; (8004254 <HAL_ADC_ConfigChannel+0x1e8>)
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	4a13      	ldr	r2, [pc, #76]	; (8004258 <HAL_ADC_ConfigChannel+0x1ec>)
 800420c:	fba2 2303 	umull	r2, r3, r2, r3
 8004210:	0c9a      	lsrs	r2, r3, #18
 8004212:	4613      	mov	r3, r2
 8004214:	009b      	lsls	r3, r3, #2
 8004216:	4413      	add	r3, r2
 8004218:	005b      	lsls	r3, r3, #1
 800421a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800421c:	e002      	b.n	8004224 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800421e:	68bb      	ldr	r3, [r7, #8]
 8004220:	3b01      	subs	r3, #1
 8004222:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8004224:	68bb      	ldr	r3, [r7, #8]
 8004226:	2b00      	cmp	r3, #0
 8004228:	d1f9      	bne.n	800421e <HAL_ADC_ConfigChannel+0x1b2>
 800422a:	e007      	b.n	800423c <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004230:	f043 0220 	orr.w	r2, r3, #32
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8004238:	2301      	movs	r3, #1
 800423a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2200      	movs	r2, #0
 8004240:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8004244:	7bfb      	ldrb	r3, [r7, #15]
}
 8004246:	4618      	mov	r0, r3
 8004248:	3714      	adds	r7, #20
 800424a:	46bd      	mov	sp, r7
 800424c:	bc80      	pop	{r7}
 800424e:	4770      	bx	lr
 8004250:	40012400 	.word	0x40012400
 8004254:	20000010 	.word	0x20000010
 8004258:	431bde83 	.word	0x431bde83

0800425c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 800425c:	b580      	push	{r7, lr}
 800425e:	b084      	sub	sp, #16
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004264:	2300      	movs	r3, #0
 8004266:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8004268:	2300      	movs	r3, #0
 800426a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	689b      	ldr	r3, [r3, #8]
 8004272:	f003 0301 	and.w	r3, r3, #1
 8004276:	2b01      	cmp	r3, #1
 8004278:	d040      	beq.n	80042fc <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	689a      	ldr	r2, [r3, #8]
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f042 0201 	orr.w	r2, r2, #1
 8004288:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800428a:	4b1f      	ldr	r3, [pc, #124]	; (8004308 <ADC_Enable+0xac>)
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	4a1f      	ldr	r2, [pc, #124]	; (800430c <ADC_Enable+0xb0>)
 8004290:	fba2 2303 	umull	r2, r3, r2, r3
 8004294:	0c9b      	lsrs	r3, r3, #18
 8004296:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8004298:	e002      	b.n	80042a0 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 800429a:	68bb      	ldr	r3, [r7, #8]
 800429c:	3b01      	subs	r3, #1
 800429e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80042a0:	68bb      	ldr	r3, [r7, #8]
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d1f9      	bne.n	800429a <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80042a6:	f7ff fbef 	bl	8003a88 <HAL_GetTick>
 80042aa:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80042ac:	e01f      	b.n	80042ee <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80042ae:	f7ff fbeb 	bl	8003a88 <HAL_GetTick>
 80042b2:	4602      	mov	r2, r0
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	1ad3      	subs	r3, r2, r3
 80042b8:	2b02      	cmp	r3, #2
 80042ba:	d918      	bls.n	80042ee <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	689b      	ldr	r3, [r3, #8]
 80042c2:	f003 0301 	and.w	r3, r3, #1
 80042c6:	2b01      	cmp	r3, #1
 80042c8:	d011      	beq.n	80042ee <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042ce:	f043 0210 	orr.w	r2, r3, #16
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042da:	f043 0201 	orr.w	r2, r3, #1
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	2200      	movs	r2, #0
 80042e6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 80042ea:	2301      	movs	r3, #1
 80042ec:	e007      	b.n	80042fe <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	689b      	ldr	r3, [r3, #8]
 80042f4:	f003 0301 	and.w	r3, r3, #1
 80042f8:	2b01      	cmp	r3, #1
 80042fa:	d1d8      	bne.n	80042ae <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80042fc:	2300      	movs	r3, #0
}
 80042fe:	4618      	mov	r0, r3
 8004300:	3710      	adds	r7, #16
 8004302:	46bd      	mov	sp, r7
 8004304:	bd80      	pop	{r7, pc}
 8004306:	bf00      	nop
 8004308:	20000010 	.word	0x20000010
 800430c:	431bde83 	.word	0x431bde83

08004310 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8004310:	b580      	push	{r7, lr}
 8004312:	b084      	sub	sp, #16
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004318:	2300      	movs	r3, #0
 800431a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	689b      	ldr	r3, [r3, #8]
 8004322:	f003 0301 	and.w	r3, r3, #1
 8004326:	2b01      	cmp	r3, #1
 8004328:	d12e      	bne.n	8004388 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	689a      	ldr	r2, [r3, #8]
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f022 0201 	bic.w	r2, r2, #1
 8004338:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800433a:	f7ff fba5 	bl	8003a88 <HAL_GetTick>
 800433e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8004340:	e01b      	b.n	800437a <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004342:	f7ff fba1 	bl	8003a88 <HAL_GetTick>
 8004346:	4602      	mov	r2, r0
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	1ad3      	subs	r3, r2, r3
 800434c:	2b02      	cmp	r3, #2
 800434e:	d914      	bls.n	800437a <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	689b      	ldr	r3, [r3, #8]
 8004356:	f003 0301 	and.w	r3, r3, #1
 800435a:	2b01      	cmp	r3, #1
 800435c:	d10d      	bne.n	800437a <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004362:	f043 0210 	orr.w	r2, r3, #16
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800436e:	f043 0201 	orr.w	r2, r3, #1
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8004376:	2301      	movs	r3, #1
 8004378:	e007      	b.n	800438a <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	689b      	ldr	r3, [r3, #8]
 8004380:	f003 0301 	and.w	r3, r3, #1
 8004384:	2b01      	cmp	r3, #1
 8004386:	d0dc      	beq.n	8004342 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8004388:	2300      	movs	r3, #0
}
 800438a:	4618      	mov	r0, r3
 800438c:	3710      	adds	r7, #16
 800438e:	46bd      	mov	sp, r7
 8004390:	bd80      	pop	{r7, pc}
	...

08004394 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004394:	b480      	push	{r7}
 8004396:	b085      	sub	sp, #20
 8004398:	af00      	add	r7, sp, #0
 800439a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	f003 0307 	and.w	r3, r3, #7
 80043a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80043a4:	4b0c      	ldr	r3, [pc, #48]	; (80043d8 <__NVIC_SetPriorityGrouping+0x44>)
 80043a6:	68db      	ldr	r3, [r3, #12]
 80043a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80043aa:	68ba      	ldr	r2, [r7, #8]
 80043ac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80043b0:	4013      	ands	r3, r2
 80043b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80043b8:	68bb      	ldr	r3, [r7, #8]
 80043ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80043bc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80043c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80043c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80043c6:	4a04      	ldr	r2, [pc, #16]	; (80043d8 <__NVIC_SetPriorityGrouping+0x44>)
 80043c8:	68bb      	ldr	r3, [r7, #8]
 80043ca:	60d3      	str	r3, [r2, #12]
}
 80043cc:	bf00      	nop
 80043ce:	3714      	adds	r7, #20
 80043d0:	46bd      	mov	sp, r7
 80043d2:	bc80      	pop	{r7}
 80043d4:	4770      	bx	lr
 80043d6:	bf00      	nop
 80043d8:	e000ed00 	.word	0xe000ed00

080043dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80043dc:	b480      	push	{r7}
 80043de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80043e0:	4b04      	ldr	r3, [pc, #16]	; (80043f4 <__NVIC_GetPriorityGrouping+0x18>)
 80043e2:	68db      	ldr	r3, [r3, #12]
 80043e4:	0a1b      	lsrs	r3, r3, #8
 80043e6:	f003 0307 	and.w	r3, r3, #7
}
 80043ea:	4618      	mov	r0, r3
 80043ec:	46bd      	mov	sp, r7
 80043ee:	bc80      	pop	{r7}
 80043f0:	4770      	bx	lr
 80043f2:	bf00      	nop
 80043f4:	e000ed00 	.word	0xe000ed00

080043f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80043f8:	b480      	push	{r7}
 80043fa:	b083      	sub	sp, #12
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	4603      	mov	r3, r0
 8004400:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004402:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004406:	2b00      	cmp	r3, #0
 8004408:	db0b      	blt.n	8004422 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800440a:	79fb      	ldrb	r3, [r7, #7]
 800440c:	f003 021f 	and.w	r2, r3, #31
 8004410:	4906      	ldr	r1, [pc, #24]	; (800442c <__NVIC_EnableIRQ+0x34>)
 8004412:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004416:	095b      	lsrs	r3, r3, #5
 8004418:	2001      	movs	r0, #1
 800441a:	fa00 f202 	lsl.w	r2, r0, r2
 800441e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004422:	bf00      	nop
 8004424:	370c      	adds	r7, #12
 8004426:	46bd      	mov	sp, r7
 8004428:	bc80      	pop	{r7}
 800442a:	4770      	bx	lr
 800442c:	e000e100 	.word	0xe000e100

08004430 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004430:	b480      	push	{r7}
 8004432:	b083      	sub	sp, #12
 8004434:	af00      	add	r7, sp, #0
 8004436:	4603      	mov	r3, r0
 8004438:	6039      	str	r1, [r7, #0]
 800443a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800443c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004440:	2b00      	cmp	r3, #0
 8004442:	db0a      	blt.n	800445a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004444:	683b      	ldr	r3, [r7, #0]
 8004446:	b2da      	uxtb	r2, r3
 8004448:	490c      	ldr	r1, [pc, #48]	; (800447c <__NVIC_SetPriority+0x4c>)
 800444a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800444e:	0112      	lsls	r2, r2, #4
 8004450:	b2d2      	uxtb	r2, r2
 8004452:	440b      	add	r3, r1
 8004454:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004458:	e00a      	b.n	8004470 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800445a:	683b      	ldr	r3, [r7, #0]
 800445c:	b2da      	uxtb	r2, r3
 800445e:	4908      	ldr	r1, [pc, #32]	; (8004480 <__NVIC_SetPriority+0x50>)
 8004460:	79fb      	ldrb	r3, [r7, #7]
 8004462:	f003 030f 	and.w	r3, r3, #15
 8004466:	3b04      	subs	r3, #4
 8004468:	0112      	lsls	r2, r2, #4
 800446a:	b2d2      	uxtb	r2, r2
 800446c:	440b      	add	r3, r1
 800446e:	761a      	strb	r2, [r3, #24]
}
 8004470:	bf00      	nop
 8004472:	370c      	adds	r7, #12
 8004474:	46bd      	mov	sp, r7
 8004476:	bc80      	pop	{r7}
 8004478:	4770      	bx	lr
 800447a:	bf00      	nop
 800447c:	e000e100 	.word	0xe000e100
 8004480:	e000ed00 	.word	0xe000ed00

08004484 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004484:	b480      	push	{r7}
 8004486:	b089      	sub	sp, #36	; 0x24
 8004488:	af00      	add	r7, sp, #0
 800448a:	60f8      	str	r0, [r7, #12]
 800448c:	60b9      	str	r1, [r7, #8]
 800448e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	f003 0307 	and.w	r3, r3, #7
 8004496:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004498:	69fb      	ldr	r3, [r7, #28]
 800449a:	f1c3 0307 	rsb	r3, r3, #7
 800449e:	2b04      	cmp	r3, #4
 80044a0:	bf28      	it	cs
 80044a2:	2304      	movcs	r3, #4
 80044a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80044a6:	69fb      	ldr	r3, [r7, #28]
 80044a8:	3304      	adds	r3, #4
 80044aa:	2b06      	cmp	r3, #6
 80044ac:	d902      	bls.n	80044b4 <NVIC_EncodePriority+0x30>
 80044ae:	69fb      	ldr	r3, [r7, #28]
 80044b0:	3b03      	subs	r3, #3
 80044b2:	e000      	b.n	80044b6 <NVIC_EncodePriority+0x32>
 80044b4:	2300      	movs	r3, #0
 80044b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80044b8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80044bc:	69bb      	ldr	r3, [r7, #24]
 80044be:	fa02 f303 	lsl.w	r3, r2, r3
 80044c2:	43da      	mvns	r2, r3
 80044c4:	68bb      	ldr	r3, [r7, #8]
 80044c6:	401a      	ands	r2, r3
 80044c8:	697b      	ldr	r3, [r7, #20]
 80044ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80044cc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80044d0:	697b      	ldr	r3, [r7, #20]
 80044d2:	fa01 f303 	lsl.w	r3, r1, r3
 80044d6:	43d9      	mvns	r1, r3
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80044dc:	4313      	orrs	r3, r2
         );
}
 80044de:	4618      	mov	r0, r3
 80044e0:	3724      	adds	r7, #36	; 0x24
 80044e2:	46bd      	mov	sp, r7
 80044e4:	bc80      	pop	{r7}
 80044e6:	4770      	bx	lr

080044e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80044e8:	b580      	push	{r7, lr}
 80044ea:	b082      	sub	sp, #8
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	3b01      	subs	r3, #1
 80044f4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80044f8:	d301      	bcc.n	80044fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80044fa:	2301      	movs	r3, #1
 80044fc:	e00f      	b.n	800451e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80044fe:	4a0a      	ldr	r2, [pc, #40]	; (8004528 <SysTick_Config+0x40>)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	3b01      	subs	r3, #1
 8004504:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004506:	210f      	movs	r1, #15
 8004508:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800450c:	f7ff ff90 	bl	8004430 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004510:	4b05      	ldr	r3, [pc, #20]	; (8004528 <SysTick_Config+0x40>)
 8004512:	2200      	movs	r2, #0
 8004514:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004516:	4b04      	ldr	r3, [pc, #16]	; (8004528 <SysTick_Config+0x40>)
 8004518:	2207      	movs	r2, #7
 800451a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800451c:	2300      	movs	r3, #0
}
 800451e:	4618      	mov	r0, r3
 8004520:	3708      	adds	r7, #8
 8004522:	46bd      	mov	sp, r7
 8004524:	bd80      	pop	{r7, pc}
 8004526:	bf00      	nop
 8004528:	e000e010 	.word	0xe000e010

0800452c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800452c:	b580      	push	{r7, lr}
 800452e:	b082      	sub	sp, #8
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004534:	6878      	ldr	r0, [r7, #4]
 8004536:	f7ff ff2d 	bl	8004394 <__NVIC_SetPriorityGrouping>
}
 800453a:	bf00      	nop
 800453c:	3708      	adds	r7, #8
 800453e:	46bd      	mov	sp, r7
 8004540:	bd80      	pop	{r7, pc}

08004542 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004542:	b580      	push	{r7, lr}
 8004544:	b086      	sub	sp, #24
 8004546:	af00      	add	r7, sp, #0
 8004548:	4603      	mov	r3, r0
 800454a:	60b9      	str	r1, [r7, #8]
 800454c:	607a      	str	r2, [r7, #4]
 800454e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004550:	2300      	movs	r3, #0
 8004552:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004554:	f7ff ff42 	bl	80043dc <__NVIC_GetPriorityGrouping>
 8004558:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800455a:	687a      	ldr	r2, [r7, #4]
 800455c:	68b9      	ldr	r1, [r7, #8]
 800455e:	6978      	ldr	r0, [r7, #20]
 8004560:	f7ff ff90 	bl	8004484 <NVIC_EncodePriority>
 8004564:	4602      	mov	r2, r0
 8004566:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800456a:	4611      	mov	r1, r2
 800456c:	4618      	mov	r0, r3
 800456e:	f7ff ff5f 	bl	8004430 <__NVIC_SetPriority>
}
 8004572:	bf00      	nop
 8004574:	3718      	adds	r7, #24
 8004576:	46bd      	mov	sp, r7
 8004578:	bd80      	pop	{r7, pc}

0800457a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800457a:	b580      	push	{r7, lr}
 800457c:	b082      	sub	sp, #8
 800457e:	af00      	add	r7, sp, #0
 8004580:	4603      	mov	r3, r0
 8004582:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004584:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004588:	4618      	mov	r0, r3
 800458a:	f7ff ff35 	bl	80043f8 <__NVIC_EnableIRQ>
}
 800458e:	bf00      	nop
 8004590:	3708      	adds	r7, #8
 8004592:	46bd      	mov	sp, r7
 8004594:	bd80      	pop	{r7, pc}

08004596 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004596:	b580      	push	{r7, lr}
 8004598:	b082      	sub	sp, #8
 800459a:	af00      	add	r7, sp, #0
 800459c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800459e:	6878      	ldr	r0, [r7, #4]
 80045a0:	f7ff ffa2 	bl	80044e8 <SysTick_Config>
 80045a4:	4603      	mov	r3, r0
}
 80045a6:	4618      	mov	r0, r3
 80045a8:	3708      	adds	r7, #8
 80045aa:	46bd      	mov	sp, r7
 80045ac:	bd80      	pop	{r7, pc}

080045ae <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80045ae:	b480      	push	{r7}
 80045b0:	b085      	sub	sp, #20
 80045b2:	af00      	add	r7, sp, #0
 80045b4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80045b6:	2300      	movs	r3, #0
 80045b8:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80045c0:	2b02      	cmp	r3, #2
 80045c2:	d008      	beq.n	80045d6 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2204      	movs	r2, #4
 80045c8:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	2200      	movs	r2, #0
 80045ce:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80045d2:	2301      	movs	r3, #1
 80045d4:	e020      	b.n	8004618 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	681a      	ldr	r2, [r3, #0]
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f022 020e 	bic.w	r2, r2, #14
 80045e4:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	681a      	ldr	r2, [r3, #0]
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f022 0201 	bic.w	r2, r2, #1
 80045f4:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045fe:	2101      	movs	r1, #1
 8004600:	fa01 f202 	lsl.w	r2, r1, r2
 8004604:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	2201      	movs	r2, #1
 800460a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	2200      	movs	r2, #0
 8004612:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8004616:	7bfb      	ldrb	r3, [r7, #15]
}
 8004618:	4618      	mov	r0, r3
 800461a:	3714      	adds	r7, #20
 800461c:	46bd      	mov	sp, r7
 800461e:	bc80      	pop	{r7}
 8004620:	4770      	bx	lr
	...

08004624 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8004624:	b580      	push	{r7, lr}
 8004626:	b084      	sub	sp, #16
 8004628:	af00      	add	r7, sp, #0
 800462a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800462c:	2300      	movs	r3, #0
 800462e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004636:	2b02      	cmp	r3, #2
 8004638:	d005      	beq.n	8004646 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	2204      	movs	r2, #4
 800463e:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8004640:	2301      	movs	r3, #1
 8004642:	73fb      	strb	r3, [r7, #15]
 8004644:	e051      	b.n	80046ea <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	681a      	ldr	r2, [r3, #0]
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f022 020e 	bic.w	r2, r2, #14
 8004654:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	681a      	ldr	r2, [r3, #0]
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f022 0201 	bic.w	r2, r2, #1
 8004664:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	4a22      	ldr	r2, [pc, #136]	; (80046f4 <HAL_DMA_Abort_IT+0xd0>)
 800466c:	4293      	cmp	r3, r2
 800466e:	d029      	beq.n	80046c4 <HAL_DMA_Abort_IT+0xa0>
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	4a20      	ldr	r2, [pc, #128]	; (80046f8 <HAL_DMA_Abort_IT+0xd4>)
 8004676:	4293      	cmp	r3, r2
 8004678:	d022      	beq.n	80046c0 <HAL_DMA_Abort_IT+0x9c>
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	4a1f      	ldr	r2, [pc, #124]	; (80046fc <HAL_DMA_Abort_IT+0xd8>)
 8004680:	4293      	cmp	r3, r2
 8004682:	d01a      	beq.n	80046ba <HAL_DMA_Abort_IT+0x96>
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	4a1d      	ldr	r2, [pc, #116]	; (8004700 <HAL_DMA_Abort_IT+0xdc>)
 800468a:	4293      	cmp	r3, r2
 800468c:	d012      	beq.n	80046b4 <HAL_DMA_Abort_IT+0x90>
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	4a1c      	ldr	r2, [pc, #112]	; (8004704 <HAL_DMA_Abort_IT+0xe0>)
 8004694:	4293      	cmp	r3, r2
 8004696:	d00a      	beq.n	80046ae <HAL_DMA_Abort_IT+0x8a>
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	4a1a      	ldr	r2, [pc, #104]	; (8004708 <HAL_DMA_Abort_IT+0xe4>)
 800469e:	4293      	cmp	r3, r2
 80046a0:	d102      	bne.n	80046a8 <HAL_DMA_Abort_IT+0x84>
 80046a2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80046a6:	e00e      	b.n	80046c6 <HAL_DMA_Abort_IT+0xa2>
 80046a8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80046ac:	e00b      	b.n	80046c6 <HAL_DMA_Abort_IT+0xa2>
 80046ae:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80046b2:	e008      	b.n	80046c6 <HAL_DMA_Abort_IT+0xa2>
 80046b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80046b8:	e005      	b.n	80046c6 <HAL_DMA_Abort_IT+0xa2>
 80046ba:	f44f 7380 	mov.w	r3, #256	; 0x100
 80046be:	e002      	b.n	80046c6 <HAL_DMA_Abort_IT+0xa2>
 80046c0:	2310      	movs	r3, #16
 80046c2:	e000      	b.n	80046c6 <HAL_DMA_Abort_IT+0xa2>
 80046c4:	2301      	movs	r3, #1
 80046c6:	4a11      	ldr	r2, [pc, #68]	; (800470c <HAL_DMA_Abort_IT+0xe8>)
 80046c8:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	2201      	movs	r2, #1
 80046ce:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	2200      	movs	r2, #0
 80046d6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d003      	beq.n	80046ea <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046e6:	6878      	ldr	r0, [r7, #4]
 80046e8:	4798      	blx	r3
    } 
  }
  return status;
 80046ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80046ec:	4618      	mov	r0, r3
 80046ee:	3710      	adds	r7, #16
 80046f0:	46bd      	mov	sp, r7
 80046f2:	bd80      	pop	{r7, pc}
 80046f4:	40020008 	.word	0x40020008
 80046f8:	4002001c 	.word	0x4002001c
 80046fc:	40020030 	.word	0x40020030
 8004700:	40020044 	.word	0x40020044
 8004704:	40020058 	.word	0x40020058
 8004708:	4002006c 	.word	0x4002006c
 800470c:	40020000 	.word	0x40020000

08004710 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004710:	b480      	push	{r7}
 8004712:	b08b      	sub	sp, #44	; 0x2c
 8004714:	af00      	add	r7, sp, #0
 8004716:	6078      	str	r0, [r7, #4]
 8004718:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800471a:	2300      	movs	r3, #0
 800471c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800471e:	2300      	movs	r3, #0
 8004720:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004722:	e169      	b.n	80049f8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8004724:	2201      	movs	r2, #1
 8004726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004728:	fa02 f303 	lsl.w	r3, r2, r3
 800472c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800472e:	683b      	ldr	r3, [r7, #0]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	69fa      	ldr	r2, [r7, #28]
 8004734:	4013      	ands	r3, r2
 8004736:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8004738:	69ba      	ldr	r2, [r7, #24]
 800473a:	69fb      	ldr	r3, [r7, #28]
 800473c:	429a      	cmp	r2, r3
 800473e:	f040 8158 	bne.w	80049f2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8004742:	683b      	ldr	r3, [r7, #0]
 8004744:	685b      	ldr	r3, [r3, #4]
 8004746:	4a9a      	ldr	r2, [pc, #616]	; (80049b0 <HAL_GPIO_Init+0x2a0>)
 8004748:	4293      	cmp	r3, r2
 800474a:	d05e      	beq.n	800480a <HAL_GPIO_Init+0xfa>
 800474c:	4a98      	ldr	r2, [pc, #608]	; (80049b0 <HAL_GPIO_Init+0x2a0>)
 800474e:	4293      	cmp	r3, r2
 8004750:	d875      	bhi.n	800483e <HAL_GPIO_Init+0x12e>
 8004752:	4a98      	ldr	r2, [pc, #608]	; (80049b4 <HAL_GPIO_Init+0x2a4>)
 8004754:	4293      	cmp	r3, r2
 8004756:	d058      	beq.n	800480a <HAL_GPIO_Init+0xfa>
 8004758:	4a96      	ldr	r2, [pc, #600]	; (80049b4 <HAL_GPIO_Init+0x2a4>)
 800475a:	4293      	cmp	r3, r2
 800475c:	d86f      	bhi.n	800483e <HAL_GPIO_Init+0x12e>
 800475e:	4a96      	ldr	r2, [pc, #600]	; (80049b8 <HAL_GPIO_Init+0x2a8>)
 8004760:	4293      	cmp	r3, r2
 8004762:	d052      	beq.n	800480a <HAL_GPIO_Init+0xfa>
 8004764:	4a94      	ldr	r2, [pc, #592]	; (80049b8 <HAL_GPIO_Init+0x2a8>)
 8004766:	4293      	cmp	r3, r2
 8004768:	d869      	bhi.n	800483e <HAL_GPIO_Init+0x12e>
 800476a:	4a94      	ldr	r2, [pc, #592]	; (80049bc <HAL_GPIO_Init+0x2ac>)
 800476c:	4293      	cmp	r3, r2
 800476e:	d04c      	beq.n	800480a <HAL_GPIO_Init+0xfa>
 8004770:	4a92      	ldr	r2, [pc, #584]	; (80049bc <HAL_GPIO_Init+0x2ac>)
 8004772:	4293      	cmp	r3, r2
 8004774:	d863      	bhi.n	800483e <HAL_GPIO_Init+0x12e>
 8004776:	4a92      	ldr	r2, [pc, #584]	; (80049c0 <HAL_GPIO_Init+0x2b0>)
 8004778:	4293      	cmp	r3, r2
 800477a:	d046      	beq.n	800480a <HAL_GPIO_Init+0xfa>
 800477c:	4a90      	ldr	r2, [pc, #576]	; (80049c0 <HAL_GPIO_Init+0x2b0>)
 800477e:	4293      	cmp	r3, r2
 8004780:	d85d      	bhi.n	800483e <HAL_GPIO_Init+0x12e>
 8004782:	2b12      	cmp	r3, #18
 8004784:	d82a      	bhi.n	80047dc <HAL_GPIO_Init+0xcc>
 8004786:	2b12      	cmp	r3, #18
 8004788:	d859      	bhi.n	800483e <HAL_GPIO_Init+0x12e>
 800478a:	a201      	add	r2, pc, #4	; (adr r2, 8004790 <HAL_GPIO_Init+0x80>)
 800478c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004790:	0800480b 	.word	0x0800480b
 8004794:	080047e5 	.word	0x080047e5
 8004798:	080047f7 	.word	0x080047f7
 800479c:	08004839 	.word	0x08004839
 80047a0:	0800483f 	.word	0x0800483f
 80047a4:	0800483f 	.word	0x0800483f
 80047a8:	0800483f 	.word	0x0800483f
 80047ac:	0800483f 	.word	0x0800483f
 80047b0:	0800483f 	.word	0x0800483f
 80047b4:	0800483f 	.word	0x0800483f
 80047b8:	0800483f 	.word	0x0800483f
 80047bc:	0800483f 	.word	0x0800483f
 80047c0:	0800483f 	.word	0x0800483f
 80047c4:	0800483f 	.word	0x0800483f
 80047c8:	0800483f 	.word	0x0800483f
 80047cc:	0800483f 	.word	0x0800483f
 80047d0:	0800483f 	.word	0x0800483f
 80047d4:	080047ed 	.word	0x080047ed
 80047d8:	08004801 	.word	0x08004801
 80047dc:	4a79      	ldr	r2, [pc, #484]	; (80049c4 <HAL_GPIO_Init+0x2b4>)
 80047de:	4293      	cmp	r3, r2
 80047e0:	d013      	beq.n	800480a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80047e2:	e02c      	b.n	800483e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80047e4:	683b      	ldr	r3, [r7, #0]
 80047e6:	68db      	ldr	r3, [r3, #12]
 80047e8:	623b      	str	r3, [r7, #32]
          break;
 80047ea:	e029      	b.n	8004840 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80047ec:	683b      	ldr	r3, [r7, #0]
 80047ee:	68db      	ldr	r3, [r3, #12]
 80047f0:	3304      	adds	r3, #4
 80047f2:	623b      	str	r3, [r7, #32]
          break;
 80047f4:	e024      	b.n	8004840 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80047f6:	683b      	ldr	r3, [r7, #0]
 80047f8:	68db      	ldr	r3, [r3, #12]
 80047fa:	3308      	adds	r3, #8
 80047fc:	623b      	str	r3, [r7, #32]
          break;
 80047fe:	e01f      	b.n	8004840 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8004800:	683b      	ldr	r3, [r7, #0]
 8004802:	68db      	ldr	r3, [r3, #12]
 8004804:	330c      	adds	r3, #12
 8004806:	623b      	str	r3, [r7, #32]
          break;
 8004808:	e01a      	b.n	8004840 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800480a:	683b      	ldr	r3, [r7, #0]
 800480c:	689b      	ldr	r3, [r3, #8]
 800480e:	2b00      	cmp	r3, #0
 8004810:	d102      	bne.n	8004818 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8004812:	2304      	movs	r3, #4
 8004814:	623b      	str	r3, [r7, #32]
          break;
 8004816:	e013      	b.n	8004840 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	689b      	ldr	r3, [r3, #8]
 800481c:	2b01      	cmp	r3, #1
 800481e:	d105      	bne.n	800482c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004820:	2308      	movs	r3, #8
 8004822:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	69fa      	ldr	r2, [r7, #28]
 8004828:	611a      	str	r2, [r3, #16]
          break;
 800482a:	e009      	b.n	8004840 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800482c:	2308      	movs	r3, #8
 800482e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	69fa      	ldr	r2, [r7, #28]
 8004834:	615a      	str	r2, [r3, #20]
          break;
 8004836:	e003      	b.n	8004840 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8004838:	2300      	movs	r3, #0
 800483a:	623b      	str	r3, [r7, #32]
          break;
 800483c:	e000      	b.n	8004840 <HAL_GPIO_Init+0x130>
          break;
 800483e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8004840:	69bb      	ldr	r3, [r7, #24]
 8004842:	2bff      	cmp	r3, #255	; 0xff
 8004844:	d801      	bhi.n	800484a <HAL_GPIO_Init+0x13a>
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	e001      	b.n	800484e <HAL_GPIO_Init+0x13e>
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	3304      	adds	r3, #4
 800484e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8004850:	69bb      	ldr	r3, [r7, #24]
 8004852:	2bff      	cmp	r3, #255	; 0xff
 8004854:	d802      	bhi.n	800485c <HAL_GPIO_Init+0x14c>
 8004856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004858:	009b      	lsls	r3, r3, #2
 800485a:	e002      	b.n	8004862 <HAL_GPIO_Init+0x152>
 800485c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800485e:	3b08      	subs	r3, #8
 8004860:	009b      	lsls	r3, r3, #2
 8004862:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8004864:	697b      	ldr	r3, [r7, #20]
 8004866:	681a      	ldr	r2, [r3, #0]
 8004868:	210f      	movs	r1, #15
 800486a:	693b      	ldr	r3, [r7, #16]
 800486c:	fa01 f303 	lsl.w	r3, r1, r3
 8004870:	43db      	mvns	r3, r3
 8004872:	401a      	ands	r2, r3
 8004874:	6a39      	ldr	r1, [r7, #32]
 8004876:	693b      	ldr	r3, [r7, #16]
 8004878:	fa01 f303 	lsl.w	r3, r1, r3
 800487c:	431a      	orrs	r2, r3
 800487e:	697b      	ldr	r3, [r7, #20]
 8004880:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004882:	683b      	ldr	r3, [r7, #0]
 8004884:	685b      	ldr	r3, [r3, #4]
 8004886:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800488a:	2b00      	cmp	r3, #0
 800488c:	f000 80b1 	beq.w	80049f2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8004890:	4b4d      	ldr	r3, [pc, #308]	; (80049c8 <HAL_GPIO_Init+0x2b8>)
 8004892:	699b      	ldr	r3, [r3, #24]
 8004894:	4a4c      	ldr	r2, [pc, #304]	; (80049c8 <HAL_GPIO_Init+0x2b8>)
 8004896:	f043 0301 	orr.w	r3, r3, #1
 800489a:	6193      	str	r3, [r2, #24]
 800489c:	4b4a      	ldr	r3, [pc, #296]	; (80049c8 <HAL_GPIO_Init+0x2b8>)
 800489e:	699b      	ldr	r3, [r3, #24]
 80048a0:	f003 0301 	and.w	r3, r3, #1
 80048a4:	60bb      	str	r3, [r7, #8]
 80048a6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80048a8:	4a48      	ldr	r2, [pc, #288]	; (80049cc <HAL_GPIO_Init+0x2bc>)
 80048aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048ac:	089b      	lsrs	r3, r3, #2
 80048ae:	3302      	adds	r3, #2
 80048b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80048b4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80048b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048b8:	f003 0303 	and.w	r3, r3, #3
 80048bc:	009b      	lsls	r3, r3, #2
 80048be:	220f      	movs	r2, #15
 80048c0:	fa02 f303 	lsl.w	r3, r2, r3
 80048c4:	43db      	mvns	r3, r3
 80048c6:	68fa      	ldr	r2, [r7, #12]
 80048c8:	4013      	ands	r3, r2
 80048ca:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	4a40      	ldr	r2, [pc, #256]	; (80049d0 <HAL_GPIO_Init+0x2c0>)
 80048d0:	4293      	cmp	r3, r2
 80048d2:	d013      	beq.n	80048fc <HAL_GPIO_Init+0x1ec>
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	4a3f      	ldr	r2, [pc, #252]	; (80049d4 <HAL_GPIO_Init+0x2c4>)
 80048d8:	4293      	cmp	r3, r2
 80048da:	d00d      	beq.n	80048f8 <HAL_GPIO_Init+0x1e8>
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	4a3e      	ldr	r2, [pc, #248]	; (80049d8 <HAL_GPIO_Init+0x2c8>)
 80048e0:	4293      	cmp	r3, r2
 80048e2:	d007      	beq.n	80048f4 <HAL_GPIO_Init+0x1e4>
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	4a3d      	ldr	r2, [pc, #244]	; (80049dc <HAL_GPIO_Init+0x2cc>)
 80048e8:	4293      	cmp	r3, r2
 80048ea:	d101      	bne.n	80048f0 <HAL_GPIO_Init+0x1e0>
 80048ec:	2303      	movs	r3, #3
 80048ee:	e006      	b.n	80048fe <HAL_GPIO_Init+0x1ee>
 80048f0:	2304      	movs	r3, #4
 80048f2:	e004      	b.n	80048fe <HAL_GPIO_Init+0x1ee>
 80048f4:	2302      	movs	r3, #2
 80048f6:	e002      	b.n	80048fe <HAL_GPIO_Init+0x1ee>
 80048f8:	2301      	movs	r3, #1
 80048fa:	e000      	b.n	80048fe <HAL_GPIO_Init+0x1ee>
 80048fc:	2300      	movs	r3, #0
 80048fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004900:	f002 0203 	and.w	r2, r2, #3
 8004904:	0092      	lsls	r2, r2, #2
 8004906:	4093      	lsls	r3, r2
 8004908:	68fa      	ldr	r2, [r7, #12]
 800490a:	4313      	orrs	r3, r2
 800490c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800490e:	492f      	ldr	r1, [pc, #188]	; (80049cc <HAL_GPIO_Init+0x2bc>)
 8004910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004912:	089b      	lsrs	r3, r3, #2
 8004914:	3302      	adds	r3, #2
 8004916:	68fa      	ldr	r2, [r7, #12]
 8004918:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800491c:	683b      	ldr	r3, [r7, #0]
 800491e:	685b      	ldr	r3, [r3, #4]
 8004920:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004924:	2b00      	cmp	r3, #0
 8004926:	d006      	beq.n	8004936 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8004928:	4b2d      	ldr	r3, [pc, #180]	; (80049e0 <HAL_GPIO_Init+0x2d0>)
 800492a:	681a      	ldr	r2, [r3, #0]
 800492c:	492c      	ldr	r1, [pc, #176]	; (80049e0 <HAL_GPIO_Init+0x2d0>)
 800492e:	69bb      	ldr	r3, [r7, #24]
 8004930:	4313      	orrs	r3, r2
 8004932:	600b      	str	r3, [r1, #0]
 8004934:	e006      	b.n	8004944 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8004936:	4b2a      	ldr	r3, [pc, #168]	; (80049e0 <HAL_GPIO_Init+0x2d0>)
 8004938:	681a      	ldr	r2, [r3, #0]
 800493a:	69bb      	ldr	r3, [r7, #24]
 800493c:	43db      	mvns	r3, r3
 800493e:	4928      	ldr	r1, [pc, #160]	; (80049e0 <HAL_GPIO_Init+0x2d0>)
 8004940:	4013      	ands	r3, r2
 8004942:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004944:	683b      	ldr	r3, [r7, #0]
 8004946:	685b      	ldr	r3, [r3, #4]
 8004948:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800494c:	2b00      	cmp	r3, #0
 800494e:	d006      	beq.n	800495e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8004950:	4b23      	ldr	r3, [pc, #140]	; (80049e0 <HAL_GPIO_Init+0x2d0>)
 8004952:	685a      	ldr	r2, [r3, #4]
 8004954:	4922      	ldr	r1, [pc, #136]	; (80049e0 <HAL_GPIO_Init+0x2d0>)
 8004956:	69bb      	ldr	r3, [r7, #24]
 8004958:	4313      	orrs	r3, r2
 800495a:	604b      	str	r3, [r1, #4]
 800495c:	e006      	b.n	800496c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800495e:	4b20      	ldr	r3, [pc, #128]	; (80049e0 <HAL_GPIO_Init+0x2d0>)
 8004960:	685a      	ldr	r2, [r3, #4]
 8004962:	69bb      	ldr	r3, [r7, #24]
 8004964:	43db      	mvns	r3, r3
 8004966:	491e      	ldr	r1, [pc, #120]	; (80049e0 <HAL_GPIO_Init+0x2d0>)
 8004968:	4013      	ands	r3, r2
 800496a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800496c:	683b      	ldr	r3, [r7, #0]
 800496e:	685b      	ldr	r3, [r3, #4]
 8004970:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004974:	2b00      	cmp	r3, #0
 8004976:	d006      	beq.n	8004986 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8004978:	4b19      	ldr	r3, [pc, #100]	; (80049e0 <HAL_GPIO_Init+0x2d0>)
 800497a:	689a      	ldr	r2, [r3, #8]
 800497c:	4918      	ldr	r1, [pc, #96]	; (80049e0 <HAL_GPIO_Init+0x2d0>)
 800497e:	69bb      	ldr	r3, [r7, #24]
 8004980:	4313      	orrs	r3, r2
 8004982:	608b      	str	r3, [r1, #8]
 8004984:	e006      	b.n	8004994 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8004986:	4b16      	ldr	r3, [pc, #88]	; (80049e0 <HAL_GPIO_Init+0x2d0>)
 8004988:	689a      	ldr	r2, [r3, #8]
 800498a:	69bb      	ldr	r3, [r7, #24]
 800498c:	43db      	mvns	r3, r3
 800498e:	4914      	ldr	r1, [pc, #80]	; (80049e0 <HAL_GPIO_Init+0x2d0>)
 8004990:	4013      	ands	r3, r2
 8004992:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004994:	683b      	ldr	r3, [r7, #0]
 8004996:	685b      	ldr	r3, [r3, #4]
 8004998:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800499c:	2b00      	cmp	r3, #0
 800499e:	d021      	beq.n	80049e4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80049a0:	4b0f      	ldr	r3, [pc, #60]	; (80049e0 <HAL_GPIO_Init+0x2d0>)
 80049a2:	68da      	ldr	r2, [r3, #12]
 80049a4:	490e      	ldr	r1, [pc, #56]	; (80049e0 <HAL_GPIO_Init+0x2d0>)
 80049a6:	69bb      	ldr	r3, [r7, #24]
 80049a8:	4313      	orrs	r3, r2
 80049aa:	60cb      	str	r3, [r1, #12]
 80049ac:	e021      	b.n	80049f2 <HAL_GPIO_Init+0x2e2>
 80049ae:	bf00      	nop
 80049b0:	10320000 	.word	0x10320000
 80049b4:	10310000 	.word	0x10310000
 80049b8:	10220000 	.word	0x10220000
 80049bc:	10210000 	.word	0x10210000
 80049c0:	10120000 	.word	0x10120000
 80049c4:	10110000 	.word	0x10110000
 80049c8:	40021000 	.word	0x40021000
 80049cc:	40010000 	.word	0x40010000
 80049d0:	40010800 	.word	0x40010800
 80049d4:	40010c00 	.word	0x40010c00
 80049d8:	40011000 	.word	0x40011000
 80049dc:	40011400 	.word	0x40011400
 80049e0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80049e4:	4b0b      	ldr	r3, [pc, #44]	; (8004a14 <HAL_GPIO_Init+0x304>)
 80049e6:	68da      	ldr	r2, [r3, #12]
 80049e8:	69bb      	ldr	r3, [r7, #24]
 80049ea:	43db      	mvns	r3, r3
 80049ec:	4909      	ldr	r1, [pc, #36]	; (8004a14 <HAL_GPIO_Init+0x304>)
 80049ee:	4013      	ands	r3, r2
 80049f0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80049f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049f4:	3301      	adds	r3, #1
 80049f6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80049f8:	683b      	ldr	r3, [r7, #0]
 80049fa:	681a      	ldr	r2, [r3, #0]
 80049fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049fe:	fa22 f303 	lsr.w	r3, r2, r3
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	f47f ae8e 	bne.w	8004724 <HAL_GPIO_Init+0x14>
  }
}
 8004a08:	bf00      	nop
 8004a0a:	bf00      	nop
 8004a0c:	372c      	adds	r7, #44	; 0x2c
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	bc80      	pop	{r7}
 8004a12:	4770      	bx	lr
 8004a14:	40010400 	.word	0x40010400

08004a18 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004a18:	b480      	push	{r7}
 8004a1a:	b083      	sub	sp, #12
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	6078      	str	r0, [r7, #4]
 8004a20:	460b      	mov	r3, r1
 8004a22:	807b      	strh	r3, [r7, #2]
 8004a24:	4613      	mov	r3, r2
 8004a26:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004a28:	787b      	ldrb	r3, [r7, #1]
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d003      	beq.n	8004a36 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004a2e:	887a      	ldrh	r2, [r7, #2]
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8004a34:	e003      	b.n	8004a3e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004a36:	887b      	ldrh	r3, [r7, #2]
 8004a38:	041a      	lsls	r2, r3, #16
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	611a      	str	r2, [r3, #16]
}
 8004a3e:	bf00      	nop
 8004a40:	370c      	adds	r7, #12
 8004a42:	46bd      	mov	sp, r7
 8004a44:	bc80      	pop	{r7}
 8004a46:	4770      	bx	lr

08004a48 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004a48:	b480      	push	{r7}
 8004a4a:	b085      	sub	sp, #20
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	6078      	str	r0, [r7, #4]
 8004a50:	460b      	mov	r3, r1
 8004a52:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	68db      	ldr	r3, [r3, #12]
 8004a58:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004a5a:	887a      	ldrh	r2, [r7, #2]
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	4013      	ands	r3, r2
 8004a60:	041a      	lsls	r2, r3, #16
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	43d9      	mvns	r1, r3
 8004a66:	887b      	ldrh	r3, [r7, #2]
 8004a68:	400b      	ands	r3, r1
 8004a6a:	431a      	orrs	r2, r3
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	611a      	str	r2, [r3, #16]
}
 8004a70:	bf00      	nop
 8004a72:	3714      	adds	r7, #20
 8004a74:	46bd      	mov	sp, r7
 8004a76:	bc80      	pop	{r7}
 8004a78:	4770      	bx	lr
	...

08004a7c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004a7c:	b580      	push	{r7, lr}
 8004a7e:	b082      	sub	sp, #8
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	4603      	mov	r3, r0
 8004a84:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004a86:	4b08      	ldr	r3, [pc, #32]	; (8004aa8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004a88:	695a      	ldr	r2, [r3, #20]
 8004a8a:	88fb      	ldrh	r3, [r7, #6]
 8004a8c:	4013      	ands	r3, r2
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d006      	beq.n	8004aa0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004a92:	4a05      	ldr	r2, [pc, #20]	; (8004aa8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004a94:	88fb      	ldrh	r3, [r7, #6]
 8004a96:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004a98:	88fb      	ldrh	r3, [r7, #6]
 8004a9a:	4618      	mov	r0, r3
 8004a9c:	f7fe fcc0 	bl	8003420 <HAL_GPIO_EXTI_Callback>
  }
}
 8004aa0:	bf00      	nop
 8004aa2:	3708      	adds	r7, #8
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	bd80      	pop	{r7, pc}
 8004aa8:	40010400 	.word	0x40010400

08004aac <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004aac:	b580      	push	{r7, lr}
 8004aae:	b084      	sub	sp, #16
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d101      	bne.n	8004abe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004aba:	2301      	movs	r3, #1
 8004abc:	e12b      	b.n	8004d16 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ac4:	b2db      	uxtb	r3, r3
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d106      	bne.n	8004ad8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	2200      	movs	r2, #0
 8004ace:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004ad2:	6878      	ldr	r0, [r7, #4]
 8004ad4:	f7fe fd48 	bl	8003568 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	2224      	movs	r2, #36	; 0x24
 8004adc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	681a      	ldr	r2, [r3, #0]
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f022 0201 	bic.w	r2, r2, #1
 8004aee:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	681a      	ldr	r2, [r3, #0]
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004afe:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	681a      	ldr	r2, [r3, #0]
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004b0e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004b10:	f001 fe4e 	bl	80067b0 <HAL_RCC_GetPCLK1Freq>
 8004b14:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	685b      	ldr	r3, [r3, #4]
 8004b1a:	4a81      	ldr	r2, [pc, #516]	; (8004d20 <HAL_I2C_Init+0x274>)
 8004b1c:	4293      	cmp	r3, r2
 8004b1e:	d807      	bhi.n	8004b30 <HAL_I2C_Init+0x84>
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	4a80      	ldr	r2, [pc, #512]	; (8004d24 <HAL_I2C_Init+0x278>)
 8004b24:	4293      	cmp	r3, r2
 8004b26:	bf94      	ite	ls
 8004b28:	2301      	movls	r3, #1
 8004b2a:	2300      	movhi	r3, #0
 8004b2c:	b2db      	uxtb	r3, r3
 8004b2e:	e006      	b.n	8004b3e <HAL_I2C_Init+0x92>
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	4a7d      	ldr	r2, [pc, #500]	; (8004d28 <HAL_I2C_Init+0x27c>)
 8004b34:	4293      	cmp	r3, r2
 8004b36:	bf94      	ite	ls
 8004b38:	2301      	movls	r3, #1
 8004b3a:	2300      	movhi	r3, #0
 8004b3c:	b2db      	uxtb	r3, r3
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d001      	beq.n	8004b46 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004b42:	2301      	movs	r3, #1
 8004b44:	e0e7      	b.n	8004d16 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	4a78      	ldr	r2, [pc, #480]	; (8004d2c <HAL_I2C_Init+0x280>)
 8004b4a:	fba2 2303 	umull	r2, r3, r2, r3
 8004b4e:	0c9b      	lsrs	r3, r3, #18
 8004b50:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	685b      	ldr	r3, [r3, #4]
 8004b58:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	68ba      	ldr	r2, [r7, #8]
 8004b62:	430a      	orrs	r2, r1
 8004b64:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	6a1b      	ldr	r3, [r3, #32]
 8004b6c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	685b      	ldr	r3, [r3, #4]
 8004b74:	4a6a      	ldr	r2, [pc, #424]	; (8004d20 <HAL_I2C_Init+0x274>)
 8004b76:	4293      	cmp	r3, r2
 8004b78:	d802      	bhi.n	8004b80 <HAL_I2C_Init+0xd4>
 8004b7a:	68bb      	ldr	r3, [r7, #8]
 8004b7c:	3301      	adds	r3, #1
 8004b7e:	e009      	b.n	8004b94 <HAL_I2C_Init+0xe8>
 8004b80:	68bb      	ldr	r3, [r7, #8]
 8004b82:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004b86:	fb02 f303 	mul.w	r3, r2, r3
 8004b8a:	4a69      	ldr	r2, [pc, #420]	; (8004d30 <HAL_I2C_Init+0x284>)
 8004b8c:	fba2 2303 	umull	r2, r3, r2, r3
 8004b90:	099b      	lsrs	r3, r3, #6
 8004b92:	3301      	adds	r3, #1
 8004b94:	687a      	ldr	r2, [r7, #4]
 8004b96:	6812      	ldr	r2, [r2, #0]
 8004b98:	430b      	orrs	r3, r1
 8004b9a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	69db      	ldr	r3, [r3, #28]
 8004ba2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004ba6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	685b      	ldr	r3, [r3, #4]
 8004bae:	495c      	ldr	r1, [pc, #368]	; (8004d20 <HAL_I2C_Init+0x274>)
 8004bb0:	428b      	cmp	r3, r1
 8004bb2:	d819      	bhi.n	8004be8 <HAL_I2C_Init+0x13c>
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	1e59      	subs	r1, r3, #1
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	685b      	ldr	r3, [r3, #4]
 8004bbc:	005b      	lsls	r3, r3, #1
 8004bbe:	fbb1 f3f3 	udiv	r3, r1, r3
 8004bc2:	1c59      	adds	r1, r3, #1
 8004bc4:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004bc8:	400b      	ands	r3, r1
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d00a      	beq.n	8004be4 <HAL_I2C_Init+0x138>
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	1e59      	subs	r1, r3, #1
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	685b      	ldr	r3, [r3, #4]
 8004bd6:	005b      	lsls	r3, r3, #1
 8004bd8:	fbb1 f3f3 	udiv	r3, r1, r3
 8004bdc:	3301      	adds	r3, #1
 8004bde:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004be2:	e051      	b.n	8004c88 <HAL_I2C_Init+0x1dc>
 8004be4:	2304      	movs	r3, #4
 8004be6:	e04f      	b.n	8004c88 <HAL_I2C_Init+0x1dc>
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	689b      	ldr	r3, [r3, #8]
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d111      	bne.n	8004c14 <HAL_I2C_Init+0x168>
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	1e58      	subs	r0, r3, #1
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	6859      	ldr	r1, [r3, #4]
 8004bf8:	460b      	mov	r3, r1
 8004bfa:	005b      	lsls	r3, r3, #1
 8004bfc:	440b      	add	r3, r1
 8004bfe:	fbb0 f3f3 	udiv	r3, r0, r3
 8004c02:	3301      	adds	r3, #1
 8004c04:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	bf0c      	ite	eq
 8004c0c:	2301      	moveq	r3, #1
 8004c0e:	2300      	movne	r3, #0
 8004c10:	b2db      	uxtb	r3, r3
 8004c12:	e012      	b.n	8004c3a <HAL_I2C_Init+0x18e>
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	1e58      	subs	r0, r3, #1
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	6859      	ldr	r1, [r3, #4]
 8004c1c:	460b      	mov	r3, r1
 8004c1e:	009b      	lsls	r3, r3, #2
 8004c20:	440b      	add	r3, r1
 8004c22:	0099      	lsls	r1, r3, #2
 8004c24:	440b      	add	r3, r1
 8004c26:	fbb0 f3f3 	udiv	r3, r0, r3
 8004c2a:	3301      	adds	r3, #1
 8004c2c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	bf0c      	ite	eq
 8004c34:	2301      	moveq	r3, #1
 8004c36:	2300      	movne	r3, #0
 8004c38:	b2db      	uxtb	r3, r3
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d001      	beq.n	8004c42 <HAL_I2C_Init+0x196>
 8004c3e:	2301      	movs	r3, #1
 8004c40:	e022      	b.n	8004c88 <HAL_I2C_Init+0x1dc>
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	689b      	ldr	r3, [r3, #8]
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d10e      	bne.n	8004c68 <HAL_I2C_Init+0x1bc>
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	1e58      	subs	r0, r3, #1
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	6859      	ldr	r1, [r3, #4]
 8004c52:	460b      	mov	r3, r1
 8004c54:	005b      	lsls	r3, r3, #1
 8004c56:	440b      	add	r3, r1
 8004c58:	fbb0 f3f3 	udiv	r3, r0, r3
 8004c5c:	3301      	adds	r3, #1
 8004c5e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c62:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c66:	e00f      	b.n	8004c88 <HAL_I2C_Init+0x1dc>
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	1e58      	subs	r0, r3, #1
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	6859      	ldr	r1, [r3, #4]
 8004c70:	460b      	mov	r3, r1
 8004c72:	009b      	lsls	r3, r3, #2
 8004c74:	440b      	add	r3, r1
 8004c76:	0099      	lsls	r1, r3, #2
 8004c78:	440b      	add	r3, r1
 8004c7a:	fbb0 f3f3 	udiv	r3, r0, r3
 8004c7e:	3301      	adds	r3, #1
 8004c80:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c84:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004c88:	6879      	ldr	r1, [r7, #4]
 8004c8a:	6809      	ldr	r1, [r1, #0]
 8004c8c:	4313      	orrs	r3, r2
 8004c8e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	69da      	ldr	r2, [r3, #28]
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	6a1b      	ldr	r3, [r3, #32]
 8004ca2:	431a      	orrs	r2, r3
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	430a      	orrs	r2, r1
 8004caa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	689b      	ldr	r3, [r3, #8]
 8004cb2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004cb6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004cba:	687a      	ldr	r2, [r7, #4]
 8004cbc:	6911      	ldr	r1, [r2, #16]
 8004cbe:	687a      	ldr	r2, [r7, #4]
 8004cc0:	68d2      	ldr	r2, [r2, #12]
 8004cc2:	4311      	orrs	r1, r2
 8004cc4:	687a      	ldr	r2, [r7, #4]
 8004cc6:	6812      	ldr	r2, [r2, #0]
 8004cc8:	430b      	orrs	r3, r1
 8004cca:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	68db      	ldr	r3, [r3, #12]
 8004cd2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	695a      	ldr	r2, [r3, #20]
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	699b      	ldr	r3, [r3, #24]
 8004cde:	431a      	orrs	r2, r3
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	430a      	orrs	r2, r1
 8004ce6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	681a      	ldr	r2, [r3, #0]
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f042 0201 	orr.w	r2, r2, #1
 8004cf6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	2200      	movs	r2, #0
 8004cfc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	2220      	movs	r2, #32
 8004d02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	2200      	movs	r2, #0
 8004d0a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	2200      	movs	r2, #0
 8004d10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004d14:	2300      	movs	r3, #0
}
 8004d16:	4618      	mov	r0, r3
 8004d18:	3710      	adds	r7, #16
 8004d1a:	46bd      	mov	sp, r7
 8004d1c:	bd80      	pop	{r7, pc}
 8004d1e:	bf00      	nop
 8004d20:	000186a0 	.word	0x000186a0
 8004d24:	001e847f 	.word	0x001e847f
 8004d28:	003d08ff 	.word	0x003d08ff
 8004d2c:	431bde83 	.word	0x431bde83
 8004d30:	10624dd3 	.word	0x10624dd3

08004d34 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d34:	b580      	push	{r7, lr}
 8004d36:	b088      	sub	sp, #32
 8004d38:	af02      	add	r7, sp, #8
 8004d3a:	60f8      	str	r0, [r7, #12]
 8004d3c:	607a      	str	r2, [r7, #4]
 8004d3e:	461a      	mov	r2, r3
 8004d40:	460b      	mov	r3, r1
 8004d42:	817b      	strh	r3, [r7, #10]
 8004d44:	4613      	mov	r3, r2
 8004d46:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004d48:	f7fe fe9e 	bl	8003a88 <HAL_GetTick>
 8004d4c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d54:	b2db      	uxtb	r3, r3
 8004d56:	2b20      	cmp	r3, #32
 8004d58:	f040 80e0 	bne.w	8004f1c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004d5c:	697b      	ldr	r3, [r7, #20]
 8004d5e:	9300      	str	r3, [sp, #0]
 8004d60:	2319      	movs	r3, #25
 8004d62:	2201      	movs	r2, #1
 8004d64:	4970      	ldr	r1, [pc, #448]	; (8004f28 <HAL_I2C_Master_Transmit+0x1f4>)
 8004d66:	68f8      	ldr	r0, [r7, #12]
 8004d68:	f000 ff72 	bl	8005c50 <I2C_WaitOnFlagUntilTimeout>
 8004d6c:	4603      	mov	r3, r0
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d001      	beq.n	8004d76 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8004d72:	2302      	movs	r3, #2
 8004d74:	e0d3      	b.n	8004f1e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d7c:	2b01      	cmp	r3, #1
 8004d7e:	d101      	bne.n	8004d84 <HAL_I2C_Master_Transmit+0x50>
 8004d80:	2302      	movs	r3, #2
 8004d82:	e0cc      	b.n	8004f1e <HAL_I2C_Master_Transmit+0x1ea>
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	2201      	movs	r2, #1
 8004d88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f003 0301 	and.w	r3, r3, #1
 8004d96:	2b01      	cmp	r3, #1
 8004d98:	d007      	beq.n	8004daa <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	681a      	ldr	r2, [r3, #0]
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f042 0201 	orr.w	r2, r2, #1
 8004da8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	681a      	ldr	r2, [r3, #0]
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004db8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	2221      	movs	r2, #33	; 0x21
 8004dbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	2210      	movs	r2, #16
 8004dc6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	2200      	movs	r2, #0
 8004dce:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	687a      	ldr	r2, [r7, #4]
 8004dd4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	893a      	ldrh	r2, [r7, #8]
 8004dda:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004de0:	b29a      	uxth	r2, r3
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	4a50      	ldr	r2, [pc, #320]	; (8004f2c <HAL_I2C_Master_Transmit+0x1f8>)
 8004dea:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004dec:	8979      	ldrh	r1, [r7, #10]
 8004dee:	697b      	ldr	r3, [r7, #20]
 8004df0:	6a3a      	ldr	r2, [r7, #32]
 8004df2:	68f8      	ldr	r0, [r7, #12]
 8004df4:	f000 fd2c 	bl	8005850 <I2C_MasterRequestWrite>
 8004df8:	4603      	mov	r3, r0
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d001      	beq.n	8004e02 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8004dfe:	2301      	movs	r3, #1
 8004e00:	e08d      	b.n	8004f1e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004e02:	2300      	movs	r3, #0
 8004e04:	613b      	str	r3, [r7, #16]
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	695b      	ldr	r3, [r3, #20]
 8004e0c:	613b      	str	r3, [r7, #16]
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	699b      	ldr	r3, [r3, #24]
 8004e14:	613b      	str	r3, [r7, #16]
 8004e16:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004e18:	e066      	b.n	8004ee8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004e1a:	697a      	ldr	r2, [r7, #20]
 8004e1c:	6a39      	ldr	r1, [r7, #32]
 8004e1e:	68f8      	ldr	r0, [r7, #12]
 8004e20:	f000 ffec 	bl	8005dfc <I2C_WaitOnTXEFlagUntilTimeout>
 8004e24:	4603      	mov	r3, r0
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d00d      	beq.n	8004e46 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e2e:	2b04      	cmp	r3, #4
 8004e30:	d107      	bne.n	8004e42 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	681a      	ldr	r2, [r3, #0]
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e40:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004e42:	2301      	movs	r3, #1
 8004e44:	e06b      	b.n	8004f1e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e4a:	781a      	ldrb	r2, [r3, #0]
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e56:	1c5a      	adds	r2, r3, #1
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e60:	b29b      	uxth	r3, r3
 8004e62:	3b01      	subs	r3, #1
 8004e64:	b29a      	uxth	r2, r3
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e6e:	3b01      	subs	r3, #1
 8004e70:	b29a      	uxth	r2, r3
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	695b      	ldr	r3, [r3, #20]
 8004e7c:	f003 0304 	and.w	r3, r3, #4
 8004e80:	2b04      	cmp	r3, #4
 8004e82:	d11b      	bne.n	8004ebc <HAL_I2C_Master_Transmit+0x188>
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d017      	beq.n	8004ebc <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e90:	781a      	ldrb	r2, [r3, #0]
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e9c:	1c5a      	adds	r2, r3, #1
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ea6:	b29b      	uxth	r3, r3
 8004ea8:	3b01      	subs	r3, #1
 8004eaa:	b29a      	uxth	r2, r3
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004eb4:	3b01      	subs	r3, #1
 8004eb6:	b29a      	uxth	r2, r3
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004ebc:	697a      	ldr	r2, [r7, #20]
 8004ebe:	6a39      	ldr	r1, [r7, #32]
 8004ec0:	68f8      	ldr	r0, [r7, #12]
 8004ec2:	f000 ffdc 	bl	8005e7e <I2C_WaitOnBTFFlagUntilTimeout>
 8004ec6:	4603      	mov	r3, r0
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d00d      	beq.n	8004ee8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ed0:	2b04      	cmp	r3, #4
 8004ed2:	d107      	bne.n	8004ee4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	681a      	ldr	r2, [r3, #0]
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ee2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004ee4:	2301      	movs	r3, #1
 8004ee6:	e01a      	b.n	8004f1e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d194      	bne.n	8004e1a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	681a      	ldr	r2, [r3, #0]
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004efe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	2220      	movs	r2, #32
 8004f04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	2200      	movs	r2, #0
 8004f0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	2200      	movs	r2, #0
 8004f14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004f18:	2300      	movs	r3, #0
 8004f1a:	e000      	b.n	8004f1e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004f1c:	2302      	movs	r3, #2
  }
}
 8004f1e:	4618      	mov	r0, r3
 8004f20:	3718      	adds	r7, #24
 8004f22:	46bd      	mov	sp, r7
 8004f24:	bd80      	pop	{r7, pc}
 8004f26:	bf00      	nop
 8004f28:	00100002 	.word	0x00100002
 8004f2c:	ffff0000 	.word	0xffff0000

08004f30 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004f30:	b580      	push	{r7, lr}
 8004f32:	b088      	sub	sp, #32
 8004f34:	af02      	add	r7, sp, #8
 8004f36:	60f8      	str	r0, [r7, #12]
 8004f38:	4608      	mov	r0, r1
 8004f3a:	4611      	mov	r1, r2
 8004f3c:	461a      	mov	r2, r3
 8004f3e:	4603      	mov	r3, r0
 8004f40:	817b      	strh	r3, [r7, #10]
 8004f42:	460b      	mov	r3, r1
 8004f44:	813b      	strh	r3, [r7, #8]
 8004f46:	4613      	mov	r3, r2
 8004f48:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004f4a:	f7fe fd9d 	bl	8003a88 <HAL_GetTick>
 8004f4e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f56:	b2db      	uxtb	r3, r3
 8004f58:	2b20      	cmp	r3, #32
 8004f5a:	f040 80d9 	bne.w	8005110 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004f5e:	697b      	ldr	r3, [r7, #20]
 8004f60:	9300      	str	r3, [sp, #0]
 8004f62:	2319      	movs	r3, #25
 8004f64:	2201      	movs	r2, #1
 8004f66:	496d      	ldr	r1, [pc, #436]	; (800511c <HAL_I2C_Mem_Write+0x1ec>)
 8004f68:	68f8      	ldr	r0, [r7, #12]
 8004f6a:	f000 fe71 	bl	8005c50 <I2C_WaitOnFlagUntilTimeout>
 8004f6e:	4603      	mov	r3, r0
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d001      	beq.n	8004f78 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004f74:	2302      	movs	r3, #2
 8004f76:	e0cc      	b.n	8005112 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f7e:	2b01      	cmp	r3, #1
 8004f80:	d101      	bne.n	8004f86 <HAL_I2C_Mem_Write+0x56>
 8004f82:	2302      	movs	r3, #2
 8004f84:	e0c5      	b.n	8005112 <HAL_I2C_Mem_Write+0x1e2>
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	2201      	movs	r2, #1
 8004f8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f003 0301 	and.w	r3, r3, #1
 8004f98:	2b01      	cmp	r3, #1
 8004f9a:	d007      	beq.n	8004fac <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	681a      	ldr	r2, [r3, #0]
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	f042 0201 	orr.w	r2, r2, #1
 8004faa:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	681a      	ldr	r2, [r3, #0]
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004fba:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	2221      	movs	r2, #33	; 0x21
 8004fc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	2240      	movs	r2, #64	; 0x40
 8004fc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	2200      	movs	r2, #0
 8004fd0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	6a3a      	ldr	r2, [r7, #32]
 8004fd6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004fdc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fe2:	b29a      	uxth	r2, r3
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	4a4d      	ldr	r2, [pc, #308]	; (8005120 <HAL_I2C_Mem_Write+0x1f0>)
 8004fec:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004fee:	88f8      	ldrh	r0, [r7, #6]
 8004ff0:	893a      	ldrh	r2, [r7, #8]
 8004ff2:	8979      	ldrh	r1, [r7, #10]
 8004ff4:	697b      	ldr	r3, [r7, #20]
 8004ff6:	9301      	str	r3, [sp, #4]
 8004ff8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ffa:	9300      	str	r3, [sp, #0]
 8004ffc:	4603      	mov	r3, r0
 8004ffe:	68f8      	ldr	r0, [r7, #12]
 8005000:	f000 fca8 	bl	8005954 <I2C_RequestMemoryWrite>
 8005004:	4603      	mov	r3, r0
 8005006:	2b00      	cmp	r3, #0
 8005008:	d052      	beq.n	80050b0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800500a:	2301      	movs	r3, #1
 800500c:	e081      	b.n	8005112 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800500e:	697a      	ldr	r2, [r7, #20]
 8005010:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005012:	68f8      	ldr	r0, [r7, #12]
 8005014:	f000 fef2 	bl	8005dfc <I2C_WaitOnTXEFlagUntilTimeout>
 8005018:	4603      	mov	r3, r0
 800501a:	2b00      	cmp	r3, #0
 800501c:	d00d      	beq.n	800503a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005022:	2b04      	cmp	r3, #4
 8005024:	d107      	bne.n	8005036 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	681a      	ldr	r2, [r3, #0]
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005034:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005036:	2301      	movs	r3, #1
 8005038:	e06b      	b.n	8005112 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800503e:	781a      	ldrb	r2, [r3, #0]
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800504a:	1c5a      	adds	r2, r3, #1
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005054:	3b01      	subs	r3, #1
 8005056:	b29a      	uxth	r2, r3
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005060:	b29b      	uxth	r3, r3
 8005062:	3b01      	subs	r3, #1
 8005064:	b29a      	uxth	r2, r3
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	695b      	ldr	r3, [r3, #20]
 8005070:	f003 0304 	and.w	r3, r3, #4
 8005074:	2b04      	cmp	r3, #4
 8005076:	d11b      	bne.n	80050b0 <HAL_I2C_Mem_Write+0x180>
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800507c:	2b00      	cmp	r3, #0
 800507e:	d017      	beq.n	80050b0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005084:	781a      	ldrb	r2, [r3, #0]
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005090:	1c5a      	adds	r2, r3, #1
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800509a:	3b01      	subs	r3, #1
 800509c:	b29a      	uxth	r2, r3
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050a6:	b29b      	uxth	r3, r3
 80050a8:	3b01      	subs	r3, #1
 80050aa:	b29a      	uxth	r2, r3
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d1aa      	bne.n	800500e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80050b8:	697a      	ldr	r2, [r7, #20]
 80050ba:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80050bc:	68f8      	ldr	r0, [r7, #12]
 80050be:	f000 fede 	bl	8005e7e <I2C_WaitOnBTFFlagUntilTimeout>
 80050c2:	4603      	mov	r3, r0
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d00d      	beq.n	80050e4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050cc:	2b04      	cmp	r3, #4
 80050ce:	d107      	bne.n	80050e0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	681a      	ldr	r2, [r3, #0]
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80050de:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80050e0:	2301      	movs	r3, #1
 80050e2:	e016      	b.n	8005112 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	681a      	ldr	r2, [r3, #0]
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80050f2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	2220      	movs	r2, #32
 80050f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	2200      	movs	r2, #0
 8005100:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	2200      	movs	r2, #0
 8005108:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800510c:	2300      	movs	r3, #0
 800510e:	e000      	b.n	8005112 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8005110:	2302      	movs	r3, #2
  }
}
 8005112:	4618      	mov	r0, r3
 8005114:	3718      	adds	r7, #24
 8005116:	46bd      	mov	sp, r7
 8005118:	bd80      	pop	{r7, pc}
 800511a:	bf00      	nop
 800511c:	00100002 	.word	0x00100002
 8005120:	ffff0000 	.word	0xffff0000

08005124 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005124:	b580      	push	{r7, lr}
 8005126:	b08c      	sub	sp, #48	; 0x30
 8005128:	af02      	add	r7, sp, #8
 800512a:	60f8      	str	r0, [r7, #12]
 800512c:	4608      	mov	r0, r1
 800512e:	4611      	mov	r1, r2
 8005130:	461a      	mov	r2, r3
 8005132:	4603      	mov	r3, r0
 8005134:	817b      	strh	r3, [r7, #10]
 8005136:	460b      	mov	r3, r1
 8005138:	813b      	strh	r3, [r7, #8]
 800513a:	4613      	mov	r3, r2
 800513c:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 800513e:	2300      	movs	r3, #0
 8005140:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005142:	f7fe fca1 	bl	8003a88 <HAL_GetTick>
 8005146:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800514e:	b2db      	uxtb	r3, r3
 8005150:	2b20      	cmp	r3, #32
 8005152:	f040 8244 	bne.w	80055de <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005158:	9300      	str	r3, [sp, #0]
 800515a:	2319      	movs	r3, #25
 800515c:	2201      	movs	r2, #1
 800515e:	4982      	ldr	r1, [pc, #520]	; (8005368 <HAL_I2C_Mem_Read+0x244>)
 8005160:	68f8      	ldr	r0, [r7, #12]
 8005162:	f000 fd75 	bl	8005c50 <I2C_WaitOnFlagUntilTimeout>
 8005166:	4603      	mov	r3, r0
 8005168:	2b00      	cmp	r3, #0
 800516a:	d001      	beq.n	8005170 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 800516c:	2302      	movs	r3, #2
 800516e:	e237      	b.n	80055e0 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005176:	2b01      	cmp	r3, #1
 8005178:	d101      	bne.n	800517e <HAL_I2C_Mem_Read+0x5a>
 800517a:	2302      	movs	r3, #2
 800517c:	e230      	b.n	80055e0 <HAL_I2C_Mem_Read+0x4bc>
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	2201      	movs	r2, #1
 8005182:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	f003 0301 	and.w	r3, r3, #1
 8005190:	2b01      	cmp	r3, #1
 8005192:	d007      	beq.n	80051a4 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	681a      	ldr	r2, [r3, #0]
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f042 0201 	orr.w	r2, r2, #1
 80051a2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	681a      	ldr	r2, [r3, #0]
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80051b2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	2222      	movs	r2, #34	; 0x22
 80051b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	2240      	movs	r2, #64	; 0x40
 80051c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	2200      	movs	r2, #0
 80051c8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80051ce:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80051d4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051da:	b29a      	uxth	r2, r3
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	4a62      	ldr	r2, [pc, #392]	; (800536c <HAL_I2C_Mem_Read+0x248>)
 80051e4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80051e6:	88f8      	ldrh	r0, [r7, #6]
 80051e8:	893a      	ldrh	r2, [r7, #8]
 80051ea:	8979      	ldrh	r1, [r7, #10]
 80051ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051ee:	9301      	str	r3, [sp, #4]
 80051f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051f2:	9300      	str	r3, [sp, #0]
 80051f4:	4603      	mov	r3, r0
 80051f6:	68f8      	ldr	r0, [r7, #12]
 80051f8:	f000 fc42 	bl	8005a80 <I2C_RequestMemoryRead>
 80051fc:	4603      	mov	r3, r0
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d001      	beq.n	8005206 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8005202:	2301      	movs	r3, #1
 8005204:	e1ec      	b.n	80055e0 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800520a:	2b00      	cmp	r3, #0
 800520c:	d113      	bne.n	8005236 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800520e:	2300      	movs	r3, #0
 8005210:	61fb      	str	r3, [r7, #28]
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	695b      	ldr	r3, [r3, #20]
 8005218:	61fb      	str	r3, [r7, #28]
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	699b      	ldr	r3, [r3, #24]
 8005220:	61fb      	str	r3, [r7, #28]
 8005222:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	681a      	ldr	r2, [r3, #0]
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005232:	601a      	str	r2, [r3, #0]
 8005234:	e1c0      	b.n	80055b8 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800523a:	2b01      	cmp	r3, #1
 800523c:	d11e      	bne.n	800527c <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	681a      	ldr	r2, [r3, #0]
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800524c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800524e:	b672      	cpsid	i
}
 8005250:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005252:	2300      	movs	r3, #0
 8005254:	61bb      	str	r3, [r7, #24]
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	695b      	ldr	r3, [r3, #20]
 800525c:	61bb      	str	r3, [r7, #24]
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	699b      	ldr	r3, [r3, #24]
 8005264:	61bb      	str	r3, [r7, #24]
 8005266:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	681a      	ldr	r2, [r3, #0]
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005276:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8005278:	b662      	cpsie	i
}
 800527a:	e035      	b.n	80052e8 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005280:	2b02      	cmp	r3, #2
 8005282:	d11e      	bne.n	80052c2 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	681a      	ldr	r2, [r3, #0]
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005292:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8005294:	b672      	cpsid	i
}
 8005296:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005298:	2300      	movs	r3, #0
 800529a:	617b      	str	r3, [r7, #20]
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	695b      	ldr	r3, [r3, #20]
 80052a2:	617b      	str	r3, [r7, #20]
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	699b      	ldr	r3, [r3, #24]
 80052aa:	617b      	str	r3, [r7, #20]
 80052ac:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	681a      	ldr	r2, [r3, #0]
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80052bc:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80052be:	b662      	cpsie	i
}
 80052c0:	e012      	b.n	80052e8 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	681a      	ldr	r2, [r3, #0]
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80052d0:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80052d2:	2300      	movs	r3, #0
 80052d4:	613b      	str	r3, [r7, #16]
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	695b      	ldr	r3, [r3, #20]
 80052dc:	613b      	str	r3, [r7, #16]
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	699b      	ldr	r3, [r3, #24]
 80052e4:	613b      	str	r3, [r7, #16]
 80052e6:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 80052e8:	e166      	b.n	80055b8 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052ee:	2b03      	cmp	r3, #3
 80052f0:	f200 811f 	bhi.w	8005532 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052f8:	2b01      	cmp	r3, #1
 80052fa:	d123      	bne.n	8005344 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80052fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052fe:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005300:	68f8      	ldr	r0, [r7, #12]
 8005302:	f000 fdfd 	bl	8005f00 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005306:	4603      	mov	r3, r0
 8005308:	2b00      	cmp	r3, #0
 800530a:	d001      	beq.n	8005310 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 800530c:	2301      	movs	r3, #1
 800530e:	e167      	b.n	80055e0 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	691a      	ldr	r2, [r3, #16]
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800531a:	b2d2      	uxtb	r2, r2
 800531c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005322:	1c5a      	adds	r2, r3, #1
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800532c:	3b01      	subs	r3, #1
 800532e:	b29a      	uxth	r2, r3
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005338:	b29b      	uxth	r3, r3
 800533a:	3b01      	subs	r3, #1
 800533c:	b29a      	uxth	r2, r3
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005342:	e139      	b.n	80055b8 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005348:	2b02      	cmp	r3, #2
 800534a:	d152      	bne.n	80053f2 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800534c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800534e:	9300      	str	r3, [sp, #0]
 8005350:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005352:	2200      	movs	r2, #0
 8005354:	4906      	ldr	r1, [pc, #24]	; (8005370 <HAL_I2C_Mem_Read+0x24c>)
 8005356:	68f8      	ldr	r0, [r7, #12]
 8005358:	f000 fc7a 	bl	8005c50 <I2C_WaitOnFlagUntilTimeout>
 800535c:	4603      	mov	r3, r0
 800535e:	2b00      	cmp	r3, #0
 8005360:	d008      	beq.n	8005374 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8005362:	2301      	movs	r3, #1
 8005364:	e13c      	b.n	80055e0 <HAL_I2C_Mem_Read+0x4bc>
 8005366:	bf00      	nop
 8005368:	00100002 	.word	0x00100002
 800536c:	ffff0000 	.word	0xffff0000
 8005370:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8005374:	b672      	cpsid	i
}
 8005376:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	681a      	ldr	r2, [r3, #0]
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005386:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	691a      	ldr	r2, [r3, #16]
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005392:	b2d2      	uxtb	r2, r2
 8005394:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800539a:	1c5a      	adds	r2, r3, #1
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053a4:	3b01      	subs	r3, #1
 80053a6:	b29a      	uxth	r2, r3
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053b0:	b29b      	uxth	r3, r3
 80053b2:	3b01      	subs	r3, #1
 80053b4:	b29a      	uxth	r2, r3
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80053ba:	b662      	cpsie	i
}
 80053bc:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	691a      	ldr	r2, [r3, #16]
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053c8:	b2d2      	uxtb	r2, r2
 80053ca:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053d0:	1c5a      	adds	r2, r3, #1
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053da:	3b01      	subs	r3, #1
 80053dc:	b29a      	uxth	r2, r3
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053e6:	b29b      	uxth	r3, r3
 80053e8:	3b01      	subs	r3, #1
 80053ea:	b29a      	uxth	r2, r3
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	855a      	strh	r2, [r3, #42]	; 0x2a
 80053f0:	e0e2      	b.n	80055b8 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80053f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053f4:	9300      	str	r3, [sp, #0]
 80053f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053f8:	2200      	movs	r2, #0
 80053fa:	497b      	ldr	r1, [pc, #492]	; (80055e8 <HAL_I2C_Mem_Read+0x4c4>)
 80053fc:	68f8      	ldr	r0, [r7, #12]
 80053fe:	f000 fc27 	bl	8005c50 <I2C_WaitOnFlagUntilTimeout>
 8005402:	4603      	mov	r3, r0
 8005404:	2b00      	cmp	r3, #0
 8005406:	d001      	beq.n	800540c <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8005408:	2301      	movs	r3, #1
 800540a:	e0e9      	b.n	80055e0 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	681a      	ldr	r2, [r3, #0]
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800541a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800541c:	b672      	cpsid	i
}
 800541e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	691a      	ldr	r2, [r3, #16]
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800542a:	b2d2      	uxtb	r2, r2
 800542c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005432:	1c5a      	adds	r2, r3, #1
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800543c:	3b01      	subs	r3, #1
 800543e:	b29a      	uxth	r2, r3
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005448:	b29b      	uxth	r3, r3
 800544a:	3b01      	subs	r3, #1
 800544c:	b29a      	uxth	r2, r3
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8005452:	4b66      	ldr	r3, [pc, #408]	; (80055ec <HAL_I2C_Mem_Read+0x4c8>)
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	08db      	lsrs	r3, r3, #3
 8005458:	4a65      	ldr	r2, [pc, #404]	; (80055f0 <HAL_I2C_Mem_Read+0x4cc>)
 800545a:	fba2 2303 	umull	r2, r3, r2, r3
 800545e:	0a1a      	lsrs	r2, r3, #8
 8005460:	4613      	mov	r3, r2
 8005462:	009b      	lsls	r3, r3, #2
 8005464:	4413      	add	r3, r2
 8005466:	00da      	lsls	r2, r3, #3
 8005468:	1ad3      	subs	r3, r2, r3
 800546a:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 800546c:	6a3b      	ldr	r3, [r7, #32]
 800546e:	3b01      	subs	r3, #1
 8005470:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8005472:	6a3b      	ldr	r3, [r7, #32]
 8005474:	2b00      	cmp	r3, #0
 8005476:	d118      	bne.n	80054aa <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	2200      	movs	r2, #0
 800547c:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	2220      	movs	r2, #32
 8005482:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	2200      	movs	r2, #0
 800548a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005492:	f043 0220 	orr.w	r2, r3, #32
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800549a:	b662      	cpsie	i
}
 800549c:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	2200      	movs	r2, #0
 80054a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 80054a6:	2301      	movs	r3, #1
 80054a8:	e09a      	b.n	80055e0 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	695b      	ldr	r3, [r3, #20]
 80054b0:	f003 0304 	and.w	r3, r3, #4
 80054b4:	2b04      	cmp	r3, #4
 80054b6:	d1d9      	bne.n	800546c <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	681a      	ldr	r2, [r3, #0]
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80054c6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	691a      	ldr	r2, [r3, #16]
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054d2:	b2d2      	uxtb	r2, r2
 80054d4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054da:	1c5a      	adds	r2, r3, #1
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80054e4:	3b01      	subs	r3, #1
 80054e6:	b29a      	uxth	r2, r3
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054f0:	b29b      	uxth	r3, r3
 80054f2:	3b01      	subs	r3, #1
 80054f4:	b29a      	uxth	r2, r3
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80054fa:	b662      	cpsie	i
}
 80054fc:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	691a      	ldr	r2, [r3, #16]
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005508:	b2d2      	uxtb	r2, r2
 800550a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005510:	1c5a      	adds	r2, r3, #1
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800551a:	3b01      	subs	r3, #1
 800551c:	b29a      	uxth	r2, r3
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005526:	b29b      	uxth	r3, r3
 8005528:	3b01      	subs	r3, #1
 800552a:	b29a      	uxth	r2, r3
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005530:	e042      	b.n	80055b8 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005532:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005534:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005536:	68f8      	ldr	r0, [r7, #12]
 8005538:	f000 fce2 	bl	8005f00 <I2C_WaitOnRXNEFlagUntilTimeout>
 800553c:	4603      	mov	r3, r0
 800553e:	2b00      	cmp	r3, #0
 8005540:	d001      	beq.n	8005546 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8005542:	2301      	movs	r3, #1
 8005544:	e04c      	b.n	80055e0 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	691a      	ldr	r2, [r3, #16]
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005550:	b2d2      	uxtb	r2, r2
 8005552:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005558:	1c5a      	adds	r2, r3, #1
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005562:	3b01      	subs	r3, #1
 8005564:	b29a      	uxth	r2, r3
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800556e:	b29b      	uxth	r3, r3
 8005570:	3b01      	subs	r3, #1
 8005572:	b29a      	uxth	r2, r3
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	695b      	ldr	r3, [r3, #20]
 800557e:	f003 0304 	and.w	r3, r3, #4
 8005582:	2b04      	cmp	r3, #4
 8005584:	d118      	bne.n	80055b8 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	691a      	ldr	r2, [r3, #16]
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005590:	b2d2      	uxtb	r2, r2
 8005592:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005598:	1c5a      	adds	r2, r3, #1
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80055a2:	3b01      	subs	r3, #1
 80055a4:	b29a      	uxth	r2, r3
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055ae:	b29b      	uxth	r3, r3
 80055b0:	3b01      	subs	r3, #1
 80055b2:	b29a      	uxth	r2, r3
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80055bc:	2b00      	cmp	r3, #0
 80055be:	f47f ae94 	bne.w	80052ea <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	2220      	movs	r2, #32
 80055c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	2200      	movs	r2, #0
 80055ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	2200      	movs	r2, #0
 80055d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80055da:	2300      	movs	r3, #0
 80055dc:	e000      	b.n	80055e0 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 80055de:	2302      	movs	r3, #2
  }
}
 80055e0:	4618      	mov	r0, r3
 80055e2:	3728      	adds	r7, #40	; 0x28
 80055e4:	46bd      	mov	sp, r7
 80055e6:	bd80      	pop	{r7, pc}
 80055e8:	00010004 	.word	0x00010004
 80055ec:	20000010 	.word	0x20000010
 80055f0:	14f8b589 	.word	0x14f8b589

080055f4 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80055f4:	b580      	push	{r7, lr}
 80055f6:	b08a      	sub	sp, #40	; 0x28
 80055f8:	af02      	add	r7, sp, #8
 80055fa:	60f8      	str	r0, [r7, #12]
 80055fc:	607a      	str	r2, [r7, #4]
 80055fe:	603b      	str	r3, [r7, #0]
 8005600:	460b      	mov	r3, r1
 8005602:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8005604:	f7fe fa40 	bl	8003a88 <HAL_GetTick>
 8005608:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 800560a:	2301      	movs	r3, #1
 800560c:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005614:	b2db      	uxtb	r3, r3
 8005616:	2b20      	cmp	r3, #32
 8005618:	f040 8111 	bne.w	800583e <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800561c:	69fb      	ldr	r3, [r7, #28]
 800561e:	9300      	str	r3, [sp, #0]
 8005620:	2319      	movs	r3, #25
 8005622:	2201      	movs	r2, #1
 8005624:	4988      	ldr	r1, [pc, #544]	; (8005848 <HAL_I2C_IsDeviceReady+0x254>)
 8005626:	68f8      	ldr	r0, [r7, #12]
 8005628:	f000 fb12 	bl	8005c50 <I2C_WaitOnFlagUntilTimeout>
 800562c:	4603      	mov	r3, r0
 800562e:	2b00      	cmp	r3, #0
 8005630:	d001      	beq.n	8005636 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8005632:	2302      	movs	r3, #2
 8005634:	e104      	b.n	8005840 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800563c:	2b01      	cmp	r3, #1
 800563e:	d101      	bne.n	8005644 <HAL_I2C_IsDeviceReady+0x50>
 8005640:	2302      	movs	r3, #2
 8005642:	e0fd      	b.n	8005840 <HAL_I2C_IsDeviceReady+0x24c>
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	2201      	movs	r2, #1
 8005648:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	f003 0301 	and.w	r3, r3, #1
 8005656:	2b01      	cmp	r3, #1
 8005658:	d007      	beq.n	800566a <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	681a      	ldr	r2, [r3, #0]
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	f042 0201 	orr.w	r2, r2, #1
 8005668:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	681a      	ldr	r2, [r3, #0]
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005678:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	2224      	movs	r2, #36	; 0x24
 800567e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	2200      	movs	r2, #0
 8005686:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	4a70      	ldr	r2, [pc, #448]	; (800584c <HAL_I2C_IsDeviceReady+0x258>)
 800568c:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	681a      	ldr	r2, [r3, #0]
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800569c:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800569e:	69fb      	ldr	r3, [r7, #28]
 80056a0:	9300      	str	r3, [sp, #0]
 80056a2:	683b      	ldr	r3, [r7, #0]
 80056a4:	2200      	movs	r2, #0
 80056a6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80056aa:	68f8      	ldr	r0, [r7, #12]
 80056ac:	f000 fad0 	bl	8005c50 <I2C_WaitOnFlagUntilTimeout>
 80056b0:	4603      	mov	r3, r0
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d00d      	beq.n	80056d2 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80056c4:	d103      	bne.n	80056ce <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80056cc:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 80056ce:	2303      	movs	r3, #3
 80056d0:	e0b6      	b.n	8005840 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80056d2:	897b      	ldrh	r3, [r7, #10]
 80056d4:	b2db      	uxtb	r3, r3
 80056d6:	461a      	mov	r2, r3
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80056e0:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80056e2:	f7fe f9d1 	bl	8003a88 <HAL_GetTick>
 80056e6:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	695b      	ldr	r3, [r3, #20]
 80056ee:	f003 0302 	and.w	r3, r3, #2
 80056f2:	2b02      	cmp	r3, #2
 80056f4:	bf0c      	ite	eq
 80056f6:	2301      	moveq	r3, #1
 80056f8:	2300      	movne	r3, #0
 80056fa:	b2db      	uxtb	r3, r3
 80056fc:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	695b      	ldr	r3, [r3, #20]
 8005704:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005708:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800570c:	bf0c      	ite	eq
 800570e:	2301      	moveq	r3, #1
 8005710:	2300      	movne	r3, #0
 8005712:	b2db      	uxtb	r3, r3
 8005714:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8005716:	e025      	b.n	8005764 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005718:	f7fe f9b6 	bl	8003a88 <HAL_GetTick>
 800571c:	4602      	mov	r2, r0
 800571e:	69fb      	ldr	r3, [r7, #28]
 8005720:	1ad3      	subs	r3, r2, r3
 8005722:	683a      	ldr	r2, [r7, #0]
 8005724:	429a      	cmp	r2, r3
 8005726:	d302      	bcc.n	800572e <HAL_I2C_IsDeviceReady+0x13a>
 8005728:	683b      	ldr	r3, [r7, #0]
 800572a:	2b00      	cmp	r3, #0
 800572c:	d103      	bne.n	8005736 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	22a0      	movs	r2, #160	; 0xa0
 8005732:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	695b      	ldr	r3, [r3, #20]
 800573c:	f003 0302 	and.w	r3, r3, #2
 8005740:	2b02      	cmp	r3, #2
 8005742:	bf0c      	ite	eq
 8005744:	2301      	moveq	r3, #1
 8005746:	2300      	movne	r3, #0
 8005748:	b2db      	uxtb	r3, r3
 800574a:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	695b      	ldr	r3, [r3, #20]
 8005752:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005756:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800575a:	bf0c      	ite	eq
 800575c:	2301      	moveq	r3, #1
 800575e:	2300      	movne	r3, #0
 8005760:	b2db      	uxtb	r3, r3
 8005762:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800576a:	b2db      	uxtb	r3, r3
 800576c:	2ba0      	cmp	r3, #160	; 0xa0
 800576e:	d005      	beq.n	800577c <HAL_I2C_IsDeviceReady+0x188>
 8005770:	7dfb      	ldrb	r3, [r7, #23]
 8005772:	2b00      	cmp	r3, #0
 8005774:	d102      	bne.n	800577c <HAL_I2C_IsDeviceReady+0x188>
 8005776:	7dbb      	ldrb	r3, [r7, #22]
 8005778:	2b00      	cmp	r3, #0
 800577a:	d0cd      	beq.n	8005718 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	2220      	movs	r2, #32
 8005780:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	695b      	ldr	r3, [r3, #20]
 800578a:	f003 0302 	and.w	r3, r3, #2
 800578e:	2b02      	cmp	r3, #2
 8005790:	d129      	bne.n	80057e6 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	681a      	ldr	r2, [r3, #0]
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80057a0:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80057a2:	2300      	movs	r3, #0
 80057a4:	613b      	str	r3, [r7, #16]
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	695b      	ldr	r3, [r3, #20]
 80057ac:	613b      	str	r3, [r7, #16]
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	699b      	ldr	r3, [r3, #24]
 80057b4:	613b      	str	r3, [r7, #16]
 80057b6:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80057b8:	69fb      	ldr	r3, [r7, #28]
 80057ba:	9300      	str	r3, [sp, #0]
 80057bc:	2319      	movs	r3, #25
 80057be:	2201      	movs	r2, #1
 80057c0:	4921      	ldr	r1, [pc, #132]	; (8005848 <HAL_I2C_IsDeviceReady+0x254>)
 80057c2:	68f8      	ldr	r0, [r7, #12]
 80057c4:	f000 fa44 	bl	8005c50 <I2C_WaitOnFlagUntilTimeout>
 80057c8:	4603      	mov	r3, r0
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d001      	beq.n	80057d2 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80057ce:	2301      	movs	r3, #1
 80057d0:	e036      	b.n	8005840 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	2220      	movs	r2, #32
 80057d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	2200      	movs	r2, #0
 80057de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 80057e2:	2300      	movs	r3, #0
 80057e4:	e02c      	b.n	8005840 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	681a      	ldr	r2, [r3, #0]
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80057f4:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80057fe:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005800:	69fb      	ldr	r3, [r7, #28]
 8005802:	9300      	str	r3, [sp, #0]
 8005804:	2319      	movs	r3, #25
 8005806:	2201      	movs	r2, #1
 8005808:	490f      	ldr	r1, [pc, #60]	; (8005848 <HAL_I2C_IsDeviceReady+0x254>)
 800580a:	68f8      	ldr	r0, [r7, #12]
 800580c:	f000 fa20 	bl	8005c50 <I2C_WaitOnFlagUntilTimeout>
 8005810:	4603      	mov	r3, r0
 8005812:	2b00      	cmp	r3, #0
 8005814:	d001      	beq.n	800581a <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8005816:	2301      	movs	r3, #1
 8005818:	e012      	b.n	8005840 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800581a:	69bb      	ldr	r3, [r7, #24]
 800581c:	3301      	adds	r3, #1
 800581e:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8005820:	69ba      	ldr	r2, [r7, #24]
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	429a      	cmp	r2, r3
 8005826:	f4ff af32 	bcc.w	800568e <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	2220      	movs	r2, #32
 800582e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	2200      	movs	r2, #0
 8005836:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800583a:	2301      	movs	r3, #1
 800583c:	e000      	b.n	8005840 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800583e:	2302      	movs	r3, #2
  }
}
 8005840:	4618      	mov	r0, r3
 8005842:	3720      	adds	r7, #32
 8005844:	46bd      	mov	sp, r7
 8005846:	bd80      	pop	{r7, pc}
 8005848:	00100002 	.word	0x00100002
 800584c:	ffff0000 	.word	0xffff0000

08005850 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005850:	b580      	push	{r7, lr}
 8005852:	b088      	sub	sp, #32
 8005854:	af02      	add	r7, sp, #8
 8005856:	60f8      	str	r0, [r7, #12]
 8005858:	607a      	str	r2, [r7, #4]
 800585a:	603b      	str	r3, [r7, #0]
 800585c:	460b      	mov	r3, r1
 800585e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005864:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005866:	697b      	ldr	r3, [r7, #20]
 8005868:	2b08      	cmp	r3, #8
 800586a:	d006      	beq.n	800587a <I2C_MasterRequestWrite+0x2a>
 800586c:	697b      	ldr	r3, [r7, #20]
 800586e:	2b01      	cmp	r3, #1
 8005870:	d003      	beq.n	800587a <I2C_MasterRequestWrite+0x2a>
 8005872:	697b      	ldr	r3, [r7, #20]
 8005874:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005878:	d108      	bne.n	800588c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	681a      	ldr	r2, [r3, #0]
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005888:	601a      	str	r2, [r3, #0]
 800588a:	e00b      	b.n	80058a4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005890:	2b12      	cmp	r3, #18
 8005892:	d107      	bne.n	80058a4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	681a      	ldr	r2, [r3, #0]
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80058a2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80058a4:	683b      	ldr	r3, [r7, #0]
 80058a6:	9300      	str	r3, [sp, #0]
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	2200      	movs	r2, #0
 80058ac:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80058b0:	68f8      	ldr	r0, [r7, #12]
 80058b2:	f000 f9cd 	bl	8005c50 <I2C_WaitOnFlagUntilTimeout>
 80058b6:	4603      	mov	r3, r0
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d00d      	beq.n	80058d8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80058ca:	d103      	bne.n	80058d4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	f44f 7200 	mov.w	r2, #512	; 0x200
 80058d2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80058d4:	2303      	movs	r3, #3
 80058d6:	e035      	b.n	8005944 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	691b      	ldr	r3, [r3, #16]
 80058dc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80058e0:	d108      	bne.n	80058f4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80058e2:	897b      	ldrh	r3, [r7, #10]
 80058e4:	b2db      	uxtb	r3, r3
 80058e6:	461a      	mov	r2, r3
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80058f0:	611a      	str	r2, [r3, #16]
 80058f2:	e01b      	b.n	800592c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80058f4:	897b      	ldrh	r3, [r7, #10]
 80058f6:	11db      	asrs	r3, r3, #7
 80058f8:	b2db      	uxtb	r3, r3
 80058fa:	f003 0306 	and.w	r3, r3, #6
 80058fe:	b2db      	uxtb	r3, r3
 8005900:	f063 030f 	orn	r3, r3, #15
 8005904:	b2da      	uxtb	r2, r3
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800590c:	683b      	ldr	r3, [r7, #0]
 800590e:	687a      	ldr	r2, [r7, #4]
 8005910:	490e      	ldr	r1, [pc, #56]	; (800594c <I2C_MasterRequestWrite+0xfc>)
 8005912:	68f8      	ldr	r0, [r7, #12]
 8005914:	f000 f9f3 	bl	8005cfe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005918:	4603      	mov	r3, r0
 800591a:	2b00      	cmp	r3, #0
 800591c:	d001      	beq.n	8005922 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800591e:	2301      	movs	r3, #1
 8005920:	e010      	b.n	8005944 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005922:	897b      	ldrh	r3, [r7, #10]
 8005924:	b2da      	uxtb	r2, r3
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800592c:	683b      	ldr	r3, [r7, #0]
 800592e:	687a      	ldr	r2, [r7, #4]
 8005930:	4907      	ldr	r1, [pc, #28]	; (8005950 <I2C_MasterRequestWrite+0x100>)
 8005932:	68f8      	ldr	r0, [r7, #12]
 8005934:	f000 f9e3 	bl	8005cfe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005938:	4603      	mov	r3, r0
 800593a:	2b00      	cmp	r3, #0
 800593c:	d001      	beq.n	8005942 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800593e:	2301      	movs	r3, #1
 8005940:	e000      	b.n	8005944 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8005942:	2300      	movs	r3, #0
}
 8005944:	4618      	mov	r0, r3
 8005946:	3718      	adds	r7, #24
 8005948:	46bd      	mov	sp, r7
 800594a:	bd80      	pop	{r7, pc}
 800594c:	00010008 	.word	0x00010008
 8005950:	00010002 	.word	0x00010002

08005954 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005954:	b580      	push	{r7, lr}
 8005956:	b088      	sub	sp, #32
 8005958:	af02      	add	r7, sp, #8
 800595a:	60f8      	str	r0, [r7, #12]
 800595c:	4608      	mov	r0, r1
 800595e:	4611      	mov	r1, r2
 8005960:	461a      	mov	r2, r3
 8005962:	4603      	mov	r3, r0
 8005964:	817b      	strh	r3, [r7, #10]
 8005966:	460b      	mov	r3, r1
 8005968:	813b      	strh	r3, [r7, #8]
 800596a:	4613      	mov	r3, r2
 800596c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	681a      	ldr	r2, [r3, #0]
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800597c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800597e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005980:	9300      	str	r3, [sp, #0]
 8005982:	6a3b      	ldr	r3, [r7, #32]
 8005984:	2200      	movs	r2, #0
 8005986:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800598a:	68f8      	ldr	r0, [r7, #12]
 800598c:	f000 f960 	bl	8005c50 <I2C_WaitOnFlagUntilTimeout>
 8005990:	4603      	mov	r3, r0
 8005992:	2b00      	cmp	r3, #0
 8005994:	d00d      	beq.n	80059b2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80059a4:	d103      	bne.n	80059ae <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80059ac:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80059ae:	2303      	movs	r3, #3
 80059b0:	e05f      	b.n	8005a72 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80059b2:	897b      	ldrh	r3, [r7, #10]
 80059b4:	b2db      	uxtb	r3, r3
 80059b6:	461a      	mov	r2, r3
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80059c0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80059c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059c4:	6a3a      	ldr	r2, [r7, #32]
 80059c6:	492d      	ldr	r1, [pc, #180]	; (8005a7c <I2C_RequestMemoryWrite+0x128>)
 80059c8:	68f8      	ldr	r0, [r7, #12]
 80059ca:	f000 f998 	bl	8005cfe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80059ce:	4603      	mov	r3, r0
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d001      	beq.n	80059d8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80059d4:	2301      	movs	r3, #1
 80059d6:	e04c      	b.n	8005a72 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80059d8:	2300      	movs	r3, #0
 80059da:	617b      	str	r3, [r7, #20]
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	695b      	ldr	r3, [r3, #20]
 80059e2:	617b      	str	r3, [r7, #20]
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	699b      	ldr	r3, [r3, #24]
 80059ea:	617b      	str	r3, [r7, #20]
 80059ec:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80059ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80059f0:	6a39      	ldr	r1, [r7, #32]
 80059f2:	68f8      	ldr	r0, [r7, #12]
 80059f4:	f000 fa02 	bl	8005dfc <I2C_WaitOnTXEFlagUntilTimeout>
 80059f8:	4603      	mov	r3, r0
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d00d      	beq.n	8005a1a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a02:	2b04      	cmp	r3, #4
 8005a04:	d107      	bne.n	8005a16 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	681a      	ldr	r2, [r3, #0]
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005a14:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005a16:	2301      	movs	r3, #1
 8005a18:	e02b      	b.n	8005a72 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005a1a:	88fb      	ldrh	r3, [r7, #6]
 8005a1c:	2b01      	cmp	r3, #1
 8005a1e:	d105      	bne.n	8005a2c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005a20:	893b      	ldrh	r3, [r7, #8]
 8005a22:	b2da      	uxtb	r2, r3
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	611a      	str	r2, [r3, #16]
 8005a2a:	e021      	b.n	8005a70 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005a2c:	893b      	ldrh	r3, [r7, #8]
 8005a2e:	0a1b      	lsrs	r3, r3, #8
 8005a30:	b29b      	uxth	r3, r3
 8005a32:	b2da      	uxtb	r2, r3
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005a3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a3c:	6a39      	ldr	r1, [r7, #32]
 8005a3e:	68f8      	ldr	r0, [r7, #12]
 8005a40:	f000 f9dc 	bl	8005dfc <I2C_WaitOnTXEFlagUntilTimeout>
 8005a44:	4603      	mov	r3, r0
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d00d      	beq.n	8005a66 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a4e:	2b04      	cmp	r3, #4
 8005a50:	d107      	bne.n	8005a62 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	681a      	ldr	r2, [r3, #0]
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005a60:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005a62:	2301      	movs	r3, #1
 8005a64:	e005      	b.n	8005a72 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005a66:	893b      	ldrh	r3, [r7, #8]
 8005a68:	b2da      	uxtb	r2, r3
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005a70:	2300      	movs	r3, #0
}
 8005a72:	4618      	mov	r0, r3
 8005a74:	3718      	adds	r7, #24
 8005a76:	46bd      	mov	sp, r7
 8005a78:	bd80      	pop	{r7, pc}
 8005a7a:	bf00      	nop
 8005a7c:	00010002 	.word	0x00010002

08005a80 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005a80:	b580      	push	{r7, lr}
 8005a82:	b088      	sub	sp, #32
 8005a84:	af02      	add	r7, sp, #8
 8005a86:	60f8      	str	r0, [r7, #12]
 8005a88:	4608      	mov	r0, r1
 8005a8a:	4611      	mov	r1, r2
 8005a8c:	461a      	mov	r2, r3
 8005a8e:	4603      	mov	r3, r0
 8005a90:	817b      	strh	r3, [r7, #10]
 8005a92:	460b      	mov	r3, r1
 8005a94:	813b      	strh	r3, [r7, #8]
 8005a96:	4613      	mov	r3, r2
 8005a98:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	681a      	ldr	r2, [r3, #0]
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005aa8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	681a      	ldr	r2, [r3, #0]
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005ab8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005abc:	9300      	str	r3, [sp, #0]
 8005abe:	6a3b      	ldr	r3, [r7, #32]
 8005ac0:	2200      	movs	r2, #0
 8005ac2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005ac6:	68f8      	ldr	r0, [r7, #12]
 8005ac8:	f000 f8c2 	bl	8005c50 <I2C_WaitOnFlagUntilTimeout>
 8005acc:	4603      	mov	r3, r0
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d00d      	beq.n	8005aee <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005adc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005ae0:	d103      	bne.n	8005aea <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005ae8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005aea:	2303      	movs	r3, #3
 8005aec:	e0aa      	b.n	8005c44 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005aee:	897b      	ldrh	r3, [r7, #10]
 8005af0:	b2db      	uxtb	r3, r3
 8005af2:	461a      	mov	r2, r3
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005afc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b00:	6a3a      	ldr	r2, [r7, #32]
 8005b02:	4952      	ldr	r1, [pc, #328]	; (8005c4c <I2C_RequestMemoryRead+0x1cc>)
 8005b04:	68f8      	ldr	r0, [r7, #12]
 8005b06:	f000 f8fa 	bl	8005cfe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005b0a:	4603      	mov	r3, r0
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d001      	beq.n	8005b14 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8005b10:	2301      	movs	r3, #1
 8005b12:	e097      	b.n	8005c44 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005b14:	2300      	movs	r3, #0
 8005b16:	617b      	str	r3, [r7, #20]
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	695b      	ldr	r3, [r3, #20]
 8005b1e:	617b      	str	r3, [r7, #20]
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	699b      	ldr	r3, [r3, #24]
 8005b26:	617b      	str	r3, [r7, #20]
 8005b28:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005b2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b2c:	6a39      	ldr	r1, [r7, #32]
 8005b2e:	68f8      	ldr	r0, [r7, #12]
 8005b30:	f000 f964 	bl	8005dfc <I2C_WaitOnTXEFlagUntilTimeout>
 8005b34:	4603      	mov	r3, r0
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d00d      	beq.n	8005b56 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b3e:	2b04      	cmp	r3, #4
 8005b40:	d107      	bne.n	8005b52 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	681a      	ldr	r2, [r3, #0]
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005b50:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005b52:	2301      	movs	r3, #1
 8005b54:	e076      	b.n	8005c44 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005b56:	88fb      	ldrh	r3, [r7, #6]
 8005b58:	2b01      	cmp	r3, #1
 8005b5a:	d105      	bne.n	8005b68 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005b5c:	893b      	ldrh	r3, [r7, #8]
 8005b5e:	b2da      	uxtb	r2, r3
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	611a      	str	r2, [r3, #16]
 8005b66:	e021      	b.n	8005bac <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005b68:	893b      	ldrh	r3, [r7, #8]
 8005b6a:	0a1b      	lsrs	r3, r3, #8
 8005b6c:	b29b      	uxth	r3, r3
 8005b6e:	b2da      	uxtb	r2, r3
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005b76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b78:	6a39      	ldr	r1, [r7, #32]
 8005b7a:	68f8      	ldr	r0, [r7, #12]
 8005b7c:	f000 f93e 	bl	8005dfc <I2C_WaitOnTXEFlagUntilTimeout>
 8005b80:	4603      	mov	r3, r0
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d00d      	beq.n	8005ba2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b8a:	2b04      	cmp	r3, #4
 8005b8c:	d107      	bne.n	8005b9e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	681a      	ldr	r2, [r3, #0]
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005b9c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005b9e:	2301      	movs	r3, #1
 8005ba0:	e050      	b.n	8005c44 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005ba2:	893b      	ldrh	r3, [r7, #8]
 8005ba4:	b2da      	uxtb	r2, r3
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005bac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005bae:	6a39      	ldr	r1, [r7, #32]
 8005bb0:	68f8      	ldr	r0, [r7, #12]
 8005bb2:	f000 f923 	bl	8005dfc <I2C_WaitOnTXEFlagUntilTimeout>
 8005bb6:	4603      	mov	r3, r0
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d00d      	beq.n	8005bd8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bc0:	2b04      	cmp	r3, #4
 8005bc2:	d107      	bne.n	8005bd4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	681a      	ldr	r2, [r3, #0]
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005bd2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005bd4:	2301      	movs	r3, #1
 8005bd6:	e035      	b.n	8005c44 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	681a      	ldr	r2, [r3, #0]
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005be6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bea:	9300      	str	r3, [sp, #0]
 8005bec:	6a3b      	ldr	r3, [r7, #32]
 8005bee:	2200      	movs	r2, #0
 8005bf0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005bf4:	68f8      	ldr	r0, [r7, #12]
 8005bf6:	f000 f82b 	bl	8005c50 <I2C_WaitOnFlagUntilTimeout>
 8005bfa:	4603      	mov	r3, r0
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d00d      	beq.n	8005c1c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c0a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005c0e:	d103      	bne.n	8005c18 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005c16:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005c18:	2303      	movs	r3, #3
 8005c1a:	e013      	b.n	8005c44 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005c1c:	897b      	ldrh	r3, [r7, #10]
 8005c1e:	b2db      	uxtb	r3, r3
 8005c20:	f043 0301 	orr.w	r3, r3, #1
 8005c24:	b2da      	uxtb	r2, r3
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c2e:	6a3a      	ldr	r2, [r7, #32]
 8005c30:	4906      	ldr	r1, [pc, #24]	; (8005c4c <I2C_RequestMemoryRead+0x1cc>)
 8005c32:	68f8      	ldr	r0, [r7, #12]
 8005c34:	f000 f863 	bl	8005cfe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005c38:	4603      	mov	r3, r0
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d001      	beq.n	8005c42 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8005c3e:	2301      	movs	r3, #1
 8005c40:	e000      	b.n	8005c44 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8005c42:	2300      	movs	r3, #0
}
 8005c44:	4618      	mov	r0, r3
 8005c46:	3718      	adds	r7, #24
 8005c48:	46bd      	mov	sp, r7
 8005c4a:	bd80      	pop	{r7, pc}
 8005c4c:	00010002 	.word	0x00010002

08005c50 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005c50:	b580      	push	{r7, lr}
 8005c52:	b084      	sub	sp, #16
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	60f8      	str	r0, [r7, #12]
 8005c58:	60b9      	str	r1, [r7, #8]
 8005c5a:	603b      	str	r3, [r7, #0]
 8005c5c:	4613      	mov	r3, r2
 8005c5e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005c60:	e025      	b.n	8005cae <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005c62:	683b      	ldr	r3, [r7, #0]
 8005c64:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005c68:	d021      	beq.n	8005cae <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c6a:	f7fd ff0d 	bl	8003a88 <HAL_GetTick>
 8005c6e:	4602      	mov	r2, r0
 8005c70:	69bb      	ldr	r3, [r7, #24]
 8005c72:	1ad3      	subs	r3, r2, r3
 8005c74:	683a      	ldr	r2, [r7, #0]
 8005c76:	429a      	cmp	r2, r3
 8005c78:	d302      	bcc.n	8005c80 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005c7a:	683b      	ldr	r3, [r7, #0]
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d116      	bne.n	8005cae <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	2200      	movs	r2, #0
 8005c84:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	2220      	movs	r2, #32
 8005c8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	2200      	movs	r2, #0
 8005c92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c9a:	f043 0220 	orr.w	r2, r3, #32
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	2200      	movs	r2, #0
 8005ca6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005caa:	2301      	movs	r3, #1
 8005cac:	e023      	b.n	8005cf6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005cae:	68bb      	ldr	r3, [r7, #8]
 8005cb0:	0c1b      	lsrs	r3, r3, #16
 8005cb2:	b2db      	uxtb	r3, r3
 8005cb4:	2b01      	cmp	r3, #1
 8005cb6:	d10d      	bne.n	8005cd4 <I2C_WaitOnFlagUntilTimeout+0x84>
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	695b      	ldr	r3, [r3, #20]
 8005cbe:	43da      	mvns	r2, r3
 8005cc0:	68bb      	ldr	r3, [r7, #8]
 8005cc2:	4013      	ands	r3, r2
 8005cc4:	b29b      	uxth	r3, r3
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	bf0c      	ite	eq
 8005cca:	2301      	moveq	r3, #1
 8005ccc:	2300      	movne	r3, #0
 8005cce:	b2db      	uxtb	r3, r3
 8005cd0:	461a      	mov	r2, r3
 8005cd2:	e00c      	b.n	8005cee <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	699b      	ldr	r3, [r3, #24]
 8005cda:	43da      	mvns	r2, r3
 8005cdc:	68bb      	ldr	r3, [r7, #8]
 8005cde:	4013      	ands	r3, r2
 8005ce0:	b29b      	uxth	r3, r3
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	bf0c      	ite	eq
 8005ce6:	2301      	moveq	r3, #1
 8005ce8:	2300      	movne	r3, #0
 8005cea:	b2db      	uxtb	r3, r3
 8005cec:	461a      	mov	r2, r3
 8005cee:	79fb      	ldrb	r3, [r7, #7]
 8005cf0:	429a      	cmp	r2, r3
 8005cf2:	d0b6      	beq.n	8005c62 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005cf4:	2300      	movs	r3, #0
}
 8005cf6:	4618      	mov	r0, r3
 8005cf8:	3710      	adds	r7, #16
 8005cfa:	46bd      	mov	sp, r7
 8005cfc:	bd80      	pop	{r7, pc}

08005cfe <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005cfe:	b580      	push	{r7, lr}
 8005d00:	b084      	sub	sp, #16
 8005d02:	af00      	add	r7, sp, #0
 8005d04:	60f8      	str	r0, [r7, #12]
 8005d06:	60b9      	str	r1, [r7, #8]
 8005d08:	607a      	str	r2, [r7, #4]
 8005d0a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005d0c:	e051      	b.n	8005db2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	695b      	ldr	r3, [r3, #20]
 8005d14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005d18:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d1c:	d123      	bne.n	8005d66 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	681a      	ldr	r2, [r3, #0]
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005d2c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005d36:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	2200      	movs	r2, #0
 8005d3c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	2220      	movs	r2, #32
 8005d42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	2200      	movs	r2, #0
 8005d4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d52:	f043 0204 	orr.w	r2, r3, #4
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	2200      	movs	r2, #0
 8005d5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005d62:	2301      	movs	r3, #1
 8005d64:	e046      	b.n	8005df4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005d6c:	d021      	beq.n	8005db2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005d6e:	f7fd fe8b 	bl	8003a88 <HAL_GetTick>
 8005d72:	4602      	mov	r2, r0
 8005d74:	683b      	ldr	r3, [r7, #0]
 8005d76:	1ad3      	subs	r3, r2, r3
 8005d78:	687a      	ldr	r2, [r7, #4]
 8005d7a:	429a      	cmp	r2, r3
 8005d7c:	d302      	bcc.n	8005d84 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d116      	bne.n	8005db2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	2200      	movs	r2, #0
 8005d88:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	2220      	movs	r2, #32
 8005d8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	2200      	movs	r2, #0
 8005d96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d9e:	f043 0220 	orr.w	r2, r3, #32
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	2200      	movs	r2, #0
 8005daa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005dae:	2301      	movs	r3, #1
 8005db0:	e020      	b.n	8005df4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005db2:	68bb      	ldr	r3, [r7, #8]
 8005db4:	0c1b      	lsrs	r3, r3, #16
 8005db6:	b2db      	uxtb	r3, r3
 8005db8:	2b01      	cmp	r3, #1
 8005dba:	d10c      	bne.n	8005dd6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	695b      	ldr	r3, [r3, #20]
 8005dc2:	43da      	mvns	r2, r3
 8005dc4:	68bb      	ldr	r3, [r7, #8]
 8005dc6:	4013      	ands	r3, r2
 8005dc8:	b29b      	uxth	r3, r3
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	bf14      	ite	ne
 8005dce:	2301      	movne	r3, #1
 8005dd0:	2300      	moveq	r3, #0
 8005dd2:	b2db      	uxtb	r3, r3
 8005dd4:	e00b      	b.n	8005dee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	699b      	ldr	r3, [r3, #24]
 8005ddc:	43da      	mvns	r2, r3
 8005dde:	68bb      	ldr	r3, [r7, #8]
 8005de0:	4013      	ands	r3, r2
 8005de2:	b29b      	uxth	r3, r3
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	bf14      	ite	ne
 8005de8:	2301      	movne	r3, #1
 8005dea:	2300      	moveq	r3, #0
 8005dec:	b2db      	uxtb	r3, r3
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d18d      	bne.n	8005d0e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005df2:	2300      	movs	r3, #0
}
 8005df4:	4618      	mov	r0, r3
 8005df6:	3710      	adds	r7, #16
 8005df8:	46bd      	mov	sp, r7
 8005dfa:	bd80      	pop	{r7, pc}

08005dfc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005dfc:	b580      	push	{r7, lr}
 8005dfe:	b084      	sub	sp, #16
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	60f8      	str	r0, [r7, #12]
 8005e04:	60b9      	str	r1, [r7, #8]
 8005e06:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005e08:	e02d      	b.n	8005e66 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005e0a:	68f8      	ldr	r0, [r7, #12]
 8005e0c:	f000 f8ce 	bl	8005fac <I2C_IsAcknowledgeFailed>
 8005e10:	4603      	mov	r3, r0
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d001      	beq.n	8005e1a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005e16:	2301      	movs	r3, #1
 8005e18:	e02d      	b.n	8005e76 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005e1a:	68bb      	ldr	r3, [r7, #8]
 8005e1c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005e20:	d021      	beq.n	8005e66 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e22:	f7fd fe31 	bl	8003a88 <HAL_GetTick>
 8005e26:	4602      	mov	r2, r0
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	1ad3      	subs	r3, r2, r3
 8005e2c:	68ba      	ldr	r2, [r7, #8]
 8005e2e:	429a      	cmp	r2, r3
 8005e30:	d302      	bcc.n	8005e38 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005e32:	68bb      	ldr	r3, [r7, #8]
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d116      	bne.n	8005e66 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	2200      	movs	r2, #0
 8005e3c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	2220      	movs	r2, #32
 8005e42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	2200      	movs	r2, #0
 8005e4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e52:	f043 0220 	orr.w	r2, r3, #32
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	2200      	movs	r2, #0
 8005e5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005e62:	2301      	movs	r3, #1
 8005e64:	e007      	b.n	8005e76 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	695b      	ldr	r3, [r3, #20]
 8005e6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e70:	2b80      	cmp	r3, #128	; 0x80
 8005e72:	d1ca      	bne.n	8005e0a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005e74:	2300      	movs	r3, #0
}
 8005e76:	4618      	mov	r0, r3
 8005e78:	3710      	adds	r7, #16
 8005e7a:	46bd      	mov	sp, r7
 8005e7c:	bd80      	pop	{r7, pc}

08005e7e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005e7e:	b580      	push	{r7, lr}
 8005e80:	b084      	sub	sp, #16
 8005e82:	af00      	add	r7, sp, #0
 8005e84:	60f8      	str	r0, [r7, #12]
 8005e86:	60b9      	str	r1, [r7, #8]
 8005e88:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005e8a:	e02d      	b.n	8005ee8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005e8c:	68f8      	ldr	r0, [r7, #12]
 8005e8e:	f000 f88d 	bl	8005fac <I2C_IsAcknowledgeFailed>
 8005e92:	4603      	mov	r3, r0
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d001      	beq.n	8005e9c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005e98:	2301      	movs	r3, #1
 8005e9a:	e02d      	b.n	8005ef8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005e9c:	68bb      	ldr	r3, [r7, #8]
 8005e9e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005ea2:	d021      	beq.n	8005ee8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ea4:	f7fd fdf0 	bl	8003a88 <HAL_GetTick>
 8005ea8:	4602      	mov	r2, r0
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	1ad3      	subs	r3, r2, r3
 8005eae:	68ba      	ldr	r2, [r7, #8]
 8005eb0:	429a      	cmp	r2, r3
 8005eb2:	d302      	bcc.n	8005eba <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005eb4:	68bb      	ldr	r3, [r7, #8]
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d116      	bne.n	8005ee8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	2200      	movs	r2, #0
 8005ebe:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	2220      	movs	r2, #32
 8005ec4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	2200      	movs	r2, #0
 8005ecc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ed4:	f043 0220 	orr.w	r2, r3, #32
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	2200      	movs	r2, #0
 8005ee0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005ee4:	2301      	movs	r3, #1
 8005ee6:	e007      	b.n	8005ef8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	695b      	ldr	r3, [r3, #20]
 8005eee:	f003 0304 	and.w	r3, r3, #4
 8005ef2:	2b04      	cmp	r3, #4
 8005ef4:	d1ca      	bne.n	8005e8c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005ef6:	2300      	movs	r3, #0
}
 8005ef8:	4618      	mov	r0, r3
 8005efa:	3710      	adds	r7, #16
 8005efc:	46bd      	mov	sp, r7
 8005efe:	bd80      	pop	{r7, pc}

08005f00 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005f00:	b580      	push	{r7, lr}
 8005f02:	b084      	sub	sp, #16
 8005f04:	af00      	add	r7, sp, #0
 8005f06:	60f8      	str	r0, [r7, #12]
 8005f08:	60b9      	str	r1, [r7, #8]
 8005f0a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005f0c:	e042      	b.n	8005f94 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	695b      	ldr	r3, [r3, #20]
 8005f14:	f003 0310 	and.w	r3, r3, #16
 8005f18:	2b10      	cmp	r3, #16
 8005f1a:	d119      	bne.n	8005f50 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	f06f 0210 	mvn.w	r2, #16
 8005f24:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	2200      	movs	r2, #0
 8005f2a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	2220      	movs	r2, #32
 8005f30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	2200      	movs	r2, #0
 8005f38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	2200      	movs	r2, #0
 8005f48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005f4c:	2301      	movs	r3, #1
 8005f4e:	e029      	b.n	8005fa4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f50:	f7fd fd9a 	bl	8003a88 <HAL_GetTick>
 8005f54:	4602      	mov	r2, r0
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	1ad3      	subs	r3, r2, r3
 8005f5a:	68ba      	ldr	r2, [r7, #8]
 8005f5c:	429a      	cmp	r2, r3
 8005f5e:	d302      	bcc.n	8005f66 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005f60:	68bb      	ldr	r3, [r7, #8]
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d116      	bne.n	8005f94 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	2200      	movs	r2, #0
 8005f6a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	2220      	movs	r2, #32
 8005f70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	2200      	movs	r2, #0
 8005f78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f80:	f043 0220 	orr.w	r2, r3, #32
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	2200      	movs	r2, #0
 8005f8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005f90:	2301      	movs	r3, #1
 8005f92:	e007      	b.n	8005fa4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	695b      	ldr	r3, [r3, #20]
 8005f9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f9e:	2b40      	cmp	r3, #64	; 0x40
 8005fa0:	d1b5      	bne.n	8005f0e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005fa2:	2300      	movs	r3, #0
}
 8005fa4:	4618      	mov	r0, r3
 8005fa6:	3710      	adds	r7, #16
 8005fa8:	46bd      	mov	sp, r7
 8005faa:	bd80      	pop	{r7, pc}

08005fac <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005fac:	b480      	push	{r7}
 8005fae:	b083      	sub	sp, #12
 8005fb0:	af00      	add	r7, sp, #0
 8005fb2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	695b      	ldr	r3, [r3, #20]
 8005fba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005fbe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005fc2:	d11b      	bne.n	8005ffc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005fcc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	2200      	movs	r2, #0
 8005fd2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	2220      	movs	r2, #32
 8005fd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	2200      	movs	r2, #0
 8005fe0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fe8:	f043 0204 	orr.w	r2, r3, #4
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	2200      	movs	r2, #0
 8005ff4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005ff8:	2301      	movs	r3, #1
 8005ffa:	e000      	b.n	8005ffe <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005ffc:	2300      	movs	r3, #0
}
 8005ffe:	4618      	mov	r0, r3
 8006000:	370c      	adds	r7, #12
 8006002:	46bd      	mov	sp, r7
 8006004:	bc80      	pop	{r7}
 8006006:	4770      	bx	lr

08006008 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006008:	b580      	push	{r7, lr}
 800600a:	b086      	sub	sp, #24
 800600c:	af00      	add	r7, sp, #0
 800600e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	2b00      	cmp	r3, #0
 8006014:	d101      	bne.n	800601a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006016:	2301      	movs	r3, #1
 8006018:	e26c      	b.n	80064f4 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	f003 0301 	and.w	r3, r3, #1
 8006022:	2b00      	cmp	r3, #0
 8006024:	f000 8087 	beq.w	8006136 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006028:	4b92      	ldr	r3, [pc, #584]	; (8006274 <HAL_RCC_OscConfig+0x26c>)
 800602a:	685b      	ldr	r3, [r3, #4]
 800602c:	f003 030c 	and.w	r3, r3, #12
 8006030:	2b04      	cmp	r3, #4
 8006032:	d00c      	beq.n	800604e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8006034:	4b8f      	ldr	r3, [pc, #572]	; (8006274 <HAL_RCC_OscConfig+0x26c>)
 8006036:	685b      	ldr	r3, [r3, #4]
 8006038:	f003 030c 	and.w	r3, r3, #12
 800603c:	2b08      	cmp	r3, #8
 800603e:	d112      	bne.n	8006066 <HAL_RCC_OscConfig+0x5e>
 8006040:	4b8c      	ldr	r3, [pc, #560]	; (8006274 <HAL_RCC_OscConfig+0x26c>)
 8006042:	685b      	ldr	r3, [r3, #4]
 8006044:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006048:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800604c:	d10b      	bne.n	8006066 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800604e:	4b89      	ldr	r3, [pc, #548]	; (8006274 <HAL_RCC_OscConfig+0x26c>)
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006056:	2b00      	cmp	r3, #0
 8006058:	d06c      	beq.n	8006134 <HAL_RCC_OscConfig+0x12c>
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	685b      	ldr	r3, [r3, #4]
 800605e:	2b00      	cmp	r3, #0
 8006060:	d168      	bne.n	8006134 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8006062:	2301      	movs	r3, #1
 8006064:	e246      	b.n	80064f4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	685b      	ldr	r3, [r3, #4]
 800606a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800606e:	d106      	bne.n	800607e <HAL_RCC_OscConfig+0x76>
 8006070:	4b80      	ldr	r3, [pc, #512]	; (8006274 <HAL_RCC_OscConfig+0x26c>)
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	4a7f      	ldr	r2, [pc, #508]	; (8006274 <HAL_RCC_OscConfig+0x26c>)
 8006076:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800607a:	6013      	str	r3, [r2, #0]
 800607c:	e02e      	b.n	80060dc <HAL_RCC_OscConfig+0xd4>
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	685b      	ldr	r3, [r3, #4]
 8006082:	2b00      	cmp	r3, #0
 8006084:	d10c      	bne.n	80060a0 <HAL_RCC_OscConfig+0x98>
 8006086:	4b7b      	ldr	r3, [pc, #492]	; (8006274 <HAL_RCC_OscConfig+0x26c>)
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	4a7a      	ldr	r2, [pc, #488]	; (8006274 <HAL_RCC_OscConfig+0x26c>)
 800608c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006090:	6013      	str	r3, [r2, #0]
 8006092:	4b78      	ldr	r3, [pc, #480]	; (8006274 <HAL_RCC_OscConfig+0x26c>)
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	4a77      	ldr	r2, [pc, #476]	; (8006274 <HAL_RCC_OscConfig+0x26c>)
 8006098:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800609c:	6013      	str	r3, [r2, #0]
 800609e:	e01d      	b.n	80060dc <HAL_RCC_OscConfig+0xd4>
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	685b      	ldr	r3, [r3, #4]
 80060a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80060a8:	d10c      	bne.n	80060c4 <HAL_RCC_OscConfig+0xbc>
 80060aa:	4b72      	ldr	r3, [pc, #456]	; (8006274 <HAL_RCC_OscConfig+0x26c>)
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	4a71      	ldr	r2, [pc, #452]	; (8006274 <HAL_RCC_OscConfig+0x26c>)
 80060b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80060b4:	6013      	str	r3, [r2, #0]
 80060b6:	4b6f      	ldr	r3, [pc, #444]	; (8006274 <HAL_RCC_OscConfig+0x26c>)
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	4a6e      	ldr	r2, [pc, #440]	; (8006274 <HAL_RCC_OscConfig+0x26c>)
 80060bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80060c0:	6013      	str	r3, [r2, #0]
 80060c2:	e00b      	b.n	80060dc <HAL_RCC_OscConfig+0xd4>
 80060c4:	4b6b      	ldr	r3, [pc, #428]	; (8006274 <HAL_RCC_OscConfig+0x26c>)
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	4a6a      	ldr	r2, [pc, #424]	; (8006274 <HAL_RCC_OscConfig+0x26c>)
 80060ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80060ce:	6013      	str	r3, [r2, #0]
 80060d0:	4b68      	ldr	r3, [pc, #416]	; (8006274 <HAL_RCC_OscConfig+0x26c>)
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	4a67      	ldr	r2, [pc, #412]	; (8006274 <HAL_RCC_OscConfig+0x26c>)
 80060d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80060da:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	685b      	ldr	r3, [r3, #4]
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d013      	beq.n	800610c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80060e4:	f7fd fcd0 	bl	8003a88 <HAL_GetTick>
 80060e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80060ea:	e008      	b.n	80060fe <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80060ec:	f7fd fccc 	bl	8003a88 <HAL_GetTick>
 80060f0:	4602      	mov	r2, r0
 80060f2:	693b      	ldr	r3, [r7, #16]
 80060f4:	1ad3      	subs	r3, r2, r3
 80060f6:	2b64      	cmp	r3, #100	; 0x64
 80060f8:	d901      	bls.n	80060fe <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80060fa:	2303      	movs	r3, #3
 80060fc:	e1fa      	b.n	80064f4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80060fe:	4b5d      	ldr	r3, [pc, #372]	; (8006274 <HAL_RCC_OscConfig+0x26c>)
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006106:	2b00      	cmp	r3, #0
 8006108:	d0f0      	beq.n	80060ec <HAL_RCC_OscConfig+0xe4>
 800610a:	e014      	b.n	8006136 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800610c:	f7fd fcbc 	bl	8003a88 <HAL_GetTick>
 8006110:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006112:	e008      	b.n	8006126 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006114:	f7fd fcb8 	bl	8003a88 <HAL_GetTick>
 8006118:	4602      	mov	r2, r0
 800611a:	693b      	ldr	r3, [r7, #16]
 800611c:	1ad3      	subs	r3, r2, r3
 800611e:	2b64      	cmp	r3, #100	; 0x64
 8006120:	d901      	bls.n	8006126 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8006122:	2303      	movs	r3, #3
 8006124:	e1e6      	b.n	80064f4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006126:	4b53      	ldr	r3, [pc, #332]	; (8006274 <HAL_RCC_OscConfig+0x26c>)
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800612e:	2b00      	cmp	r3, #0
 8006130:	d1f0      	bne.n	8006114 <HAL_RCC_OscConfig+0x10c>
 8006132:	e000      	b.n	8006136 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006134:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	f003 0302 	and.w	r3, r3, #2
 800613e:	2b00      	cmp	r3, #0
 8006140:	d063      	beq.n	800620a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006142:	4b4c      	ldr	r3, [pc, #304]	; (8006274 <HAL_RCC_OscConfig+0x26c>)
 8006144:	685b      	ldr	r3, [r3, #4]
 8006146:	f003 030c 	and.w	r3, r3, #12
 800614a:	2b00      	cmp	r3, #0
 800614c:	d00b      	beq.n	8006166 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800614e:	4b49      	ldr	r3, [pc, #292]	; (8006274 <HAL_RCC_OscConfig+0x26c>)
 8006150:	685b      	ldr	r3, [r3, #4]
 8006152:	f003 030c 	and.w	r3, r3, #12
 8006156:	2b08      	cmp	r3, #8
 8006158:	d11c      	bne.n	8006194 <HAL_RCC_OscConfig+0x18c>
 800615a:	4b46      	ldr	r3, [pc, #280]	; (8006274 <HAL_RCC_OscConfig+0x26c>)
 800615c:	685b      	ldr	r3, [r3, #4]
 800615e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006162:	2b00      	cmp	r3, #0
 8006164:	d116      	bne.n	8006194 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006166:	4b43      	ldr	r3, [pc, #268]	; (8006274 <HAL_RCC_OscConfig+0x26c>)
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	f003 0302 	and.w	r3, r3, #2
 800616e:	2b00      	cmp	r3, #0
 8006170:	d005      	beq.n	800617e <HAL_RCC_OscConfig+0x176>
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	691b      	ldr	r3, [r3, #16]
 8006176:	2b01      	cmp	r3, #1
 8006178:	d001      	beq.n	800617e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800617a:	2301      	movs	r3, #1
 800617c:	e1ba      	b.n	80064f4 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800617e:	4b3d      	ldr	r3, [pc, #244]	; (8006274 <HAL_RCC_OscConfig+0x26c>)
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	695b      	ldr	r3, [r3, #20]
 800618a:	00db      	lsls	r3, r3, #3
 800618c:	4939      	ldr	r1, [pc, #228]	; (8006274 <HAL_RCC_OscConfig+0x26c>)
 800618e:	4313      	orrs	r3, r2
 8006190:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006192:	e03a      	b.n	800620a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	691b      	ldr	r3, [r3, #16]
 8006198:	2b00      	cmp	r3, #0
 800619a:	d020      	beq.n	80061de <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800619c:	4b36      	ldr	r3, [pc, #216]	; (8006278 <HAL_RCC_OscConfig+0x270>)
 800619e:	2201      	movs	r2, #1
 80061a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80061a2:	f7fd fc71 	bl	8003a88 <HAL_GetTick>
 80061a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80061a8:	e008      	b.n	80061bc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80061aa:	f7fd fc6d 	bl	8003a88 <HAL_GetTick>
 80061ae:	4602      	mov	r2, r0
 80061b0:	693b      	ldr	r3, [r7, #16]
 80061b2:	1ad3      	subs	r3, r2, r3
 80061b4:	2b02      	cmp	r3, #2
 80061b6:	d901      	bls.n	80061bc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80061b8:	2303      	movs	r3, #3
 80061ba:	e19b      	b.n	80064f4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80061bc:	4b2d      	ldr	r3, [pc, #180]	; (8006274 <HAL_RCC_OscConfig+0x26c>)
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	f003 0302 	and.w	r3, r3, #2
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d0f0      	beq.n	80061aa <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80061c8:	4b2a      	ldr	r3, [pc, #168]	; (8006274 <HAL_RCC_OscConfig+0x26c>)
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	695b      	ldr	r3, [r3, #20]
 80061d4:	00db      	lsls	r3, r3, #3
 80061d6:	4927      	ldr	r1, [pc, #156]	; (8006274 <HAL_RCC_OscConfig+0x26c>)
 80061d8:	4313      	orrs	r3, r2
 80061da:	600b      	str	r3, [r1, #0]
 80061dc:	e015      	b.n	800620a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80061de:	4b26      	ldr	r3, [pc, #152]	; (8006278 <HAL_RCC_OscConfig+0x270>)
 80061e0:	2200      	movs	r2, #0
 80061e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80061e4:	f7fd fc50 	bl	8003a88 <HAL_GetTick>
 80061e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80061ea:	e008      	b.n	80061fe <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80061ec:	f7fd fc4c 	bl	8003a88 <HAL_GetTick>
 80061f0:	4602      	mov	r2, r0
 80061f2:	693b      	ldr	r3, [r7, #16]
 80061f4:	1ad3      	subs	r3, r2, r3
 80061f6:	2b02      	cmp	r3, #2
 80061f8:	d901      	bls.n	80061fe <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80061fa:	2303      	movs	r3, #3
 80061fc:	e17a      	b.n	80064f4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80061fe:	4b1d      	ldr	r3, [pc, #116]	; (8006274 <HAL_RCC_OscConfig+0x26c>)
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	f003 0302 	and.w	r3, r3, #2
 8006206:	2b00      	cmp	r3, #0
 8006208:	d1f0      	bne.n	80061ec <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	f003 0308 	and.w	r3, r3, #8
 8006212:	2b00      	cmp	r3, #0
 8006214:	d03a      	beq.n	800628c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	699b      	ldr	r3, [r3, #24]
 800621a:	2b00      	cmp	r3, #0
 800621c:	d019      	beq.n	8006252 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800621e:	4b17      	ldr	r3, [pc, #92]	; (800627c <HAL_RCC_OscConfig+0x274>)
 8006220:	2201      	movs	r2, #1
 8006222:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006224:	f7fd fc30 	bl	8003a88 <HAL_GetTick>
 8006228:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800622a:	e008      	b.n	800623e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800622c:	f7fd fc2c 	bl	8003a88 <HAL_GetTick>
 8006230:	4602      	mov	r2, r0
 8006232:	693b      	ldr	r3, [r7, #16]
 8006234:	1ad3      	subs	r3, r2, r3
 8006236:	2b02      	cmp	r3, #2
 8006238:	d901      	bls.n	800623e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800623a:	2303      	movs	r3, #3
 800623c:	e15a      	b.n	80064f4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800623e:	4b0d      	ldr	r3, [pc, #52]	; (8006274 <HAL_RCC_OscConfig+0x26c>)
 8006240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006242:	f003 0302 	and.w	r3, r3, #2
 8006246:	2b00      	cmp	r3, #0
 8006248:	d0f0      	beq.n	800622c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800624a:	2001      	movs	r0, #1
 800624c:	f000 fad8 	bl	8006800 <RCC_Delay>
 8006250:	e01c      	b.n	800628c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006252:	4b0a      	ldr	r3, [pc, #40]	; (800627c <HAL_RCC_OscConfig+0x274>)
 8006254:	2200      	movs	r2, #0
 8006256:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006258:	f7fd fc16 	bl	8003a88 <HAL_GetTick>
 800625c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800625e:	e00f      	b.n	8006280 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006260:	f7fd fc12 	bl	8003a88 <HAL_GetTick>
 8006264:	4602      	mov	r2, r0
 8006266:	693b      	ldr	r3, [r7, #16]
 8006268:	1ad3      	subs	r3, r2, r3
 800626a:	2b02      	cmp	r3, #2
 800626c:	d908      	bls.n	8006280 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800626e:	2303      	movs	r3, #3
 8006270:	e140      	b.n	80064f4 <HAL_RCC_OscConfig+0x4ec>
 8006272:	bf00      	nop
 8006274:	40021000 	.word	0x40021000
 8006278:	42420000 	.word	0x42420000
 800627c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006280:	4b9e      	ldr	r3, [pc, #632]	; (80064fc <HAL_RCC_OscConfig+0x4f4>)
 8006282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006284:	f003 0302 	and.w	r3, r3, #2
 8006288:	2b00      	cmp	r3, #0
 800628a:	d1e9      	bne.n	8006260 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	f003 0304 	and.w	r3, r3, #4
 8006294:	2b00      	cmp	r3, #0
 8006296:	f000 80a6 	beq.w	80063e6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800629a:	2300      	movs	r3, #0
 800629c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800629e:	4b97      	ldr	r3, [pc, #604]	; (80064fc <HAL_RCC_OscConfig+0x4f4>)
 80062a0:	69db      	ldr	r3, [r3, #28]
 80062a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d10d      	bne.n	80062c6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80062aa:	4b94      	ldr	r3, [pc, #592]	; (80064fc <HAL_RCC_OscConfig+0x4f4>)
 80062ac:	69db      	ldr	r3, [r3, #28]
 80062ae:	4a93      	ldr	r2, [pc, #588]	; (80064fc <HAL_RCC_OscConfig+0x4f4>)
 80062b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80062b4:	61d3      	str	r3, [r2, #28]
 80062b6:	4b91      	ldr	r3, [pc, #580]	; (80064fc <HAL_RCC_OscConfig+0x4f4>)
 80062b8:	69db      	ldr	r3, [r3, #28]
 80062ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80062be:	60bb      	str	r3, [r7, #8]
 80062c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80062c2:	2301      	movs	r3, #1
 80062c4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80062c6:	4b8e      	ldr	r3, [pc, #568]	; (8006500 <HAL_RCC_OscConfig+0x4f8>)
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d118      	bne.n	8006304 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80062d2:	4b8b      	ldr	r3, [pc, #556]	; (8006500 <HAL_RCC_OscConfig+0x4f8>)
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	4a8a      	ldr	r2, [pc, #552]	; (8006500 <HAL_RCC_OscConfig+0x4f8>)
 80062d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80062dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80062de:	f7fd fbd3 	bl	8003a88 <HAL_GetTick>
 80062e2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80062e4:	e008      	b.n	80062f8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80062e6:	f7fd fbcf 	bl	8003a88 <HAL_GetTick>
 80062ea:	4602      	mov	r2, r0
 80062ec:	693b      	ldr	r3, [r7, #16]
 80062ee:	1ad3      	subs	r3, r2, r3
 80062f0:	2b64      	cmp	r3, #100	; 0x64
 80062f2:	d901      	bls.n	80062f8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80062f4:	2303      	movs	r3, #3
 80062f6:	e0fd      	b.n	80064f4 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80062f8:	4b81      	ldr	r3, [pc, #516]	; (8006500 <HAL_RCC_OscConfig+0x4f8>)
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006300:	2b00      	cmp	r3, #0
 8006302:	d0f0      	beq.n	80062e6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	68db      	ldr	r3, [r3, #12]
 8006308:	2b01      	cmp	r3, #1
 800630a:	d106      	bne.n	800631a <HAL_RCC_OscConfig+0x312>
 800630c:	4b7b      	ldr	r3, [pc, #492]	; (80064fc <HAL_RCC_OscConfig+0x4f4>)
 800630e:	6a1b      	ldr	r3, [r3, #32]
 8006310:	4a7a      	ldr	r2, [pc, #488]	; (80064fc <HAL_RCC_OscConfig+0x4f4>)
 8006312:	f043 0301 	orr.w	r3, r3, #1
 8006316:	6213      	str	r3, [r2, #32]
 8006318:	e02d      	b.n	8006376 <HAL_RCC_OscConfig+0x36e>
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	68db      	ldr	r3, [r3, #12]
 800631e:	2b00      	cmp	r3, #0
 8006320:	d10c      	bne.n	800633c <HAL_RCC_OscConfig+0x334>
 8006322:	4b76      	ldr	r3, [pc, #472]	; (80064fc <HAL_RCC_OscConfig+0x4f4>)
 8006324:	6a1b      	ldr	r3, [r3, #32]
 8006326:	4a75      	ldr	r2, [pc, #468]	; (80064fc <HAL_RCC_OscConfig+0x4f4>)
 8006328:	f023 0301 	bic.w	r3, r3, #1
 800632c:	6213      	str	r3, [r2, #32]
 800632e:	4b73      	ldr	r3, [pc, #460]	; (80064fc <HAL_RCC_OscConfig+0x4f4>)
 8006330:	6a1b      	ldr	r3, [r3, #32]
 8006332:	4a72      	ldr	r2, [pc, #456]	; (80064fc <HAL_RCC_OscConfig+0x4f4>)
 8006334:	f023 0304 	bic.w	r3, r3, #4
 8006338:	6213      	str	r3, [r2, #32]
 800633a:	e01c      	b.n	8006376 <HAL_RCC_OscConfig+0x36e>
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	68db      	ldr	r3, [r3, #12]
 8006340:	2b05      	cmp	r3, #5
 8006342:	d10c      	bne.n	800635e <HAL_RCC_OscConfig+0x356>
 8006344:	4b6d      	ldr	r3, [pc, #436]	; (80064fc <HAL_RCC_OscConfig+0x4f4>)
 8006346:	6a1b      	ldr	r3, [r3, #32]
 8006348:	4a6c      	ldr	r2, [pc, #432]	; (80064fc <HAL_RCC_OscConfig+0x4f4>)
 800634a:	f043 0304 	orr.w	r3, r3, #4
 800634e:	6213      	str	r3, [r2, #32]
 8006350:	4b6a      	ldr	r3, [pc, #424]	; (80064fc <HAL_RCC_OscConfig+0x4f4>)
 8006352:	6a1b      	ldr	r3, [r3, #32]
 8006354:	4a69      	ldr	r2, [pc, #420]	; (80064fc <HAL_RCC_OscConfig+0x4f4>)
 8006356:	f043 0301 	orr.w	r3, r3, #1
 800635a:	6213      	str	r3, [r2, #32]
 800635c:	e00b      	b.n	8006376 <HAL_RCC_OscConfig+0x36e>
 800635e:	4b67      	ldr	r3, [pc, #412]	; (80064fc <HAL_RCC_OscConfig+0x4f4>)
 8006360:	6a1b      	ldr	r3, [r3, #32]
 8006362:	4a66      	ldr	r2, [pc, #408]	; (80064fc <HAL_RCC_OscConfig+0x4f4>)
 8006364:	f023 0301 	bic.w	r3, r3, #1
 8006368:	6213      	str	r3, [r2, #32]
 800636a:	4b64      	ldr	r3, [pc, #400]	; (80064fc <HAL_RCC_OscConfig+0x4f4>)
 800636c:	6a1b      	ldr	r3, [r3, #32]
 800636e:	4a63      	ldr	r2, [pc, #396]	; (80064fc <HAL_RCC_OscConfig+0x4f4>)
 8006370:	f023 0304 	bic.w	r3, r3, #4
 8006374:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	68db      	ldr	r3, [r3, #12]
 800637a:	2b00      	cmp	r3, #0
 800637c:	d015      	beq.n	80063aa <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800637e:	f7fd fb83 	bl	8003a88 <HAL_GetTick>
 8006382:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006384:	e00a      	b.n	800639c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006386:	f7fd fb7f 	bl	8003a88 <HAL_GetTick>
 800638a:	4602      	mov	r2, r0
 800638c:	693b      	ldr	r3, [r7, #16]
 800638e:	1ad3      	subs	r3, r2, r3
 8006390:	f241 3288 	movw	r2, #5000	; 0x1388
 8006394:	4293      	cmp	r3, r2
 8006396:	d901      	bls.n	800639c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8006398:	2303      	movs	r3, #3
 800639a:	e0ab      	b.n	80064f4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800639c:	4b57      	ldr	r3, [pc, #348]	; (80064fc <HAL_RCC_OscConfig+0x4f4>)
 800639e:	6a1b      	ldr	r3, [r3, #32]
 80063a0:	f003 0302 	and.w	r3, r3, #2
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d0ee      	beq.n	8006386 <HAL_RCC_OscConfig+0x37e>
 80063a8:	e014      	b.n	80063d4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80063aa:	f7fd fb6d 	bl	8003a88 <HAL_GetTick>
 80063ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80063b0:	e00a      	b.n	80063c8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80063b2:	f7fd fb69 	bl	8003a88 <HAL_GetTick>
 80063b6:	4602      	mov	r2, r0
 80063b8:	693b      	ldr	r3, [r7, #16]
 80063ba:	1ad3      	subs	r3, r2, r3
 80063bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80063c0:	4293      	cmp	r3, r2
 80063c2:	d901      	bls.n	80063c8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80063c4:	2303      	movs	r3, #3
 80063c6:	e095      	b.n	80064f4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80063c8:	4b4c      	ldr	r3, [pc, #304]	; (80064fc <HAL_RCC_OscConfig+0x4f4>)
 80063ca:	6a1b      	ldr	r3, [r3, #32]
 80063cc:	f003 0302 	and.w	r3, r3, #2
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d1ee      	bne.n	80063b2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80063d4:	7dfb      	ldrb	r3, [r7, #23]
 80063d6:	2b01      	cmp	r3, #1
 80063d8:	d105      	bne.n	80063e6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80063da:	4b48      	ldr	r3, [pc, #288]	; (80064fc <HAL_RCC_OscConfig+0x4f4>)
 80063dc:	69db      	ldr	r3, [r3, #28]
 80063de:	4a47      	ldr	r2, [pc, #284]	; (80064fc <HAL_RCC_OscConfig+0x4f4>)
 80063e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80063e4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	69db      	ldr	r3, [r3, #28]
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	f000 8081 	beq.w	80064f2 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80063f0:	4b42      	ldr	r3, [pc, #264]	; (80064fc <HAL_RCC_OscConfig+0x4f4>)
 80063f2:	685b      	ldr	r3, [r3, #4]
 80063f4:	f003 030c 	and.w	r3, r3, #12
 80063f8:	2b08      	cmp	r3, #8
 80063fa:	d061      	beq.n	80064c0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	69db      	ldr	r3, [r3, #28]
 8006400:	2b02      	cmp	r3, #2
 8006402:	d146      	bne.n	8006492 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006404:	4b3f      	ldr	r3, [pc, #252]	; (8006504 <HAL_RCC_OscConfig+0x4fc>)
 8006406:	2200      	movs	r2, #0
 8006408:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800640a:	f7fd fb3d 	bl	8003a88 <HAL_GetTick>
 800640e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006410:	e008      	b.n	8006424 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006412:	f7fd fb39 	bl	8003a88 <HAL_GetTick>
 8006416:	4602      	mov	r2, r0
 8006418:	693b      	ldr	r3, [r7, #16]
 800641a:	1ad3      	subs	r3, r2, r3
 800641c:	2b02      	cmp	r3, #2
 800641e:	d901      	bls.n	8006424 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8006420:	2303      	movs	r3, #3
 8006422:	e067      	b.n	80064f4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006424:	4b35      	ldr	r3, [pc, #212]	; (80064fc <HAL_RCC_OscConfig+0x4f4>)
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800642c:	2b00      	cmp	r3, #0
 800642e:	d1f0      	bne.n	8006412 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	6a1b      	ldr	r3, [r3, #32]
 8006434:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006438:	d108      	bne.n	800644c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800643a:	4b30      	ldr	r3, [pc, #192]	; (80064fc <HAL_RCC_OscConfig+0x4f4>)
 800643c:	685b      	ldr	r3, [r3, #4]
 800643e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	689b      	ldr	r3, [r3, #8]
 8006446:	492d      	ldr	r1, [pc, #180]	; (80064fc <HAL_RCC_OscConfig+0x4f4>)
 8006448:	4313      	orrs	r3, r2
 800644a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800644c:	4b2b      	ldr	r3, [pc, #172]	; (80064fc <HAL_RCC_OscConfig+0x4f4>)
 800644e:	685b      	ldr	r3, [r3, #4]
 8006450:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	6a19      	ldr	r1, [r3, #32]
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800645c:	430b      	orrs	r3, r1
 800645e:	4927      	ldr	r1, [pc, #156]	; (80064fc <HAL_RCC_OscConfig+0x4f4>)
 8006460:	4313      	orrs	r3, r2
 8006462:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006464:	4b27      	ldr	r3, [pc, #156]	; (8006504 <HAL_RCC_OscConfig+0x4fc>)
 8006466:	2201      	movs	r2, #1
 8006468:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800646a:	f7fd fb0d 	bl	8003a88 <HAL_GetTick>
 800646e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006470:	e008      	b.n	8006484 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006472:	f7fd fb09 	bl	8003a88 <HAL_GetTick>
 8006476:	4602      	mov	r2, r0
 8006478:	693b      	ldr	r3, [r7, #16]
 800647a:	1ad3      	subs	r3, r2, r3
 800647c:	2b02      	cmp	r3, #2
 800647e:	d901      	bls.n	8006484 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8006480:	2303      	movs	r3, #3
 8006482:	e037      	b.n	80064f4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006484:	4b1d      	ldr	r3, [pc, #116]	; (80064fc <HAL_RCC_OscConfig+0x4f4>)
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800648c:	2b00      	cmp	r3, #0
 800648e:	d0f0      	beq.n	8006472 <HAL_RCC_OscConfig+0x46a>
 8006490:	e02f      	b.n	80064f2 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006492:	4b1c      	ldr	r3, [pc, #112]	; (8006504 <HAL_RCC_OscConfig+0x4fc>)
 8006494:	2200      	movs	r2, #0
 8006496:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006498:	f7fd faf6 	bl	8003a88 <HAL_GetTick>
 800649c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800649e:	e008      	b.n	80064b2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80064a0:	f7fd faf2 	bl	8003a88 <HAL_GetTick>
 80064a4:	4602      	mov	r2, r0
 80064a6:	693b      	ldr	r3, [r7, #16]
 80064a8:	1ad3      	subs	r3, r2, r3
 80064aa:	2b02      	cmp	r3, #2
 80064ac:	d901      	bls.n	80064b2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80064ae:	2303      	movs	r3, #3
 80064b0:	e020      	b.n	80064f4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80064b2:	4b12      	ldr	r3, [pc, #72]	; (80064fc <HAL_RCC_OscConfig+0x4f4>)
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d1f0      	bne.n	80064a0 <HAL_RCC_OscConfig+0x498>
 80064be:	e018      	b.n	80064f2 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	69db      	ldr	r3, [r3, #28]
 80064c4:	2b01      	cmp	r3, #1
 80064c6:	d101      	bne.n	80064cc <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80064c8:	2301      	movs	r3, #1
 80064ca:	e013      	b.n	80064f4 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80064cc:	4b0b      	ldr	r3, [pc, #44]	; (80064fc <HAL_RCC_OscConfig+0x4f4>)
 80064ce:	685b      	ldr	r3, [r3, #4]
 80064d0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	6a1b      	ldr	r3, [r3, #32]
 80064dc:	429a      	cmp	r2, r3
 80064de:	d106      	bne.n	80064ee <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80064ea:	429a      	cmp	r2, r3
 80064ec:	d001      	beq.n	80064f2 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80064ee:	2301      	movs	r3, #1
 80064f0:	e000      	b.n	80064f4 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80064f2:	2300      	movs	r3, #0
}
 80064f4:	4618      	mov	r0, r3
 80064f6:	3718      	adds	r7, #24
 80064f8:	46bd      	mov	sp, r7
 80064fa:	bd80      	pop	{r7, pc}
 80064fc:	40021000 	.word	0x40021000
 8006500:	40007000 	.word	0x40007000
 8006504:	42420060 	.word	0x42420060

08006508 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006508:	b580      	push	{r7, lr}
 800650a:	b084      	sub	sp, #16
 800650c:	af00      	add	r7, sp, #0
 800650e:	6078      	str	r0, [r7, #4]
 8006510:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	2b00      	cmp	r3, #0
 8006516:	d101      	bne.n	800651c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006518:	2301      	movs	r3, #1
 800651a:	e0d0      	b.n	80066be <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800651c:	4b6a      	ldr	r3, [pc, #424]	; (80066c8 <HAL_RCC_ClockConfig+0x1c0>)
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	f003 0307 	and.w	r3, r3, #7
 8006524:	683a      	ldr	r2, [r7, #0]
 8006526:	429a      	cmp	r2, r3
 8006528:	d910      	bls.n	800654c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800652a:	4b67      	ldr	r3, [pc, #412]	; (80066c8 <HAL_RCC_ClockConfig+0x1c0>)
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	f023 0207 	bic.w	r2, r3, #7
 8006532:	4965      	ldr	r1, [pc, #404]	; (80066c8 <HAL_RCC_ClockConfig+0x1c0>)
 8006534:	683b      	ldr	r3, [r7, #0]
 8006536:	4313      	orrs	r3, r2
 8006538:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800653a:	4b63      	ldr	r3, [pc, #396]	; (80066c8 <HAL_RCC_ClockConfig+0x1c0>)
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	f003 0307 	and.w	r3, r3, #7
 8006542:	683a      	ldr	r2, [r7, #0]
 8006544:	429a      	cmp	r2, r3
 8006546:	d001      	beq.n	800654c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8006548:	2301      	movs	r3, #1
 800654a:	e0b8      	b.n	80066be <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	f003 0302 	and.w	r3, r3, #2
 8006554:	2b00      	cmp	r3, #0
 8006556:	d020      	beq.n	800659a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	f003 0304 	and.w	r3, r3, #4
 8006560:	2b00      	cmp	r3, #0
 8006562:	d005      	beq.n	8006570 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006564:	4b59      	ldr	r3, [pc, #356]	; (80066cc <HAL_RCC_ClockConfig+0x1c4>)
 8006566:	685b      	ldr	r3, [r3, #4]
 8006568:	4a58      	ldr	r2, [pc, #352]	; (80066cc <HAL_RCC_ClockConfig+0x1c4>)
 800656a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800656e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	f003 0308 	and.w	r3, r3, #8
 8006578:	2b00      	cmp	r3, #0
 800657a:	d005      	beq.n	8006588 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800657c:	4b53      	ldr	r3, [pc, #332]	; (80066cc <HAL_RCC_ClockConfig+0x1c4>)
 800657e:	685b      	ldr	r3, [r3, #4]
 8006580:	4a52      	ldr	r2, [pc, #328]	; (80066cc <HAL_RCC_ClockConfig+0x1c4>)
 8006582:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8006586:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006588:	4b50      	ldr	r3, [pc, #320]	; (80066cc <HAL_RCC_ClockConfig+0x1c4>)
 800658a:	685b      	ldr	r3, [r3, #4]
 800658c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	689b      	ldr	r3, [r3, #8]
 8006594:	494d      	ldr	r1, [pc, #308]	; (80066cc <HAL_RCC_ClockConfig+0x1c4>)
 8006596:	4313      	orrs	r3, r2
 8006598:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	f003 0301 	and.w	r3, r3, #1
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d040      	beq.n	8006628 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	685b      	ldr	r3, [r3, #4]
 80065aa:	2b01      	cmp	r3, #1
 80065ac:	d107      	bne.n	80065be <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80065ae:	4b47      	ldr	r3, [pc, #284]	; (80066cc <HAL_RCC_ClockConfig+0x1c4>)
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d115      	bne.n	80065e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80065ba:	2301      	movs	r3, #1
 80065bc:	e07f      	b.n	80066be <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	685b      	ldr	r3, [r3, #4]
 80065c2:	2b02      	cmp	r3, #2
 80065c4:	d107      	bne.n	80065d6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80065c6:	4b41      	ldr	r3, [pc, #260]	; (80066cc <HAL_RCC_ClockConfig+0x1c4>)
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d109      	bne.n	80065e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80065d2:	2301      	movs	r3, #1
 80065d4:	e073      	b.n	80066be <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80065d6:	4b3d      	ldr	r3, [pc, #244]	; (80066cc <HAL_RCC_ClockConfig+0x1c4>)
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	f003 0302 	and.w	r3, r3, #2
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d101      	bne.n	80065e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80065e2:	2301      	movs	r3, #1
 80065e4:	e06b      	b.n	80066be <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80065e6:	4b39      	ldr	r3, [pc, #228]	; (80066cc <HAL_RCC_ClockConfig+0x1c4>)
 80065e8:	685b      	ldr	r3, [r3, #4]
 80065ea:	f023 0203 	bic.w	r2, r3, #3
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	685b      	ldr	r3, [r3, #4]
 80065f2:	4936      	ldr	r1, [pc, #216]	; (80066cc <HAL_RCC_ClockConfig+0x1c4>)
 80065f4:	4313      	orrs	r3, r2
 80065f6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80065f8:	f7fd fa46 	bl	8003a88 <HAL_GetTick>
 80065fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80065fe:	e00a      	b.n	8006616 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006600:	f7fd fa42 	bl	8003a88 <HAL_GetTick>
 8006604:	4602      	mov	r2, r0
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	1ad3      	subs	r3, r2, r3
 800660a:	f241 3288 	movw	r2, #5000	; 0x1388
 800660e:	4293      	cmp	r3, r2
 8006610:	d901      	bls.n	8006616 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006612:	2303      	movs	r3, #3
 8006614:	e053      	b.n	80066be <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006616:	4b2d      	ldr	r3, [pc, #180]	; (80066cc <HAL_RCC_ClockConfig+0x1c4>)
 8006618:	685b      	ldr	r3, [r3, #4]
 800661a:	f003 020c 	and.w	r2, r3, #12
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	685b      	ldr	r3, [r3, #4]
 8006622:	009b      	lsls	r3, r3, #2
 8006624:	429a      	cmp	r2, r3
 8006626:	d1eb      	bne.n	8006600 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006628:	4b27      	ldr	r3, [pc, #156]	; (80066c8 <HAL_RCC_ClockConfig+0x1c0>)
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	f003 0307 	and.w	r3, r3, #7
 8006630:	683a      	ldr	r2, [r7, #0]
 8006632:	429a      	cmp	r2, r3
 8006634:	d210      	bcs.n	8006658 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006636:	4b24      	ldr	r3, [pc, #144]	; (80066c8 <HAL_RCC_ClockConfig+0x1c0>)
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	f023 0207 	bic.w	r2, r3, #7
 800663e:	4922      	ldr	r1, [pc, #136]	; (80066c8 <HAL_RCC_ClockConfig+0x1c0>)
 8006640:	683b      	ldr	r3, [r7, #0]
 8006642:	4313      	orrs	r3, r2
 8006644:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006646:	4b20      	ldr	r3, [pc, #128]	; (80066c8 <HAL_RCC_ClockConfig+0x1c0>)
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	f003 0307 	and.w	r3, r3, #7
 800664e:	683a      	ldr	r2, [r7, #0]
 8006650:	429a      	cmp	r2, r3
 8006652:	d001      	beq.n	8006658 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8006654:	2301      	movs	r3, #1
 8006656:	e032      	b.n	80066be <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	f003 0304 	and.w	r3, r3, #4
 8006660:	2b00      	cmp	r3, #0
 8006662:	d008      	beq.n	8006676 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006664:	4b19      	ldr	r3, [pc, #100]	; (80066cc <HAL_RCC_ClockConfig+0x1c4>)
 8006666:	685b      	ldr	r3, [r3, #4]
 8006668:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	68db      	ldr	r3, [r3, #12]
 8006670:	4916      	ldr	r1, [pc, #88]	; (80066cc <HAL_RCC_ClockConfig+0x1c4>)
 8006672:	4313      	orrs	r3, r2
 8006674:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	f003 0308 	and.w	r3, r3, #8
 800667e:	2b00      	cmp	r3, #0
 8006680:	d009      	beq.n	8006696 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006682:	4b12      	ldr	r3, [pc, #72]	; (80066cc <HAL_RCC_ClockConfig+0x1c4>)
 8006684:	685b      	ldr	r3, [r3, #4]
 8006686:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	691b      	ldr	r3, [r3, #16]
 800668e:	00db      	lsls	r3, r3, #3
 8006690:	490e      	ldr	r1, [pc, #56]	; (80066cc <HAL_RCC_ClockConfig+0x1c4>)
 8006692:	4313      	orrs	r3, r2
 8006694:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006696:	f000 f821 	bl	80066dc <HAL_RCC_GetSysClockFreq>
 800669a:	4602      	mov	r2, r0
 800669c:	4b0b      	ldr	r3, [pc, #44]	; (80066cc <HAL_RCC_ClockConfig+0x1c4>)
 800669e:	685b      	ldr	r3, [r3, #4]
 80066a0:	091b      	lsrs	r3, r3, #4
 80066a2:	f003 030f 	and.w	r3, r3, #15
 80066a6:	490a      	ldr	r1, [pc, #40]	; (80066d0 <HAL_RCC_ClockConfig+0x1c8>)
 80066a8:	5ccb      	ldrb	r3, [r1, r3]
 80066aa:	fa22 f303 	lsr.w	r3, r2, r3
 80066ae:	4a09      	ldr	r2, [pc, #36]	; (80066d4 <HAL_RCC_ClockConfig+0x1cc>)
 80066b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80066b2:	4b09      	ldr	r3, [pc, #36]	; (80066d8 <HAL_RCC_ClockConfig+0x1d0>)
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	4618      	mov	r0, r3
 80066b8:	f7fd f9a4 	bl	8003a04 <HAL_InitTick>

  return HAL_OK;
 80066bc:	2300      	movs	r3, #0
}
 80066be:	4618      	mov	r0, r3
 80066c0:	3710      	adds	r7, #16
 80066c2:	46bd      	mov	sp, r7
 80066c4:	bd80      	pop	{r7, pc}
 80066c6:	bf00      	nop
 80066c8:	40022000 	.word	0x40022000
 80066cc:	40021000 	.word	0x40021000
 80066d0:	0800c1e8 	.word	0x0800c1e8
 80066d4:	20000010 	.word	0x20000010
 80066d8:	20000014 	.word	0x20000014

080066dc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80066dc:	b490      	push	{r4, r7}
 80066de:	b08a      	sub	sp, #40	; 0x28
 80066e0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80066e2:	4b2a      	ldr	r3, [pc, #168]	; (800678c <HAL_RCC_GetSysClockFreq+0xb0>)
 80066e4:	1d3c      	adds	r4, r7, #4
 80066e6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80066e8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80066ec:	f240 2301 	movw	r3, #513	; 0x201
 80066f0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80066f2:	2300      	movs	r3, #0
 80066f4:	61fb      	str	r3, [r7, #28]
 80066f6:	2300      	movs	r3, #0
 80066f8:	61bb      	str	r3, [r7, #24]
 80066fa:	2300      	movs	r3, #0
 80066fc:	627b      	str	r3, [r7, #36]	; 0x24
 80066fe:	2300      	movs	r3, #0
 8006700:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8006702:	2300      	movs	r3, #0
 8006704:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8006706:	4b22      	ldr	r3, [pc, #136]	; (8006790 <HAL_RCC_GetSysClockFreq+0xb4>)
 8006708:	685b      	ldr	r3, [r3, #4]
 800670a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800670c:	69fb      	ldr	r3, [r7, #28]
 800670e:	f003 030c 	and.w	r3, r3, #12
 8006712:	2b04      	cmp	r3, #4
 8006714:	d002      	beq.n	800671c <HAL_RCC_GetSysClockFreq+0x40>
 8006716:	2b08      	cmp	r3, #8
 8006718:	d003      	beq.n	8006722 <HAL_RCC_GetSysClockFreq+0x46>
 800671a:	e02d      	b.n	8006778 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800671c:	4b1d      	ldr	r3, [pc, #116]	; (8006794 <HAL_RCC_GetSysClockFreq+0xb8>)
 800671e:	623b      	str	r3, [r7, #32]
      break;
 8006720:	e02d      	b.n	800677e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8006722:	69fb      	ldr	r3, [r7, #28]
 8006724:	0c9b      	lsrs	r3, r3, #18
 8006726:	f003 030f 	and.w	r3, r3, #15
 800672a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800672e:	4413      	add	r3, r2
 8006730:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8006734:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006736:	69fb      	ldr	r3, [r7, #28]
 8006738:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800673c:	2b00      	cmp	r3, #0
 800673e:	d013      	beq.n	8006768 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8006740:	4b13      	ldr	r3, [pc, #76]	; (8006790 <HAL_RCC_GetSysClockFreq+0xb4>)
 8006742:	685b      	ldr	r3, [r3, #4]
 8006744:	0c5b      	lsrs	r3, r3, #17
 8006746:	f003 0301 	and.w	r3, r3, #1
 800674a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800674e:	4413      	add	r3, r2
 8006750:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8006754:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8006756:	697b      	ldr	r3, [r7, #20]
 8006758:	4a0e      	ldr	r2, [pc, #56]	; (8006794 <HAL_RCC_GetSysClockFreq+0xb8>)
 800675a:	fb02 f203 	mul.w	r2, r2, r3
 800675e:	69bb      	ldr	r3, [r7, #24]
 8006760:	fbb2 f3f3 	udiv	r3, r2, r3
 8006764:	627b      	str	r3, [r7, #36]	; 0x24
 8006766:	e004      	b.n	8006772 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8006768:	697b      	ldr	r3, [r7, #20]
 800676a:	4a0b      	ldr	r2, [pc, #44]	; (8006798 <HAL_RCC_GetSysClockFreq+0xbc>)
 800676c:	fb02 f303 	mul.w	r3, r2, r3
 8006770:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8006772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006774:	623b      	str	r3, [r7, #32]
      break;
 8006776:	e002      	b.n	800677e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8006778:	4b06      	ldr	r3, [pc, #24]	; (8006794 <HAL_RCC_GetSysClockFreq+0xb8>)
 800677a:	623b      	str	r3, [r7, #32]
      break;
 800677c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800677e:	6a3b      	ldr	r3, [r7, #32]
}
 8006780:	4618      	mov	r0, r3
 8006782:	3728      	adds	r7, #40	; 0x28
 8006784:	46bd      	mov	sp, r7
 8006786:	bc90      	pop	{r4, r7}
 8006788:	4770      	bx	lr
 800678a:	bf00      	nop
 800678c:	0800ac08 	.word	0x0800ac08
 8006790:	40021000 	.word	0x40021000
 8006794:	007a1200 	.word	0x007a1200
 8006798:	003d0900 	.word	0x003d0900

0800679c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800679c:	b480      	push	{r7}
 800679e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80067a0:	4b02      	ldr	r3, [pc, #8]	; (80067ac <HAL_RCC_GetHCLKFreq+0x10>)
 80067a2:	681b      	ldr	r3, [r3, #0]
}
 80067a4:	4618      	mov	r0, r3
 80067a6:	46bd      	mov	sp, r7
 80067a8:	bc80      	pop	{r7}
 80067aa:	4770      	bx	lr
 80067ac:	20000010 	.word	0x20000010

080067b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80067b0:	b580      	push	{r7, lr}
 80067b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80067b4:	f7ff fff2 	bl	800679c <HAL_RCC_GetHCLKFreq>
 80067b8:	4602      	mov	r2, r0
 80067ba:	4b05      	ldr	r3, [pc, #20]	; (80067d0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80067bc:	685b      	ldr	r3, [r3, #4]
 80067be:	0a1b      	lsrs	r3, r3, #8
 80067c0:	f003 0307 	and.w	r3, r3, #7
 80067c4:	4903      	ldr	r1, [pc, #12]	; (80067d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80067c6:	5ccb      	ldrb	r3, [r1, r3]
 80067c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80067cc:	4618      	mov	r0, r3
 80067ce:	bd80      	pop	{r7, pc}
 80067d0:	40021000 	.word	0x40021000
 80067d4:	0800c1f8 	.word	0x0800c1f8

080067d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80067d8:	b580      	push	{r7, lr}
 80067da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80067dc:	f7ff ffde 	bl	800679c <HAL_RCC_GetHCLKFreq>
 80067e0:	4602      	mov	r2, r0
 80067e2:	4b05      	ldr	r3, [pc, #20]	; (80067f8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80067e4:	685b      	ldr	r3, [r3, #4]
 80067e6:	0adb      	lsrs	r3, r3, #11
 80067e8:	f003 0307 	and.w	r3, r3, #7
 80067ec:	4903      	ldr	r1, [pc, #12]	; (80067fc <HAL_RCC_GetPCLK2Freq+0x24>)
 80067ee:	5ccb      	ldrb	r3, [r1, r3]
 80067f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80067f4:	4618      	mov	r0, r3
 80067f6:	bd80      	pop	{r7, pc}
 80067f8:	40021000 	.word	0x40021000
 80067fc:	0800c1f8 	.word	0x0800c1f8

08006800 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8006800:	b480      	push	{r7}
 8006802:	b085      	sub	sp, #20
 8006804:	af00      	add	r7, sp, #0
 8006806:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8006808:	4b0a      	ldr	r3, [pc, #40]	; (8006834 <RCC_Delay+0x34>)
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	4a0a      	ldr	r2, [pc, #40]	; (8006838 <RCC_Delay+0x38>)
 800680e:	fba2 2303 	umull	r2, r3, r2, r3
 8006812:	0a5b      	lsrs	r3, r3, #9
 8006814:	687a      	ldr	r2, [r7, #4]
 8006816:	fb02 f303 	mul.w	r3, r2, r3
 800681a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800681c:	bf00      	nop
  }
  while (Delay --);
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	1e5a      	subs	r2, r3, #1
 8006822:	60fa      	str	r2, [r7, #12]
 8006824:	2b00      	cmp	r3, #0
 8006826:	d1f9      	bne.n	800681c <RCC_Delay+0x1c>
}
 8006828:	bf00      	nop
 800682a:	bf00      	nop
 800682c:	3714      	adds	r7, #20
 800682e:	46bd      	mov	sp, r7
 8006830:	bc80      	pop	{r7}
 8006832:	4770      	bx	lr
 8006834:	20000010 	.word	0x20000010
 8006838:	10624dd3 	.word	0x10624dd3

0800683c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800683c:	b580      	push	{r7, lr}
 800683e:	b086      	sub	sp, #24
 8006840:	af00      	add	r7, sp, #0
 8006842:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8006844:	2300      	movs	r3, #0
 8006846:	613b      	str	r3, [r7, #16]
 8006848:	2300      	movs	r3, #0
 800684a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	f003 0301 	and.w	r3, r3, #1
 8006854:	2b00      	cmp	r3, #0
 8006856:	d07d      	beq.n	8006954 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8006858:	2300      	movs	r3, #0
 800685a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800685c:	4b4f      	ldr	r3, [pc, #316]	; (800699c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800685e:	69db      	ldr	r3, [r3, #28]
 8006860:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006864:	2b00      	cmp	r3, #0
 8006866:	d10d      	bne.n	8006884 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006868:	4b4c      	ldr	r3, [pc, #304]	; (800699c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800686a:	69db      	ldr	r3, [r3, #28]
 800686c:	4a4b      	ldr	r2, [pc, #300]	; (800699c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800686e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006872:	61d3      	str	r3, [r2, #28]
 8006874:	4b49      	ldr	r3, [pc, #292]	; (800699c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006876:	69db      	ldr	r3, [r3, #28]
 8006878:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800687c:	60bb      	str	r3, [r7, #8]
 800687e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006880:	2301      	movs	r3, #1
 8006882:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006884:	4b46      	ldr	r3, [pc, #280]	; (80069a0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800688c:	2b00      	cmp	r3, #0
 800688e:	d118      	bne.n	80068c2 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006890:	4b43      	ldr	r3, [pc, #268]	; (80069a0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	4a42      	ldr	r2, [pc, #264]	; (80069a0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006896:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800689a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800689c:	f7fd f8f4 	bl	8003a88 <HAL_GetTick>
 80068a0:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80068a2:	e008      	b.n	80068b6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80068a4:	f7fd f8f0 	bl	8003a88 <HAL_GetTick>
 80068a8:	4602      	mov	r2, r0
 80068aa:	693b      	ldr	r3, [r7, #16]
 80068ac:	1ad3      	subs	r3, r2, r3
 80068ae:	2b64      	cmp	r3, #100	; 0x64
 80068b0:	d901      	bls.n	80068b6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80068b2:	2303      	movs	r3, #3
 80068b4:	e06d      	b.n	8006992 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80068b6:	4b3a      	ldr	r3, [pc, #232]	; (80069a0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d0f0      	beq.n	80068a4 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80068c2:	4b36      	ldr	r3, [pc, #216]	; (800699c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80068c4:	6a1b      	ldr	r3, [r3, #32]
 80068c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80068ca:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d02e      	beq.n	8006930 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	685b      	ldr	r3, [r3, #4]
 80068d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80068da:	68fa      	ldr	r2, [r7, #12]
 80068dc:	429a      	cmp	r2, r3
 80068de:	d027      	beq.n	8006930 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80068e0:	4b2e      	ldr	r3, [pc, #184]	; (800699c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80068e2:	6a1b      	ldr	r3, [r3, #32]
 80068e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80068e8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80068ea:	4b2e      	ldr	r3, [pc, #184]	; (80069a4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80068ec:	2201      	movs	r2, #1
 80068ee:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80068f0:	4b2c      	ldr	r3, [pc, #176]	; (80069a4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80068f2:	2200      	movs	r2, #0
 80068f4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80068f6:	4a29      	ldr	r2, [pc, #164]	; (800699c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	f003 0301 	and.w	r3, r3, #1
 8006902:	2b00      	cmp	r3, #0
 8006904:	d014      	beq.n	8006930 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006906:	f7fd f8bf 	bl	8003a88 <HAL_GetTick>
 800690a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800690c:	e00a      	b.n	8006924 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800690e:	f7fd f8bb 	bl	8003a88 <HAL_GetTick>
 8006912:	4602      	mov	r2, r0
 8006914:	693b      	ldr	r3, [r7, #16]
 8006916:	1ad3      	subs	r3, r2, r3
 8006918:	f241 3288 	movw	r2, #5000	; 0x1388
 800691c:	4293      	cmp	r3, r2
 800691e:	d901      	bls.n	8006924 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8006920:	2303      	movs	r3, #3
 8006922:	e036      	b.n	8006992 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006924:	4b1d      	ldr	r3, [pc, #116]	; (800699c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006926:	6a1b      	ldr	r3, [r3, #32]
 8006928:	f003 0302 	and.w	r3, r3, #2
 800692c:	2b00      	cmp	r3, #0
 800692e:	d0ee      	beq.n	800690e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006930:	4b1a      	ldr	r3, [pc, #104]	; (800699c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006932:	6a1b      	ldr	r3, [r3, #32]
 8006934:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	685b      	ldr	r3, [r3, #4]
 800693c:	4917      	ldr	r1, [pc, #92]	; (800699c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800693e:	4313      	orrs	r3, r2
 8006940:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8006942:	7dfb      	ldrb	r3, [r7, #23]
 8006944:	2b01      	cmp	r3, #1
 8006946:	d105      	bne.n	8006954 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006948:	4b14      	ldr	r3, [pc, #80]	; (800699c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800694a:	69db      	ldr	r3, [r3, #28]
 800694c:	4a13      	ldr	r2, [pc, #76]	; (800699c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800694e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006952:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	f003 0302 	and.w	r3, r3, #2
 800695c:	2b00      	cmp	r3, #0
 800695e:	d008      	beq.n	8006972 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006960:	4b0e      	ldr	r3, [pc, #56]	; (800699c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006962:	685b      	ldr	r3, [r3, #4]
 8006964:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	689b      	ldr	r3, [r3, #8]
 800696c:	490b      	ldr	r1, [pc, #44]	; (800699c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800696e:	4313      	orrs	r3, r2
 8006970:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	f003 0310 	and.w	r3, r3, #16
 800697a:	2b00      	cmp	r3, #0
 800697c:	d008      	beq.n	8006990 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800697e:	4b07      	ldr	r3, [pc, #28]	; (800699c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006980:	685b      	ldr	r3, [r3, #4]
 8006982:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	68db      	ldr	r3, [r3, #12]
 800698a:	4904      	ldr	r1, [pc, #16]	; (800699c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800698c:	4313      	orrs	r3, r2
 800698e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8006990:	2300      	movs	r3, #0
}
 8006992:	4618      	mov	r0, r3
 8006994:	3718      	adds	r7, #24
 8006996:	46bd      	mov	sp, r7
 8006998:	bd80      	pop	{r7, pc}
 800699a:	bf00      	nop
 800699c:	40021000 	.word	0x40021000
 80069a0:	40007000 	.word	0x40007000
 80069a4:	42420440 	.word	0x42420440

080069a8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80069a8:	b590      	push	{r4, r7, lr}
 80069aa:	b08d      	sub	sp, #52	; 0x34
 80069ac:	af00      	add	r7, sp, #0
 80069ae:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80069b0:	4b5a      	ldr	r3, [pc, #360]	; (8006b1c <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 80069b2:	f107 040c 	add.w	r4, r7, #12
 80069b6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80069b8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80069bc:	f240 2301 	movw	r3, #513	; 0x201
 80069c0:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 80069c2:	2300      	movs	r3, #0
 80069c4:	627b      	str	r3, [r7, #36]	; 0x24
 80069c6:	2300      	movs	r3, #0
 80069c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80069ca:	2300      	movs	r3, #0
 80069cc:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 80069ce:	2300      	movs	r3, #0
 80069d0:	61fb      	str	r3, [r7, #28]
 80069d2:	2300      	movs	r3, #0
 80069d4:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	2b10      	cmp	r3, #16
 80069da:	d00a      	beq.n	80069f2 <HAL_RCCEx_GetPeriphCLKFreq+0x4a>
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	2b10      	cmp	r3, #16
 80069e0:	f200 8091 	bhi.w	8006b06 <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	2b01      	cmp	r3, #1
 80069e8:	d04c      	beq.n	8006a84 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	2b02      	cmp	r3, #2
 80069ee:	d07c      	beq.n	8006aea <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 80069f0:	e089      	b.n	8006b06 <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
      temp_reg = RCC->CFGR;
 80069f2:	4b4b      	ldr	r3, [pc, #300]	; (8006b20 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 80069f4:	685b      	ldr	r3, [r3, #4]
 80069f6:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 80069f8:	4b49      	ldr	r3, [pc, #292]	; (8006b20 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	f000 8082 	beq.w	8006b0a <HAL_RCCEx_GetPeriphCLKFreq+0x162>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8006a06:	69fb      	ldr	r3, [r7, #28]
 8006a08:	0c9b      	lsrs	r3, r3, #18
 8006a0a:	f003 030f 	and.w	r3, r3, #15
 8006a0e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8006a12:	4413      	add	r3, r2
 8006a14:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8006a18:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006a1a:	69fb      	ldr	r3, [r7, #28]
 8006a1c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d018      	beq.n	8006a56 <HAL_RCCEx_GetPeriphCLKFreq+0xae>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8006a24:	4b3e      	ldr	r3, [pc, #248]	; (8006b20 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8006a26:	685b      	ldr	r3, [r3, #4]
 8006a28:	0c5b      	lsrs	r3, r3, #17
 8006a2a:	f003 0301 	and.w	r3, r3, #1
 8006a2e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8006a32:	4413      	add	r3, r2
 8006a34:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8006a38:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006a3a:	69fb      	ldr	r3, [r7, #28]
 8006a3c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d00d      	beq.n	8006a60 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8006a44:	4a37      	ldr	r2, [pc, #220]	; (8006b24 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>)
 8006a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a48:	fbb2 f2f3 	udiv	r2, r2, r3
 8006a4c:	6a3b      	ldr	r3, [r7, #32]
 8006a4e:	fb02 f303 	mul.w	r3, r2, r3
 8006a52:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006a54:	e004      	b.n	8006a60 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8006a56:	6a3b      	ldr	r3, [r7, #32]
 8006a58:	4a33      	ldr	r2, [pc, #204]	; (8006b28 <HAL_RCCEx_GetPeriphCLKFreq+0x180>)
 8006a5a:	fb02 f303 	mul.w	r3, r2, r3
 8006a5e:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8006a60:	4b2f      	ldr	r3, [pc, #188]	; (8006b20 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8006a62:	685b      	ldr	r3, [r3, #4]
 8006a64:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006a68:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006a6c:	d102      	bne.n	8006a74 <HAL_RCCEx_GetPeriphCLKFreq+0xcc>
          frequency = pllclk;
 8006a6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a70:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8006a72:	e04a      	b.n	8006b0a <HAL_RCCEx_GetPeriphCLKFreq+0x162>
          frequency = (pllclk * 2) / 3;
 8006a74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a76:	005b      	lsls	r3, r3, #1
 8006a78:	4a2c      	ldr	r2, [pc, #176]	; (8006b2c <HAL_RCCEx_GetPeriphCLKFreq+0x184>)
 8006a7a:	fba2 2303 	umull	r2, r3, r2, r3
 8006a7e:	085b      	lsrs	r3, r3, #1
 8006a80:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8006a82:	e042      	b.n	8006b0a <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      temp_reg = RCC->BDCR;
 8006a84:	4b26      	ldr	r3, [pc, #152]	; (8006b20 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8006a86:	6a1b      	ldr	r3, [r3, #32]
 8006a88:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8006a8a:	69fb      	ldr	r3, [r7, #28]
 8006a8c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006a90:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006a94:	d108      	bne.n	8006aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8006a96:	69fb      	ldr	r3, [r7, #28]
 8006a98:	f003 0302 	and.w	r3, r3, #2
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d003      	beq.n	8006aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSE_VALUE;
 8006aa0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006aa4:	62bb      	str	r3, [r7, #40]	; 0x28
 8006aa6:	e01f      	b.n	8006ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8006aa8:	69fb      	ldr	r3, [r7, #28]
 8006aaa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006aae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006ab2:	d109      	bne.n	8006ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 8006ab4:	4b1a      	ldr	r3, [pc, #104]	; (8006b20 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8006ab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ab8:	f003 0302 	and.w	r3, r3, #2
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d003      	beq.n	8006ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
        frequency = LSI_VALUE;
 8006ac0:	f649 4340 	movw	r3, #40000	; 0x9c40
 8006ac4:	62bb      	str	r3, [r7, #40]	; 0x28
 8006ac6:	e00f      	b.n	8006ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8006ac8:	69fb      	ldr	r3, [r7, #28]
 8006aca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006ace:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006ad2:	d11c      	bne.n	8006b0e <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 8006ad4:	4b12      	ldr	r3, [pc, #72]	; (8006b20 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d016      	beq.n	8006b0e <HAL_RCCEx_GetPeriphCLKFreq+0x166>
        frequency = HSE_VALUE / 128U;
 8006ae0:	f24f 4324 	movw	r3, #62500	; 0xf424
 8006ae4:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8006ae6:	e012      	b.n	8006b0e <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 8006ae8:	e011      	b.n	8006b0e <HAL_RCCEx_GetPeriphCLKFreq+0x166>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8006aea:	f7ff fe75 	bl	80067d8 <HAL_RCC_GetPCLK2Freq>
 8006aee:	4602      	mov	r2, r0
 8006af0:	4b0b      	ldr	r3, [pc, #44]	; (8006b20 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8006af2:	685b      	ldr	r3, [r3, #4]
 8006af4:	0b9b      	lsrs	r3, r3, #14
 8006af6:	f003 0303 	and.w	r3, r3, #3
 8006afa:	3301      	adds	r3, #1
 8006afc:	005b      	lsls	r3, r3, #1
 8006afe:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b02:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8006b04:	e004      	b.n	8006b10 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 8006b06:	bf00      	nop
 8006b08:	e002      	b.n	8006b10 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 8006b0a:	bf00      	nop
 8006b0c:	e000      	b.n	8006b10 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 8006b0e:	bf00      	nop
    }
  }
  return (frequency);
 8006b10:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8006b12:	4618      	mov	r0, r3
 8006b14:	3734      	adds	r7, #52	; 0x34
 8006b16:	46bd      	mov	sp, r7
 8006b18:	bd90      	pop	{r4, r7, pc}
 8006b1a:	bf00      	nop
 8006b1c:	0800ac18 	.word	0x0800ac18
 8006b20:	40021000 	.word	0x40021000
 8006b24:	007a1200 	.word	0x007a1200
 8006b28:	003d0900 	.word	0x003d0900
 8006b2c:	aaaaaaab 	.word	0xaaaaaaab

08006b30 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006b30:	b580      	push	{r7, lr}
 8006b32:	b082      	sub	sp, #8
 8006b34:	af00      	add	r7, sp, #0
 8006b36:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d101      	bne.n	8006b42 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006b3e:	2301      	movs	r3, #1
 8006b40:	e041      	b.n	8006bc6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b48:	b2db      	uxtb	r3, r3
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d106      	bne.n	8006b5c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	2200      	movs	r2, #0
 8006b52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006b56:	6878      	ldr	r0, [r7, #4]
 8006b58:	f7fc fd72 	bl	8003640 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	2202      	movs	r2, #2
 8006b60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681a      	ldr	r2, [r3, #0]
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	3304      	adds	r3, #4
 8006b6c:	4619      	mov	r1, r3
 8006b6e:	4610      	mov	r0, r2
 8006b70:	f000 fa70 	bl	8007054 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	2201      	movs	r2, #1
 8006b78:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	2201      	movs	r2, #1
 8006b80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	2201      	movs	r2, #1
 8006b88:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	2201      	movs	r2, #1
 8006b90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	2201      	movs	r2, #1
 8006b98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	2201      	movs	r2, #1
 8006ba0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	2201      	movs	r2, #1
 8006ba8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	2201      	movs	r2, #1
 8006bb0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	2201      	movs	r2, #1
 8006bb8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	2201      	movs	r2, #1
 8006bc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006bc4:	2300      	movs	r3, #0
}
 8006bc6:	4618      	mov	r0, r3
 8006bc8:	3708      	adds	r7, #8
 8006bca:	46bd      	mov	sp, r7
 8006bcc:	bd80      	pop	{r7, pc}
	...

08006bd0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006bd0:	b480      	push	{r7}
 8006bd2:	b085      	sub	sp, #20
 8006bd4:	af00      	add	r7, sp, #0
 8006bd6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006bde:	b2db      	uxtb	r3, r3
 8006be0:	2b01      	cmp	r3, #1
 8006be2:	d001      	beq.n	8006be8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006be4:	2301      	movs	r3, #1
 8006be6:	e03a      	b.n	8006c5e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	2202      	movs	r2, #2
 8006bec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	68da      	ldr	r2, [r3, #12]
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	f042 0201 	orr.w	r2, r2, #1
 8006bfe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	4a18      	ldr	r2, [pc, #96]	; (8006c68 <HAL_TIM_Base_Start_IT+0x98>)
 8006c06:	4293      	cmp	r3, r2
 8006c08:	d00e      	beq.n	8006c28 <HAL_TIM_Base_Start_IT+0x58>
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c12:	d009      	beq.n	8006c28 <HAL_TIM_Base_Start_IT+0x58>
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	4a14      	ldr	r2, [pc, #80]	; (8006c6c <HAL_TIM_Base_Start_IT+0x9c>)
 8006c1a:	4293      	cmp	r3, r2
 8006c1c:	d004      	beq.n	8006c28 <HAL_TIM_Base_Start_IT+0x58>
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	4a13      	ldr	r2, [pc, #76]	; (8006c70 <HAL_TIM_Base_Start_IT+0xa0>)
 8006c24:	4293      	cmp	r3, r2
 8006c26:	d111      	bne.n	8006c4c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	689b      	ldr	r3, [r3, #8]
 8006c2e:	f003 0307 	and.w	r3, r3, #7
 8006c32:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	2b06      	cmp	r3, #6
 8006c38:	d010      	beq.n	8006c5c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	681a      	ldr	r2, [r3, #0]
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	f042 0201 	orr.w	r2, r2, #1
 8006c48:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006c4a:	e007      	b.n	8006c5c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	681a      	ldr	r2, [r3, #0]
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	f042 0201 	orr.w	r2, r2, #1
 8006c5a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006c5c:	2300      	movs	r3, #0
}
 8006c5e:	4618      	mov	r0, r3
 8006c60:	3714      	adds	r7, #20
 8006c62:	46bd      	mov	sp, r7
 8006c64:	bc80      	pop	{r7}
 8006c66:	4770      	bx	lr
 8006c68:	40012c00 	.word	0x40012c00
 8006c6c:	40000400 	.word	0x40000400
 8006c70:	40000800 	.word	0x40000800

08006c74 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006c74:	b580      	push	{r7, lr}
 8006c76:	b082      	sub	sp, #8
 8006c78:	af00      	add	r7, sp, #0
 8006c7a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	691b      	ldr	r3, [r3, #16]
 8006c82:	f003 0302 	and.w	r3, r3, #2
 8006c86:	2b02      	cmp	r3, #2
 8006c88:	d122      	bne.n	8006cd0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	68db      	ldr	r3, [r3, #12]
 8006c90:	f003 0302 	and.w	r3, r3, #2
 8006c94:	2b02      	cmp	r3, #2
 8006c96:	d11b      	bne.n	8006cd0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	f06f 0202 	mvn.w	r2, #2
 8006ca0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	2201      	movs	r2, #1
 8006ca6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	699b      	ldr	r3, [r3, #24]
 8006cae:	f003 0303 	and.w	r3, r3, #3
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d003      	beq.n	8006cbe <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006cb6:	6878      	ldr	r0, [r7, #4]
 8006cb8:	f000 f9b1 	bl	800701e <HAL_TIM_IC_CaptureCallback>
 8006cbc:	e005      	b.n	8006cca <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006cbe:	6878      	ldr	r0, [r7, #4]
 8006cc0:	f000 f9a4 	bl	800700c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006cc4:	6878      	ldr	r0, [r7, #4]
 8006cc6:	f000 f9b3 	bl	8007030 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	2200      	movs	r2, #0
 8006cce:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	691b      	ldr	r3, [r3, #16]
 8006cd6:	f003 0304 	and.w	r3, r3, #4
 8006cda:	2b04      	cmp	r3, #4
 8006cdc:	d122      	bne.n	8006d24 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	68db      	ldr	r3, [r3, #12]
 8006ce4:	f003 0304 	and.w	r3, r3, #4
 8006ce8:	2b04      	cmp	r3, #4
 8006cea:	d11b      	bne.n	8006d24 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	f06f 0204 	mvn.w	r2, #4
 8006cf4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	2202      	movs	r2, #2
 8006cfa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	699b      	ldr	r3, [r3, #24]
 8006d02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d003      	beq.n	8006d12 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006d0a:	6878      	ldr	r0, [r7, #4]
 8006d0c:	f000 f987 	bl	800701e <HAL_TIM_IC_CaptureCallback>
 8006d10:	e005      	b.n	8006d1e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006d12:	6878      	ldr	r0, [r7, #4]
 8006d14:	f000 f97a 	bl	800700c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006d18:	6878      	ldr	r0, [r7, #4]
 8006d1a:	f000 f989 	bl	8007030 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	2200      	movs	r2, #0
 8006d22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	691b      	ldr	r3, [r3, #16]
 8006d2a:	f003 0308 	and.w	r3, r3, #8
 8006d2e:	2b08      	cmp	r3, #8
 8006d30:	d122      	bne.n	8006d78 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	68db      	ldr	r3, [r3, #12]
 8006d38:	f003 0308 	and.w	r3, r3, #8
 8006d3c:	2b08      	cmp	r3, #8
 8006d3e:	d11b      	bne.n	8006d78 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	f06f 0208 	mvn.w	r2, #8
 8006d48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	2204      	movs	r2, #4
 8006d4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	69db      	ldr	r3, [r3, #28]
 8006d56:	f003 0303 	and.w	r3, r3, #3
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d003      	beq.n	8006d66 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006d5e:	6878      	ldr	r0, [r7, #4]
 8006d60:	f000 f95d 	bl	800701e <HAL_TIM_IC_CaptureCallback>
 8006d64:	e005      	b.n	8006d72 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006d66:	6878      	ldr	r0, [r7, #4]
 8006d68:	f000 f950 	bl	800700c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006d6c:	6878      	ldr	r0, [r7, #4]
 8006d6e:	f000 f95f 	bl	8007030 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	2200      	movs	r2, #0
 8006d76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	691b      	ldr	r3, [r3, #16]
 8006d7e:	f003 0310 	and.w	r3, r3, #16
 8006d82:	2b10      	cmp	r3, #16
 8006d84:	d122      	bne.n	8006dcc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	68db      	ldr	r3, [r3, #12]
 8006d8c:	f003 0310 	and.w	r3, r3, #16
 8006d90:	2b10      	cmp	r3, #16
 8006d92:	d11b      	bne.n	8006dcc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	f06f 0210 	mvn.w	r2, #16
 8006d9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	2208      	movs	r2, #8
 8006da2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	69db      	ldr	r3, [r3, #28]
 8006daa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d003      	beq.n	8006dba <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006db2:	6878      	ldr	r0, [r7, #4]
 8006db4:	f000 f933 	bl	800701e <HAL_TIM_IC_CaptureCallback>
 8006db8:	e005      	b.n	8006dc6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006dba:	6878      	ldr	r0, [r7, #4]
 8006dbc:	f000 f926 	bl	800700c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006dc0:	6878      	ldr	r0, [r7, #4]
 8006dc2:	f000 f935 	bl	8007030 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	2200      	movs	r2, #0
 8006dca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	691b      	ldr	r3, [r3, #16]
 8006dd2:	f003 0301 	and.w	r3, r3, #1
 8006dd6:	2b01      	cmp	r3, #1
 8006dd8:	d10e      	bne.n	8006df8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	68db      	ldr	r3, [r3, #12]
 8006de0:	f003 0301 	and.w	r3, r3, #1
 8006de4:	2b01      	cmp	r3, #1
 8006de6:	d107      	bne.n	8006df8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	f06f 0201 	mvn.w	r2, #1
 8006df0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006df2:	6878      	ldr	r0, [r7, #4]
 8006df4:	f7fc fb24 	bl	8003440 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	691b      	ldr	r3, [r3, #16]
 8006dfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e02:	2b80      	cmp	r3, #128	; 0x80
 8006e04:	d10e      	bne.n	8006e24 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	68db      	ldr	r3, [r3, #12]
 8006e0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e10:	2b80      	cmp	r3, #128	; 0x80
 8006e12:	d107      	bne.n	8006e24 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006e1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006e1e:	6878      	ldr	r0, [r7, #4]
 8006e20:	f000 fa77 	bl	8007312 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	691b      	ldr	r3, [r3, #16]
 8006e2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e2e:	2b40      	cmp	r3, #64	; 0x40
 8006e30:	d10e      	bne.n	8006e50 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	68db      	ldr	r3, [r3, #12]
 8006e38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e3c:	2b40      	cmp	r3, #64	; 0x40
 8006e3e:	d107      	bne.n	8006e50 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006e48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006e4a:	6878      	ldr	r0, [r7, #4]
 8006e4c:	f000 f8f9 	bl	8007042 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	691b      	ldr	r3, [r3, #16]
 8006e56:	f003 0320 	and.w	r3, r3, #32
 8006e5a:	2b20      	cmp	r3, #32
 8006e5c:	d10e      	bne.n	8006e7c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	68db      	ldr	r3, [r3, #12]
 8006e64:	f003 0320 	and.w	r3, r3, #32
 8006e68:	2b20      	cmp	r3, #32
 8006e6a:	d107      	bne.n	8006e7c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	f06f 0220 	mvn.w	r2, #32
 8006e74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006e76:	6878      	ldr	r0, [r7, #4]
 8006e78:	f000 fa42 	bl	8007300 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006e7c:	bf00      	nop
 8006e7e:	3708      	adds	r7, #8
 8006e80:	46bd      	mov	sp, r7
 8006e82:	bd80      	pop	{r7, pc}

08006e84 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006e84:	b580      	push	{r7, lr}
 8006e86:	b084      	sub	sp, #16
 8006e88:	af00      	add	r7, sp, #0
 8006e8a:	6078      	str	r0, [r7, #4]
 8006e8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006e94:	2b01      	cmp	r3, #1
 8006e96:	d101      	bne.n	8006e9c <HAL_TIM_ConfigClockSource+0x18>
 8006e98:	2302      	movs	r3, #2
 8006e9a:	e0b3      	b.n	8007004 <HAL_TIM_ConfigClockSource+0x180>
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	2201      	movs	r2, #1
 8006ea0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	2202      	movs	r2, #2
 8006ea8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	689b      	ldr	r3, [r3, #8]
 8006eb2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006eba:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006ec2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	68fa      	ldr	r2, [r7, #12]
 8006eca:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006ecc:	683b      	ldr	r3, [r7, #0]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006ed4:	d03e      	beq.n	8006f54 <HAL_TIM_ConfigClockSource+0xd0>
 8006ed6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006eda:	f200 8087 	bhi.w	8006fec <HAL_TIM_ConfigClockSource+0x168>
 8006ede:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006ee2:	f000 8085 	beq.w	8006ff0 <HAL_TIM_ConfigClockSource+0x16c>
 8006ee6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006eea:	d87f      	bhi.n	8006fec <HAL_TIM_ConfigClockSource+0x168>
 8006eec:	2b70      	cmp	r3, #112	; 0x70
 8006eee:	d01a      	beq.n	8006f26 <HAL_TIM_ConfigClockSource+0xa2>
 8006ef0:	2b70      	cmp	r3, #112	; 0x70
 8006ef2:	d87b      	bhi.n	8006fec <HAL_TIM_ConfigClockSource+0x168>
 8006ef4:	2b60      	cmp	r3, #96	; 0x60
 8006ef6:	d050      	beq.n	8006f9a <HAL_TIM_ConfigClockSource+0x116>
 8006ef8:	2b60      	cmp	r3, #96	; 0x60
 8006efa:	d877      	bhi.n	8006fec <HAL_TIM_ConfigClockSource+0x168>
 8006efc:	2b50      	cmp	r3, #80	; 0x50
 8006efe:	d03c      	beq.n	8006f7a <HAL_TIM_ConfigClockSource+0xf6>
 8006f00:	2b50      	cmp	r3, #80	; 0x50
 8006f02:	d873      	bhi.n	8006fec <HAL_TIM_ConfigClockSource+0x168>
 8006f04:	2b40      	cmp	r3, #64	; 0x40
 8006f06:	d058      	beq.n	8006fba <HAL_TIM_ConfigClockSource+0x136>
 8006f08:	2b40      	cmp	r3, #64	; 0x40
 8006f0a:	d86f      	bhi.n	8006fec <HAL_TIM_ConfigClockSource+0x168>
 8006f0c:	2b30      	cmp	r3, #48	; 0x30
 8006f0e:	d064      	beq.n	8006fda <HAL_TIM_ConfigClockSource+0x156>
 8006f10:	2b30      	cmp	r3, #48	; 0x30
 8006f12:	d86b      	bhi.n	8006fec <HAL_TIM_ConfigClockSource+0x168>
 8006f14:	2b20      	cmp	r3, #32
 8006f16:	d060      	beq.n	8006fda <HAL_TIM_ConfigClockSource+0x156>
 8006f18:	2b20      	cmp	r3, #32
 8006f1a:	d867      	bhi.n	8006fec <HAL_TIM_ConfigClockSource+0x168>
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d05c      	beq.n	8006fda <HAL_TIM_ConfigClockSource+0x156>
 8006f20:	2b10      	cmp	r3, #16
 8006f22:	d05a      	beq.n	8006fda <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8006f24:	e062      	b.n	8006fec <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	6818      	ldr	r0, [r3, #0]
 8006f2a:	683b      	ldr	r3, [r7, #0]
 8006f2c:	6899      	ldr	r1, [r3, #8]
 8006f2e:	683b      	ldr	r3, [r7, #0]
 8006f30:	685a      	ldr	r2, [r3, #4]
 8006f32:	683b      	ldr	r3, [r7, #0]
 8006f34:	68db      	ldr	r3, [r3, #12]
 8006f36:	f000 f966 	bl	8007206 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	689b      	ldr	r3, [r3, #8]
 8006f40:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006f48:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	68fa      	ldr	r2, [r7, #12]
 8006f50:	609a      	str	r2, [r3, #8]
      break;
 8006f52:	e04e      	b.n	8006ff2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	6818      	ldr	r0, [r3, #0]
 8006f58:	683b      	ldr	r3, [r7, #0]
 8006f5a:	6899      	ldr	r1, [r3, #8]
 8006f5c:	683b      	ldr	r3, [r7, #0]
 8006f5e:	685a      	ldr	r2, [r3, #4]
 8006f60:	683b      	ldr	r3, [r7, #0]
 8006f62:	68db      	ldr	r3, [r3, #12]
 8006f64:	f000 f94f 	bl	8007206 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	689a      	ldr	r2, [r3, #8]
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006f76:	609a      	str	r2, [r3, #8]
      break;
 8006f78:	e03b      	b.n	8006ff2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	6818      	ldr	r0, [r3, #0]
 8006f7e:	683b      	ldr	r3, [r7, #0]
 8006f80:	6859      	ldr	r1, [r3, #4]
 8006f82:	683b      	ldr	r3, [r7, #0]
 8006f84:	68db      	ldr	r3, [r3, #12]
 8006f86:	461a      	mov	r2, r3
 8006f88:	f000 f8c6 	bl	8007118 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	2150      	movs	r1, #80	; 0x50
 8006f92:	4618      	mov	r0, r3
 8006f94:	f000 f91d 	bl	80071d2 <TIM_ITRx_SetConfig>
      break;
 8006f98:	e02b      	b.n	8006ff2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	6818      	ldr	r0, [r3, #0]
 8006f9e:	683b      	ldr	r3, [r7, #0]
 8006fa0:	6859      	ldr	r1, [r3, #4]
 8006fa2:	683b      	ldr	r3, [r7, #0]
 8006fa4:	68db      	ldr	r3, [r3, #12]
 8006fa6:	461a      	mov	r2, r3
 8006fa8:	f000 f8e4 	bl	8007174 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	2160      	movs	r1, #96	; 0x60
 8006fb2:	4618      	mov	r0, r3
 8006fb4:	f000 f90d 	bl	80071d2 <TIM_ITRx_SetConfig>
      break;
 8006fb8:	e01b      	b.n	8006ff2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	6818      	ldr	r0, [r3, #0]
 8006fbe:	683b      	ldr	r3, [r7, #0]
 8006fc0:	6859      	ldr	r1, [r3, #4]
 8006fc2:	683b      	ldr	r3, [r7, #0]
 8006fc4:	68db      	ldr	r3, [r3, #12]
 8006fc6:	461a      	mov	r2, r3
 8006fc8:	f000 f8a6 	bl	8007118 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	2140      	movs	r1, #64	; 0x40
 8006fd2:	4618      	mov	r0, r3
 8006fd4:	f000 f8fd 	bl	80071d2 <TIM_ITRx_SetConfig>
      break;
 8006fd8:	e00b      	b.n	8006ff2 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681a      	ldr	r2, [r3, #0]
 8006fde:	683b      	ldr	r3, [r7, #0]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	4619      	mov	r1, r3
 8006fe4:	4610      	mov	r0, r2
 8006fe6:	f000 f8f4 	bl	80071d2 <TIM_ITRx_SetConfig>
        break;
 8006fea:	e002      	b.n	8006ff2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8006fec:	bf00      	nop
 8006fee:	e000      	b.n	8006ff2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8006ff0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	2201      	movs	r2, #1
 8006ff6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	2200      	movs	r2, #0
 8006ffe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007002:	2300      	movs	r3, #0
}
 8007004:	4618      	mov	r0, r3
 8007006:	3710      	adds	r7, #16
 8007008:	46bd      	mov	sp, r7
 800700a:	bd80      	pop	{r7, pc}

0800700c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800700c:	b480      	push	{r7}
 800700e:	b083      	sub	sp, #12
 8007010:	af00      	add	r7, sp, #0
 8007012:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007014:	bf00      	nop
 8007016:	370c      	adds	r7, #12
 8007018:	46bd      	mov	sp, r7
 800701a:	bc80      	pop	{r7}
 800701c:	4770      	bx	lr

0800701e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800701e:	b480      	push	{r7}
 8007020:	b083      	sub	sp, #12
 8007022:	af00      	add	r7, sp, #0
 8007024:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007026:	bf00      	nop
 8007028:	370c      	adds	r7, #12
 800702a:	46bd      	mov	sp, r7
 800702c:	bc80      	pop	{r7}
 800702e:	4770      	bx	lr

08007030 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007030:	b480      	push	{r7}
 8007032:	b083      	sub	sp, #12
 8007034:	af00      	add	r7, sp, #0
 8007036:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007038:	bf00      	nop
 800703a:	370c      	adds	r7, #12
 800703c:	46bd      	mov	sp, r7
 800703e:	bc80      	pop	{r7}
 8007040:	4770      	bx	lr

08007042 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007042:	b480      	push	{r7}
 8007044:	b083      	sub	sp, #12
 8007046:	af00      	add	r7, sp, #0
 8007048:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800704a:	bf00      	nop
 800704c:	370c      	adds	r7, #12
 800704e:	46bd      	mov	sp, r7
 8007050:	bc80      	pop	{r7}
 8007052:	4770      	bx	lr

08007054 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007054:	b480      	push	{r7}
 8007056:	b085      	sub	sp, #20
 8007058:	af00      	add	r7, sp, #0
 800705a:	6078      	str	r0, [r7, #4]
 800705c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	4a29      	ldr	r2, [pc, #164]	; (800710c <TIM_Base_SetConfig+0xb8>)
 8007068:	4293      	cmp	r3, r2
 800706a:	d00b      	beq.n	8007084 <TIM_Base_SetConfig+0x30>
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007072:	d007      	beq.n	8007084 <TIM_Base_SetConfig+0x30>
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	4a26      	ldr	r2, [pc, #152]	; (8007110 <TIM_Base_SetConfig+0xbc>)
 8007078:	4293      	cmp	r3, r2
 800707a:	d003      	beq.n	8007084 <TIM_Base_SetConfig+0x30>
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	4a25      	ldr	r2, [pc, #148]	; (8007114 <TIM_Base_SetConfig+0xc0>)
 8007080:	4293      	cmp	r3, r2
 8007082:	d108      	bne.n	8007096 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800708a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800708c:	683b      	ldr	r3, [r7, #0]
 800708e:	685b      	ldr	r3, [r3, #4]
 8007090:	68fa      	ldr	r2, [r7, #12]
 8007092:	4313      	orrs	r3, r2
 8007094:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	4a1c      	ldr	r2, [pc, #112]	; (800710c <TIM_Base_SetConfig+0xb8>)
 800709a:	4293      	cmp	r3, r2
 800709c:	d00b      	beq.n	80070b6 <TIM_Base_SetConfig+0x62>
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80070a4:	d007      	beq.n	80070b6 <TIM_Base_SetConfig+0x62>
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	4a19      	ldr	r2, [pc, #100]	; (8007110 <TIM_Base_SetConfig+0xbc>)
 80070aa:	4293      	cmp	r3, r2
 80070ac:	d003      	beq.n	80070b6 <TIM_Base_SetConfig+0x62>
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	4a18      	ldr	r2, [pc, #96]	; (8007114 <TIM_Base_SetConfig+0xc0>)
 80070b2:	4293      	cmp	r3, r2
 80070b4:	d108      	bne.n	80070c8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80070bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80070be:	683b      	ldr	r3, [r7, #0]
 80070c0:	68db      	ldr	r3, [r3, #12]
 80070c2:	68fa      	ldr	r2, [r7, #12]
 80070c4:	4313      	orrs	r3, r2
 80070c6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80070ce:	683b      	ldr	r3, [r7, #0]
 80070d0:	695b      	ldr	r3, [r3, #20]
 80070d2:	4313      	orrs	r3, r2
 80070d4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	68fa      	ldr	r2, [r7, #12]
 80070da:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80070dc:	683b      	ldr	r3, [r7, #0]
 80070de:	689a      	ldr	r2, [r3, #8]
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80070e4:	683b      	ldr	r3, [r7, #0]
 80070e6:	681a      	ldr	r2, [r3, #0]
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	4a07      	ldr	r2, [pc, #28]	; (800710c <TIM_Base_SetConfig+0xb8>)
 80070f0:	4293      	cmp	r3, r2
 80070f2:	d103      	bne.n	80070fc <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80070f4:	683b      	ldr	r3, [r7, #0]
 80070f6:	691a      	ldr	r2, [r3, #16]
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	2201      	movs	r2, #1
 8007100:	615a      	str	r2, [r3, #20]
}
 8007102:	bf00      	nop
 8007104:	3714      	adds	r7, #20
 8007106:	46bd      	mov	sp, r7
 8007108:	bc80      	pop	{r7}
 800710a:	4770      	bx	lr
 800710c:	40012c00 	.word	0x40012c00
 8007110:	40000400 	.word	0x40000400
 8007114:	40000800 	.word	0x40000800

08007118 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007118:	b480      	push	{r7}
 800711a:	b087      	sub	sp, #28
 800711c:	af00      	add	r7, sp, #0
 800711e:	60f8      	str	r0, [r7, #12]
 8007120:	60b9      	str	r1, [r7, #8]
 8007122:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	6a1b      	ldr	r3, [r3, #32]
 8007128:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	6a1b      	ldr	r3, [r3, #32]
 800712e:	f023 0201 	bic.w	r2, r3, #1
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	699b      	ldr	r3, [r3, #24]
 800713a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800713c:	693b      	ldr	r3, [r7, #16]
 800713e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007142:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	011b      	lsls	r3, r3, #4
 8007148:	693a      	ldr	r2, [r7, #16]
 800714a:	4313      	orrs	r3, r2
 800714c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800714e:	697b      	ldr	r3, [r7, #20]
 8007150:	f023 030a 	bic.w	r3, r3, #10
 8007154:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007156:	697a      	ldr	r2, [r7, #20]
 8007158:	68bb      	ldr	r3, [r7, #8]
 800715a:	4313      	orrs	r3, r2
 800715c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	693a      	ldr	r2, [r7, #16]
 8007162:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	697a      	ldr	r2, [r7, #20]
 8007168:	621a      	str	r2, [r3, #32]
}
 800716a:	bf00      	nop
 800716c:	371c      	adds	r7, #28
 800716e:	46bd      	mov	sp, r7
 8007170:	bc80      	pop	{r7}
 8007172:	4770      	bx	lr

08007174 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007174:	b480      	push	{r7}
 8007176:	b087      	sub	sp, #28
 8007178:	af00      	add	r7, sp, #0
 800717a:	60f8      	str	r0, [r7, #12]
 800717c:	60b9      	str	r1, [r7, #8]
 800717e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	6a1b      	ldr	r3, [r3, #32]
 8007184:	f023 0210 	bic.w	r2, r3, #16
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	699b      	ldr	r3, [r3, #24]
 8007190:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	6a1b      	ldr	r3, [r3, #32]
 8007196:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007198:	697b      	ldr	r3, [r7, #20]
 800719a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800719e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	031b      	lsls	r3, r3, #12
 80071a4:	697a      	ldr	r2, [r7, #20]
 80071a6:	4313      	orrs	r3, r2
 80071a8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80071aa:	693b      	ldr	r3, [r7, #16]
 80071ac:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80071b0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80071b2:	68bb      	ldr	r3, [r7, #8]
 80071b4:	011b      	lsls	r3, r3, #4
 80071b6:	693a      	ldr	r2, [r7, #16]
 80071b8:	4313      	orrs	r3, r2
 80071ba:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	697a      	ldr	r2, [r7, #20]
 80071c0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	693a      	ldr	r2, [r7, #16]
 80071c6:	621a      	str	r2, [r3, #32]
}
 80071c8:	bf00      	nop
 80071ca:	371c      	adds	r7, #28
 80071cc:	46bd      	mov	sp, r7
 80071ce:	bc80      	pop	{r7}
 80071d0:	4770      	bx	lr

080071d2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80071d2:	b480      	push	{r7}
 80071d4:	b085      	sub	sp, #20
 80071d6:	af00      	add	r7, sp, #0
 80071d8:	6078      	str	r0, [r7, #4]
 80071da:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	689b      	ldr	r3, [r3, #8]
 80071e0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80071e8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80071ea:	683a      	ldr	r2, [r7, #0]
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	4313      	orrs	r3, r2
 80071f0:	f043 0307 	orr.w	r3, r3, #7
 80071f4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	68fa      	ldr	r2, [r7, #12]
 80071fa:	609a      	str	r2, [r3, #8]
}
 80071fc:	bf00      	nop
 80071fe:	3714      	adds	r7, #20
 8007200:	46bd      	mov	sp, r7
 8007202:	bc80      	pop	{r7}
 8007204:	4770      	bx	lr

08007206 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007206:	b480      	push	{r7}
 8007208:	b087      	sub	sp, #28
 800720a:	af00      	add	r7, sp, #0
 800720c:	60f8      	str	r0, [r7, #12]
 800720e:	60b9      	str	r1, [r7, #8]
 8007210:	607a      	str	r2, [r7, #4]
 8007212:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	689b      	ldr	r3, [r3, #8]
 8007218:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800721a:	697b      	ldr	r3, [r7, #20]
 800721c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007220:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007222:	683b      	ldr	r3, [r7, #0]
 8007224:	021a      	lsls	r2, r3, #8
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	431a      	orrs	r2, r3
 800722a:	68bb      	ldr	r3, [r7, #8]
 800722c:	4313      	orrs	r3, r2
 800722e:	697a      	ldr	r2, [r7, #20]
 8007230:	4313      	orrs	r3, r2
 8007232:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	697a      	ldr	r2, [r7, #20]
 8007238:	609a      	str	r2, [r3, #8]
}
 800723a:	bf00      	nop
 800723c:	371c      	adds	r7, #28
 800723e:	46bd      	mov	sp, r7
 8007240:	bc80      	pop	{r7}
 8007242:	4770      	bx	lr

08007244 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007244:	b480      	push	{r7}
 8007246:	b085      	sub	sp, #20
 8007248:	af00      	add	r7, sp, #0
 800724a:	6078      	str	r0, [r7, #4]
 800724c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007254:	2b01      	cmp	r3, #1
 8007256:	d101      	bne.n	800725c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007258:	2302      	movs	r3, #2
 800725a:	e046      	b.n	80072ea <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	2201      	movs	r2, #1
 8007260:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	2202      	movs	r2, #2
 8007268:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	685b      	ldr	r3, [r3, #4]
 8007272:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	689b      	ldr	r3, [r3, #8]
 800727a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007282:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007284:	683b      	ldr	r3, [r7, #0]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	68fa      	ldr	r2, [r7, #12]
 800728a:	4313      	orrs	r3, r2
 800728c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	68fa      	ldr	r2, [r7, #12]
 8007294:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	4a16      	ldr	r2, [pc, #88]	; (80072f4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800729c:	4293      	cmp	r3, r2
 800729e:	d00e      	beq.n	80072be <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80072a8:	d009      	beq.n	80072be <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	4a12      	ldr	r2, [pc, #72]	; (80072f8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80072b0:	4293      	cmp	r3, r2
 80072b2:	d004      	beq.n	80072be <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	4a10      	ldr	r2, [pc, #64]	; (80072fc <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80072ba:	4293      	cmp	r3, r2
 80072bc:	d10c      	bne.n	80072d8 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80072be:	68bb      	ldr	r3, [r7, #8]
 80072c0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80072c4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80072c6:	683b      	ldr	r3, [r7, #0]
 80072c8:	685b      	ldr	r3, [r3, #4]
 80072ca:	68ba      	ldr	r2, [r7, #8]
 80072cc:	4313      	orrs	r3, r2
 80072ce:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	68ba      	ldr	r2, [r7, #8]
 80072d6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	2201      	movs	r2, #1
 80072dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	2200      	movs	r2, #0
 80072e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80072e8:	2300      	movs	r3, #0
}
 80072ea:	4618      	mov	r0, r3
 80072ec:	3714      	adds	r7, #20
 80072ee:	46bd      	mov	sp, r7
 80072f0:	bc80      	pop	{r7}
 80072f2:	4770      	bx	lr
 80072f4:	40012c00 	.word	0x40012c00
 80072f8:	40000400 	.word	0x40000400
 80072fc:	40000800 	.word	0x40000800

08007300 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007300:	b480      	push	{r7}
 8007302:	b083      	sub	sp, #12
 8007304:	af00      	add	r7, sp, #0
 8007306:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007308:	bf00      	nop
 800730a:	370c      	adds	r7, #12
 800730c:	46bd      	mov	sp, r7
 800730e:	bc80      	pop	{r7}
 8007310:	4770      	bx	lr

08007312 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007312:	b480      	push	{r7}
 8007314:	b083      	sub	sp, #12
 8007316:	af00      	add	r7, sp, #0
 8007318:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800731a:	bf00      	nop
 800731c:	370c      	adds	r7, #12
 800731e:	46bd      	mov	sp, r7
 8007320:	bc80      	pop	{r7}
 8007322:	4770      	bx	lr

08007324 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007324:	b580      	push	{r7, lr}
 8007326:	b082      	sub	sp, #8
 8007328:	af00      	add	r7, sp, #0
 800732a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	2b00      	cmp	r3, #0
 8007330:	d101      	bne.n	8007336 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007332:	2301      	movs	r3, #1
 8007334:	e03f      	b.n	80073b6 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800733c:	b2db      	uxtb	r3, r3
 800733e:	2b00      	cmp	r3, #0
 8007340:	d106      	bne.n	8007350 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	2200      	movs	r2, #0
 8007346:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800734a:	6878      	ldr	r0, [r7, #4]
 800734c:	f7fc f9b8 	bl	80036c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	2224      	movs	r2, #36	; 0x24
 8007354:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	68da      	ldr	r2, [r3, #12]
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007366:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007368:	6878      	ldr	r0, [r7, #4]
 800736a:	f000 fcc7 	bl	8007cfc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	691a      	ldr	r2, [r3, #16]
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800737c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	695a      	ldr	r2, [r3, #20]
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800738c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	68da      	ldr	r2, [r3, #12]
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800739c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	2200      	movs	r2, #0
 80073a2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	2220      	movs	r2, #32
 80073a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	2220      	movs	r2, #32
 80073b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80073b4:	2300      	movs	r3, #0
}
 80073b6:	4618      	mov	r0, r3
 80073b8:	3708      	adds	r7, #8
 80073ba:	46bd      	mov	sp, r7
 80073bc:	bd80      	pop	{r7, pc}

080073be <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80073be:	b580      	push	{r7, lr}
 80073c0:	b08a      	sub	sp, #40	; 0x28
 80073c2:	af02      	add	r7, sp, #8
 80073c4:	60f8      	str	r0, [r7, #12]
 80073c6:	60b9      	str	r1, [r7, #8]
 80073c8:	603b      	str	r3, [r7, #0]
 80073ca:	4613      	mov	r3, r2
 80073cc:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80073ce:	2300      	movs	r3, #0
 80073d0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80073d8:	b2db      	uxtb	r3, r3
 80073da:	2b20      	cmp	r3, #32
 80073dc:	d17c      	bne.n	80074d8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80073de:	68bb      	ldr	r3, [r7, #8]
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d002      	beq.n	80073ea <HAL_UART_Transmit+0x2c>
 80073e4:	88fb      	ldrh	r3, [r7, #6]
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d101      	bne.n	80073ee <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80073ea:	2301      	movs	r3, #1
 80073ec:	e075      	b.n	80074da <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80073f4:	2b01      	cmp	r3, #1
 80073f6:	d101      	bne.n	80073fc <HAL_UART_Transmit+0x3e>
 80073f8:	2302      	movs	r3, #2
 80073fa:	e06e      	b.n	80074da <HAL_UART_Transmit+0x11c>
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	2201      	movs	r2, #1
 8007400:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	2200      	movs	r2, #0
 8007408:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	2221      	movs	r2, #33	; 0x21
 800740e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007412:	f7fc fb39 	bl	8003a88 <HAL_GetTick>
 8007416:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	88fa      	ldrh	r2, [r7, #6]
 800741c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	88fa      	ldrh	r2, [r7, #6]
 8007422:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	689b      	ldr	r3, [r3, #8]
 8007428:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800742c:	d108      	bne.n	8007440 <HAL_UART_Transmit+0x82>
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	691b      	ldr	r3, [r3, #16]
 8007432:	2b00      	cmp	r3, #0
 8007434:	d104      	bne.n	8007440 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8007436:	2300      	movs	r3, #0
 8007438:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800743a:	68bb      	ldr	r3, [r7, #8]
 800743c:	61bb      	str	r3, [r7, #24]
 800743e:	e003      	b.n	8007448 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8007440:	68bb      	ldr	r3, [r7, #8]
 8007442:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007444:	2300      	movs	r3, #0
 8007446:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	2200      	movs	r2, #0
 800744c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8007450:	e02a      	b.n	80074a8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007452:	683b      	ldr	r3, [r7, #0]
 8007454:	9300      	str	r3, [sp, #0]
 8007456:	697b      	ldr	r3, [r7, #20]
 8007458:	2200      	movs	r2, #0
 800745a:	2180      	movs	r1, #128	; 0x80
 800745c:	68f8      	ldr	r0, [r7, #12]
 800745e:	f000 fab3 	bl	80079c8 <UART_WaitOnFlagUntilTimeout>
 8007462:	4603      	mov	r3, r0
 8007464:	2b00      	cmp	r3, #0
 8007466:	d001      	beq.n	800746c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8007468:	2303      	movs	r3, #3
 800746a:	e036      	b.n	80074da <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800746c:	69fb      	ldr	r3, [r7, #28]
 800746e:	2b00      	cmp	r3, #0
 8007470:	d10b      	bne.n	800748a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007472:	69bb      	ldr	r3, [r7, #24]
 8007474:	881b      	ldrh	r3, [r3, #0]
 8007476:	461a      	mov	r2, r3
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007480:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8007482:	69bb      	ldr	r3, [r7, #24]
 8007484:	3302      	adds	r3, #2
 8007486:	61bb      	str	r3, [r7, #24]
 8007488:	e007      	b.n	800749a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800748a:	69fb      	ldr	r3, [r7, #28]
 800748c:	781a      	ldrb	r2, [r3, #0]
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007494:	69fb      	ldr	r3, [r7, #28]
 8007496:	3301      	adds	r3, #1
 8007498:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800749e:	b29b      	uxth	r3, r3
 80074a0:	3b01      	subs	r3, #1
 80074a2:	b29a      	uxth	r2, r3
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80074ac:	b29b      	uxth	r3, r3
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d1cf      	bne.n	8007452 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80074b2:	683b      	ldr	r3, [r7, #0]
 80074b4:	9300      	str	r3, [sp, #0]
 80074b6:	697b      	ldr	r3, [r7, #20]
 80074b8:	2200      	movs	r2, #0
 80074ba:	2140      	movs	r1, #64	; 0x40
 80074bc:	68f8      	ldr	r0, [r7, #12]
 80074be:	f000 fa83 	bl	80079c8 <UART_WaitOnFlagUntilTimeout>
 80074c2:	4603      	mov	r3, r0
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d001      	beq.n	80074cc <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80074c8:	2303      	movs	r3, #3
 80074ca:	e006      	b.n	80074da <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	2220      	movs	r2, #32
 80074d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80074d4:	2300      	movs	r3, #0
 80074d6:	e000      	b.n	80074da <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80074d8:	2302      	movs	r3, #2
  }
}
 80074da:	4618      	mov	r0, r3
 80074dc:	3720      	adds	r7, #32
 80074de:	46bd      	mov	sp, r7
 80074e0:	bd80      	pop	{r7, pc}

080074e2 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80074e2:	b580      	push	{r7, lr}
 80074e4:	b08a      	sub	sp, #40	; 0x28
 80074e6:	af02      	add	r7, sp, #8
 80074e8:	60f8      	str	r0, [r7, #12]
 80074ea:	60b9      	str	r1, [r7, #8]
 80074ec:	603b      	str	r3, [r7, #0]
 80074ee:	4613      	mov	r3, r2
 80074f0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80074f2:	2300      	movs	r3, #0
 80074f4:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80074fc:	b2db      	uxtb	r3, r3
 80074fe:	2b20      	cmp	r3, #32
 8007500:	f040 808c 	bne.w	800761c <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007504:	68bb      	ldr	r3, [r7, #8]
 8007506:	2b00      	cmp	r3, #0
 8007508:	d002      	beq.n	8007510 <HAL_UART_Receive+0x2e>
 800750a:	88fb      	ldrh	r3, [r7, #6]
 800750c:	2b00      	cmp	r3, #0
 800750e:	d101      	bne.n	8007514 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8007510:	2301      	movs	r3, #1
 8007512:	e084      	b.n	800761e <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800751a:	2b01      	cmp	r3, #1
 800751c:	d101      	bne.n	8007522 <HAL_UART_Receive+0x40>
 800751e:	2302      	movs	r3, #2
 8007520:	e07d      	b.n	800761e <HAL_UART_Receive+0x13c>
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	2201      	movs	r2, #1
 8007526:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	2200      	movs	r2, #0
 800752e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	2222      	movs	r2, #34	; 0x22
 8007534:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	2200      	movs	r2, #0
 800753c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800753e:	f7fc faa3 	bl	8003a88 <HAL_GetTick>
 8007542:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	88fa      	ldrh	r2, [r7, #6]
 8007548:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	88fa      	ldrh	r2, [r7, #6]
 800754e:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	689b      	ldr	r3, [r3, #8]
 8007554:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007558:	d108      	bne.n	800756c <HAL_UART_Receive+0x8a>
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	691b      	ldr	r3, [r3, #16]
 800755e:	2b00      	cmp	r3, #0
 8007560:	d104      	bne.n	800756c <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8007562:	2300      	movs	r3, #0
 8007564:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8007566:	68bb      	ldr	r3, [r7, #8]
 8007568:	61bb      	str	r3, [r7, #24]
 800756a:	e003      	b.n	8007574 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 800756c:	68bb      	ldr	r3, [r7, #8]
 800756e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007570:	2300      	movs	r3, #0
 8007572:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	2200      	movs	r2, #0
 8007578:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800757c:	e043      	b.n	8007606 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800757e:	683b      	ldr	r3, [r7, #0]
 8007580:	9300      	str	r3, [sp, #0]
 8007582:	697b      	ldr	r3, [r7, #20]
 8007584:	2200      	movs	r2, #0
 8007586:	2120      	movs	r1, #32
 8007588:	68f8      	ldr	r0, [r7, #12]
 800758a:	f000 fa1d 	bl	80079c8 <UART_WaitOnFlagUntilTimeout>
 800758e:	4603      	mov	r3, r0
 8007590:	2b00      	cmp	r3, #0
 8007592:	d001      	beq.n	8007598 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8007594:	2303      	movs	r3, #3
 8007596:	e042      	b.n	800761e <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8007598:	69fb      	ldr	r3, [r7, #28]
 800759a:	2b00      	cmp	r3, #0
 800759c:	d10c      	bne.n	80075b8 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	685b      	ldr	r3, [r3, #4]
 80075a4:	b29b      	uxth	r3, r3
 80075a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80075aa:	b29a      	uxth	r2, r3
 80075ac:	69bb      	ldr	r3, [r7, #24]
 80075ae:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80075b0:	69bb      	ldr	r3, [r7, #24]
 80075b2:	3302      	adds	r3, #2
 80075b4:	61bb      	str	r3, [r7, #24]
 80075b6:	e01f      	b.n	80075f8 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	689b      	ldr	r3, [r3, #8]
 80075bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80075c0:	d007      	beq.n	80075d2 <HAL_UART_Receive+0xf0>
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	689b      	ldr	r3, [r3, #8]
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d10a      	bne.n	80075e0 <HAL_UART_Receive+0xfe>
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	691b      	ldr	r3, [r3, #16]
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d106      	bne.n	80075e0 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	685b      	ldr	r3, [r3, #4]
 80075d8:	b2da      	uxtb	r2, r3
 80075da:	69fb      	ldr	r3, [r7, #28]
 80075dc:	701a      	strb	r2, [r3, #0]
 80075de:	e008      	b.n	80075f2 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	685b      	ldr	r3, [r3, #4]
 80075e6:	b2db      	uxtb	r3, r3
 80075e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80075ec:	b2da      	uxtb	r2, r3
 80075ee:	69fb      	ldr	r3, [r7, #28]
 80075f0:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80075f2:	69fb      	ldr	r3, [r7, #28]
 80075f4:	3301      	adds	r3, #1
 80075f6:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80075fc:	b29b      	uxth	r3, r3
 80075fe:	3b01      	subs	r3, #1
 8007600:	b29a      	uxth	r2, r3
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800760a:	b29b      	uxth	r3, r3
 800760c:	2b00      	cmp	r3, #0
 800760e:	d1b6      	bne.n	800757e <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	2220      	movs	r2, #32
 8007614:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8007618:	2300      	movs	r3, #0
 800761a:	e000      	b.n	800761e <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 800761c:	2302      	movs	r3, #2
  }
}
 800761e:	4618      	mov	r0, r3
 8007620:	3720      	adds	r7, #32
 8007622:	46bd      	mov	sp, r7
 8007624:	bd80      	pop	{r7, pc}
	...

08007628 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007628:	b580      	push	{r7, lr}
 800762a:	b08a      	sub	sp, #40	; 0x28
 800762c:	af00      	add	r7, sp, #0
 800762e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	68db      	ldr	r3, [r3, #12]
 800763e:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	695b      	ldr	r3, [r3, #20]
 8007646:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8007648:	2300      	movs	r3, #0
 800764a:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 800764c:	2300      	movs	r3, #0
 800764e:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007652:	f003 030f 	and.w	r3, r3, #15
 8007656:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8007658:	69bb      	ldr	r3, [r7, #24]
 800765a:	2b00      	cmp	r3, #0
 800765c:	d10d      	bne.n	800767a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800765e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007660:	f003 0320 	and.w	r3, r3, #32
 8007664:	2b00      	cmp	r3, #0
 8007666:	d008      	beq.n	800767a <HAL_UART_IRQHandler+0x52>
 8007668:	6a3b      	ldr	r3, [r7, #32]
 800766a:	f003 0320 	and.w	r3, r3, #32
 800766e:	2b00      	cmp	r3, #0
 8007670:	d003      	beq.n	800767a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8007672:	6878      	ldr	r0, [r7, #4]
 8007674:	f000 fa99 	bl	8007baa <UART_Receive_IT>
      return;
 8007678:	e17b      	b.n	8007972 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800767a:	69bb      	ldr	r3, [r7, #24]
 800767c:	2b00      	cmp	r3, #0
 800767e:	f000 80b1 	beq.w	80077e4 <HAL_UART_IRQHandler+0x1bc>
 8007682:	69fb      	ldr	r3, [r7, #28]
 8007684:	f003 0301 	and.w	r3, r3, #1
 8007688:	2b00      	cmp	r3, #0
 800768a:	d105      	bne.n	8007698 <HAL_UART_IRQHandler+0x70>
 800768c:	6a3b      	ldr	r3, [r7, #32]
 800768e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007692:	2b00      	cmp	r3, #0
 8007694:	f000 80a6 	beq.w	80077e4 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800769a:	f003 0301 	and.w	r3, r3, #1
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d00a      	beq.n	80076b8 <HAL_UART_IRQHandler+0x90>
 80076a2:	6a3b      	ldr	r3, [r7, #32]
 80076a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d005      	beq.n	80076b8 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076b0:	f043 0201 	orr.w	r2, r3, #1
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80076b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076ba:	f003 0304 	and.w	r3, r3, #4
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d00a      	beq.n	80076d8 <HAL_UART_IRQHandler+0xb0>
 80076c2:	69fb      	ldr	r3, [r7, #28]
 80076c4:	f003 0301 	and.w	r3, r3, #1
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d005      	beq.n	80076d8 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076d0:	f043 0202 	orr.w	r2, r3, #2
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80076d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076da:	f003 0302 	and.w	r3, r3, #2
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d00a      	beq.n	80076f8 <HAL_UART_IRQHandler+0xd0>
 80076e2:	69fb      	ldr	r3, [r7, #28]
 80076e4:	f003 0301 	and.w	r3, r3, #1
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d005      	beq.n	80076f8 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076f0:	f043 0204 	orr.w	r2, r3, #4
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80076f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076fa:	f003 0308 	and.w	r3, r3, #8
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d00f      	beq.n	8007722 <HAL_UART_IRQHandler+0xfa>
 8007702:	6a3b      	ldr	r3, [r7, #32]
 8007704:	f003 0320 	and.w	r3, r3, #32
 8007708:	2b00      	cmp	r3, #0
 800770a:	d104      	bne.n	8007716 <HAL_UART_IRQHandler+0xee>
 800770c:	69fb      	ldr	r3, [r7, #28]
 800770e:	f003 0301 	and.w	r3, r3, #1
 8007712:	2b00      	cmp	r3, #0
 8007714:	d005      	beq.n	8007722 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800771a:	f043 0208 	orr.w	r2, r3, #8
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007726:	2b00      	cmp	r3, #0
 8007728:	f000 811e 	beq.w	8007968 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800772c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800772e:	f003 0320 	and.w	r3, r3, #32
 8007732:	2b00      	cmp	r3, #0
 8007734:	d007      	beq.n	8007746 <HAL_UART_IRQHandler+0x11e>
 8007736:	6a3b      	ldr	r3, [r7, #32]
 8007738:	f003 0320 	and.w	r3, r3, #32
 800773c:	2b00      	cmp	r3, #0
 800773e:	d002      	beq.n	8007746 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8007740:	6878      	ldr	r0, [r7, #4]
 8007742:	f000 fa32 	bl	8007baa <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	695b      	ldr	r3, [r3, #20]
 800774c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007750:	2b00      	cmp	r3, #0
 8007752:	bf14      	ite	ne
 8007754:	2301      	movne	r3, #1
 8007756:	2300      	moveq	r3, #0
 8007758:	b2db      	uxtb	r3, r3
 800775a:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007760:	f003 0308 	and.w	r3, r3, #8
 8007764:	2b00      	cmp	r3, #0
 8007766:	d102      	bne.n	800776e <HAL_UART_IRQHandler+0x146>
 8007768:	697b      	ldr	r3, [r7, #20]
 800776a:	2b00      	cmp	r3, #0
 800776c:	d031      	beq.n	80077d2 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800776e:	6878      	ldr	r0, [r7, #4]
 8007770:	f000 f974 	bl	8007a5c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	695b      	ldr	r3, [r3, #20]
 800777a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800777e:	2b00      	cmp	r3, #0
 8007780:	d023      	beq.n	80077ca <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	695a      	ldr	r2, [r3, #20]
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007790:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007796:	2b00      	cmp	r3, #0
 8007798:	d013      	beq.n	80077c2 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800779e:	4a76      	ldr	r2, [pc, #472]	; (8007978 <HAL_UART_IRQHandler+0x350>)
 80077a0:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077a6:	4618      	mov	r0, r3
 80077a8:	f7fc ff3c 	bl	8004624 <HAL_DMA_Abort_IT>
 80077ac:	4603      	mov	r3, r0
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d016      	beq.n	80077e0 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80077b8:	687a      	ldr	r2, [r7, #4]
 80077ba:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80077bc:	4610      	mov	r0, r2
 80077be:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80077c0:	e00e      	b.n	80077e0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80077c2:	6878      	ldr	r0, [r7, #4]
 80077c4:	f000 f8ec 	bl	80079a0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80077c8:	e00a      	b.n	80077e0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80077ca:	6878      	ldr	r0, [r7, #4]
 80077cc:	f000 f8e8 	bl	80079a0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80077d0:	e006      	b.n	80077e0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80077d2:	6878      	ldr	r0, [r7, #4]
 80077d4:	f000 f8e4 	bl	80079a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	2200      	movs	r2, #0
 80077dc:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80077de:	e0c3      	b.n	8007968 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80077e0:	bf00      	nop
    return;
 80077e2:	e0c1      	b.n	8007968 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077e8:	2b01      	cmp	r3, #1
 80077ea:	f040 80a1 	bne.w	8007930 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 80077ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077f0:	f003 0310 	and.w	r3, r3, #16
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	f000 809b 	beq.w	8007930 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 80077fa:	6a3b      	ldr	r3, [r7, #32]
 80077fc:	f003 0310 	and.w	r3, r3, #16
 8007800:	2b00      	cmp	r3, #0
 8007802:	f000 8095 	beq.w	8007930 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007806:	2300      	movs	r3, #0
 8007808:	60fb      	str	r3, [r7, #12]
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	60fb      	str	r3, [r7, #12]
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	685b      	ldr	r3, [r3, #4]
 8007818:	60fb      	str	r3, [r7, #12]
 800781a:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	695b      	ldr	r3, [r3, #20]
 8007822:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007826:	2b00      	cmp	r3, #0
 8007828:	d04e      	beq.n	80078c8 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	685b      	ldr	r3, [r3, #4]
 8007832:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8007834:	8a3b      	ldrh	r3, [r7, #16]
 8007836:	2b00      	cmp	r3, #0
 8007838:	f000 8098 	beq.w	800796c <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007840:	8a3a      	ldrh	r2, [r7, #16]
 8007842:	429a      	cmp	r2, r3
 8007844:	f080 8092 	bcs.w	800796c <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	8a3a      	ldrh	r2, [r7, #16]
 800784c:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007852:	699b      	ldr	r3, [r3, #24]
 8007854:	2b20      	cmp	r3, #32
 8007856:	d02b      	beq.n	80078b0 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	68da      	ldr	r2, [r3, #12]
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007866:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	695a      	ldr	r2, [r3, #20]
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	f022 0201 	bic.w	r2, r2, #1
 8007876:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	695a      	ldr	r2, [r3, #20]
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007886:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	2220      	movs	r2, #32
 800788c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	2200      	movs	r2, #0
 8007894:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	68da      	ldr	r2, [r3, #12]
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	f022 0210 	bic.w	r2, r2, #16
 80078a4:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078aa:	4618      	mov	r0, r3
 80078ac:	f7fc fe7f 	bl	80045ae <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80078b8:	b29b      	uxth	r3, r3
 80078ba:	1ad3      	subs	r3, r2, r3
 80078bc:	b29b      	uxth	r3, r3
 80078be:	4619      	mov	r1, r3
 80078c0:	6878      	ldr	r0, [r7, #4]
 80078c2:	f000 f876 	bl	80079b2 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80078c6:	e051      	b.n	800796c <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80078d0:	b29b      	uxth	r3, r3
 80078d2:	1ad3      	subs	r3, r2, r3
 80078d4:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80078da:	b29b      	uxth	r3, r3
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d047      	beq.n	8007970 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 80078e0:	8a7b      	ldrh	r3, [r7, #18]
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d044      	beq.n	8007970 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	68da      	ldr	r2, [r3, #12]
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80078f4:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	695a      	ldr	r2, [r3, #20]
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	f022 0201 	bic.w	r2, r2, #1
 8007904:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	2220      	movs	r2, #32
 800790a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	2200      	movs	r2, #0
 8007912:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	68da      	ldr	r2, [r3, #12]
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	f022 0210 	bic.w	r2, r2, #16
 8007922:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007924:	8a7b      	ldrh	r3, [r7, #18]
 8007926:	4619      	mov	r1, r3
 8007928:	6878      	ldr	r0, [r7, #4]
 800792a:	f000 f842 	bl	80079b2 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800792e:	e01f      	b.n	8007970 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007932:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007936:	2b00      	cmp	r3, #0
 8007938:	d008      	beq.n	800794c <HAL_UART_IRQHandler+0x324>
 800793a:	6a3b      	ldr	r3, [r7, #32]
 800793c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007940:	2b00      	cmp	r3, #0
 8007942:	d003      	beq.n	800794c <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8007944:	6878      	ldr	r0, [r7, #4]
 8007946:	f000 f8c9 	bl	8007adc <UART_Transmit_IT>
    return;
 800794a:	e012      	b.n	8007972 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800794c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800794e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007952:	2b00      	cmp	r3, #0
 8007954:	d00d      	beq.n	8007972 <HAL_UART_IRQHandler+0x34a>
 8007956:	6a3b      	ldr	r3, [r7, #32]
 8007958:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800795c:	2b00      	cmp	r3, #0
 800795e:	d008      	beq.n	8007972 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8007960:	6878      	ldr	r0, [r7, #4]
 8007962:	f000 f90a 	bl	8007b7a <UART_EndTransmit_IT>
    return;
 8007966:	e004      	b.n	8007972 <HAL_UART_IRQHandler+0x34a>
    return;
 8007968:	bf00      	nop
 800796a:	e002      	b.n	8007972 <HAL_UART_IRQHandler+0x34a>
      return;
 800796c:	bf00      	nop
 800796e:	e000      	b.n	8007972 <HAL_UART_IRQHandler+0x34a>
      return;
 8007970:	bf00      	nop
  }
}
 8007972:	3728      	adds	r7, #40	; 0x28
 8007974:	46bd      	mov	sp, r7
 8007976:	bd80      	pop	{r7, pc}
 8007978:	08007ab5 	.word	0x08007ab5

0800797c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800797c:	b480      	push	{r7}
 800797e:	b083      	sub	sp, #12
 8007980:	af00      	add	r7, sp, #0
 8007982:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007984:	bf00      	nop
 8007986:	370c      	adds	r7, #12
 8007988:	46bd      	mov	sp, r7
 800798a:	bc80      	pop	{r7}
 800798c:	4770      	bx	lr

0800798e <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800798e:	b480      	push	{r7}
 8007990:	b083      	sub	sp, #12
 8007992:	af00      	add	r7, sp, #0
 8007994:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8007996:	bf00      	nop
 8007998:	370c      	adds	r7, #12
 800799a:	46bd      	mov	sp, r7
 800799c:	bc80      	pop	{r7}
 800799e:	4770      	bx	lr

080079a0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80079a0:	b480      	push	{r7}
 80079a2:	b083      	sub	sp, #12
 80079a4:	af00      	add	r7, sp, #0
 80079a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80079a8:	bf00      	nop
 80079aa:	370c      	adds	r7, #12
 80079ac:	46bd      	mov	sp, r7
 80079ae:	bc80      	pop	{r7}
 80079b0:	4770      	bx	lr

080079b2 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80079b2:	b480      	push	{r7}
 80079b4:	b083      	sub	sp, #12
 80079b6:	af00      	add	r7, sp, #0
 80079b8:	6078      	str	r0, [r7, #4]
 80079ba:	460b      	mov	r3, r1
 80079bc:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80079be:	bf00      	nop
 80079c0:	370c      	adds	r7, #12
 80079c2:	46bd      	mov	sp, r7
 80079c4:	bc80      	pop	{r7}
 80079c6:	4770      	bx	lr

080079c8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80079c8:	b580      	push	{r7, lr}
 80079ca:	b084      	sub	sp, #16
 80079cc:	af00      	add	r7, sp, #0
 80079ce:	60f8      	str	r0, [r7, #12]
 80079d0:	60b9      	str	r1, [r7, #8]
 80079d2:	603b      	str	r3, [r7, #0]
 80079d4:	4613      	mov	r3, r2
 80079d6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80079d8:	e02c      	b.n	8007a34 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80079da:	69bb      	ldr	r3, [r7, #24]
 80079dc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80079e0:	d028      	beq.n	8007a34 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80079e2:	69bb      	ldr	r3, [r7, #24]
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d007      	beq.n	80079f8 <UART_WaitOnFlagUntilTimeout+0x30>
 80079e8:	f7fc f84e 	bl	8003a88 <HAL_GetTick>
 80079ec:	4602      	mov	r2, r0
 80079ee:	683b      	ldr	r3, [r7, #0]
 80079f0:	1ad3      	subs	r3, r2, r3
 80079f2:	69ba      	ldr	r2, [r7, #24]
 80079f4:	429a      	cmp	r2, r3
 80079f6:	d21d      	bcs.n	8007a34 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	68da      	ldr	r2, [r3, #12]
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007a06:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	695a      	ldr	r2, [r3, #20]
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	f022 0201 	bic.w	r2, r2, #1
 8007a16:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	2220      	movs	r2, #32
 8007a1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	2220      	movs	r2, #32
 8007a24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	2200      	movs	r2, #0
 8007a2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8007a30:	2303      	movs	r3, #3
 8007a32:	e00f      	b.n	8007a54 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	681a      	ldr	r2, [r3, #0]
 8007a3a:	68bb      	ldr	r3, [r7, #8]
 8007a3c:	4013      	ands	r3, r2
 8007a3e:	68ba      	ldr	r2, [r7, #8]
 8007a40:	429a      	cmp	r2, r3
 8007a42:	bf0c      	ite	eq
 8007a44:	2301      	moveq	r3, #1
 8007a46:	2300      	movne	r3, #0
 8007a48:	b2db      	uxtb	r3, r3
 8007a4a:	461a      	mov	r2, r3
 8007a4c:	79fb      	ldrb	r3, [r7, #7]
 8007a4e:	429a      	cmp	r2, r3
 8007a50:	d0c3      	beq.n	80079da <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007a52:	2300      	movs	r3, #0
}
 8007a54:	4618      	mov	r0, r3
 8007a56:	3710      	adds	r7, #16
 8007a58:	46bd      	mov	sp, r7
 8007a5a:	bd80      	pop	{r7, pc}

08007a5c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007a5c:	b480      	push	{r7}
 8007a5e:	b083      	sub	sp, #12
 8007a60:	af00      	add	r7, sp, #0
 8007a62:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	68da      	ldr	r2, [r3, #12]
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007a72:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	695a      	ldr	r2, [r3, #20]
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	f022 0201 	bic.w	r2, r2, #1
 8007a82:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a88:	2b01      	cmp	r3, #1
 8007a8a:	d107      	bne.n	8007a9c <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	68da      	ldr	r2, [r3, #12]
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	f022 0210 	bic.w	r2, r2, #16
 8007a9a:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	2220      	movs	r2, #32
 8007aa0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	2200      	movs	r2, #0
 8007aa8:	631a      	str	r2, [r3, #48]	; 0x30
}
 8007aaa:	bf00      	nop
 8007aac:	370c      	adds	r7, #12
 8007aae:	46bd      	mov	sp, r7
 8007ab0:	bc80      	pop	{r7}
 8007ab2:	4770      	bx	lr

08007ab4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007ab4:	b580      	push	{r7, lr}
 8007ab6:	b084      	sub	sp, #16
 8007ab8:	af00      	add	r7, sp, #0
 8007aba:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ac0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	2200      	movs	r2, #0
 8007ac6:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	2200      	movs	r2, #0
 8007acc:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007ace:	68f8      	ldr	r0, [r7, #12]
 8007ad0:	f7ff ff66 	bl	80079a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007ad4:	bf00      	nop
 8007ad6:	3710      	adds	r7, #16
 8007ad8:	46bd      	mov	sp, r7
 8007ada:	bd80      	pop	{r7, pc}

08007adc <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007adc:	b480      	push	{r7}
 8007ade:	b085      	sub	sp, #20
 8007ae0:	af00      	add	r7, sp, #0
 8007ae2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007aea:	b2db      	uxtb	r3, r3
 8007aec:	2b21      	cmp	r3, #33	; 0x21
 8007aee:	d13e      	bne.n	8007b6e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	689b      	ldr	r3, [r3, #8]
 8007af4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007af8:	d114      	bne.n	8007b24 <UART_Transmit_IT+0x48>
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	691b      	ldr	r3, [r3, #16]
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d110      	bne.n	8007b24 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	6a1b      	ldr	r3, [r3, #32]
 8007b06:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	881b      	ldrh	r3, [r3, #0]
 8007b0c:	461a      	mov	r2, r3
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007b16:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	6a1b      	ldr	r3, [r3, #32]
 8007b1c:	1c9a      	adds	r2, r3, #2
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	621a      	str	r2, [r3, #32]
 8007b22:	e008      	b.n	8007b36 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	6a1b      	ldr	r3, [r3, #32]
 8007b28:	1c59      	adds	r1, r3, #1
 8007b2a:	687a      	ldr	r2, [r7, #4]
 8007b2c:	6211      	str	r1, [r2, #32]
 8007b2e:	781a      	ldrb	r2, [r3, #0]
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007b3a:	b29b      	uxth	r3, r3
 8007b3c:	3b01      	subs	r3, #1
 8007b3e:	b29b      	uxth	r3, r3
 8007b40:	687a      	ldr	r2, [r7, #4]
 8007b42:	4619      	mov	r1, r3
 8007b44:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d10f      	bne.n	8007b6a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	68da      	ldr	r2, [r3, #12]
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007b58:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	68da      	ldr	r2, [r3, #12]
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007b68:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007b6a:	2300      	movs	r3, #0
 8007b6c:	e000      	b.n	8007b70 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007b6e:	2302      	movs	r3, #2
  }
}
 8007b70:	4618      	mov	r0, r3
 8007b72:	3714      	adds	r7, #20
 8007b74:	46bd      	mov	sp, r7
 8007b76:	bc80      	pop	{r7}
 8007b78:	4770      	bx	lr

08007b7a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007b7a:	b580      	push	{r7, lr}
 8007b7c:	b082      	sub	sp, #8
 8007b7e:	af00      	add	r7, sp, #0
 8007b80:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	68da      	ldr	r2, [r3, #12]
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007b90:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	2220      	movs	r2, #32
 8007b96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007b9a:	6878      	ldr	r0, [r7, #4]
 8007b9c:	f7ff feee 	bl	800797c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007ba0:	2300      	movs	r3, #0
}
 8007ba2:	4618      	mov	r0, r3
 8007ba4:	3708      	adds	r7, #8
 8007ba6:	46bd      	mov	sp, r7
 8007ba8:	bd80      	pop	{r7, pc}

08007baa <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007baa:	b580      	push	{r7, lr}
 8007bac:	b086      	sub	sp, #24
 8007bae:	af00      	add	r7, sp, #0
 8007bb0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007bb8:	b2db      	uxtb	r3, r3
 8007bba:	2b22      	cmp	r3, #34	; 0x22
 8007bbc:	f040 8099 	bne.w	8007cf2 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	689b      	ldr	r3, [r3, #8]
 8007bc4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007bc8:	d117      	bne.n	8007bfa <UART_Receive_IT+0x50>
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	691b      	ldr	r3, [r3, #16]
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d113      	bne.n	8007bfa <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007bd2:	2300      	movs	r3, #0
 8007bd4:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bda:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	685b      	ldr	r3, [r3, #4]
 8007be2:	b29b      	uxth	r3, r3
 8007be4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007be8:	b29a      	uxth	r2, r3
 8007bea:	693b      	ldr	r3, [r7, #16]
 8007bec:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bf2:	1c9a      	adds	r2, r3, #2
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	629a      	str	r2, [r3, #40]	; 0x28
 8007bf8:	e026      	b.n	8007c48 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bfe:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8007c00:	2300      	movs	r3, #0
 8007c02:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	689b      	ldr	r3, [r3, #8]
 8007c08:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007c0c:	d007      	beq.n	8007c1e <UART_Receive_IT+0x74>
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	689b      	ldr	r3, [r3, #8]
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d10a      	bne.n	8007c2c <UART_Receive_IT+0x82>
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	691b      	ldr	r3, [r3, #16]
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d106      	bne.n	8007c2c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	685b      	ldr	r3, [r3, #4]
 8007c24:	b2da      	uxtb	r2, r3
 8007c26:	697b      	ldr	r3, [r7, #20]
 8007c28:	701a      	strb	r2, [r3, #0]
 8007c2a:	e008      	b.n	8007c3e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	685b      	ldr	r3, [r3, #4]
 8007c32:	b2db      	uxtb	r3, r3
 8007c34:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007c38:	b2da      	uxtb	r2, r3
 8007c3a:	697b      	ldr	r3, [r7, #20]
 8007c3c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c42:	1c5a      	adds	r2, r3, #1
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007c4c:	b29b      	uxth	r3, r3
 8007c4e:	3b01      	subs	r3, #1
 8007c50:	b29b      	uxth	r3, r3
 8007c52:	687a      	ldr	r2, [r7, #4]
 8007c54:	4619      	mov	r1, r3
 8007c56:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d148      	bne.n	8007cee <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	68da      	ldr	r2, [r3, #12]
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	f022 0220 	bic.w	r2, r2, #32
 8007c6a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	68da      	ldr	r2, [r3, #12]
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007c7a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	695a      	ldr	r2, [r3, #20]
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	f022 0201 	bic.w	r2, r2, #1
 8007c8a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	2220      	movs	r2, #32
 8007c90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c98:	2b01      	cmp	r3, #1
 8007c9a:	d123      	bne.n	8007ce4 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	2200      	movs	r2, #0
 8007ca0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	68da      	ldr	r2, [r3, #12]
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	f022 0210 	bic.w	r2, r2, #16
 8007cb0:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	f003 0310 	and.w	r3, r3, #16
 8007cbc:	2b10      	cmp	r3, #16
 8007cbe:	d10a      	bne.n	8007cd6 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007cc0:	2300      	movs	r3, #0
 8007cc2:	60fb      	str	r3, [r7, #12]
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	60fb      	str	r3, [r7, #12]
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	685b      	ldr	r3, [r3, #4]
 8007cd2:	60fb      	str	r3, [r7, #12]
 8007cd4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007cda:	4619      	mov	r1, r3
 8007cdc:	6878      	ldr	r0, [r7, #4]
 8007cde:	f7ff fe68 	bl	80079b2 <HAL_UARTEx_RxEventCallback>
 8007ce2:	e002      	b.n	8007cea <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8007ce4:	6878      	ldr	r0, [r7, #4]
 8007ce6:	f7ff fe52 	bl	800798e <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007cea:	2300      	movs	r3, #0
 8007cec:	e002      	b.n	8007cf4 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8007cee:	2300      	movs	r3, #0
 8007cf0:	e000      	b.n	8007cf4 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8007cf2:	2302      	movs	r3, #2
  }
}
 8007cf4:	4618      	mov	r0, r3
 8007cf6:	3718      	adds	r7, #24
 8007cf8:	46bd      	mov	sp, r7
 8007cfa:	bd80      	pop	{r7, pc}

08007cfc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007cfc:	b580      	push	{r7, lr}
 8007cfe:	b084      	sub	sp, #16
 8007d00:	af00      	add	r7, sp, #0
 8007d02:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	691b      	ldr	r3, [r3, #16]
 8007d0a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	68da      	ldr	r2, [r3, #12]
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	430a      	orrs	r2, r1
 8007d18:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	689a      	ldr	r2, [r3, #8]
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	691b      	ldr	r3, [r3, #16]
 8007d22:	431a      	orrs	r2, r3
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	695b      	ldr	r3, [r3, #20]
 8007d28:	4313      	orrs	r3, r2
 8007d2a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	68db      	ldr	r3, [r3, #12]
 8007d32:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8007d36:	f023 030c 	bic.w	r3, r3, #12
 8007d3a:	687a      	ldr	r2, [r7, #4]
 8007d3c:	6812      	ldr	r2, [r2, #0]
 8007d3e:	68b9      	ldr	r1, [r7, #8]
 8007d40:	430b      	orrs	r3, r1
 8007d42:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	695b      	ldr	r3, [r3, #20]
 8007d4a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	699a      	ldr	r2, [r3, #24]
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	430a      	orrs	r2, r1
 8007d58:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	4a2c      	ldr	r2, [pc, #176]	; (8007e10 <UART_SetConfig+0x114>)
 8007d60:	4293      	cmp	r3, r2
 8007d62:	d103      	bne.n	8007d6c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8007d64:	f7fe fd38 	bl	80067d8 <HAL_RCC_GetPCLK2Freq>
 8007d68:	60f8      	str	r0, [r7, #12]
 8007d6a:	e002      	b.n	8007d72 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8007d6c:	f7fe fd20 	bl	80067b0 <HAL_RCC_GetPCLK1Freq>
 8007d70:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007d72:	68fa      	ldr	r2, [r7, #12]
 8007d74:	4613      	mov	r3, r2
 8007d76:	009b      	lsls	r3, r3, #2
 8007d78:	4413      	add	r3, r2
 8007d7a:	009a      	lsls	r2, r3, #2
 8007d7c:	441a      	add	r2, r3
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	685b      	ldr	r3, [r3, #4]
 8007d82:	009b      	lsls	r3, r3, #2
 8007d84:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d88:	4a22      	ldr	r2, [pc, #136]	; (8007e14 <UART_SetConfig+0x118>)
 8007d8a:	fba2 2303 	umull	r2, r3, r2, r3
 8007d8e:	095b      	lsrs	r3, r3, #5
 8007d90:	0119      	lsls	r1, r3, #4
 8007d92:	68fa      	ldr	r2, [r7, #12]
 8007d94:	4613      	mov	r3, r2
 8007d96:	009b      	lsls	r3, r3, #2
 8007d98:	4413      	add	r3, r2
 8007d9a:	009a      	lsls	r2, r3, #2
 8007d9c:	441a      	add	r2, r3
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	685b      	ldr	r3, [r3, #4]
 8007da2:	009b      	lsls	r3, r3, #2
 8007da4:	fbb2 f2f3 	udiv	r2, r2, r3
 8007da8:	4b1a      	ldr	r3, [pc, #104]	; (8007e14 <UART_SetConfig+0x118>)
 8007daa:	fba3 0302 	umull	r0, r3, r3, r2
 8007dae:	095b      	lsrs	r3, r3, #5
 8007db0:	2064      	movs	r0, #100	; 0x64
 8007db2:	fb00 f303 	mul.w	r3, r0, r3
 8007db6:	1ad3      	subs	r3, r2, r3
 8007db8:	011b      	lsls	r3, r3, #4
 8007dba:	3332      	adds	r3, #50	; 0x32
 8007dbc:	4a15      	ldr	r2, [pc, #84]	; (8007e14 <UART_SetConfig+0x118>)
 8007dbe:	fba2 2303 	umull	r2, r3, r2, r3
 8007dc2:	095b      	lsrs	r3, r3, #5
 8007dc4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007dc8:	4419      	add	r1, r3
 8007dca:	68fa      	ldr	r2, [r7, #12]
 8007dcc:	4613      	mov	r3, r2
 8007dce:	009b      	lsls	r3, r3, #2
 8007dd0:	4413      	add	r3, r2
 8007dd2:	009a      	lsls	r2, r3, #2
 8007dd4:	441a      	add	r2, r3
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	685b      	ldr	r3, [r3, #4]
 8007dda:	009b      	lsls	r3, r3, #2
 8007ddc:	fbb2 f2f3 	udiv	r2, r2, r3
 8007de0:	4b0c      	ldr	r3, [pc, #48]	; (8007e14 <UART_SetConfig+0x118>)
 8007de2:	fba3 0302 	umull	r0, r3, r3, r2
 8007de6:	095b      	lsrs	r3, r3, #5
 8007de8:	2064      	movs	r0, #100	; 0x64
 8007dea:	fb00 f303 	mul.w	r3, r0, r3
 8007dee:	1ad3      	subs	r3, r2, r3
 8007df0:	011b      	lsls	r3, r3, #4
 8007df2:	3332      	adds	r3, #50	; 0x32
 8007df4:	4a07      	ldr	r2, [pc, #28]	; (8007e14 <UART_SetConfig+0x118>)
 8007df6:	fba2 2303 	umull	r2, r3, r2, r3
 8007dfa:	095b      	lsrs	r3, r3, #5
 8007dfc:	f003 020f 	and.w	r2, r3, #15
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	440a      	add	r2, r1
 8007e06:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8007e08:	bf00      	nop
 8007e0a:	3710      	adds	r7, #16
 8007e0c:	46bd      	mov	sp, r7
 8007e0e:	bd80      	pop	{r7, pc}
 8007e10:	40013800 	.word	0x40013800
 8007e14:	51eb851f 	.word	0x51eb851f

08007e18 <__errno>:
 8007e18:	4b01      	ldr	r3, [pc, #4]	; (8007e20 <__errno+0x8>)
 8007e1a:	6818      	ldr	r0, [r3, #0]
 8007e1c:	4770      	bx	lr
 8007e1e:	bf00      	nop
 8007e20:	2000001c 	.word	0x2000001c

08007e24 <__libc_init_array>:
 8007e24:	b570      	push	{r4, r5, r6, lr}
 8007e26:	2600      	movs	r6, #0
 8007e28:	4d0c      	ldr	r5, [pc, #48]	; (8007e5c <__libc_init_array+0x38>)
 8007e2a:	4c0d      	ldr	r4, [pc, #52]	; (8007e60 <__libc_init_array+0x3c>)
 8007e2c:	1b64      	subs	r4, r4, r5
 8007e2e:	10a4      	asrs	r4, r4, #2
 8007e30:	42a6      	cmp	r6, r4
 8007e32:	d109      	bne.n	8007e48 <__libc_init_array+0x24>
 8007e34:	f002 feba 	bl	800abac <_init>
 8007e38:	2600      	movs	r6, #0
 8007e3a:	4d0a      	ldr	r5, [pc, #40]	; (8007e64 <__libc_init_array+0x40>)
 8007e3c:	4c0a      	ldr	r4, [pc, #40]	; (8007e68 <__libc_init_array+0x44>)
 8007e3e:	1b64      	subs	r4, r4, r5
 8007e40:	10a4      	asrs	r4, r4, #2
 8007e42:	42a6      	cmp	r6, r4
 8007e44:	d105      	bne.n	8007e52 <__libc_init_array+0x2e>
 8007e46:	bd70      	pop	{r4, r5, r6, pc}
 8007e48:	f855 3b04 	ldr.w	r3, [r5], #4
 8007e4c:	4798      	blx	r3
 8007e4e:	3601      	adds	r6, #1
 8007e50:	e7ee      	b.n	8007e30 <__libc_init_array+0xc>
 8007e52:	f855 3b04 	ldr.w	r3, [r5], #4
 8007e56:	4798      	blx	r3
 8007e58:	3601      	adds	r6, #1
 8007e5a:	e7f2      	b.n	8007e42 <__libc_init_array+0x1e>
 8007e5c:	0800c5e4 	.word	0x0800c5e4
 8007e60:	0800c5e4 	.word	0x0800c5e4
 8007e64:	0800c5e4 	.word	0x0800c5e4
 8007e68:	0800c5e8 	.word	0x0800c5e8

08007e6c <memset>:
 8007e6c:	4603      	mov	r3, r0
 8007e6e:	4402      	add	r2, r0
 8007e70:	4293      	cmp	r3, r2
 8007e72:	d100      	bne.n	8007e76 <memset+0xa>
 8007e74:	4770      	bx	lr
 8007e76:	f803 1b01 	strb.w	r1, [r3], #1
 8007e7a:	e7f9      	b.n	8007e70 <memset+0x4>

08007e7c <__cvt>:
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007e82:	461f      	mov	r7, r3
 8007e84:	bfbb      	ittet	lt
 8007e86:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8007e8a:	461f      	movlt	r7, r3
 8007e8c:	2300      	movge	r3, #0
 8007e8e:	232d      	movlt	r3, #45	; 0x2d
 8007e90:	b088      	sub	sp, #32
 8007e92:	4614      	mov	r4, r2
 8007e94:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007e96:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8007e98:	7013      	strb	r3, [r2, #0]
 8007e9a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007e9c:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8007ea0:	f023 0820 	bic.w	r8, r3, #32
 8007ea4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007ea8:	d005      	beq.n	8007eb6 <__cvt+0x3a>
 8007eaa:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8007eae:	d100      	bne.n	8007eb2 <__cvt+0x36>
 8007eb0:	3501      	adds	r5, #1
 8007eb2:	2302      	movs	r3, #2
 8007eb4:	e000      	b.n	8007eb8 <__cvt+0x3c>
 8007eb6:	2303      	movs	r3, #3
 8007eb8:	aa07      	add	r2, sp, #28
 8007eba:	9204      	str	r2, [sp, #16]
 8007ebc:	aa06      	add	r2, sp, #24
 8007ebe:	e9cd a202 	strd	sl, r2, [sp, #8]
 8007ec2:	e9cd 3500 	strd	r3, r5, [sp]
 8007ec6:	4622      	mov	r2, r4
 8007ec8:	463b      	mov	r3, r7
 8007eca:	f000 fce5 	bl	8008898 <_dtoa_r>
 8007ece:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007ed2:	4606      	mov	r6, r0
 8007ed4:	d102      	bne.n	8007edc <__cvt+0x60>
 8007ed6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007ed8:	07db      	lsls	r3, r3, #31
 8007eda:	d522      	bpl.n	8007f22 <__cvt+0xa6>
 8007edc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007ee0:	eb06 0905 	add.w	r9, r6, r5
 8007ee4:	d110      	bne.n	8007f08 <__cvt+0x8c>
 8007ee6:	7833      	ldrb	r3, [r6, #0]
 8007ee8:	2b30      	cmp	r3, #48	; 0x30
 8007eea:	d10a      	bne.n	8007f02 <__cvt+0x86>
 8007eec:	2200      	movs	r2, #0
 8007eee:	2300      	movs	r3, #0
 8007ef0:	4620      	mov	r0, r4
 8007ef2:	4639      	mov	r1, r7
 8007ef4:	f7f8 fd58 	bl	80009a8 <__aeabi_dcmpeq>
 8007ef8:	b918      	cbnz	r0, 8007f02 <__cvt+0x86>
 8007efa:	f1c5 0501 	rsb	r5, r5, #1
 8007efe:	f8ca 5000 	str.w	r5, [sl]
 8007f02:	f8da 3000 	ldr.w	r3, [sl]
 8007f06:	4499      	add	r9, r3
 8007f08:	2200      	movs	r2, #0
 8007f0a:	2300      	movs	r3, #0
 8007f0c:	4620      	mov	r0, r4
 8007f0e:	4639      	mov	r1, r7
 8007f10:	f7f8 fd4a 	bl	80009a8 <__aeabi_dcmpeq>
 8007f14:	b108      	cbz	r0, 8007f1a <__cvt+0x9e>
 8007f16:	f8cd 901c 	str.w	r9, [sp, #28]
 8007f1a:	2230      	movs	r2, #48	; 0x30
 8007f1c:	9b07      	ldr	r3, [sp, #28]
 8007f1e:	454b      	cmp	r3, r9
 8007f20:	d307      	bcc.n	8007f32 <__cvt+0xb6>
 8007f22:	4630      	mov	r0, r6
 8007f24:	9b07      	ldr	r3, [sp, #28]
 8007f26:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8007f28:	1b9b      	subs	r3, r3, r6
 8007f2a:	6013      	str	r3, [r2, #0]
 8007f2c:	b008      	add	sp, #32
 8007f2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f32:	1c59      	adds	r1, r3, #1
 8007f34:	9107      	str	r1, [sp, #28]
 8007f36:	701a      	strb	r2, [r3, #0]
 8007f38:	e7f0      	b.n	8007f1c <__cvt+0xa0>

08007f3a <__exponent>:
 8007f3a:	4603      	mov	r3, r0
 8007f3c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007f3e:	2900      	cmp	r1, #0
 8007f40:	f803 2b02 	strb.w	r2, [r3], #2
 8007f44:	bfb6      	itet	lt
 8007f46:	222d      	movlt	r2, #45	; 0x2d
 8007f48:	222b      	movge	r2, #43	; 0x2b
 8007f4a:	4249      	neglt	r1, r1
 8007f4c:	2909      	cmp	r1, #9
 8007f4e:	7042      	strb	r2, [r0, #1]
 8007f50:	dd2b      	ble.n	8007faa <__exponent+0x70>
 8007f52:	f10d 0407 	add.w	r4, sp, #7
 8007f56:	46a4      	mov	ip, r4
 8007f58:	270a      	movs	r7, #10
 8007f5a:	fb91 f6f7 	sdiv	r6, r1, r7
 8007f5e:	460a      	mov	r2, r1
 8007f60:	46a6      	mov	lr, r4
 8007f62:	fb07 1516 	mls	r5, r7, r6, r1
 8007f66:	2a63      	cmp	r2, #99	; 0x63
 8007f68:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8007f6c:	4631      	mov	r1, r6
 8007f6e:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8007f72:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8007f76:	dcf0      	bgt.n	8007f5a <__exponent+0x20>
 8007f78:	3130      	adds	r1, #48	; 0x30
 8007f7a:	f1ae 0502 	sub.w	r5, lr, #2
 8007f7e:	f804 1c01 	strb.w	r1, [r4, #-1]
 8007f82:	4629      	mov	r1, r5
 8007f84:	1c44      	adds	r4, r0, #1
 8007f86:	4561      	cmp	r1, ip
 8007f88:	d30a      	bcc.n	8007fa0 <__exponent+0x66>
 8007f8a:	f10d 0209 	add.w	r2, sp, #9
 8007f8e:	eba2 020e 	sub.w	r2, r2, lr
 8007f92:	4565      	cmp	r5, ip
 8007f94:	bf88      	it	hi
 8007f96:	2200      	movhi	r2, #0
 8007f98:	4413      	add	r3, r2
 8007f9a:	1a18      	subs	r0, r3, r0
 8007f9c:	b003      	add	sp, #12
 8007f9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007fa0:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007fa4:	f804 2f01 	strb.w	r2, [r4, #1]!
 8007fa8:	e7ed      	b.n	8007f86 <__exponent+0x4c>
 8007faa:	2330      	movs	r3, #48	; 0x30
 8007fac:	3130      	adds	r1, #48	; 0x30
 8007fae:	7083      	strb	r3, [r0, #2]
 8007fb0:	70c1      	strb	r1, [r0, #3]
 8007fb2:	1d03      	adds	r3, r0, #4
 8007fb4:	e7f1      	b.n	8007f9a <__exponent+0x60>
	...

08007fb8 <_printf_float>:
 8007fb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007fbc:	b091      	sub	sp, #68	; 0x44
 8007fbe:	460c      	mov	r4, r1
 8007fc0:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8007fc4:	4616      	mov	r6, r2
 8007fc6:	461f      	mov	r7, r3
 8007fc8:	4605      	mov	r5, r0
 8007fca:	f001 fa53 	bl	8009474 <_localeconv_r>
 8007fce:	6803      	ldr	r3, [r0, #0]
 8007fd0:	4618      	mov	r0, r3
 8007fd2:	9309      	str	r3, [sp, #36]	; 0x24
 8007fd4:	f7f8 f8bc 	bl	8000150 <strlen>
 8007fd8:	2300      	movs	r3, #0
 8007fda:	930e      	str	r3, [sp, #56]	; 0x38
 8007fdc:	f8d8 3000 	ldr.w	r3, [r8]
 8007fe0:	900a      	str	r0, [sp, #40]	; 0x28
 8007fe2:	3307      	adds	r3, #7
 8007fe4:	f023 0307 	bic.w	r3, r3, #7
 8007fe8:	f103 0208 	add.w	r2, r3, #8
 8007fec:	f894 9018 	ldrb.w	r9, [r4, #24]
 8007ff0:	f8d4 b000 	ldr.w	fp, [r4]
 8007ff4:	f8c8 2000 	str.w	r2, [r8]
 8007ff8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ffc:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8008000:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8008004:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8008008:	930b      	str	r3, [sp, #44]	; 0x2c
 800800a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800800e:	4640      	mov	r0, r8
 8008010:	4b9c      	ldr	r3, [pc, #624]	; (8008284 <_printf_float+0x2cc>)
 8008012:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008014:	f7f8 fcfa 	bl	8000a0c <__aeabi_dcmpun>
 8008018:	bb70      	cbnz	r0, 8008078 <_printf_float+0xc0>
 800801a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800801e:	4640      	mov	r0, r8
 8008020:	4b98      	ldr	r3, [pc, #608]	; (8008284 <_printf_float+0x2cc>)
 8008022:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008024:	f7f8 fcd4 	bl	80009d0 <__aeabi_dcmple>
 8008028:	bb30      	cbnz	r0, 8008078 <_printf_float+0xc0>
 800802a:	2200      	movs	r2, #0
 800802c:	2300      	movs	r3, #0
 800802e:	4640      	mov	r0, r8
 8008030:	4651      	mov	r1, sl
 8008032:	f7f8 fcc3 	bl	80009bc <__aeabi_dcmplt>
 8008036:	b110      	cbz	r0, 800803e <_printf_float+0x86>
 8008038:	232d      	movs	r3, #45	; 0x2d
 800803a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800803e:	4b92      	ldr	r3, [pc, #584]	; (8008288 <_printf_float+0x2d0>)
 8008040:	4892      	ldr	r0, [pc, #584]	; (800828c <_printf_float+0x2d4>)
 8008042:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8008046:	bf94      	ite	ls
 8008048:	4698      	movls	r8, r3
 800804a:	4680      	movhi	r8, r0
 800804c:	2303      	movs	r3, #3
 800804e:	f04f 0a00 	mov.w	sl, #0
 8008052:	6123      	str	r3, [r4, #16]
 8008054:	f02b 0304 	bic.w	r3, fp, #4
 8008058:	6023      	str	r3, [r4, #0]
 800805a:	4633      	mov	r3, r6
 800805c:	4621      	mov	r1, r4
 800805e:	4628      	mov	r0, r5
 8008060:	9700      	str	r7, [sp, #0]
 8008062:	aa0f      	add	r2, sp, #60	; 0x3c
 8008064:	f000 f9d4 	bl	8008410 <_printf_common>
 8008068:	3001      	adds	r0, #1
 800806a:	f040 8090 	bne.w	800818e <_printf_float+0x1d6>
 800806e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008072:	b011      	add	sp, #68	; 0x44
 8008074:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008078:	4642      	mov	r2, r8
 800807a:	4653      	mov	r3, sl
 800807c:	4640      	mov	r0, r8
 800807e:	4651      	mov	r1, sl
 8008080:	f7f8 fcc4 	bl	8000a0c <__aeabi_dcmpun>
 8008084:	b148      	cbz	r0, 800809a <_printf_float+0xe2>
 8008086:	f1ba 0f00 	cmp.w	sl, #0
 800808a:	bfb8      	it	lt
 800808c:	232d      	movlt	r3, #45	; 0x2d
 800808e:	4880      	ldr	r0, [pc, #512]	; (8008290 <_printf_float+0x2d8>)
 8008090:	bfb8      	it	lt
 8008092:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8008096:	4b7f      	ldr	r3, [pc, #508]	; (8008294 <_printf_float+0x2dc>)
 8008098:	e7d3      	b.n	8008042 <_printf_float+0x8a>
 800809a:	6863      	ldr	r3, [r4, #4]
 800809c:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 80080a0:	1c5a      	adds	r2, r3, #1
 80080a2:	d142      	bne.n	800812a <_printf_float+0x172>
 80080a4:	2306      	movs	r3, #6
 80080a6:	6063      	str	r3, [r4, #4]
 80080a8:	2200      	movs	r2, #0
 80080aa:	9206      	str	r2, [sp, #24]
 80080ac:	aa0e      	add	r2, sp, #56	; 0x38
 80080ae:	e9cd 9204 	strd	r9, r2, [sp, #16]
 80080b2:	aa0d      	add	r2, sp, #52	; 0x34
 80080b4:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 80080b8:	9203      	str	r2, [sp, #12]
 80080ba:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 80080be:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80080c2:	6023      	str	r3, [r4, #0]
 80080c4:	6863      	ldr	r3, [r4, #4]
 80080c6:	4642      	mov	r2, r8
 80080c8:	9300      	str	r3, [sp, #0]
 80080ca:	4628      	mov	r0, r5
 80080cc:	4653      	mov	r3, sl
 80080ce:	910b      	str	r1, [sp, #44]	; 0x2c
 80080d0:	f7ff fed4 	bl	8007e7c <__cvt>
 80080d4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80080d6:	4680      	mov	r8, r0
 80080d8:	2947      	cmp	r1, #71	; 0x47
 80080da:	990d      	ldr	r1, [sp, #52]	; 0x34
 80080dc:	d108      	bne.n	80080f0 <_printf_float+0x138>
 80080de:	1cc8      	adds	r0, r1, #3
 80080e0:	db02      	blt.n	80080e8 <_printf_float+0x130>
 80080e2:	6863      	ldr	r3, [r4, #4]
 80080e4:	4299      	cmp	r1, r3
 80080e6:	dd40      	ble.n	800816a <_printf_float+0x1b2>
 80080e8:	f1a9 0902 	sub.w	r9, r9, #2
 80080ec:	fa5f f989 	uxtb.w	r9, r9
 80080f0:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80080f4:	d81f      	bhi.n	8008136 <_printf_float+0x17e>
 80080f6:	464a      	mov	r2, r9
 80080f8:	3901      	subs	r1, #1
 80080fa:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80080fe:	910d      	str	r1, [sp, #52]	; 0x34
 8008100:	f7ff ff1b 	bl	8007f3a <__exponent>
 8008104:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008106:	4682      	mov	sl, r0
 8008108:	1813      	adds	r3, r2, r0
 800810a:	2a01      	cmp	r2, #1
 800810c:	6123      	str	r3, [r4, #16]
 800810e:	dc02      	bgt.n	8008116 <_printf_float+0x15e>
 8008110:	6822      	ldr	r2, [r4, #0]
 8008112:	07d2      	lsls	r2, r2, #31
 8008114:	d501      	bpl.n	800811a <_printf_float+0x162>
 8008116:	3301      	adds	r3, #1
 8008118:	6123      	str	r3, [r4, #16]
 800811a:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800811e:	2b00      	cmp	r3, #0
 8008120:	d09b      	beq.n	800805a <_printf_float+0xa2>
 8008122:	232d      	movs	r3, #45	; 0x2d
 8008124:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008128:	e797      	b.n	800805a <_printf_float+0xa2>
 800812a:	2947      	cmp	r1, #71	; 0x47
 800812c:	d1bc      	bne.n	80080a8 <_printf_float+0xf0>
 800812e:	2b00      	cmp	r3, #0
 8008130:	d1ba      	bne.n	80080a8 <_printf_float+0xf0>
 8008132:	2301      	movs	r3, #1
 8008134:	e7b7      	b.n	80080a6 <_printf_float+0xee>
 8008136:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800813a:	d118      	bne.n	800816e <_printf_float+0x1b6>
 800813c:	2900      	cmp	r1, #0
 800813e:	6863      	ldr	r3, [r4, #4]
 8008140:	dd0b      	ble.n	800815a <_printf_float+0x1a2>
 8008142:	6121      	str	r1, [r4, #16]
 8008144:	b913      	cbnz	r3, 800814c <_printf_float+0x194>
 8008146:	6822      	ldr	r2, [r4, #0]
 8008148:	07d0      	lsls	r0, r2, #31
 800814a:	d502      	bpl.n	8008152 <_printf_float+0x19a>
 800814c:	3301      	adds	r3, #1
 800814e:	440b      	add	r3, r1
 8008150:	6123      	str	r3, [r4, #16]
 8008152:	f04f 0a00 	mov.w	sl, #0
 8008156:	65a1      	str	r1, [r4, #88]	; 0x58
 8008158:	e7df      	b.n	800811a <_printf_float+0x162>
 800815a:	b913      	cbnz	r3, 8008162 <_printf_float+0x1aa>
 800815c:	6822      	ldr	r2, [r4, #0]
 800815e:	07d2      	lsls	r2, r2, #31
 8008160:	d501      	bpl.n	8008166 <_printf_float+0x1ae>
 8008162:	3302      	adds	r3, #2
 8008164:	e7f4      	b.n	8008150 <_printf_float+0x198>
 8008166:	2301      	movs	r3, #1
 8008168:	e7f2      	b.n	8008150 <_printf_float+0x198>
 800816a:	f04f 0967 	mov.w	r9, #103	; 0x67
 800816e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008170:	4299      	cmp	r1, r3
 8008172:	db05      	blt.n	8008180 <_printf_float+0x1c8>
 8008174:	6823      	ldr	r3, [r4, #0]
 8008176:	6121      	str	r1, [r4, #16]
 8008178:	07d8      	lsls	r0, r3, #31
 800817a:	d5ea      	bpl.n	8008152 <_printf_float+0x19a>
 800817c:	1c4b      	adds	r3, r1, #1
 800817e:	e7e7      	b.n	8008150 <_printf_float+0x198>
 8008180:	2900      	cmp	r1, #0
 8008182:	bfcc      	ite	gt
 8008184:	2201      	movgt	r2, #1
 8008186:	f1c1 0202 	rsble	r2, r1, #2
 800818a:	4413      	add	r3, r2
 800818c:	e7e0      	b.n	8008150 <_printf_float+0x198>
 800818e:	6823      	ldr	r3, [r4, #0]
 8008190:	055a      	lsls	r2, r3, #21
 8008192:	d407      	bmi.n	80081a4 <_printf_float+0x1ec>
 8008194:	6923      	ldr	r3, [r4, #16]
 8008196:	4642      	mov	r2, r8
 8008198:	4631      	mov	r1, r6
 800819a:	4628      	mov	r0, r5
 800819c:	47b8      	blx	r7
 800819e:	3001      	adds	r0, #1
 80081a0:	d12b      	bne.n	80081fa <_printf_float+0x242>
 80081a2:	e764      	b.n	800806e <_printf_float+0xb6>
 80081a4:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80081a8:	f240 80dd 	bls.w	8008366 <_printf_float+0x3ae>
 80081ac:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80081b0:	2200      	movs	r2, #0
 80081b2:	2300      	movs	r3, #0
 80081b4:	f7f8 fbf8 	bl	80009a8 <__aeabi_dcmpeq>
 80081b8:	2800      	cmp	r0, #0
 80081ba:	d033      	beq.n	8008224 <_printf_float+0x26c>
 80081bc:	2301      	movs	r3, #1
 80081be:	4631      	mov	r1, r6
 80081c0:	4628      	mov	r0, r5
 80081c2:	4a35      	ldr	r2, [pc, #212]	; (8008298 <_printf_float+0x2e0>)
 80081c4:	47b8      	blx	r7
 80081c6:	3001      	adds	r0, #1
 80081c8:	f43f af51 	beq.w	800806e <_printf_float+0xb6>
 80081cc:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80081d0:	429a      	cmp	r2, r3
 80081d2:	db02      	blt.n	80081da <_printf_float+0x222>
 80081d4:	6823      	ldr	r3, [r4, #0]
 80081d6:	07d8      	lsls	r0, r3, #31
 80081d8:	d50f      	bpl.n	80081fa <_printf_float+0x242>
 80081da:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80081de:	4631      	mov	r1, r6
 80081e0:	4628      	mov	r0, r5
 80081e2:	47b8      	blx	r7
 80081e4:	3001      	adds	r0, #1
 80081e6:	f43f af42 	beq.w	800806e <_printf_float+0xb6>
 80081ea:	f04f 0800 	mov.w	r8, #0
 80081ee:	f104 091a 	add.w	r9, r4, #26
 80081f2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80081f4:	3b01      	subs	r3, #1
 80081f6:	4543      	cmp	r3, r8
 80081f8:	dc09      	bgt.n	800820e <_printf_float+0x256>
 80081fa:	6823      	ldr	r3, [r4, #0]
 80081fc:	079b      	lsls	r3, r3, #30
 80081fe:	f100 8102 	bmi.w	8008406 <_printf_float+0x44e>
 8008202:	68e0      	ldr	r0, [r4, #12]
 8008204:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008206:	4298      	cmp	r0, r3
 8008208:	bfb8      	it	lt
 800820a:	4618      	movlt	r0, r3
 800820c:	e731      	b.n	8008072 <_printf_float+0xba>
 800820e:	2301      	movs	r3, #1
 8008210:	464a      	mov	r2, r9
 8008212:	4631      	mov	r1, r6
 8008214:	4628      	mov	r0, r5
 8008216:	47b8      	blx	r7
 8008218:	3001      	adds	r0, #1
 800821a:	f43f af28 	beq.w	800806e <_printf_float+0xb6>
 800821e:	f108 0801 	add.w	r8, r8, #1
 8008222:	e7e6      	b.n	80081f2 <_printf_float+0x23a>
 8008224:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008226:	2b00      	cmp	r3, #0
 8008228:	dc38      	bgt.n	800829c <_printf_float+0x2e4>
 800822a:	2301      	movs	r3, #1
 800822c:	4631      	mov	r1, r6
 800822e:	4628      	mov	r0, r5
 8008230:	4a19      	ldr	r2, [pc, #100]	; (8008298 <_printf_float+0x2e0>)
 8008232:	47b8      	blx	r7
 8008234:	3001      	adds	r0, #1
 8008236:	f43f af1a 	beq.w	800806e <_printf_float+0xb6>
 800823a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800823e:	4313      	orrs	r3, r2
 8008240:	d102      	bne.n	8008248 <_printf_float+0x290>
 8008242:	6823      	ldr	r3, [r4, #0]
 8008244:	07d9      	lsls	r1, r3, #31
 8008246:	d5d8      	bpl.n	80081fa <_printf_float+0x242>
 8008248:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800824c:	4631      	mov	r1, r6
 800824e:	4628      	mov	r0, r5
 8008250:	47b8      	blx	r7
 8008252:	3001      	adds	r0, #1
 8008254:	f43f af0b 	beq.w	800806e <_printf_float+0xb6>
 8008258:	f04f 0900 	mov.w	r9, #0
 800825c:	f104 0a1a 	add.w	sl, r4, #26
 8008260:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008262:	425b      	negs	r3, r3
 8008264:	454b      	cmp	r3, r9
 8008266:	dc01      	bgt.n	800826c <_printf_float+0x2b4>
 8008268:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800826a:	e794      	b.n	8008196 <_printf_float+0x1de>
 800826c:	2301      	movs	r3, #1
 800826e:	4652      	mov	r2, sl
 8008270:	4631      	mov	r1, r6
 8008272:	4628      	mov	r0, r5
 8008274:	47b8      	blx	r7
 8008276:	3001      	adds	r0, #1
 8008278:	f43f aef9 	beq.w	800806e <_printf_float+0xb6>
 800827c:	f109 0901 	add.w	r9, r9, #1
 8008280:	e7ee      	b.n	8008260 <_printf_float+0x2a8>
 8008282:	bf00      	nop
 8008284:	7fefffff 	.word	0x7fefffff
 8008288:	0800c204 	.word	0x0800c204
 800828c:	0800c208 	.word	0x0800c208
 8008290:	0800c210 	.word	0x0800c210
 8008294:	0800c20c 	.word	0x0800c20c
 8008298:	0800c214 	.word	0x0800c214
 800829c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800829e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80082a0:	429a      	cmp	r2, r3
 80082a2:	bfa8      	it	ge
 80082a4:	461a      	movge	r2, r3
 80082a6:	2a00      	cmp	r2, #0
 80082a8:	4691      	mov	r9, r2
 80082aa:	dc37      	bgt.n	800831c <_printf_float+0x364>
 80082ac:	f04f 0b00 	mov.w	fp, #0
 80082b0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80082b4:	f104 021a 	add.w	r2, r4, #26
 80082b8:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80082bc:	ebaa 0309 	sub.w	r3, sl, r9
 80082c0:	455b      	cmp	r3, fp
 80082c2:	dc33      	bgt.n	800832c <_printf_float+0x374>
 80082c4:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80082c8:	429a      	cmp	r2, r3
 80082ca:	db3b      	blt.n	8008344 <_printf_float+0x38c>
 80082cc:	6823      	ldr	r3, [r4, #0]
 80082ce:	07da      	lsls	r2, r3, #31
 80082d0:	d438      	bmi.n	8008344 <_printf_float+0x38c>
 80082d2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80082d4:	990d      	ldr	r1, [sp, #52]	; 0x34
 80082d6:	eba2 030a 	sub.w	r3, r2, sl
 80082da:	eba2 0901 	sub.w	r9, r2, r1
 80082de:	4599      	cmp	r9, r3
 80082e0:	bfa8      	it	ge
 80082e2:	4699      	movge	r9, r3
 80082e4:	f1b9 0f00 	cmp.w	r9, #0
 80082e8:	dc34      	bgt.n	8008354 <_printf_float+0x39c>
 80082ea:	f04f 0800 	mov.w	r8, #0
 80082ee:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80082f2:	f104 0a1a 	add.w	sl, r4, #26
 80082f6:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80082fa:	1a9b      	subs	r3, r3, r2
 80082fc:	eba3 0309 	sub.w	r3, r3, r9
 8008300:	4543      	cmp	r3, r8
 8008302:	f77f af7a 	ble.w	80081fa <_printf_float+0x242>
 8008306:	2301      	movs	r3, #1
 8008308:	4652      	mov	r2, sl
 800830a:	4631      	mov	r1, r6
 800830c:	4628      	mov	r0, r5
 800830e:	47b8      	blx	r7
 8008310:	3001      	adds	r0, #1
 8008312:	f43f aeac 	beq.w	800806e <_printf_float+0xb6>
 8008316:	f108 0801 	add.w	r8, r8, #1
 800831a:	e7ec      	b.n	80082f6 <_printf_float+0x33e>
 800831c:	4613      	mov	r3, r2
 800831e:	4631      	mov	r1, r6
 8008320:	4642      	mov	r2, r8
 8008322:	4628      	mov	r0, r5
 8008324:	47b8      	blx	r7
 8008326:	3001      	adds	r0, #1
 8008328:	d1c0      	bne.n	80082ac <_printf_float+0x2f4>
 800832a:	e6a0      	b.n	800806e <_printf_float+0xb6>
 800832c:	2301      	movs	r3, #1
 800832e:	4631      	mov	r1, r6
 8008330:	4628      	mov	r0, r5
 8008332:	920b      	str	r2, [sp, #44]	; 0x2c
 8008334:	47b8      	blx	r7
 8008336:	3001      	adds	r0, #1
 8008338:	f43f ae99 	beq.w	800806e <_printf_float+0xb6>
 800833c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800833e:	f10b 0b01 	add.w	fp, fp, #1
 8008342:	e7b9      	b.n	80082b8 <_printf_float+0x300>
 8008344:	4631      	mov	r1, r6
 8008346:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800834a:	4628      	mov	r0, r5
 800834c:	47b8      	blx	r7
 800834e:	3001      	adds	r0, #1
 8008350:	d1bf      	bne.n	80082d2 <_printf_float+0x31a>
 8008352:	e68c      	b.n	800806e <_printf_float+0xb6>
 8008354:	464b      	mov	r3, r9
 8008356:	4631      	mov	r1, r6
 8008358:	4628      	mov	r0, r5
 800835a:	eb08 020a 	add.w	r2, r8, sl
 800835e:	47b8      	blx	r7
 8008360:	3001      	adds	r0, #1
 8008362:	d1c2      	bne.n	80082ea <_printf_float+0x332>
 8008364:	e683      	b.n	800806e <_printf_float+0xb6>
 8008366:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008368:	2a01      	cmp	r2, #1
 800836a:	dc01      	bgt.n	8008370 <_printf_float+0x3b8>
 800836c:	07db      	lsls	r3, r3, #31
 800836e:	d537      	bpl.n	80083e0 <_printf_float+0x428>
 8008370:	2301      	movs	r3, #1
 8008372:	4642      	mov	r2, r8
 8008374:	4631      	mov	r1, r6
 8008376:	4628      	mov	r0, r5
 8008378:	47b8      	blx	r7
 800837a:	3001      	adds	r0, #1
 800837c:	f43f ae77 	beq.w	800806e <_printf_float+0xb6>
 8008380:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008384:	4631      	mov	r1, r6
 8008386:	4628      	mov	r0, r5
 8008388:	47b8      	blx	r7
 800838a:	3001      	adds	r0, #1
 800838c:	f43f ae6f 	beq.w	800806e <_printf_float+0xb6>
 8008390:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008394:	2200      	movs	r2, #0
 8008396:	2300      	movs	r3, #0
 8008398:	f7f8 fb06 	bl	80009a8 <__aeabi_dcmpeq>
 800839c:	b9d8      	cbnz	r0, 80083d6 <_printf_float+0x41e>
 800839e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80083a0:	f108 0201 	add.w	r2, r8, #1
 80083a4:	3b01      	subs	r3, #1
 80083a6:	4631      	mov	r1, r6
 80083a8:	4628      	mov	r0, r5
 80083aa:	47b8      	blx	r7
 80083ac:	3001      	adds	r0, #1
 80083ae:	d10e      	bne.n	80083ce <_printf_float+0x416>
 80083b0:	e65d      	b.n	800806e <_printf_float+0xb6>
 80083b2:	2301      	movs	r3, #1
 80083b4:	464a      	mov	r2, r9
 80083b6:	4631      	mov	r1, r6
 80083b8:	4628      	mov	r0, r5
 80083ba:	47b8      	blx	r7
 80083bc:	3001      	adds	r0, #1
 80083be:	f43f ae56 	beq.w	800806e <_printf_float+0xb6>
 80083c2:	f108 0801 	add.w	r8, r8, #1
 80083c6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80083c8:	3b01      	subs	r3, #1
 80083ca:	4543      	cmp	r3, r8
 80083cc:	dcf1      	bgt.n	80083b2 <_printf_float+0x3fa>
 80083ce:	4653      	mov	r3, sl
 80083d0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80083d4:	e6e0      	b.n	8008198 <_printf_float+0x1e0>
 80083d6:	f04f 0800 	mov.w	r8, #0
 80083da:	f104 091a 	add.w	r9, r4, #26
 80083de:	e7f2      	b.n	80083c6 <_printf_float+0x40e>
 80083e0:	2301      	movs	r3, #1
 80083e2:	4642      	mov	r2, r8
 80083e4:	e7df      	b.n	80083a6 <_printf_float+0x3ee>
 80083e6:	2301      	movs	r3, #1
 80083e8:	464a      	mov	r2, r9
 80083ea:	4631      	mov	r1, r6
 80083ec:	4628      	mov	r0, r5
 80083ee:	47b8      	blx	r7
 80083f0:	3001      	adds	r0, #1
 80083f2:	f43f ae3c 	beq.w	800806e <_printf_float+0xb6>
 80083f6:	f108 0801 	add.w	r8, r8, #1
 80083fa:	68e3      	ldr	r3, [r4, #12]
 80083fc:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80083fe:	1a5b      	subs	r3, r3, r1
 8008400:	4543      	cmp	r3, r8
 8008402:	dcf0      	bgt.n	80083e6 <_printf_float+0x42e>
 8008404:	e6fd      	b.n	8008202 <_printf_float+0x24a>
 8008406:	f04f 0800 	mov.w	r8, #0
 800840a:	f104 0919 	add.w	r9, r4, #25
 800840e:	e7f4      	b.n	80083fa <_printf_float+0x442>

08008410 <_printf_common>:
 8008410:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008414:	4616      	mov	r6, r2
 8008416:	4699      	mov	r9, r3
 8008418:	688a      	ldr	r2, [r1, #8]
 800841a:	690b      	ldr	r3, [r1, #16]
 800841c:	4607      	mov	r7, r0
 800841e:	4293      	cmp	r3, r2
 8008420:	bfb8      	it	lt
 8008422:	4613      	movlt	r3, r2
 8008424:	6033      	str	r3, [r6, #0]
 8008426:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800842a:	460c      	mov	r4, r1
 800842c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008430:	b10a      	cbz	r2, 8008436 <_printf_common+0x26>
 8008432:	3301      	adds	r3, #1
 8008434:	6033      	str	r3, [r6, #0]
 8008436:	6823      	ldr	r3, [r4, #0]
 8008438:	0699      	lsls	r1, r3, #26
 800843a:	bf42      	ittt	mi
 800843c:	6833      	ldrmi	r3, [r6, #0]
 800843e:	3302      	addmi	r3, #2
 8008440:	6033      	strmi	r3, [r6, #0]
 8008442:	6825      	ldr	r5, [r4, #0]
 8008444:	f015 0506 	ands.w	r5, r5, #6
 8008448:	d106      	bne.n	8008458 <_printf_common+0x48>
 800844a:	f104 0a19 	add.w	sl, r4, #25
 800844e:	68e3      	ldr	r3, [r4, #12]
 8008450:	6832      	ldr	r2, [r6, #0]
 8008452:	1a9b      	subs	r3, r3, r2
 8008454:	42ab      	cmp	r3, r5
 8008456:	dc28      	bgt.n	80084aa <_printf_common+0x9a>
 8008458:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800845c:	1e13      	subs	r3, r2, #0
 800845e:	6822      	ldr	r2, [r4, #0]
 8008460:	bf18      	it	ne
 8008462:	2301      	movne	r3, #1
 8008464:	0692      	lsls	r2, r2, #26
 8008466:	d42d      	bmi.n	80084c4 <_printf_common+0xb4>
 8008468:	4649      	mov	r1, r9
 800846a:	4638      	mov	r0, r7
 800846c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008470:	47c0      	blx	r8
 8008472:	3001      	adds	r0, #1
 8008474:	d020      	beq.n	80084b8 <_printf_common+0xa8>
 8008476:	6823      	ldr	r3, [r4, #0]
 8008478:	68e5      	ldr	r5, [r4, #12]
 800847a:	f003 0306 	and.w	r3, r3, #6
 800847e:	2b04      	cmp	r3, #4
 8008480:	bf18      	it	ne
 8008482:	2500      	movne	r5, #0
 8008484:	6832      	ldr	r2, [r6, #0]
 8008486:	f04f 0600 	mov.w	r6, #0
 800848a:	68a3      	ldr	r3, [r4, #8]
 800848c:	bf08      	it	eq
 800848e:	1aad      	subeq	r5, r5, r2
 8008490:	6922      	ldr	r2, [r4, #16]
 8008492:	bf08      	it	eq
 8008494:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008498:	4293      	cmp	r3, r2
 800849a:	bfc4      	itt	gt
 800849c:	1a9b      	subgt	r3, r3, r2
 800849e:	18ed      	addgt	r5, r5, r3
 80084a0:	341a      	adds	r4, #26
 80084a2:	42b5      	cmp	r5, r6
 80084a4:	d11a      	bne.n	80084dc <_printf_common+0xcc>
 80084a6:	2000      	movs	r0, #0
 80084a8:	e008      	b.n	80084bc <_printf_common+0xac>
 80084aa:	2301      	movs	r3, #1
 80084ac:	4652      	mov	r2, sl
 80084ae:	4649      	mov	r1, r9
 80084b0:	4638      	mov	r0, r7
 80084b2:	47c0      	blx	r8
 80084b4:	3001      	adds	r0, #1
 80084b6:	d103      	bne.n	80084c0 <_printf_common+0xb0>
 80084b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80084bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80084c0:	3501      	adds	r5, #1
 80084c2:	e7c4      	b.n	800844e <_printf_common+0x3e>
 80084c4:	2030      	movs	r0, #48	; 0x30
 80084c6:	18e1      	adds	r1, r4, r3
 80084c8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80084cc:	1c5a      	adds	r2, r3, #1
 80084ce:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80084d2:	4422      	add	r2, r4
 80084d4:	3302      	adds	r3, #2
 80084d6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80084da:	e7c5      	b.n	8008468 <_printf_common+0x58>
 80084dc:	2301      	movs	r3, #1
 80084de:	4622      	mov	r2, r4
 80084e0:	4649      	mov	r1, r9
 80084e2:	4638      	mov	r0, r7
 80084e4:	47c0      	blx	r8
 80084e6:	3001      	adds	r0, #1
 80084e8:	d0e6      	beq.n	80084b8 <_printf_common+0xa8>
 80084ea:	3601      	adds	r6, #1
 80084ec:	e7d9      	b.n	80084a2 <_printf_common+0x92>
	...

080084f0 <_printf_i>:
 80084f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80084f4:	460c      	mov	r4, r1
 80084f6:	7e27      	ldrb	r7, [r4, #24]
 80084f8:	4691      	mov	r9, r2
 80084fa:	2f78      	cmp	r7, #120	; 0x78
 80084fc:	4680      	mov	r8, r0
 80084fe:	469a      	mov	sl, r3
 8008500:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008502:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008506:	d807      	bhi.n	8008518 <_printf_i+0x28>
 8008508:	2f62      	cmp	r7, #98	; 0x62
 800850a:	d80a      	bhi.n	8008522 <_printf_i+0x32>
 800850c:	2f00      	cmp	r7, #0
 800850e:	f000 80d9 	beq.w	80086c4 <_printf_i+0x1d4>
 8008512:	2f58      	cmp	r7, #88	; 0x58
 8008514:	f000 80a4 	beq.w	8008660 <_printf_i+0x170>
 8008518:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800851c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008520:	e03a      	b.n	8008598 <_printf_i+0xa8>
 8008522:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008526:	2b15      	cmp	r3, #21
 8008528:	d8f6      	bhi.n	8008518 <_printf_i+0x28>
 800852a:	a001      	add	r0, pc, #4	; (adr r0, 8008530 <_printf_i+0x40>)
 800852c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8008530:	08008589 	.word	0x08008589
 8008534:	0800859d 	.word	0x0800859d
 8008538:	08008519 	.word	0x08008519
 800853c:	08008519 	.word	0x08008519
 8008540:	08008519 	.word	0x08008519
 8008544:	08008519 	.word	0x08008519
 8008548:	0800859d 	.word	0x0800859d
 800854c:	08008519 	.word	0x08008519
 8008550:	08008519 	.word	0x08008519
 8008554:	08008519 	.word	0x08008519
 8008558:	08008519 	.word	0x08008519
 800855c:	080086ab 	.word	0x080086ab
 8008560:	080085cd 	.word	0x080085cd
 8008564:	0800868d 	.word	0x0800868d
 8008568:	08008519 	.word	0x08008519
 800856c:	08008519 	.word	0x08008519
 8008570:	080086cd 	.word	0x080086cd
 8008574:	08008519 	.word	0x08008519
 8008578:	080085cd 	.word	0x080085cd
 800857c:	08008519 	.word	0x08008519
 8008580:	08008519 	.word	0x08008519
 8008584:	08008695 	.word	0x08008695
 8008588:	680b      	ldr	r3, [r1, #0]
 800858a:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800858e:	1d1a      	adds	r2, r3, #4
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	600a      	str	r2, [r1, #0]
 8008594:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008598:	2301      	movs	r3, #1
 800859a:	e0a4      	b.n	80086e6 <_printf_i+0x1f6>
 800859c:	6825      	ldr	r5, [r4, #0]
 800859e:	6808      	ldr	r0, [r1, #0]
 80085a0:	062e      	lsls	r6, r5, #24
 80085a2:	f100 0304 	add.w	r3, r0, #4
 80085a6:	d50a      	bpl.n	80085be <_printf_i+0xce>
 80085a8:	6805      	ldr	r5, [r0, #0]
 80085aa:	600b      	str	r3, [r1, #0]
 80085ac:	2d00      	cmp	r5, #0
 80085ae:	da03      	bge.n	80085b8 <_printf_i+0xc8>
 80085b0:	232d      	movs	r3, #45	; 0x2d
 80085b2:	426d      	negs	r5, r5
 80085b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80085b8:	230a      	movs	r3, #10
 80085ba:	485e      	ldr	r0, [pc, #376]	; (8008734 <_printf_i+0x244>)
 80085bc:	e019      	b.n	80085f2 <_printf_i+0x102>
 80085be:	f015 0f40 	tst.w	r5, #64	; 0x40
 80085c2:	6805      	ldr	r5, [r0, #0]
 80085c4:	600b      	str	r3, [r1, #0]
 80085c6:	bf18      	it	ne
 80085c8:	b22d      	sxthne	r5, r5
 80085ca:	e7ef      	b.n	80085ac <_printf_i+0xbc>
 80085cc:	680b      	ldr	r3, [r1, #0]
 80085ce:	6825      	ldr	r5, [r4, #0]
 80085d0:	1d18      	adds	r0, r3, #4
 80085d2:	6008      	str	r0, [r1, #0]
 80085d4:	0628      	lsls	r0, r5, #24
 80085d6:	d501      	bpl.n	80085dc <_printf_i+0xec>
 80085d8:	681d      	ldr	r5, [r3, #0]
 80085da:	e002      	b.n	80085e2 <_printf_i+0xf2>
 80085dc:	0669      	lsls	r1, r5, #25
 80085de:	d5fb      	bpl.n	80085d8 <_printf_i+0xe8>
 80085e0:	881d      	ldrh	r5, [r3, #0]
 80085e2:	2f6f      	cmp	r7, #111	; 0x6f
 80085e4:	bf0c      	ite	eq
 80085e6:	2308      	moveq	r3, #8
 80085e8:	230a      	movne	r3, #10
 80085ea:	4852      	ldr	r0, [pc, #328]	; (8008734 <_printf_i+0x244>)
 80085ec:	2100      	movs	r1, #0
 80085ee:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80085f2:	6866      	ldr	r6, [r4, #4]
 80085f4:	2e00      	cmp	r6, #0
 80085f6:	bfa8      	it	ge
 80085f8:	6821      	ldrge	r1, [r4, #0]
 80085fa:	60a6      	str	r6, [r4, #8]
 80085fc:	bfa4      	itt	ge
 80085fe:	f021 0104 	bicge.w	r1, r1, #4
 8008602:	6021      	strge	r1, [r4, #0]
 8008604:	b90d      	cbnz	r5, 800860a <_printf_i+0x11a>
 8008606:	2e00      	cmp	r6, #0
 8008608:	d04d      	beq.n	80086a6 <_printf_i+0x1b6>
 800860a:	4616      	mov	r6, r2
 800860c:	fbb5 f1f3 	udiv	r1, r5, r3
 8008610:	fb03 5711 	mls	r7, r3, r1, r5
 8008614:	5dc7      	ldrb	r7, [r0, r7]
 8008616:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800861a:	462f      	mov	r7, r5
 800861c:	42bb      	cmp	r3, r7
 800861e:	460d      	mov	r5, r1
 8008620:	d9f4      	bls.n	800860c <_printf_i+0x11c>
 8008622:	2b08      	cmp	r3, #8
 8008624:	d10b      	bne.n	800863e <_printf_i+0x14e>
 8008626:	6823      	ldr	r3, [r4, #0]
 8008628:	07df      	lsls	r7, r3, #31
 800862a:	d508      	bpl.n	800863e <_printf_i+0x14e>
 800862c:	6923      	ldr	r3, [r4, #16]
 800862e:	6861      	ldr	r1, [r4, #4]
 8008630:	4299      	cmp	r1, r3
 8008632:	bfde      	ittt	le
 8008634:	2330      	movle	r3, #48	; 0x30
 8008636:	f806 3c01 	strble.w	r3, [r6, #-1]
 800863a:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 800863e:	1b92      	subs	r2, r2, r6
 8008640:	6122      	str	r2, [r4, #16]
 8008642:	464b      	mov	r3, r9
 8008644:	4621      	mov	r1, r4
 8008646:	4640      	mov	r0, r8
 8008648:	f8cd a000 	str.w	sl, [sp]
 800864c:	aa03      	add	r2, sp, #12
 800864e:	f7ff fedf 	bl	8008410 <_printf_common>
 8008652:	3001      	adds	r0, #1
 8008654:	d14c      	bne.n	80086f0 <_printf_i+0x200>
 8008656:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800865a:	b004      	add	sp, #16
 800865c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008660:	4834      	ldr	r0, [pc, #208]	; (8008734 <_printf_i+0x244>)
 8008662:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008666:	680e      	ldr	r6, [r1, #0]
 8008668:	6823      	ldr	r3, [r4, #0]
 800866a:	f856 5b04 	ldr.w	r5, [r6], #4
 800866e:	061f      	lsls	r7, r3, #24
 8008670:	600e      	str	r6, [r1, #0]
 8008672:	d514      	bpl.n	800869e <_printf_i+0x1ae>
 8008674:	07d9      	lsls	r1, r3, #31
 8008676:	bf44      	itt	mi
 8008678:	f043 0320 	orrmi.w	r3, r3, #32
 800867c:	6023      	strmi	r3, [r4, #0]
 800867e:	b91d      	cbnz	r5, 8008688 <_printf_i+0x198>
 8008680:	6823      	ldr	r3, [r4, #0]
 8008682:	f023 0320 	bic.w	r3, r3, #32
 8008686:	6023      	str	r3, [r4, #0]
 8008688:	2310      	movs	r3, #16
 800868a:	e7af      	b.n	80085ec <_printf_i+0xfc>
 800868c:	6823      	ldr	r3, [r4, #0]
 800868e:	f043 0320 	orr.w	r3, r3, #32
 8008692:	6023      	str	r3, [r4, #0]
 8008694:	2378      	movs	r3, #120	; 0x78
 8008696:	4828      	ldr	r0, [pc, #160]	; (8008738 <_printf_i+0x248>)
 8008698:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800869c:	e7e3      	b.n	8008666 <_printf_i+0x176>
 800869e:	065e      	lsls	r6, r3, #25
 80086a0:	bf48      	it	mi
 80086a2:	b2ad      	uxthmi	r5, r5
 80086a4:	e7e6      	b.n	8008674 <_printf_i+0x184>
 80086a6:	4616      	mov	r6, r2
 80086a8:	e7bb      	b.n	8008622 <_printf_i+0x132>
 80086aa:	680b      	ldr	r3, [r1, #0]
 80086ac:	6826      	ldr	r6, [r4, #0]
 80086ae:	1d1d      	adds	r5, r3, #4
 80086b0:	6960      	ldr	r0, [r4, #20]
 80086b2:	600d      	str	r5, [r1, #0]
 80086b4:	0635      	lsls	r5, r6, #24
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	d501      	bpl.n	80086be <_printf_i+0x1ce>
 80086ba:	6018      	str	r0, [r3, #0]
 80086bc:	e002      	b.n	80086c4 <_printf_i+0x1d4>
 80086be:	0671      	lsls	r1, r6, #25
 80086c0:	d5fb      	bpl.n	80086ba <_printf_i+0x1ca>
 80086c2:	8018      	strh	r0, [r3, #0]
 80086c4:	2300      	movs	r3, #0
 80086c6:	4616      	mov	r6, r2
 80086c8:	6123      	str	r3, [r4, #16]
 80086ca:	e7ba      	b.n	8008642 <_printf_i+0x152>
 80086cc:	680b      	ldr	r3, [r1, #0]
 80086ce:	1d1a      	adds	r2, r3, #4
 80086d0:	600a      	str	r2, [r1, #0]
 80086d2:	681e      	ldr	r6, [r3, #0]
 80086d4:	2100      	movs	r1, #0
 80086d6:	4630      	mov	r0, r6
 80086d8:	6862      	ldr	r2, [r4, #4]
 80086da:	f000 fed7 	bl	800948c <memchr>
 80086de:	b108      	cbz	r0, 80086e4 <_printf_i+0x1f4>
 80086e0:	1b80      	subs	r0, r0, r6
 80086e2:	6060      	str	r0, [r4, #4]
 80086e4:	6863      	ldr	r3, [r4, #4]
 80086e6:	6123      	str	r3, [r4, #16]
 80086e8:	2300      	movs	r3, #0
 80086ea:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80086ee:	e7a8      	b.n	8008642 <_printf_i+0x152>
 80086f0:	4632      	mov	r2, r6
 80086f2:	4649      	mov	r1, r9
 80086f4:	4640      	mov	r0, r8
 80086f6:	6923      	ldr	r3, [r4, #16]
 80086f8:	47d0      	blx	sl
 80086fa:	3001      	adds	r0, #1
 80086fc:	d0ab      	beq.n	8008656 <_printf_i+0x166>
 80086fe:	6823      	ldr	r3, [r4, #0]
 8008700:	079b      	lsls	r3, r3, #30
 8008702:	d413      	bmi.n	800872c <_printf_i+0x23c>
 8008704:	68e0      	ldr	r0, [r4, #12]
 8008706:	9b03      	ldr	r3, [sp, #12]
 8008708:	4298      	cmp	r0, r3
 800870a:	bfb8      	it	lt
 800870c:	4618      	movlt	r0, r3
 800870e:	e7a4      	b.n	800865a <_printf_i+0x16a>
 8008710:	2301      	movs	r3, #1
 8008712:	4632      	mov	r2, r6
 8008714:	4649      	mov	r1, r9
 8008716:	4640      	mov	r0, r8
 8008718:	47d0      	blx	sl
 800871a:	3001      	adds	r0, #1
 800871c:	d09b      	beq.n	8008656 <_printf_i+0x166>
 800871e:	3501      	adds	r5, #1
 8008720:	68e3      	ldr	r3, [r4, #12]
 8008722:	9903      	ldr	r1, [sp, #12]
 8008724:	1a5b      	subs	r3, r3, r1
 8008726:	42ab      	cmp	r3, r5
 8008728:	dcf2      	bgt.n	8008710 <_printf_i+0x220>
 800872a:	e7eb      	b.n	8008704 <_printf_i+0x214>
 800872c:	2500      	movs	r5, #0
 800872e:	f104 0619 	add.w	r6, r4, #25
 8008732:	e7f5      	b.n	8008720 <_printf_i+0x230>
 8008734:	0800c216 	.word	0x0800c216
 8008738:	0800c227 	.word	0x0800c227

0800873c <siprintf>:
 800873c:	b40e      	push	{r1, r2, r3}
 800873e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008742:	b500      	push	{lr}
 8008744:	b09c      	sub	sp, #112	; 0x70
 8008746:	ab1d      	add	r3, sp, #116	; 0x74
 8008748:	9002      	str	r0, [sp, #8]
 800874a:	9006      	str	r0, [sp, #24]
 800874c:	9107      	str	r1, [sp, #28]
 800874e:	9104      	str	r1, [sp, #16]
 8008750:	4808      	ldr	r0, [pc, #32]	; (8008774 <siprintf+0x38>)
 8008752:	4909      	ldr	r1, [pc, #36]	; (8008778 <siprintf+0x3c>)
 8008754:	f853 2b04 	ldr.w	r2, [r3], #4
 8008758:	9105      	str	r1, [sp, #20]
 800875a:	6800      	ldr	r0, [r0, #0]
 800875c:	a902      	add	r1, sp, #8
 800875e:	9301      	str	r3, [sp, #4]
 8008760:	f001 fb42 	bl	8009de8 <_svfiprintf_r>
 8008764:	2200      	movs	r2, #0
 8008766:	9b02      	ldr	r3, [sp, #8]
 8008768:	701a      	strb	r2, [r3, #0]
 800876a:	b01c      	add	sp, #112	; 0x70
 800876c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008770:	b003      	add	sp, #12
 8008772:	4770      	bx	lr
 8008774:	2000001c 	.word	0x2000001c
 8008778:	ffff0208 	.word	0xffff0208

0800877c <quorem>:
 800877c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008780:	6903      	ldr	r3, [r0, #16]
 8008782:	690c      	ldr	r4, [r1, #16]
 8008784:	4607      	mov	r7, r0
 8008786:	42a3      	cmp	r3, r4
 8008788:	f2c0 8083 	blt.w	8008892 <quorem+0x116>
 800878c:	3c01      	subs	r4, #1
 800878e:	f100 0514 	add.w	r5, r0, #20
 8008792:	f101 0814 	add.w	r8, r1, #20
 8008796:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800879a:	9301      	str	r3, [sp, #4]
 800879c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80087a0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80087a4:	3301      	adds	r3, #1
 80087a6:	429a      	cmp	r2, r3
 80087a8:	fbb2 f6f3 	udiv	r6, r2, r3
 80087ac:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80087b0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80087b4:	d332      	bcc.n	800881c <quorem+0xa0>
 80087b6:	f04f 0e00 	mov.w	lr, #0
 80087ba:	4640      	mov	r0, r8
 80087bc:	46ac      	mov	ip, r5
 80087be:	46f2      	mov	sl, lr
 80087c0:	f850 2b04 	ldr.w	r2, [r0], #4
 80087c4:	b293      	uxth	r3, r2
 80087c6:	fb06 e303 	mla	r3, r6, r3, lr
 80087ca:	0c12      	lsrs	r2, r2, #16
 80087cc:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80087d0:	fb06 e202 	mla	r2, r6, r2, lr
 80087d4:	b29b      	uxth	r3, r3
 80087d6:	ebaa 0303 	sub.w	r3, sl, r3
 80087da:	f8dc a000 	ldr.w	sl, [ip]
 80087de:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80087e2:	fa1f fa8a 	uxth.w	sl, sl
 80087e6:	4453      	add	r3, sl
 80087e8:	fa1f fa82 	uxth.w	sl, r2
 80087ec:	f8dc 2000 	ldr.w	r2, [ip]
 80087f0:	4581      	cmp	r9, r0
 80087f2:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 80087f6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80087fa:	b29b      	uxth	r3, r3
 80087fc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008800:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008804:	f84c 3b04 	str.w	r3, [ip], #4
 8008808:	d2da      	bcs.n	80087c0 <quorem+0x44>
 800880a:	f855 300b 	ldr.w	r3, [r5, fp]
 800880e:	b92b      	cbnz	r3, 800881c <quorem+0xa0>
 8008810:	9b01      	ldr	r3, [sp, #4]
 8008812:	3b04      	subs	r3, #4
 8008814:	429d      	cmp	r5, r3
 8008816:	461a      	mov	r2, r3
 8008818:	d32f      	bcc.n	800887a <quorem+0xfe>
 800881a:	613c      	str	r4, [r7, #16]
 800881c:	4638      	mov	r0, r7
 800881e:	f001 f8cb 	bl	80099b8 <__mcmp>
 8008822:	2800      	cmp	r0, #0
 8008824:	db25      	blt.n	8008872 <quorem+0xf6>
 8008826:	4628      	mov	r0, r5
 8008828:	f04f 0c00 	mov.w	ip, #0
 800882c:	3601      	adds	r6, #1
 800882e:	f858 1b04 	ldr.w	r1, [r8], #4
 8008832:	f8d0 e000 	ldr.w	lr, [r0]
 8008836:	b28b      	uxth	r3, r1
 8008838:	ebac 0303 	sub.w	r3, ip, r3
 800883c:	fa1f f28e 	uxth.w	r2, lr
 8008840:	4413      	add	r3, r2
 8008842:	0c0a      	lsrs	r2, r1, #16
 8008844:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008848:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800884c:	b29b      	uxth	r3, r3
 800884e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008852:	45c1      	cmp	r9, r8
 8008854:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008858:	f840 3b04 	str.w	r3, [r0], #4
 800885c:	d2e7      	bcs.n	800882e <quorem+0xb2>
 800885e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008862:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008866:	b922      	cbnz	r2, 8008872 <quorem+0xf6>
 8008868:	3b04      	subs	r3, #4
 800886a:	429d      	cmp	r5, r3
 800886c:	461a      	mov	r2, r3
 800886e:	d30a      	bcc.n	8008886 <quorem+0x10a>
 8008870:	613c      	str	r4, [r7, #16]
 8008872:	4630      	mov	r0, r6
 8008874:	b003      	add	sp, #12
 8008876:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800887a:	6812      	ldr	r2, [r2, #0]
 800887c:	3b04      	subs	r3, #4
 800887e:	2a00      	cmp	r2, #0
 8008880:	d1cb      	bne.n	800881a <quorem+0x9e>
 8008882:	3c01      	subs	r4, #1
 8008884:	e7c6      	b.n	8008814 <quorem+0x98>
 8008886:	6812      	ldr	r2, [r2, #0]
 8008888:	3b04      	subs	r3, #4
 800888a:	2a00      	cmp	r2, #0
 800888c:	d1f0      	bne.n	8008870 <quorem+0xf4>
 800888e:	3c01      	subs	r4, #1
 8008890:	e7eb      	b.n	800886a <quorem+0xee>
 8008892:	2000      	movs	r0, #0
 8008894:	e7ee      	b.n	8008874 <quorem+0xf8>
	...

08008898 <_dtoa_r>:
 8008898:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800889c:	4616      	mov	r6, r2
 800889e:	461f      	mov	r7, r3
 80088a0:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80088a2:	b099      	sub	sp, #100	; 0x64
 80088a4:	4605      	mov	r5, r0
 80088a6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80088aa:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 80088ae:	b974      	cbnz	r4, 80088ce <_dtoa_r+0x36>
 80088b0:	2010      	movs	r0, #16
 80088b2:	f000 fde3 	bl	800947c <malloc>
 80088b6:	4602      	mov	r2, r0
 80088b8:	6268      	str	r0, [r5, #36]	; 0x24
 80088ba:	b920      	cbnz	r0, 80088c6 <_dtoa_r+0x2e>
 80088bc:	21ea      	movs	r1, #234	; 0xea
 80088be:	4bae      	ldr	r3, [pc, #696]	; (8008b78 <_dtoa_r+0x2e0>)
 80088c0:	48ae      	ldr	r0, [pc, #696]	; (8008b7c <_dtoa_r+0x2e4>)
 80088c2:	f001 fba1 	bl	800a008 <__assert_func>
 80088c6:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80088ca:	6004      	str	r4, [r0, #0]
 80088cc:	60c4      	str	r4, [r0, #12]
 80088ce:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80088d0:	6819      	ldr	r1, [r3, #0]
 80088d2:	b151      	cbz	r1, 80088ea <_dtoa_r+0x52>
 80088d4:	685a      	ldr	r2, [r3, #4]
 80088d6:	2301      	movs	r3, #1
 80088d8:	4093      	lsls	r3, r2
 80088da:	604a      	str	r2, [r1, #4]
 80088dc:	608b      	str	r3, [r1, #8]
 80088de:	4628      	mov	r0, r5
 80088e0:	f000 fe30 	bl	8009544 <_Bfree>
 80088e4:	2200      	movs	r2, #0
 80088e6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80088e8:	601a      	str	r2, [r3, #0]
 80088ea:	1e3b      	subs	r3, r7, #0
 80088ec:	bfaf      	iteee	ge
 80088ee:	2300      	movge	r3, #0
 80088f0:	2201      	movlt	r2, #1
 80088f2:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80088f6:	9305      	strlt	r3, [sp, #20]
 80088f8:	bfa8      	it	ge
 80088fa:	f8c8 3000 	strge.w	r3, [r8]
 80088fe:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8008902:	4b9f      	ldr	r3, [pc, #636]	; (8008b80 <_dtoa_r+0x2e8>)
 8008904:	bfb8      	it	lt
 8008906:	f8c8 2000 	strlt.w	r2, [r8]
 800890a:	ea33 0309 	bics.w	r3, r3, r9
 800890e:	d119      	bne.n	8008944 <_dtoa_r+0xac>
 8008910:	f242 730f 	movw	r3, #9999	; 0x270f
 8008914:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8008916:	6013      	str	r3, [r2, #0]
 8008918:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800891c:	4333      	orrs	r3, r6
 800891e:	f000 8580 	beq.w	8009422 <_dtoa_r+0xb8a>
 8008922:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008924:	b953      	cbnz	r3, 800893c <_dtoa_r+0xa4>
 8008926:	4b97      	ldr	r3, [pc, #604]	; (8008b84 <_dtoa_r+0x2ec>)
 8008928:	e022      	b.n	8008970 <_dtoa_r+0xd8>
 800892a:	4b97      	ldr	r3, [pc, #604]	; (8008b88 <_dtoa_r+0x2f0>)
 800892c:	9308      	str	r3, [sp, #32]
 800892e:	3308      	adds	r3, #8
 8008930:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8008932:	6013      	str	r3, [r2, #0]
 8008934:	9808      	ldr	r0, [sp, #32]
 8008936:	b019      	add	sp, #100	; 0x64
 8008938:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800893c:	4b91      	ldr	r3, [pc, #580]	; (8008b84 <_dtoa_r+0x2ec>)
 800893e:	9308      	str	r3, [sp, #32]
 8008940:	3303      	adds	r3, #3
 8008942:	e7f5      	b.n	8008930 <_dtoa_r+0x98>
 8008944:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8008948:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800894c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008950:	2200      	movs	r2, #0
 8008952:	2300      	movs	r3, #0
 8008954:	f7f8 f828 	bl	80009a8 <__aeabi_dcmpeq>
 8008958:	4680      	mov	r8, r0
 800895a:	b158      	cbz	r0, 8008974 <_dtoa_r+0xdc>
 800895c:	2301      	movs	r3, #1
 800895e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8008960:	6013      	str	r3, [r2, #0]
 8008962:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008964:	2b00      	cmp	r3, #0
 8008966:	f000 8559 	beq.w	800941c <_dtoa_r+0xb84>
 800896a:	4888      	ldr	r0, [pc, #544]	; (8008b8c <_dtoa_r+0x2f4>)
 800896c:	6018      	str	r0, [r3, #0]
 800896e:	1e43      	subs	r3, r0, #1
 8008970:	9308      	str	r3, [sp, #32]
 8008972:	e7df      	b.n	8008934 <_dtoa_r+0x9c>
 8008974:	ab16      	add	r3, sp, #88	; 0x58
 8008976:	9301      	str	r3, [sp, #4]
 8008978:	ab17      	add	r3, sp, #92	; 0x5c
 800897a:	9300      	str	r3, [sp, #0]
 800897c:	4628      	mov	r0, r5
 800897e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8008982:	f001 f8c5 	bl	8009b10 <__d2b>
 8008986:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800898a:	4682      	mov	sl, r0
 800898c:	2c00      	cmp	r4, #0
 800898e:	d07e      	beq.n	8008a8e <_dtoa_r+0x1f6>
 8008990:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008994:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008996:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800899a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800899e:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 80089a2:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 80089a6:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 80089aa:	2200      	movs	r2, #0
 80089ac:	4b78      	ldr	r3, [pc, #480]	; (8008b90 <_dtoa_r+0x2f8>)
 80089ae:	f7f7 fbdb 	bl	8000168 <__aeabi_dsub>
 80089b2:	a36b      	add	r3, pc, #428	; (adr r3, 8008b60 <_dtoa_r+0x2c8>)
 80089b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089b8:	f7f7 fd8e 	bl	80004d8 <__aeabi_dmul>
 80089bc:	a36a      	add	r3, pc, #424	; (adr r3, 8008b68 <_dtoa_r+0x2d0>)
 80089be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089c2:	f7f7 fbd3 	bl	800016c <__adddf3>
 80089c6:	4606      	mov	r6, r0
 80089c8:	4620      	mov	r0, r4
 80089ca:	460f      	mov	r7, r1
 80089cc:	f7f7 fd1a 	bl	8000404 <__aeabi_i2d>
 80089d0:	a367      	add	r3, pc, #412	; (adr r3, 8008b70 <_dtoa_r+0x2d8>)
 80089d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089d6:	f7f7 fd7f 	bl	80004d8 <__aeabi_dmul>
 80089da:	4602      	mov	r2, r0
 80089dc:	460b      	mov	r3, r1
 80089de:	4630      	mov	r0, r6
 80089e0:	4639      	mov	r1, r7
 80089e2:	f7f7 fbc3 	bl	800016c <__adddf3>
 80089e6:	4606      	mov	r6, r0
 80089e8:	460f      	mov	r7, r1
 80089ea:	f7f8 f825 	bl	8000a38 <__aeabi_d2iz>
 80089ee:	2200      	movs	r2, #0
 80089f0:	4681      	mov	r9, r0
 80089f2:	2300      	movs	r3, #0
 80089f4:	4630      	mov	r0, r6
 80089f6:	4639      	mov	r1, r7
 80089f8:	f7f7 ffe0 	bl	80009bc <__aeabi_dcmplt>
 80089fc:	b148      	cbz	r0, 8008a12 <_dtoa_r+0x17a>
 80089fe:	4648      	mov	r0, r9
 8008a00:	f7f7 fd00 	bl	8000404 <__aeabi_i2d>
 8008a04:	4632      	mov	r2, r6
 8008a06:	463b      	mov	r3, r7
 8008a08:	f7f7 ffce 	bl	80009a8 <__aeabi_dcmpeq>
 8008a0c:	b908      	cbnz	r0, 8008a12 <_dtoa_r+0x17a>
 8008a0e:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 8008a12:	f1b9 0f16 	cmp.w	r9, #22
 8008a16:	d857      	bhi.n	8008ac8 <_dtoa_r+0x230>
 8008a18:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008a1c:	4b5d      	ldr	r3, [pc, #372]	; (8008b94 <_dtoa_r+0x2fc>)
 8008a1e:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8008a22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a26:	f7f7 ffc9 	bl	80009bc <__aeabi_dcmplt>
 8008a2a:	2800      	cmp	r0, #0
 8008a2c:	d04e      	beq.n	8008acc <_dtoa_r+0x234>
 8008a2e:	2300      	movs	r3, #0
 8008a30:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 8008a34:	930f      	str	r3, [sp, #60]	; 0x3c
 8008a36:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8008a38:	1b1c      	subs	r4, r3, r4
 8008a3a:	1e63      	subs	r3, r4, #1
 8008a3c:	9309      	str	r3, [sp, #36]	; 0x24
 8008a3e:	bf49      	itett	mi
 8008a40:	f1c4 0301 	rsbmi	r3, r4, #1
 8008a44:	2300      	movpl	r3, #0
 8008a46:	9306      	strmi	r3, [sp, #24]
 8008a48:	2300      	movmi	r3, #0
 8008a4a:	bf54      	ite	pl
 8008a4c:	9306      	strpl	r3, [sp, #24]
 8008a4e:	9309      	strmi	r3, [sp, #36]	; 0x24
 8008a50:	f1b9 0f00 	cmp.w	r9, #0
 8008a54:	db3c      	blt.n	8008ad0 <_dtoa_r+0x238>
 8008a56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008a58:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8008a5c:	444b      	add	r3, r9
 8008a5e:	9309      	str	r3, [sp, #36]	; 0x24
 8008a60:	2300      	movs	r3, #0
 8008a62:	930a      	str	r3, [sp, #40]	; 0x28
 8008a64:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008a66:	2b09      	cmp	r3, #9
 8008a68:	d86c      	bhi.n	8008b44 <_dtoa_r+0x2ac>
 8008a6a:	2b05      	cmp	r3, #5
 8008a6c:	bfc4      	itt	gt
 8008a6e:	3b04      	subgt	r3, #4
 8008a70:	9322      	strgt	r3, [sp, #136]	; 0x88
 8008a72:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008a74:	bfc8      	it	gt
 8008a76:	2400      	movgt	r4, #0
 8008a78:	f1a3 0302 	sub.w	r3, r3, #2
 8008a7c:	bfd8      	it	le
 8008a7e:	2401      	movle	r4, #1
 8008a80:	2b03      	cmp	r3, #3
 8008a82:	f200 808b 	bhi.w	8008b9c <_dtoa_r+0x304>
 8008a86:	e8df f003 	tbb	[pc, r3]
 8008a8a:	4f2d      	.short	0x4f2d
 8008a8c:	5b4d      	.short	0x5b4d
 8008a8e:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8008a92:	441c      	add	r4, r3
 8008a94:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8008a98:	2b20      	cmp	r3, #32
 8008a9a:	bfc3      	ittte	gt
 8008a9c:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008aa0:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8008aa4:	fa09 f303 	lslgt.w	r3, r9, r3
 8008aa8:	f1c3 0320 	rsble	r3, r3, #32
 8008aac:	bfc6      	itte	gt
 8008aae:	fa26 f000 	lsrgt.w	r0, r6, r0
 8008ab2:	4318      	orrgt	r0, r3
 8008ab4:	fa06 f003 	lslle.w	r0, r6, r3
 8008ab8:	f7f7 fc94 	bl	80003e4 <__aeabi_ui2d>
 8008abc:	2301      	movs	r3, #1
 8008abe:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8008ac2:	3c01      	subs	r4, #1
 8008ac4:	9313      	str	r3, [sp, #76]	; 0x4c
 8008ac6:	e770      	b.n	80089aa <_dtoa_r+0x112>
 8008ac8:	2301      	movs	r3, #1
 8008aca:	e7b3      	b.n	8008a34 <_dtoa_r+0x19c>
 8008acc:	900f      	str	r0, [sp, #60]	; 0x3c
 8008ace:	e7b2      	b.n	8008a36 <_dtoa_r+0x19e>
 8008ad0:	9b06      	ldr	r3, [sp, #24]
 8008ad2:	eba3 0309 	sub.w	r3, r3, r9
 8008ad6:	9306      	str	r3, [sp, #24]
 8008ad8:	f1c9 0300 	rsb	r3, r9, #0
 8008adc:	930a      	str	r3, [sp, #40]	; 0x28
 8008ade:	2300      	movs	r3, #0
 8008ae0:	930e      	str	r3, [sp, #56]	; 0x38
 8008ae2:	e7bf      	b.n	8008a64 <_dtoa_r+0x1cc>
 8008ae4:	2300      	movs	r3, #0
 8008ae6:	930b      	str	r3, [sp, #44]	; 0x2c
 8008ae8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	dc59      	bgt.n	8008ba2 <_dtoa_r+0x30a>
 8008aee:	f04f 0b01 	mov.w	fp, #1
 8008af2:	465b      	mov	r3, fp
 8008af4:	f8cd b008 	str.w	fp, [sp, #8]
 8008af8:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 8008afc:	2200      	movs	r2, #0
 8008afe:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8008b00:	6042      	str	r2, [r0, #4]
 8008b02:	2204      	movs	r2, #4
 8008b04:	f102 0614 	add.w	r6, r2, #20
 8008b08:	429e      	cmp	r6, r3
 8008b0a:	6841      	ldr	r1, [r0, #4]
 8008b0c:	d94f      	bls.n	8008bae <_dtoa_r+0x316>
 8008b0e:	4628      	mov	r0, r5
 8008b10:	f000 fcd8 	bl	80094c4 <_Balloc>
 8008b14:	9008      	str	r0, [sp, #32]
 8008b16:	2800      	cmp	r0, #0
 8008b18:	d14d      	bne.n	8008bb6 <_dtoa_r+0x31e>
 8008b1a:	4602      	mov	r2, r0
 8008b1c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8008b20:	4b1d      	ldr	r3, [pc, #116]	; (8008b98 <_dtoa_r+0x300>)
 8008b22:	e6cd      	b.n	80088c0 <_dtoa_r+0x28>
 8008b24:	2301      	movs	r3, #1
 8008b26:	e7de      	b.n	8008ae6 <_dtoa_r+0x24e>
 8008b28:	2300      	movs	r3, #0
 8008b2a:	930b      	str	r3, [sp, #44]	; 0x2c
 8008b2c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008b2e:	eb09 0b03 	add.w	fp, r9, r3
 8008b32:	f10b 0301 	add.w	r3, fp, #1
 8008b36:	2b01      	cmp	r3, #1
 8008b38:	9302      	str	r3, [sp, #8]
 8008b3a:	bfb8      	it	lt
 8008b3c:	2301      	movlt	r3, #1
 8008b3e:	e7dd      	b.n	8008afc <_dtoa_r+0x264>
 8008b40:	2301      	movs	r3, #1
 8008b42:	e7f2      	b.n	8008b2a <_dtoa_r+0x292>
 8008b44:	2401      	movs	r4, #1
 8008b46:	2300      	movs	r3, #0
 8008b48:	940b      	str	r4, [sp, #44]	; 0x2c
 8008b4a:	9322      	str	r3, [sp, #136]	; 0x88
 8008b4c:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 8008b50:	2200      	movs	r2, #0
 8008b52:	2312      	movs	r3, #18
 8008b54:	f8cd b008 	str.w	fp, [sp, #8]
 8008b58:	9223      	str	r2, [sp, #140]	; 0x8c
 8008b5a:	e7cf      	b.n	8008afc <_dtoa_r+0x264>
 8008b5c:	f3af 8000 	nop.w
 8008b60:	636f4361 	.word	0x636f4361
 8008b64:	3fd287a7 	.word	0x3fd287a7
 8008b68:	8b60c8b3 	.word	0x8b60c8b3
 8008b6c:	3fc68a28 	.word	0x3fc68a28
 8008b70:	509f79fb 	.word	0x509f79fb
 8008b74:	3fd34413 	.word	0x3fd34413
 8008b78:	0800c245 	.word	0x0800c245
 8008b7c:	0800c25c 	.word	0x0800c25c
 8008b80:	7ff00000 	.word	0x7ff00000
 8008b84:	0800c241 	.word	0x0800c241
 8008b88:	0800c238 	.word	0x0800c238
 8008b8c:	0800c215 	.word	0x0800c215
 8008b90:	3ff80000 	.word	0x3ff80000
 8008b94:	0800c358 	.word	0x0800c358
 8008b98:	0800c2bb 	.word	0x0800c2bb
 8008b9c:	2301      	movs	r3, #1
 8008b9e:	930b      	str	r3, [sp, #44]	; 0x2c
 8008ba0:	e7d4      	b.n	8008b4c <_dtoa_r+0x2b4>
 8008ba2:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 8008ba6:	465b      	mov	r3, fp
 8008ba8:	f8cd b008 	str.w	fp, [sp, #8]
 8008bac:	e7a6      	b.n	8008afc <_dtoa_r+0x264>
 8008bae:	3101      	adds	r1, #1
 8008bb0:	6041      	str	r1, [r0, #4]
 8008bb2:	0052      	lsls	r2, r2, #1
 8008bb4:	e7a6      	b.n	8008b04 <_dtoa_r+0x26c>
 8008bb6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008bb8:	9a08      	ldr	r2, [sp, #32]
 8008bba:	601a      	str	r2, [r3, #0]
 8008bbc:	9b02      	ldr	r3, [sp, #8]
 8008bbe:	2b0e      	cmp	r3, #14
 8008bc0:	f200 80a8 	bhi.w	8008d14 <_dtoa_r+0x47c>
 8008bc4:	2c00      	cmp	r4, #0
 8008bc6:	f000 80a5 	beq.w	8008d14 <_dtoa_r+0x47c>
 8008bca:	f1b9 0f00 	cmp.w	r9, #0
 8008bce:	dd34      	ble.n	8008c3a <_dtoa_r+0x3a2>
 8008bd0:	4a9a      	ldr	r2, [pc, #616]	; (8008e3c <_dtoa_r+0x5a4>)
 8008bd2:	f009 030f 	and.w	r3, r9, #15
 8008bd6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008bda:	f419 7f80 	tst.w	r9, #256	; 0x100
 8008bde:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008be2:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8008be6:	ea4f 1429 	mov.w	r4, r9, asr #4
 8008bea:	d016      	beq.n	8008c1a <_dtoa_r+0x382>
 8008bec:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008bf0:	4b93      	ldr	r3, [pc, #588]	; (8008e40 <_dtoa_r+0x5a8>)
 8008bf2:	2703      	movs	r7, #3
 8008bf4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008bf8:	f7f7 fd98 	bl	800072c <__aeabi_ddiv>
 8008bfc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008c00:	f004 040f 	and.w	r4, r4, #15
 8008c04:	4e8e      	ldr	r6, [pc, #568]	; (8008e40 <_dtoa_r+0x5a8>)
 8008c06:	b954      	cbnz	r4, 8008c1e <_dtoa_r+0x386>
 8008c08:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008c0c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008c10:	f7f7 fd8c 	bl	800072c <__aeabi_ddiv>
 8008c14:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008c18:	e029      	b.n	8008c6e <_dtoa_r+0x3d6>
 8008c1a:	2702      	movs	r7, #2
 8008c1c:	e7f2      	b.n	8008c04 <_dtoa_r+0x36c>
 8008c1e:	07e1      	lsls	r1, r4, #31
 8008c20:	d508      	bpl.n	8008c34 <_dtoa_r+0x39c>
 8008c22:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008c26:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008c2a:	f7f7 fc55 	bl	80004d8 <__aeabi_dmul>
 8008c2e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008c32:	3701      	adds	r7, #1
 8008c34:	1064      	asrs	r4, r4, #1
 8008c36:	3608      	adds	r6, #8
 8008c38:	e7e5      	b.n	8008c06 <_dtoa_r+0x36e>
 8008c3a:	f000 80a5 	beq.w	8008d88 <_dtoa_r+0x4f0>
 8008c3e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008c42:	f1c9 0400 	rsb	r4, r9, #0
 8008c46:	4b7d      	ldr	r3, [pc, #500]	; (8008e3c <_dtoa_r+0x5a4>)
 8008c48:	f004 020f 	and.w	r2, r4, #15
 8008c4c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008c50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c54:	f7f7 fc40 	bl	80004d8 <__aeabi_dmul>
 8008c58:	2702      	movs	r7, #2
 8008c5a:	2300      	movs	r3, #0
 8008c5c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008c60:	4e77      	ldr	r6, [pc, #476]	; (8008e40 <_dtoa_r+0x5a8>)
 8008c62:	1124      	asrs	r4, r4, #4
 8008c64:	2c00      	cmp	r4, #0
 8008c66:	f040 8084 	bne.w	8008d72 <_dtoa_r+0x4da>
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d1d2      	bne.n	8008c14 <_dtoa_r+0x37c>
 8008c6e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	f000 808b 	beq.w	8008d8c <_dtoa_r+0x4f4>
 8008c76:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8008c7a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8008c7e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008c82:	2200      	movs	r2, #0
 8008c84:	4b6f      	ldr	r3, [pc, #444]	; (8008e44 <_dtoa_r+0x5ac>)
 8008c86:	f7f7 fe99 	bl	80009bc <__aeabi_dcmplt>
 8008c8a:	2800      	cmp	r0, #0
 8008c8c:	d07e      	beq.n	8008d8c <_dtoa_r+0x4f4>
 8008c8e:	9b02      	ldr	r3, [sp, #8]
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d07b      	beq.n	8008d8c <_dtoa_r+0x4f4>
 8008c94:	f1bb 0f00 	cmp.w	fp, #0
 8008c98:	dd38      	ble.n	8008d0c <_dtoa_r+0x474>
 8008c9a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008c9e:	2200      	movs	r2, #0
 8008ca0:	4b69      	ldr	r3, [pc, #420]	; (8008e48 <_dtoa_r+0x5b0>)
 8008ca2:	f7f7 fc19 	bl	80004d8 <__aeabi_dmul>
 8008ca6:	465c      	mov	r4, fp
 8008ca8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008cac:	f109 38ff 	add.w	r8, r9, #4294967295	; 0xffffffff
 8008cb0:	3701      	adds	r7, #1
 8008cb2:	4638      	mov	r0, r7
 8008cb4:	f7f7 fba6 	bl	8000404 <__aeabi_i2d>
 8008cb8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008cbc:	f7f7 fc0c 	bl	80004d8 <__aeabi_dmul>
 8008cc0:	2200      	movs	r2, #0
 8008cc2:	4b62      	ldr	r3, [pc, #392]	; (8008e4c <_dtoa_r+0x5b4>)
 8008cc4:	f7f7 fa52 	bl	800016c <__adddf3>
 8008cc8:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8008ccc:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008cd0:	9611      	str	r6, [sp, #68]	; 0x44
 8008cd2:	2c00      	cmp	r4, #0
 8008cd4:	d15d      	bne.n	8008d92 <_dtoa_r+0x4fa>
 8008cd6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008cda:	2200      	movs	r2, #0
 8008cdc:	4b5c      	ldr	r3, [pc, #368]	; (8008e50 <_dtoa_r+0x5b8>)
 8008cde:	f7f7 fa43 	bl	8000168 <__aeabi_dsub>
 8008ce2:	4602      	mov	r2, r0
 8008ce4:	460b      	mov	r3, r1
 8008ce6:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008cea:	4633      	mov	r3, r6
 8008cec:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008cee:	f7f7 fe83 	bl	80009f8 <__aeabi_dcmpgt>
 8008cf2:	2800      	cmp	r0, #0
 8008cf4:	f040 829e 	bne.w	8009234 <_dtoa_r+0x99c>
 8008cf8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008cfc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008cfe:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8008d02:	f7f7 fe5b 	bl	80009bc <__aeabi_dcmplt>
 8008d06:	2800      	cmp	r0, #0
 8008d08:	f040 8292 	bne.w	8009230 <_dtoa_r+0x998>
 8008d0c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8008d10:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8008d14:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	f2c0 8153 	blt.w	8008fc2 <_dtoa_r+0x72a>
 8008d1c:	f1b9 0f0e 	cmp.w	r9, #14
 8008d20:	f300 814f 	bgt.w	8008fc2 <_dtoa_r+0x72a>
 8008d24:	4b45      	ldr	r3, [pc, #276]	; (8008e3c <_dtoa_r+0x5a4>)
 8008d26:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8008d2a:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008d2e:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8008d32:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	f280 80db 	bge.w	8008ef0 <_dtoa_r+0x658>
 8008d3a:	9b02      	ldr	r3, [sp, #8]
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	f300 80d7 	bgt.w	8008ef0 <_dtoa_r+0x658>
 8008d42:	f040 8274 	bne.w	800922e <_dtoa_r+0x996>
 8008d46:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008d4a:	2200      	movs	r2, #0
 8008d4c:	4b40      	ldr	r3, [pc, #256]	; (8008e50 <_dtoa_r+0x5b8>)
 8008d4e:	f7f7 fbc3 	bl	80004d8 <__aeabi_dmul>
 8008d52:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008d56:	f7f7 fe45 	bl	80009e4 <__aeabi_dcmpge>
 8008d5a:	9c02      	ldr	r4, [sp, #8]
 8008d5c:	4626      	mov	r6, r4
 8008d5e:	2800      	cmp	r0, #0
 8008d60:	f040 824a 	bne.w	80091f8 <_dtoa_r+0x960>
 8008d64:	2331      	movs	r3, #49	; 0x31
 8008d66:	9f08      	ldr	r7, [sp, #32]
 8008d68:	f109 0901 	add.w	r9, r9, #1
 8008d6c:	f807 3b01 	strb.w	r3, [r7], #1
 8008d70:	e246      	b.n	8009200 <_dtoa_r+0x968>
 8008d72:	07e2      	lsls	r2, r4, #31
 8008d74:	d505      	bpl.n	8008d82 <_dtoa_r+0x4ea>
 8008d76:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008d7a:	f7f7 fbad 	bl	80004d8 <__aeabi_dmul>
 8008d7e:	2301      	movs	r3, #1
 8008d80:	3701      	adds	r7, #1
 8008d82:	1064      	asrs	r4, r4, #1
 8008d84:	3608      	adds	r6, #8
 8008d86:	e76d      	b.n	8008c64 <_dtoa_r+0x3cc>
 8008d88:	2702      	movs	r7, #2
 8008d8a:	e770      	b.n	8008c6e <_dtoa_r+0x3d6>
 8008d8c:	46c8      	mov	r8, r9
 8008d8e:	9c02      	ldr	r4, [sp, #8]
 8008d90:	e78f      	b.n	8008cb2 <_dtoa_r+0x41a>
 8008d92:	9908      	ldr	r1, [sp, #32]
 8008d94:	4b29      	ldr	r3, [pc, #164]	; (8008e3c <_dtoa_r+0x5a4>)
 8008d96:	4421      	add	r1, r4
 8008d98:	9112      	str	r1, [sp, #72]	; 0x48
 8008d9a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008d9c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008da0:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8008da4:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008da8:	2900      	cmp	r1, #0
 8008daa:	d055      	beq.n	8008e58 <_dtoa_r+0x5c0>
 8008dac:	2000      	movs	r0, #0
 8008dae:	4929      	ldr	r1, [pc, #164]	; (8008e54 <_dtoa_r+0x5bc>)
 8008db0:	f7f7 fcbc 	bl	800072c <__aeabi_ddiv>
 8008db4:	463b      	mov	r3, r7
 8008db6:	4632      	mov	r2, r6
 8008db8:	f7f7 f9d6 	bl	8000168 <__aeabi_dsub>
 8008dbc:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008dc0:	9f08      	ldr	r7, [sp, #32]
 8008dc2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008dc6:	f7f7 fe37 	bl	8000a38 <__aeabi_d2iz>
 8008dca:	4604      	mov	r4, r0
 8008dcc:	f7f7 fb1a 	bl	8000404 <__aeabi_i2d>
 8008dd0:	4602      	mov	r2, r0
 8008dd2:	460b      	mov	r3, r1
 8008dd4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008dd8:	f7f7 f9c6 	bl	8000168 <__aeabi_dsub>
 8008ddc:	4602      	mov	r2, r0
 8008dde:	460b      	mov	r3, r1
 8008de0:	3430      	adds	r4, #48	; 0x30
 8008de2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008de6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008dea:	f807 4b01 	strb.w	r4, [r7], #1
 8008dee:	f7f7 fde5 	bl	80009bc <__aeabi_dcmplt>
 8008df2:	2800      	cmp	r0, #0
 8008df4:	d174      	bne.n	8008ee0 <_dtoa_r+0x648>
 8008df6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008dfa:	2000      	movs	r0, #0
 8008dfc:	4911      	ldr	r1, [pc, #68]	; (8008e44 <_dtoa_r+0x5ac>)
 8008dfe:	f7f7 f9b3 	bl	8000168 <__aeabi_dsub>
 8008e02:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008e06:	f7f7 fdd9 	bl	80009bc <__aeabi_dcmplt>
 8008e0a:	2800      	cmp	r0, #0
 8008e0c:	f040 80b6 	bne.w	8008f7c <_dtoa_r+0x6e4>
 8008e10:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008e12:	429f      	cmp	r7, r3
 8008e14:	f43f af7a 	beq.w	8008d0c <_dtoa_r+0x474>
 8008e18:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008e1c:	2200      	movs	r2, #0
 8008e1e:	4b0a      	ldr	r3, [pc, #40]	; (8008e48 <_dtoa_r+0x5b0>)
 8008e20:	f7f7 fb5a 	bl	80004d8 <__aeabi_dmul>
 8008e24:	2200      	movs	r2, #0
 8008e26:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008e2a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008e2e:	4b06      	ldr	r3, [pc, #24]	; (8008e48 <_dtoa_r+0x5b0>)
 8008e30:	f7f7 fb52 	bl	80004d8 <__aeabi_dmul>
 8008e34:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008e38:	e7c3      	b.n	8008dc2 <_dtoa_r+0x52a>
 8008e3a:	bf00      	nop
 8008e3c:	0800c358 	.word	0x0800c358
 8008e40:	0800c330 	.word	0x0800c330
 8008e44:	3ff00000 	.word	0x3ff00000
 8008e48:	40240000 	.word	0x40240000
 8008e4c:	401c0000 	.word	0x401c0000
 8008e50:	40140000 	.word	0x40140000
 8008e54:	3fe00000 	.word	0x3fe00000
 8008e58:	4630      	mov	r0, r6
 8008e5a:	4639      	mov	r1, r7
 8008e5c:	f7f7 fb3c 	bl	80004d8 <__aeabi_dmul>
 8008e60:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008e62:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008e66:	9c08      	ldr	r4, [sp, #32]
 8008e68:	9314      	str	r3, [sp, #80]	; 0x50
 8008e6a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008e6e:	f7f7 fde3 	bl	8000a38 <__aeabi_d2iz>
 8008e72:	9015      	str	r0, [sp, #84]	; 0x54
 8008e74:	f7f7 fac6 	bl	8000404 <__aeabi_i2d>
 8008e78:	4602      	mov	r2, r0
 8008e7a:	460b      	mov	r3, r1
 8008e7c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008e80:	f7f7 f972 	bl	8000168 <__aeabi_dsub>
 8008e84:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008e86:	4606      	mov	r6, r0
 8008e88:	3330      	adds	r3, #48	; 0x30
 8008e8a:	f804 3b01 	strb.w	r3, [r4], #1
 8008e8e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008e90:	460f      	mov	r7, r1
 8008e92:	429c      	cmp	r4, r3
 8008e94:	f04f 0200 	mov.w	r2, #0
 8008e98:	d124      	bne.n	8008ee4 <_dtoa_r+0x64c>
 8008e9a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008e9e:	4bb3      	ldr	r3, [pc, #716]	; (800916c <_dtoa_r+0x8d4>)
 8008ea0:	f7f7 f964 	bl	800016c <__adddf3>
 8008ea4:	4602      	mov	r2, r0
 8008ea6:	460b      	mov	r3, r1
 8008ea8:	4630      	mov	r0, r6
 8008eaa:	4639      	mov	r1, r7
 8008eac:	f7f7 fda4 	bl	80009f8 <__aeabi_dcmpgt>
 8008eb0:	2800      	cmp	r0, #0
 8008eb2:	d162      	bne.n	8008f7a <_dtoa_r+0x6e2>
 8008eb4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008eb8:	2000      	movs	r0, #0
 8008eba:	49ac      	ldr	r1, [pc, #688]	; (800916c <_dtoa_r+0x8d4>)
 8008ebc:	f7f7 f954 	bl	8000168 <__aeabi_dsub>
 8008ec0:	4602      	mov	r2, r0
 8008ec2:	460b      	mov	r3, r1
 8008ec4:	4630      	mov	r0, r6
 8008ec6:	4639      	mov	r1, r7
 8008ec8:	f7f7 fd78 	bl	80009bc <__aeabi_dcmplt>
 8008ecc:	2800      	cmp	r0, #0
 8008ece:	f43f af1d 	beq.w	8008d0c <_dtoa_r+0x474>
 8008ed2:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8008ed4:	1e7b      	subs	r3, r7, #1
 8008ed6:	9314      	str	r3, [sp, #80]	; 0x50
 8008ed8:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8008edc:	2b30      	cmp	r3, #48	; 0x30
 8008ede:	d0f8      	beq.n	8008ed2 <_dtoa_r+0x63a>
 8008ee0:	46c1      	mov	r9, r8
 8008ee2:	e03a      	b.n	8008f5a <_dtoa_r+0x6c2>
 8008ee4:	4ba2      	ldr	r3, [pc, #648]	; (8009170 <_dtoa_r+0x8d8>)
 8008ee6:	f7f7 faf7 	bl	80004d8 <__aeabi_dmul>
 8008eea:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008eee:	e7bc      	b.n	8008e6a <_dtoa_r+0x5d2>
 8008ef0:	9f08      	ldr	r7, [sp, #32]
 8008ef2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008ef6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008efa:	f7f7 fc17 	bl	800072c <__aeabi_ddiv>
 8008efe:	f7f7 fd9b 	bl	8000a38 <__aeabi_d2iz>
 8008f02:	4604      	mov	r4, r0
 8008f04:	f7f7 fa7e 	bl	8000404 <__aeabi_i2d>
 8008f08:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008f0c:	f7f7 fae4 	bl	80004d8 <__aeabi_dmul>
 8008f10:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8008f14:	460b      	mov	r3, r1
 8008f16:	4602      	mov	r2, r0
 8008f18:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008f1c:	f7f7 f924 	bl	8000168 <__aeabi_dsub>
 8008f20:	f807 6b01 	strb.w	r6, [r7], #1
 8008f24:	9e08      	ldr	r6, [sp, #32]
 8008f26:	9b02      	ldr	r3, [sp, #8]
 8008f28:	1bbe      	subs	r6, r7, r6
 8008f2a:	42b3      	cmp	r3, r6
 8008f2c:	d13a      	bne.n	8008fa4 <_dtoa_r+0x70c>
 8008f2e:	4602      	mov	r2, r0
 8008f30:	460b      	mov	r3, r1
 8008f32:	f7f7 f91b 	bl	800016c <__adddf3>
 8008f36:	4602      	mov	r2, r0
 8008f38:	460b      	mov	r3, r1
 8008f3a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008f3e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008f42:	f7f7 fd59 	bl	80009f8 <__aeabi_dcmpgt>
 8008f46:	bb58      	cbnz	r0, 8008fa0 <_dtoa_r+0x708>
 8008f48:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008f4c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008f50:	f7f7 fd2a 	bl	80009a8 <__aeabi_dcmpeq>
 8008f54:	b108      	cbz	r0, 8008f5a <_dtoa_r+0x6c2>
 8008f56:	07e1      	lsls	r1, r4, #31
 8008f58:	d422      	bmi.n	8008fa0 <_dtoa_r+0x708>
 8008f5a:	4628      	mov	r0, r5
 8008f5c:	4651      	mov	r1, sl
 8008f5e:	f000 faf1 	bl	8009544 <_Bfree>
 8008f62:	2300      	movs	r3, #0
 8008f64:	703b      	strb	r3, [r7, #0]
 8008f66:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8008f68:	f109 0001 	add.w	r0, r9, #1
 8008f6c:	6018      	str	r0, [r3, #0]
 8008f6e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	f43f acdf 	beq.w	8008934 <_dtoa_r+0x9c>
 8008f76:	601f      	str	r7, [r3, #0]
 8008f78:	e4dc      	b.n	8008934 <_dtoa_r+0x9c>
 8008f7a:	4627      	mov	r7, r4
 8008f7c:	463b      	mov	r3, r7
 8008f7e:	461f      	mov	r7, r3
 8008f80:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008f84:	2a39      	cmp	r2, #57	; 0x39
 8008f86:	d107      	bne.n	8008f98 <_dtoa_r+0x700>
 8008f88:	9a08      	ldr	r2, [sp, #32]
 8008f8a:	429a      	cmp	r2, r3
 8008f8c:	d1f7      	bne.n	8008f7e <_dtoa_r+0x6e6>
 8008f8e:	2230      	movs	r2, #48	; 0x30
 8008f90:	9908      	ldr	r1, [sp, #32]
 8008f92:	f108 0801 	add.w	r8, r8, #1
 8008f96:	700a      	strb	r2, [r1, #0]
 8008f98:	781a      	ldrb	r2, [r3, #0]
 8008f9a:	3201      	adds	r2, #1
 8008f9c:	701a      	strb	r2, [r3, #0]
 8008f9e:	e79f      	b.n	8008ee0 <_dtoa_r+0x648>
 8008fa0:	46c8      	mov	r8, r9
 8008fa2:	e7eb      	b.n	8008f7c <_dtoa_r+0x6e4>
 8008fa4:	2200      	movs	r2, #0
 8008fa6:	4b72      	ldr	r3, [pc, #456]	; (8009170 <_dtoa_r+0x8d8>)
 8008fa8:	f7f7 fa96 	bl	80004d8 <__aeabi_dmul>
 8008fac:	4602      	mov	r2, r0
 8008fae:	460b      	mov	r3, r1
 8008fb0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008fb4:	2200      	movs	r2, #0
 8008fb6:	2300      	movs	r3, #0
 8008fb8:	f7f7 fcf6 	bl	80009a8 <__aeabi_dcmpeq>
 8008fbc:	2800      	cmp	r0, #0
 8008fbe:	d098      	beq.n	8008ef2 <_dtoa_r+0x65a>
 8008fc0:	e7cb      	b.n	8008f5a <_dtoa_r+0x6c2>
 8008fc2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008fc4:	2a00      	cmp	r2, #0
 8008fc6:	f000 80cd 	beq.w	8009164 <_dtoa_r+0x8cc>
 8008fca:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8008fcc:	2a01      	cmp	r2, #1
 8008fce:	f300 80af 	bgt.w	8009130 <_dtoa_r+0x898>
 8008fd2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008fd4:	2a00      	cmp	r2, #0
 8008fd6:	f000 80a7 	beq.w	8009128 <_dtoa_r+0x890>
 8008fda:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008fde:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8008fe0:	9f06      	ldr	r7, [sp, #24]
 8008fe2:	9a06      	ldr	r2, [sp, #24]
 8008fe4:	2101      	movs	r1, #1
 8008fe6:	441a      	add	r2, r3
 8008fe8:	9206      	str	r2, [sp, #24]
 8008fea:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008fec:	4628      	mov	r0, r5
 8008fee:	441a      	add	r2, r3
 8008ff0:	9209      	str	r2, [sp, #36]	; 0x24
 8008ff2:	f000 fb61 	bl	80096b8 <__i2b>
 8008ff6:	4606      	mov	r6, r0
 8008ff8:	2f00      	cmp	r7, #0
 8008ffa:	dd0c      	ble.n	8009016 <_dtoa_r+0x77e>
 8008ffc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	dd09      	ble.n	8009016 <_dtoa_r+0x77e>
 8009002:	42bb      	cmp	r3, r7
 8009004:	bfa8      	it	ge
 8009006:	463b      	movge	r3, r7
 8009008:	9a06      	ldr	r2, [sp, #24]
 800900a:	1aff      	subs	r7, r7, r3
 800900c:	1ad2      	subs	r2, r2, r3
 800900e:	9206      	str	r2, [sp, #24]
 8009010:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009012:	1ad3      	subs	r3, r2, r3
 8009014:	9309      	str	r3, [sp, #36]	; 0x24
 8009016:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009018:	b1f3      	cbz	r3, 8009058 <_dtoa_r+0x7c0>
 800901a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800901c:	2b00      	cmp	r3, #0
 800901e:	f000 80a9 	beq.w	8009174 <_dtoa_r+0x8dc>
 8009022:	2c00      	cmp	r4, #0
 8009024:	dd10      	ble.n	8009048 <_dtoa_r+0x7b0>
 8009026:	4631      	mov	r1, r6
 8009028:	4622      	mov	r2, r4
 800902a:	4628      	mov	r0, r5
 800902c:	f000 fbfe 	bl	800982c <__pow5mult>
 8009030:	4652      	mov	r2, sl
 8009032:	4601      	mov	r1, r0
 8009034:	4606      	mov	r6, r0
 8009036:	4628      	mov	r0, r5
 8009038:	f000 fb54 	bl	80096e4 <__multiply>
 800903c:	4680      	mov	r8, r0
 800903e:	4651      	mov	r1, sl
 8009040:	4628      	mov	r0, r5
 8009042:	f000 fa7f 	bl	8009544 <_Bfree>
 8009046:	46c2      	mov	sl, r8
 8009048:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800904a:	1b1a      	subs	r2, r3, r4
 800904c:	d004      	beq.n	8009058 <_dtoa_r+0x7c0>
 800904e:	4651      	mov	r1, sl
 8009050:	4628      	mov	r0, r5
 8009052:	f000 fbeb 	bl	800982c <__pow5mult>
 8009056:	4682      	mov	sl, r0
 8009058:	2101      	movs	r1, #1
 800905a:	4628      	mov	r0, r5
 800905c:	f000 fb2c 	bl	80096b8 <__i2b>
 8009060:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009062:	4604      	mov	r4, r0
 8009064:	2b00      	cmp	r3, #0
 8009066:	f340 8087 	ble.w	8009178 <_dtoa_r+0x8e0>
 800906a:	461a      	mov	r2, r3
 800906c:	4601      	mov	r1, r0
 800906e:	4628      	mov	r0, r5
 8009070:	f000 fbdc 	bl	800982c <__pow5mult>
 8009074:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009076:	4604      	mov	r4, r0
 8009078:	2b01      	cmp	r3, #1
 800907a:	f340 8080 	ble.w	800917e <_dtoa_r+0x8e6>
 800907e:	f04f 0800 	mov.w	r8, #0
 8009082:	6923      	ldr	r3, [r4, #16]
 8009084:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009088:	6918      	ldr	r0, [r3, #16]
 800908a:	f000 fac7 	bl	800961c <__hi0bits>
 800908e:	f1c0 0020 	rsb	r0, r0, #32
 8009092:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009094:	4418      	add	r0, r3
 8009096:	f010 001f 	ands.w	r0, r0, #31
 800909a:	f000 8092 	beq.w	80091c2 <_dtoa_r+0x92a>
 800909e:	f1c0 0320 	rsb	r3, r0, #32
 80090a2:	2b04      	cmp	r3, #4
 80090a4:	f340 808a 	ble.w	80091bc <_dtoa_r+0x924>
 80090a8:	f1c0 001c 	rsb	r0, r0, #28
 80090ac:	9b06      	ldr	r3, [sp, #24]
 80090ae:	4407      	add	r7, r0
 80090b0:	4403      	add	r3, r0
 80090b2:	9306      	str	r3, [sp, #24]
 80090b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80090b6:	4403      	add	r3, r0
 80090b8:	9309      	str	r3, [sp, #36]	; 0x24
 80090ba:	9b06      	ldr	r3, [sp, #24]
 80090bc:	2b00      	cmp	r3, #0
 80090be:	dd05      	ble.n	80090cc <_dtoa_r+0x834>
 80090c0:	4651      	mov	r1, sl
 80090c2:	461a      	mov	r2, r3
 80090c4:	4628      	mov	r0, r5
 80090c6:	f000 fc0b 	bl	80098e0 <__lshift>
 80090ca:	4682      	mov	sl, r0
 80090cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	dd05      	ble.n	80090de <_dtoa_r+0x846>
 80090d2:	4621      	mov	r1, r4
 80090d4:	461a      	mov	r2, r3
 80090d6:	4628      	mov	r0, r5
 80090d8:	f000 fc02 	bl	80098e0 <__lshift>
 80090dc:	4604      	mov	r4, r0
 80090de:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d070      	beq.n	80091c6 <_dtoa_r+0x92e>
 80090e4:	4621      	mov	r1, r4
 80090e6:	4650      	mov	r0, sl
 80090e8:	f000 fc66 	bl	80099b8 <__mcmp>
 80090ec:	2800      	cmp	r0, #0
 80090ee:	da6a      	bge.n	80091c6 <_dtoa_r+0x92e>
 80090f0:	2300      	movs	r3, #0
 80090f2:	4651      	mov	r1, sl
 80090f4:	220a      	movs	r2, #10
 80090f6:	4628      	mov	r0, r5
 80090f8:	f000 fa46 	bl	8009588 <__multadd>
 80090fc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80090fe:	4682      	mov	sl, r0
 8009100:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 8009104:	2b00      	cmp	r3, #0
 8009106:	f000 8193 	beq.w	8009430 <_dtoa_r+0xb98>
 800910a:	4631      	mov	r1, r6
 800910c:	2300      	movs	r3, #0
 800910e:	220a      	movs	r2, #10
 8009110:	4628      	mov	r0, r5
 8009112:	f000 fa39 	bl	8009588 <__multadd>
 8009116:	f1bb 0f00 	cmp.w	fp, #0
 800911a:	4606      	mov	r6, r0
 800911c:	f300 8093 	bgt.w	8009246 <_dtoa_r+0x9ae>
 8009120:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009122:	2b02      	cmp	r3, #2
 8009124:	dc57      	bgt.n	80091d6 <_dtoa_r+0x93e>
 8009126:	e08e      	b.n	8009246 <_dtoa_r+0x9ae>
 8009128:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800912a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800912e:	e756      	b.n	8008fde <_dtoa_r+0x746>
 8009130:	9b02      	ldr	r3, [sp, #8]
 8009132:	1e5c      	subs	r4, r3, #1
 8009134:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009136:	42a3      	cmp	r3, r4
 8009138:	bfb7      	itett	lt
 800913a:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800913c:	1b1c      	subge	r4, r3, r4
 800913e:	1ae2      	sublt	r2, r4, r3
 8009140:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8009142:	bfbe      	ittt	lt
 8009144:	940a      	strlt	r4, [sp, #40]	; 0x28
 8009146:	189b      	addlt	r3, r3, r2
 8009148:	930e      	strlt	r3, [sp, #56]	; 0x38
 800914a:	9b02      	ldr	r3, [sp, #8]
 800914c:	bfb8      	it	lt
 800914e:	2400      	movlt	r4, #0
 8009150:	2b00      	cmp	r3, #0
 8009152:	bfbb      	ittet	lt
 8009154:	9b06      	ldrlt	r3, [sp, #24]
 8009156:	9a02      	ldrlt	r2, [sp, #8]
 8009158:	9f06      	ldrge	r7, [sp, #24]
 800915a:	1a9f      	sublt	r7, r3, r2
 800915c:	bfac      	ite	ge
 800915e:	9b02      	ldrge	r3, [sp, #8]
 8009160:	2300      	movlt	r3, #0
 8009162:	e73e      	b.n	8008fe2 <_dtoa_r+0x74a>
 8009164:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8009166:	9f06      	ldr	r7, [sp, #24]
 8009168:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800916a:	e745      	b.n	8008ff8 <_dtoa_r+0x760>
 800916c:	3fe00000 	.word	0x3fe00000
 8009170:	40240000 	.word	0x40240000
 8009174:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009176:	e76a      	b.n	800904e <_dtoa_r+0x7b6>
 8009178:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800917a:	2b01      	cmp	r3, #1
 800917c:	dc19      	bgt.n	80091b2 <_dtoa_r+0x91a>
 800917e:	9b04      	ldr	r3, [sp, #16]
 8009180:	b9bb      	cbnz	r3, 80091b2 <_dtoa_r+0x91a>
 8009182:	9b05      	ldr	r3, [sp, #20]
 8009184:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009188:	b99b      	cbnz	r3, 80091b2 <_dtoa_r+0x91a>
 800918a:	9b05      	ldr	r3, [sp, #20]
 800918c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009190:	0d1b      	lsrs	r3, r3, #20
 8009192:	051b      	lsls	r3, r3, #20
 8009194:	b183      	cbz	r3, 80091b8 <_dtoa_r+0x920>
 8009196:	f04f 0801 	mov.w	r8, #1
 800919a:	9b06      	ldr	r3, [sp, #24]
 800919c:	3301      	adds	r3, #1
 800919e:	9306      	str	r3, [sp, #24]
 80091a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80091a2:	3301      	adds	r3, #1
 80091a4:	9309      	str	r3, [sp, #36]	; 0x24
 80091a6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	f47f af6a 	bne.w	8009082 <_dtoa_r+0x7ea>
 80091ae:	2001      	movs	r0, #1
 80091b0:	e76f      	b.n	8009092 <_dtoa_r+0x7fa>
 80091b2:	f04f 0800 	mov.w	r8, #0
 80091b6:	e7f6      	b.n	80091a6 <_dtoa_r+0x90e>
 80091b8:	4698      	mov	r8, r3
 80091ba:	e7f4      	b.n	80091a6 <_dtoa_r+0x90e>
 80091bc:	f43f af7d 	beq.w	80090ba <_dtoa_r+0x822>
 80091c0:	4618      	mov	r0, r3
 80091c2:	301c      	adds	r0, #28
 80091c4:	e772      	b.n	80090ac <_dtoa_r+0x814>
 80091c6:	9b02      	ldr	r3, [sp, #8]
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	dc36      	bgt.n	800923a <_dtoa_r+0x9a2>
 80091cc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80091ce:	2b02      	cmp	r3, #2
 80091d0:	dd33      	ble.n	800923a <_dtoa_r+0x9a2>
 80091d2:	f8dd b008 	ldr.w	fp, [sp, #8]
 80091d6:	f1bb 0f00 	cmp.w	fp, #0
 80091da:	d10d      	bne.n	80091f8 <_dtoa_r+0x960>
 80091dc:	4621      	mov	r1, r4
 80091de:	465b      	mov	r3, fp
 80091e0:	2205      	movs	r2, #5
 80091e2:	4628      	mov	r0, r5
 80091e4:	f000 f9d0 	bl	8009588 <__multadd>
 80091e8:	4601      	mov	r1, r0
 80091ea:	4604      	mov	r4, r0
 80091ec:	4650      	mov	r0, sl
 80091ee:	f000 fbe3 	bl	80099b8 <__mcmp>
 80091f2:	2800      	cmp	r0, #0
 80091f4:	f73f adb6 	bgt.w	8008d64 <_dtoa_r+0x4cc>
 80091f8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80091fa:	9f08      	ldr	r7, [sp, #32]
 80091fc:	ea6f 0903 	mvn.w	r9, r3
 8009200:	f04f 0800 	mov.w	r8, #0
 8009204:	4621      	mov	r1, r4
 8009206:	4628      	mov	r0, r5
 8009208:	f000 f99c 	bl	8009544 <_Bfree>
 800920c:	2e00      	cmp	r6, #0
 800920e:	f43f aea4 	beq.w	8008f5a <_dtoa_r+0x6c2>
 8009212:	f1b8 0f00 	cmp.w	r8, #0
 8009216:	d005      	beq.n	8009224 <_dtoa_r+0x98c>
 8009218:	45b0      	cmp	r8, r6
 800921a:	d003      	beq.n	8009224 <_dtoa_r+0x98c>
 800921c:	4641      	mov	r1, r8
 800921e:	4628      	mov	r0, r5
 8009220:	f000 f990 	bl	8009544 <_Bfree>
 8009224:	4631      	mov	r1, r6
 8009226:	4628      	mov	r0, r5
 8009228:	f000 f98c 	bl	8009544 <_Bfree>
 800922c:	e695      	b.n	8008f5a <_dtoa_r+0x6c2>
 800922e:	2400      	movs	r4, #0
 8009230:	4626      	mov	r6, r4
 8009232:	e7e1      	b.n	80091f8 <_dtoa_r+0x960>
 8009234:	46c1      	mov	r9, r8
 8009236:	4626      	mov	r6, r4
 8009238:	e594      	b.n	8008d64 <_dtoa_r+0x4cc>
 800923a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800923c:	f8dd b008 	ldr.w	fp, [sp, #8]
 8009240:	2b00      	cmp	r3, #0
 8009242:	f000 80fc 	beq.w	800943e <_dtoa_r+0xba6>
 8009246:	2f00      	cmp	r7, #0
 8009248:	dd05      	ble.n	8009256 <_dtoa_r+0x9be>
 800924a:	4631      	mov	r1, r6
 800924c:	463a      	mov	r2, r7
 800924e:	4628      	mov	r0, r5
 8009250:	f000 fb46 	bl	80098e0 <__lshift>
 8009254:	4606      	mov	r6, r0
 8009256:	f1b8 0f00 	cmp.w	r8, #0
 800925a:	d05c      	beq.n	8009316 <_dtoa_r+0xa7e>
 800925c:	4628      	mov	r0, r5
 800925e:	6871      	ldr	r1, [r6, #4]
 8009260:	f000 f930 	bl	80094c4 <_Balloc>
 8009264:	4607      	mov	r7, r0
 8009266:	b928      	cbnz	r0, 8009274 <_dtoa_r+0x9dc>
 8009268:	4602      	mov	r2, r0
 800926a:	f240 21ea 	movw	r1, #746	; 0x2ea
 800926e:	4b7e      	ldr	r3, [pc, #504]	; (8009468 <_dtoa_r+0xbd0>)
 8009270:	f7ff bb26 	b.w	80088c0 <_dtoa_r+0x28>
 8009274:	6932      	ldr	r2, [r6, #16]
 8009276:	f106 010c 	add.w	r1, r6, #12
 800927a:	3202      	adds	r2, #2
 800927c:	0092      	lsls	r2, r2, #2
 800927e:	300c      	adds	r0, #12
 8009280:	f000 f912 	bl	80094a8 <memcpy>
 8009284:	2201      	movs	r2, #1
 8009286:	4639      	mov	r1, r7
 8009288:	4628      	mov	r0, r5
 800928a:	f000 fb29 	bl	80098e0 <__lshift>
 800928e:	46b0      	mov	r8, r6
 8009290:	4606      	mov	r6, r0
 8009292:	9b08      	ldr	r3, [sp, #32]
 8009294:	3301      	adds	r3, #1
 8009296:	9302      	str	r3, [sp, #8]
 8009298:	9b08      	ldr	r3, [sp, #32]
 800929a:	445b      	add	r3, fp
 800929c:	930a      	str	r3, [sp, #40]	; 0x28
 800929e:	9b04      	ldr	r3, [sp, #16]
 80092a0:	f003 0301 	and.w	r3, r3, #1
 80092a4:	9309      	str	r3, [sp, #36]	; 0x24
 80092a6:	9b02      	ldr	r3, [sp, #8]
 80092a8:	4621      	mov	r1, r4
 80092aa:	4650      	mov	r0, sl
 80092ac:	f103 3bff 	add.w	fp, r3, #4294967295	; 0xffffffff
 80092b0:	f7ff fa64 	bl	800877c <quorem>
 80092b4:	4603      	mov	r3, r0
 80092b6:	4641      	mov	r1, r8
 80092b8:	3330      	adds	r3, #48	; 0x30
 80092ba:	9004      	str	r0, [sp, #16]
 80092bc:	4650      	mov	r0, sl
 80092be:	930b      	str	r3, [sp, #44]	; 0x2c
 80092c0:	f000 fb7a 	bl	80099b8 <__mcmp>
 80092c4:	4632      	mov	r2, r6
 80092c6:	9006      	str	r0, [sp, #24]
 80092c8:	4621      	mov	r1, r4
 80092ca:	4628      	mov	r0, r5
 80092cc:	f000 fb90 	bl	80099f0 <__mdiff>
 80092d0:	68c2      	ldr	r2, [r0, #12]
 80092d2:	4607      	mov	r7, r0
 80092d4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80092d6:	bb02      	cbnz	r2, 800931a <_dtoa_r+0xa82>
 80092d8:	4601      	mov	r1, r0
 80092da:	4650      	mov	r0, sl
 80092dc:	f000 fb6c 	bl	80099b8 <__mcmp>
 80092e0:	4602      	mov	r2, r0
 80092e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80092e4:	4639      	mov	r1, r7
 80092e6:	4628      	mov	r0, r5
 80092e8:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 80092ec:	f000 f92a 	bl	8009544 <_Bfree>
 80092f0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80092f2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80092f4:	9f02      	ldr	r7, [sp, #8]
 80092f6:	ea43 0102 	orr.w	r1, r3, r2
 80092fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80092fc:	430b      	orrs	r3, r1
 80092fe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009300:	d10d      	bne.n	800931e <_dtoa_r+0xa86>
 8009302:	2b39      	cmp	r3, #57	; 0x39
 8009304:	d027      	beq.n	8009356 <_dtoa_r+0xabe>
 8009306:	9a06      	ldr	r2, [sp, #24]
 8009308:	2a00      	cmp	r2, #0
 800930a:	dd01      	ble.n	8009310 <_dtoa_r+0xa78>
 800930c:	9b04      	ldr	r3, [sp, #16]
 800930e:	3331      	adds	r3, #49	; 0x31
 8009310:	f88b 3000 	strb.w	r3, [fp]
 8009314:	e776      	b.n	8009204 <_dtoa_r+0x96c>
 8009316:	4630      	mov	r0, r6
 8009318:	e7b9      	b.n	800928e <_dtoa_r+0x9f6>
 800931a:	2201      	movs	r2, #1
 800931c:	e7e2      	b.n	80092e4 <_dtoa_r+0xa4c>
 800931e:	9906      	ldr	r1, [sp, #24]
 8009320:	2900      	cmp	r1, #0
 8009322:	db04      	blt.n	800932e <_dtoa_r+0xa96>
 8009324:	9822      	ldr	r0, [sp, #136]	; 0x88
 8009326:	4301      	orrs	r1, r0
 8009328:	9809      	ldr	r0, [sp, #36]	; 0x24
 800932a:	4301      	orrs	r1, r0
 800932c:	d120      	bne.n	8009370 <_dtoa_r+0xad8>
 800932e:	2a00      	cmp	r2, #0
 8009330:	ddee      	ble.n	8009310 <_dtoa_r+0xa78>
 8009332:	4651      	mov	r1, sl
 8009334:	2201      	movs	r2, #1
 8009336:	4628      	mov	r0, r5
 8009338:	9302      	str	r3, [sp, #8]
 800933a:	f000 fad1 	bl	80098e0 <__lshift>
 800933e:	4621      	mov	r1, r4
 8009340:	4682      	mov	sl, r0
 8009342:	f000 fb39 	bl	80099b8 <__mcmp>
 8009346:	2800      	cmp	r0, #0
 8009348:	9b02      	ldr	r3, [sp, #8]
 800934a:	dc02      	bgt.n	8009352 <_dtoa_r+0xaba>
 800934c:	d1e0      	bne.n	8009310 <_dtoa_r+0xa78>
 800934e:	07da      	lsls	r2, r3, #31
 8009350:	d5de      	bpl.n	8009310 <_dtoa_r+0xa78>
 8009352:	2b39      	cmp	r3, #57	; 0x39
 8009354:	d1da      	bne.n	800930c <_dtoa_r+0xa74>
 8009356:	2339      	movs	r3, #57	; 0x39
 8009358:	f88b 3000 	strb.w	r3, [fp]
 800935c:	463b      	mov	r3, r7
 800935e:	461f      	mov	r7, r3
 8009360:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8009364:	3b01      	subs	r3, #1
 8009366:	2a39      	cmp	r2, #57	; 0x39
 8009368:	d050      	beq.n	800940c <_dtoa_r+0xb74>
 800936a:	3201      	adds	r2, #1
 800936c:	701a      	strb	r2, [r3, #0]
 800936e:	e749      	b.n	8009204 <_dtoa_r+0x96c>
 8009370:	2a00      	cmp	r2, #0
 8009372:	dd03      	ble.n	800937c <_dtoa_r+0xae4>
 8009374:	2b39      	cmp	r3, #57	; 0x39
 8009376:	d0ee      	beq.n	8009356 <_dtoa_r+0xabe>
 8009378:	3301      	adds	r3, #1
 800937a:	e7c9      	b.n	8009310 <_dtoa_r+0xa78>
 800937c:	9a02      	ldr	r2, [sp, #8]
 800937e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8009380:	f802 3c01 	strb.w	r3, [r2, #-1]
 8009384:	428a      	cmp	r2, r1
 8009386:	d02a      	beq.n	80093de <_dtoa_r+0xb46>
 8009388:	4651      	mov	r1, sl
 800938a:	2300      	movs	r3, #0
 800938c:	220a      	movs	r2, #10
 800938e:	4628      	mov	r0, r5
 8009390:	f000 f8fa 	bl	8009588 <__multadd>
 8009394:	45b0      	cmp	r8, r6
 8009396:	4682      	mov	sl, r0
 8009398:	f04f 0300 	mov.w	r3, #0
 800939c:	f04f 020a 	mov.w	r2, #10
 80093a0:	4641      	mov	r1, r8
 80093a2:	4628      	mov	r0, r5
 80093a4:	d107      	bne.n	80093b6 <_dtoa_r+0xb1e>
 80093a6:	f000 f8ef 	bl	8009588 <__multadd>
 80093aa:	4680      	mov	r8, r0
 80093ac:	4606      	mov	r6, r0
 80093ae:	9b02      	ldr	r3, [sp, #8]
 80093b0:	3301      	adds	r3, #1
 80093b2:	9302      	str	r3, [sp, #8]
 80093b4:	e777      	b.n	80092a6 <_dtoa_r+0xa0e>
 80093b6:	f000 f8e7 	bl	8009588 <__multadd>
 80093ba:	4631      	mov	r1, r6
 80093bc:	4680      	mov	r8, r0
 80093be:	2300      	movs	r3, #0
 80093c0:	220a      	movs	r2, #10
 80093c2:	4628      	mov	r0, r5
 80093c4:	f000 f8e0 	bl	8009588 <__multadd>
 80093c8:	4606      	mov	r6, r0
 80093ca:	e7f0      	b.n	80093ae <_dtoa_r+0xb16>
 80093cc:	f1bb 0f00 	cmp.w	fp, #0
 80093d0:	bfcc      	ite	gt
 80093d2:	465f      	movgt	r7, fp
 80093d4:	2701      	movle	r7, #1
 80093d6:	f04f 0800 	mov.w	r8, #0
 80093da:	9a08      	ldr	r2, [sp, #32]
 80093dc:	4417      	add	r7, r2
 80093de:	4651      	mov	r1, sl
 80093e0:	2201      	movs	r2, #1
 80093e2:	4628      	mov	r0, r5
 80093e4:	9302      	str	r3, [sp, #8]
 80093e6:	f000 fa7b 	bl	80098e0 <__lshift>
 80093ea:	4621      	mov	r1, r4
 80093ec:	4682      	mov	sl, r0
 80093ee:	f000 fae3 	bl	80099b8 <__mcmp>
 80093f2:	2800      	cmp	r0, #0
 80093f4:	dcb2      	bgt.n	800935c <_dtoa_r+0xac4>
 80093f6:	d102      	bne.n	80093fe <_dtoa_r+0xb66>
 80093f8:	9b02      	ldr	r3, [sp, #8]
 80093fa:	07db      	lsls	r3, r3, #31
 80093fc:	d4ae      	bmi.n	800935c <_dtoa_r+0xac4>
 80093fe:	463b      	mov	r3, r7
 8009400:	461f      	mov	r7, r3
 8009402:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009406:	2a30      	cmp	r2, #48	; 0x30
 8009408:	d0fa      	beq.n	8009400 <_dtoa_r+0xb68>
 800940a:	e6fb      	b.n	8009204 <_dtoa_r+0x96c>
 800940c:	9a08      	ldr	r2, [sp, #32]
 800940e:	429a      	cmp	r2, r3
 8009410:	d1a5      	bne.n	800935e <_dtoa_r+0xac6>
 8009412:	2331      	movs	r3, #49	; 0x31
 8009414:	f109 0901 	add.w	r9, r9, #1
 8009418:	7013      	strb	r3, [r2, #0]
 800941a:	e6f3      	b.n	8009204 <_dtoa_r+0x96c>
 800941c:	4b13      	ldr	r3, [pc, #76]	; (800946c <_dtoa_r+0xbd4>)
 800941e:	f7ff baa7 	b.w	8008970 <_dtoa_r+0xd8>
 8009422:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8009424:	2b00      	cmp	r3, #0
 8009426:	f47f aa80 	bne.w	800892a <_dtoa_r+0x92>
 800942a:	4b11      	ldr	r3, [pc, #68]	; (8009470 <_dtoa_r+0xbd8>)
 800942c:	f7ff baa0 	b.w	8008970 <_dtoa_r+0xd8>
 8009430:	f1bb 0f00 	cmp.w	fp, #0
 8009434:	dc03      	bgt.n	800943e <_dtoa_r+0xba6>
 8009436:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009438:	2b02      	cmp	r3, #2
 800943a:	f73f aecc 	bgt.w	80091d6 <_dtoa_r+0x93e>
 800943e:	9f08      	ldr	r7, [sp, #32]
 8009440:	4621      	mov	r1, r4
 8009442:	4650      	mov	r0, sl
 8009444:	f7ff f99a 	bl	800877c <quorem>
 8009448:	9a08      	ldr	r2, [sp, #32]
 800944a:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800944e:	f807 3b01 	strb.w	r3, [r7], #1
 8009452:	1aba      	subs	r2, r7, r2
 8009454:	4593      	cmp	fp, r2
 8009456:	ddb9      	ble.n	80093cc <_dtoa_r+0xb34>
 8009458:	4651      	mov	r1, sl
 800945a:	2300      	movs	r3, #0
 800945c:	220a      	movs	r2, #10
 800945e:	4628      	mov	r0, r5
 8009460:	f000 f892 	bl	8009588 <__multadd>
 8009464:	4682      	mov	sl, r0
 8009466:	e7eb      	b.n	8009440 <_dtoa_r+0xba8>
 8009468:	0800c2bb 	.word	0x0800c2bb
 800946c:	0800c214 	.word	0x0800c214
 8009470:	0800c238 	.word	0x0800c238

08009474 <_localeconv_r>:
 8009474:	4800      	ldr	r0, [pc, #0]	; (8009478 <_localeconv_r+0x4>)
 8009476:	4770      	bx	lr
 8009478:	20000170 	.word	0x20000170

0800947c <malloc>:
 800947c:	4b02      	ldr	r3, [pc, #8]	; (8009488 <malloc+0xc>)
 800947e:	4601      	mov	r1, r0
 8009480:	6818      	ldr	r0, [r3, #0]
 8009482:	f000 bbfb 	b.w	8009c7c <_malloc_r>
 8009486:	bf00      	nop
 8009488:	2000001c 	.word	0x2000001c

0800948c <memchr>:
 800948c:	4603      	mov	r3, r0
 800948e:	b510      	push	{r4, lr}
 8009490:	b2c9      	uxtb	r1, r1
 8009492:	4402      	add	r2, r0
 8009494:	4293      	cmp	r3, r2
 8009496:	4618      	mov	r0, r3
 8009498:	d101      	bne.n	800949e <memchr+0x12>
 800949a:	2000      	movs	r0, #0
 800949c:	e003      	b.n	80094a6 <memchr+0x1a>
 800949e:	7804      	ldrb	r4, [r0, #0]
 80094a0:	3301      	adds	r3, #1
 80094a2:	428c      	cmp	r4, r1
 80094a4:	d1f6      	bne.n	8009494 <memchr+0x8>
 80094a6:	bd10      	pop	{r4, pc}

080094a8 <memcpy>:
 80094a8:	440a      	add	r2, r1
 80094aa:	4291      	cmp	r1, r2
 80094ac:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80094b0:	d100      	bne.n	80094b4 <memcpy+0xc>
 80094b2:	4770      	bx	lr
 80094b4:	b510      	push	{r4, lr}
 80094b6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80094ba:	4291      	cmp	r1, r2
 80094bc:	f803 4f01 	strb.w	r4, [r3, #1]!
 80094c0:	d1f9      	bne.n	80094b6 <memcpy+0xe>
 80094c2:	bd10      	pop	{r4, pc}

080094c4 <_Balloc>:
 80094c4:	b570      	push	{r4, r5, r6, lr}
 80094c6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80094c8:	4604      	mov	r4, r0
 80094ca:	460d      	mov	r5, r1
 80094cc:	b976      	cbnz	r6, 80094ec <_Balloc+0x28>
 80094ce:	2010      	movs	r0, #16
 80094d0:	f7ff ffd4 	bl	800947c <malloc>
 80094d4:	4602      	mov	r2, r0
 80094d6:	6260      	str	r0, [r4, #36]	; 0x24
 80094d8:	b920      	cbnz	r0, 80094e4 <_Balloc+0x20>
 80094da:	2166      	movs	r1, #102	; 0x66
 80094dc:	4b17      	ldr	r3, [pc, #92]	; (800953c <_Balloc+0x78>)
 80094de:	4818      	ldr	r0, [pc, #96]	; (8009540 <_Balloc+0x7c>)
 80094e0:	f000 fd92 	bl	800a008 <__assert_func>
 80094e4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80094e8:	6006      	str	r6, [r0, #0]
 80094ea:	60c6      	str	r6, [r0, #12]
 80094ec:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80094ee:	68f3      	ldr	r3, [r6, #12]
 80094f0:	b183      	cbz	r3, 8009514 <_Balloc+0x50>
 80094f2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80094f4:	68db      	ldr	r3, [r3, #12]
 80094f6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80094fa:	b9b8      	cbnz	r0, 800952c <_Balloc+0x68>
 80094fc:	2101      	movs	r1, #1
 80094fe:	fa01 f605 	lsl.w	r6, r1, r5
 8009502:	1d72      	adds	r2, r6, #5
 8009504:	4620      	mov	r0, r4
 8009506:	0092      	lsls	r2, r2, #2
 8009508:	f000 fb5e 	bl	8009bc8 <_calloc_r>
 800950c:	b160      	cbz	r0, 8009528 <_Balloc+0x64>
 800950e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009512:	e00e      	b.n	8009532 <_Balloc+0x6e>
 8009514:	2221      	movs	r2, #33	; 0x21
 8009516:	2104      	movs	r1, #4
 8009518:	4620      	mov	r0, r4
 800951a:	f000 fb55 	bl	8009bc8 <_calloc_r>
 800951e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009520:	60f0      	str	r0, [r6, #12]
 8009522:	68db      	ldr	r3, [r3, #12]
 8009524:	2b00      	cmp	r3, #0
 8009526:	d1e4      	bne.n	80094f2 <_Balloc+0x2e>
 8009528:	2000      	movs	r0, #0
 800952a:	bd70      	pop	{r4, r5, r6, pc}
 800952c:	6802      	ldr	r2, [r0, #0]
 800952e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009532:	2300      	movs	r3, #0
 8009534:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009538:	e7f7      	b.n	800952a <_Balloc+0x66>
 800953a:	bf00      	nop
 800953c:	0800c245 	.word	0x0800c245
 8009540:	0800c2cc 	.word	0x0800c2cc

08009544 <_Bfree>:
 8009544:	b570      	push	{r4, r5, r6, lr}
 8009546:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009548:	4605      	mov	r5, r0
 800954a:	460c      	mov	r4, r1
 800954c:	b976      	cbnz	r6, 800956c <_Bfree+0x28>
 800954e:	2010      	movs	r0, #16
 8009550:	f7ff ff94 	bl	800947c <malloc>
 8009554:	4602      	mov	r2, r0
 8009556:	6268      	str	r0, [r5, #36]	; 0x24
 8009558:	b920      	cbnz	r0, 8009564 <_Bfree+0x20>
 800955a:	218a      	movs	r1, #138	; 0x8a
 800955c:	4b08      	ldr	r3, [pc, #32]	; (8009580 <_Bfree+0x3c>)
 800955e:	4809      	ldr	r0, [pc, #36]	; (8009584 <_Bfree+0x40>)
 8009560:	f000 fd52 	bl	800a008 <__assert_func>
 8009564:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009568:	6006      	str	r6, [r0, #0]
 800956a:	60c6      	str	r6, [r0, #12]
 800956c:	b13c      	cbz	r4, 800957e <_Bfree+0x3a>
 800956e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009570:	6862      	ldr	r2, [r4, #4]
 8009572:	68db      	ldr	r3, [r3, #12]
 8009574:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009578:	6021      	str	r1, [r4, #0]
 800957a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800957e:	bd70      	pop	{r4, r5, r6, pc}
 8009580:	0800c245 	.word	0x0800c245
 8009584:	0800c2cc 	.word	0x0800c2cc

08009588 <__multadd>:
 8009588:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800958c:	4698      	mov	r8, r3
 800958e:	460c      	mov	r4, r1
 8009590:	2300      	movs	r3, #0
 8009592:	690e      	ldr	r6, [r1, #16]
 8009594:	4607      	mov	r7, r0
 8009596:	f101 0014 	add.w	r0, r1, #20
 800959a:	6805      	ldr	r5, [r0, #0]
 800959c:	3301      	adds	r3, #1
 800959e:	b2a9      	uxth	r1, r5
 80095a0:	fb02 8101 	mla	r1, r2, r1, r8
 80095a4:	0c2d      	lsrs	r5, r5, #16
 80095a6:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 80095aa:	fb02 c505 	mla	r5, r2, r5, ip
 80095ae:	b289      	uxth	r1, r1
 80095b0:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 80095b4:	429e      	cmp	r6, r3
 80095b6:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80095ba:	f840 1b04 	str.w	r1, [r0], #4
 80095be:	dcec      	bgt.n	800959a <__multadd+0x12>
 80095c0:	f1b8 0f00 	cmp.w	r8, #0
 80095c4:	d022      	beq.n	800960c <__multadd+0x84>
 80095c6:	68a3      	ldr	r3, [r4, #8]
 80095c8:	42b3      	cmp	r3, r6
 80095ca:	dc19      	bgt.n	8009600 <__multadd+0x78>
 80095cc:	6861      	ldr	r1, [r4, #4]
 80095ce:	4638      	mov	r0, r7
 80095d0:	3101      	adds	r1, #1
 80095d2:	f7ff ff77 	bl	80094c4 <_Balloc>
 80095d6:	4605      	mov	r5, r0
 80095d8:	b928      	cbnz	r0, 80095e6 <__multadd+0x5e>
 80095da:	4602      	mov	r2, r0
 80095dc:	21b5      	movs	r1, #181	; 0xb5
 80095de:	4b0d      	ldr	r3, [pc, #52]	; (8009614 <__multadd+0x8c>)
 80095e0:	480d      	ldr	r0, [pc, #52]	; (8009618 <__multadd+0x90>)
 80095e2:	f000 fd11 	bl	800a008 <__assert_func>
 80095e6:	6922      	ldr	r2, [r4, #16]
 80095e8:	f104 010c 	add.w	r1, r4, #12
 80095ec:	3202      	adds	r2, #2
 80095ee:	0092      	lsls	r2, r2, #2
 80095f0:	300c      	adds	r0, #12
 80095f2:	f7ff ff59 	bl	80094a8 <memcpy>
 80095f6:	4621      	mov	r1, r4
 80095f8:	4638      	mov	r0, r7
 80095fa:	f7ff ffa3 	bl	8009544 <_Bfree>
 80095fe:	462c      	mov	r4, r5
 8009600:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8009604:	3601      	adds	r6, #1
 8009606:	f8c3 8014 	str.w	r8, [r3, #20]
 800960a:	6126      	str	r6, [r4, #16]
 800960c:	4620      	mov	r0, r4
 800960e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009612:	bf00      	nop
 8009614:	0800c2bb 	.word	0x0800c2bb
 8009618:	0800c2cc 	.word	0x0800c2cc

0800961c <__hi0bits>:
 800961c:	0c02      	lsrs	r2, r0, #16
 800961e:	0412      	lsls	r2, r2, #16
 8009620:	4603      	mov	r3, r0
 8009622:	b9ca      	cbnz	r2, 8009658 <__hi0bits+0x3c>
 8009624:	0403      	lsls	r3, r0, #16
 8009626:	2010      	movs	r0, #16
 8009628:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800962c:	bf04      	itt	eq
 800962e:	021b      	lsleq	r3, r3, #8
 8009630:	3008      	addeq	r0, #8
 8009632:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8009636:	bf04      	itt	eq
 8009638:	011b      	lsleq	r3, r3, #4
 800963a:	3004      	addeq	r0, #4
 800963c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8009640:	bf04      	itt	eq
 8009642:	009b      	lsleq	r3, r3, #2
 8009644:	3002      	addeq	r0, #2
 8009646:	2b00      	cmp	r3, #0
 8009648:	db05      	blt.n	8009656 <__hi0bits+0x3a>
 800964a:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800964e:	f100 0001 	add.w	r0, r0, #1
 8009652:	bf08      	it	eq
 8009654:	2020      	moveq	r0, #32
 8009656:	4770      	bx	lr
 8009658:	2000      	movs	r0, #0
 800965a:	e7e5      	b.n	8009628 <__hi0bits+0xc>

0800965c <__lo0bits>:
 800965c:	6803      	ldr	r3, [r0, #0]
 800965e:	4602      	mov	r2, r0
 8009660:	f013 0007 	ands.w	r0, r3, #7
 8009664:	d00b      	beq.n	800967e <__lo0bits+0x22>
 8009666:	07d9      	lsls	r1, r3, #31
 8009668:	d422      	bmi.n	80096b0 <__lo0bits+0x54>
 800966a:	0798      	lsls	r0, r3, #30
 800966c:	bf49      	itett	mi
 800966e:	085b      	lsrmi	r3, r3, #1
 8009670:	089b      	lsrpl	r3, r3, #2
 8009672:	2001      	movmi	r0, #1
 8009674:	6013      	strmi	r3, [r2, #0]
 8009676:	bf5c      	itt	pl
 8009678:	2002      	movpl	r0, #2
 800967a:	6013      	strpl	r3, [r2, #0]
 800967c:	4770      	bx	lr
 800967e:	b299      	uxth	r1, r3
 8009680:	b909      	cbnz	r1, 8009686 <__lo0bits+0x2a>
 8009682:	2010      	movs	r0, #16
 8009684:	0c1b      	lsrs	r3, r3, #16
 8009686:	f013 0fff 	tst.w	r3, #255	; 0xff
 800968a:	bf04      	itt	eq
 800968c:	0a1b      	lsreq	r3, r3, #8
 800968e:	3008      	addeq	r0, #8
 8009690:	0719      	lsls	r1, r3, #28
 8009692:	bf04      	itt	eq
 8009694:	091b      	lsreq	r3, r3, #4
 8009696:	3004      	addeq	r0, #4
 8009698:	0799      	lsls	r1, r3, #30
 800969a:	bf04      	itt	eq
 800969c:	089b      	lsreq	r3, r3, #2
 800969e:	3002      	addeq	r0, #2
 80096a0:	07d9      	lsls	r1, r3, #31
 80096a2:	d403      	bmi.n	80096ac <__lo0bits+0x50>
 80096a4:	085b      	lsrs	r3, r3, #1
 80096a6:	f100 0001 	add.w	r0, r0, #1
 80096aa:	d003      	beq.n	80096b4 <__lo0bits+0x58>
 80096ac:	6013      	str	r3, [r2, #0]
 80096ae:	4770      	bx	lr
 80096b0:	2000      	movs	r0, #0
 80096b2:	4770      	bx	lr
 80096b4:	2020      	movs	r0, #32
 80096b6:	4770      	bx	lr

080096b8 <__i2b>:
 80096b8:	b510      	push	{r4, lr}
 80096ba:	460c      	mov	r4, r1
 80096bc:	2101      	movs	r1, #1
 80096be:	f7ff ff01 	bl	80094c4 <_Balloc>
 80096c2:	4602      	mov	r2, r0
 80096c4:	b928      	cbnz	r0, 80096d2 <__i2b+0x1a>
 80096c6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80096ca:	4b04      	ldr	r3, [pc, #16]	; (80096dc <__i2b+0x24>)
 80096cc:	4804      	ldr	r0, [pc, #16]	; (80096e0 <__i2b+0x28>)
 80096ce:	f000 fc9b 	bl	800a008 <__assert_func>
 80096d2:	2301      	movs	r3, #1
 80096d4:	6144      	str	r4, [r0, #20]
 80096d6:	6103      	str	r3, [r0, #16]
 80096d8:	bd10      	pop	{r4, pc}
 80096da:	bf00      	nop
 80096dc:	0800c2bb 	.word	0x0800c2bb
 80096e0:	0800c2cc 	.word	0x0800c2cc

080096e4 <__multiply>:
 80096e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096e8:	4614      	mov	r4, r2
 80096ea:	690a      	ldr	r2, [r1, #16]
 80096ec:	6923      	ldr	r3, [r4, #16]
 80096ee:	460d      	mov	r5, r1
 80096f0:	429a      	cmp	r2, r3
 80096f2:	bfbe      	ittt	lt
 80096f4:	460b      	movlt	r3, r1
 80096f6:	4625      	movlt	r5, r4
 80096f8:	461c      	movlt	r4, r3
 80096fa:	f8d5 a010 	ldr.w	sl, [r5, #16]
 80096fe:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8009702:	68ab      	ldr	r3, [r5, #8]
 8009704:	6869      	ldr	r1, [r5, #4]
 8009706:	eb0a 0709 	add.w	r7, sl, r9
 800970a:	42bb      	cmp	r3, r7
 800970c:	b085      	sub	sp, #20
 800970e:	bfb8      	it	lt
 8009710:	3101      	addlt	r1, #1
 8009712:	f7ff fed7 	bl	80094c4 <_Balloc>
 8009716:	b930      	cbnz	r0, 8009726 <__multiply+0x42>
 8009718:	4602      	mov	r2, r0
 800971a:	f240 115d 	movw	r1, #349	; 0x15d
 800971e:	4b41      	ldr	r3, [pc, #260]	; (8009824 <__multiply+0x140>)
 8009720:	4841      	ldr	r0, [pc, #260]	; (8009828 <__multiply+0x144>)
 8009722:	f000 fc71 	bl	800a008 <__assert_func>
 8009726:	f100 0614 	add.w	r6, r0, #20
 800972a:	4633      	mov	r3, r6
 800972c:	2200      	movs	r2, #0
 800972e:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8009732:	4543      	cmp	r3, r8
 8009734:	d31e      	bcc.n	8009774 <__multiply+0x90>
 8009736:	f105 0c14 	add.w	ip, r5, #20
 800973a:	f104 0314 	add.w	r3, r4, #20
 800973e:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8009742:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8009746:	9202      	str	r2, [sp, #8]
 8009748:	ebac 0205 	sub.w	r2, ip, r5
 800974c:	3a15      	subs	r2, #21
 800974e:	f022 0203 	bic.w	r2, r2, #3
 8009752:	3204      	adds	r2, #4
 8009754:	f105 0115 	add.w	r1, r5, #21
 8009758:	458c      	cmp	ip, r1
 800975a:	bf38      	it	cc
 800975c:	2204      	movcc	r2, #4
 800975e:	9201      	str	r2, [sp, #4]
 8009760:	9a02      	ldr	r2, [sp, #8]
 8009762:	9303      	str	r3, [sp, #12]
 8009764:	429a      	cmp	r2, r3
 8009766:	d808      	bhi.n	800977a <__multiply+0x96>
 8009768:	2f00      	cmp	r7, #0
 800976a:	dc55      	bgt.n	8009818 <__multiply+0x134>
 800976c:	6107      	str	r7, [r0, #16]
 800976e:	b005      	add	sp, #20
 8009770:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009774:	f843 2b04 	str.w	r2, [r3], #4
 8009778:	e7db      	b.n	8009732 <__multiply+0x4e>
 800977a:	f8b3 a000 	ldrh.w	sl, [r3]
 800977e:	f1ba 0f00 	cmp.w	sl, #0
 8009782:	d020      	beq.n	80097c6 <__multiply+0xe2>
 8009784:	46b1      	mov	r9, r6
 8009786:	2200      	movs	r2, #0
 8009788:	f105 0e14 	add.w	lr, r5, #20
 800978c:	f85e 4b04 	ldr.w	r4, [lr], #4
 8009790:	f8d9 b000 	ldr.w	fp, [r9]
 8009794:	b2a1      	uxth	r1, r4
 8009796:	fa1f fb8b 	uxth.w	fp, fp
 800979a:	fb0a b101 	mla	r1, sl, r1, fp
 800979e:	4411      	add	r1, r2
 80097a0:	f8d9 2000 	ldr.w	r2, [r9]
 80097a4:	0c24      	lsrs	r4, r4, #16
 80097a6:	0c12      	lsrs	r2, r2, #16
 80097a8:	fb0a 2404 	mla	r4, sl, r4, r2
 80097ac:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 80097b0:	b289      	uxth	r1, r1
 80097b2:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80097b6:	45f4      	cmp	ip, lr
 80097b8:	ea4f 4214 	mov.w	r2, r4, lsr #16
 80097bc:	f849 1b04 	str.w	r1, [r9], #4
 80097c0:	d8e4      	bhi.n	800978c <__multiply+0xa8>
 80097c2:	9901      	ldr	r1, [sp, #4]
 80097c4:	5072      	str	r2, [r6, r1]
 80097c6:	9a03      	ldr	r2, [sp, #12]
 80097c8:	3304      	adds	r3, #4
 80097ca:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80097ce:	f1b9 0f00 	cmp.w	r9, #0
 80097d2:	d01f      	beq.n	8009814 <__multiply+0x130>
 80097d4:	46b6      	mov	lr, r6
 80097d6:	f04f 0a00 	mov.w	sl, #0
 80097da:	6834      	ldr	r4, [r6, #0]
 80097dc:	f105 0114 	add.w	r1, r5, #20
 80097e0:	880a      	ldrh	r2, [r1, #0]
 80097e2:	f8be b002 	ldrh.w	fp, [lr, #2]
 80097e6:	b2a4      	uxth	r4, r4
 80097e8:	fb09 b202 	mla	r2, r9, r2, fp
 80097ec:	4492      	add	sl, r2
 80097ee:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80097f2:	f84e 4b04 	str.w	r4, [lr], #4
 80097f6:	f851 4b04 	ldr.w	r4, [r1], #4
 80097fa:	f8be 2000 	ldrh.w	r2, [lr]
 80097fe:	0c24      	lsrs	r4, r4, #16
 8009800:	fb09 2404 	mla	r4, r9, r4, r2
 8009804:	458c      	cmp	ip, r1
 8009806:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800980a:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800980e:	d8e7      	bhi.n	80097e0 <__multiply+0xfc>
 8009810:	9a01      	ldr	r2, [sp, #4]
 8009812:	50b4      	str	r4, [r6, r2]
 8009814:	3604      	adds	r6, #4
 8009816:	e7a3      	b.n	8009760 <__multiply+0x7c>
 8009818:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800981c:	2b00      	cmp	r3, #0
 800981e:	d1a5      	bne.n	800976c <__multiply+0x88>
 8009820:	3f01      	subs	r7, #1
 8009822:	e7a1      	b.n	8009768 <__multiply+0x84>
 8009824:	0800c2bb 	.word	0x0800c2bb
 8009828:	0800c2cc 	.word	0x0800c2cc

0800982c <__pow5mult>:
 800982c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009830:	4615      	mov	r5, r2
 8009832:	f012 0203 	ands.w	r2, r2, #3
 8009836:	4606      	mov	r6, r0
 8009838:	460f      	mov	r7, r1
 800983a:	d007      	beq.n	800984c <__pow5mult+0x20>
 800983c:	4c25      	ldr	r4, [pc, #148]	; (80098d4 <__pow5mult+0xa8>)
 800983e:	3a01      	subs	r2, #1
 8009840:	2300      	movs	r3, #0
 8009842:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009846:	f7ff fe9f 	bl	8009588 <__multadd>
 800984a:	4607      	mov	r7, r0
 800984c:	10ad      	asrs	r5, r5, #2
 800984e:	d03d      	beq.n	80098cc <__pow5mult+0xa0>
 8009850:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009852:	b97c      	cbnz	r4, 8009874 <__pow5mult+0x48>
 8009854:	2010      	movs	r0, #16
 8009856:	f7ff fe11 	bl	800947c <malloc>
 800985a:	4602      	mov	r2, r0
 800985c:	6270      	str	r0, [r6, #36]	; 0x24
 800985e:	b928      	cbnz	r0, 800986c <__pow5mult+0x40>
 8009860:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8009864:	4b1c      	ldr	r3, [pc, #112]	; (80098d8 <__pow5mult+0xac>)
 8009866:	481d      	ldr	r0, [pc, #116]	; (80098dc <__pow5mult+0xb0>)
 8009868:	f000 fbce 	bl	800a008 <__assert_func>
 800986c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009870:	6004      	str	r4, [r0, #0]
 8009872:	60c4      	str	r4, [r0, #12]
 8009874:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009878:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800987c:	b94c      	cbnz	r4, 8009892 <__pow5mult+0x66>
 800987e:	f240 2171 	movw	r1, #625	; 0x271
 8009882:	4630      	mov	r0, r6
 8009884:	f7ff ff18 	bl	80096b8 <__i2b>
 8009888:	2300      	movs	r3, #0
 800988a:	4604      	mov	r4, r0
 800988c:	f8c8 0008 	str.w	r0, [r8, #8]
 8009890:	6003      	str	r3, [r0, #0]
 8009892:	f04f 0900 	mov.w	r9, #0
 8009896:	07eb      	lsls	r3, r5, #31
 8009898:	d50a      	bpl.n	80098b0 <__pow5mult+0x84>
 800989a:	4639      	mov	r1, r7
 800989c:	4622      	mov	r2, r4
 800989e:	4630      	mov	r0, r6
 80098a0:	f7ff ff20 	bl	80096e4 <__multiply>
 80098a4:	4680      	mov	r8, r0
 80098a6:	4639      	mov	r1, r7
 80098a8:	4630      	mov	r0, r6
 80098aa:	f7ff fe4b 	bl	8009544 <_Bfree>
 80098ae:	4647      	mov	r7, r8
 80098b0:	106d      	asrs	r5, r5, #1
 80098b2:	d00b      	beq.n	80098cc <__pow5mult+0xa0>
 80098b4:	6820      	ldr	r0, [r4, #0]
 80098b6:	b938      	cbnz	r0, 80098c8 <__pow5mult+0x9c>
 80098b8:	4622      	mov	r2, r4
 80098ba:	4621      	mov	r1, r4
 80098bc:	4630      	mov	r0, r6
 80098be:	f7ff ff11 	bl	80096e4 <__multiply>
 80098c2:	6020      	str	r0, [r4, #0]
 80098c4:	f8c0 9000 	str.w	r9, [r0]
 80098c8:	4604      	mov	r4, r0
 80098ca:	e7e4      	b.n	8009896 <__pow5mult+0x6a>
 80098cc:	4638      	mov	r0, r7
 80098ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80098d2:	bf00      	nop
 80098d4:	0800c420 	.word	0x0800c420
 80098d8:	0800c245 	.word	0x0800c245
 80098dc:	0800c2cc 	.word	0x0800c2cc

080098e0 <__lshift>:
 80098e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80098e4:	460c      	mov	r4, r1
 80098e6:	4607      	mov	r7, r0
 80098e8:	4691      	mov	r9, r2
 80098ea:	6923      	ldr	r3, [r4, #16]
 80098ec:	6849      	ldr	r1, [r1, #4]
 80098ee:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80098f2:	68a3      	ldr	r3, [r4, #8]
 80098f4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80098f8:	f108 0601 	add.w	r6, r8, #1
 80098fc:	42b3      	cmp	r3, r6
 80098fe:	db0b      	blt.n	8009918 <__lshift+0x38>
 8009900:	4638      	mov	r0, r7
 8009902:	f7ff fddf 	bl	80094c4 <_Balloc>
 8009906:	4605      	mov	r5, r0
 8009908:	b948      	cbnz	r0, 800991e <__lshift+0x3e>
 800990a:	4602      	mov	r2, r0
 800990c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8009910:	4b27      	ldr	r3, [pc, #156]	; (80099b0 <__lshift+0xd0>)
 8009912:	4828      	ldr	r0, [pc, #160]	; (80099b4 <__lshift+0xd4>)
 8009914:	f000 fb78 	bl	800a008 <__assert_func>
 8009918:	3101      	adds	r1, #1
 800991a:	005b      	lsls	r3, r3, #1
 800991c:	e7ee      	b.n	80098fc <__lshift+0x1c>
 800991e:	2300      	movs	r3, #0
 8009920:	f100 0114 	add.w	r1, r0, #20
 8009924:	f100 0210 	add.w	r2, r0, #16
 8009928:	4618      	mov	r0, r3
 800992a:	4553      	cmp	r3, sl
 800992c:	db33      	blt.n	8009996 <__lshift+0xb6>
 800992e:	6920      	ldr	r0, [r4, #16]
 8009930:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009934:	f104 0314 	add.w	r3, r4, #20
 8009938:	f019 091f 	ands.w	r9, r9, #31
 800993c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009940:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009944:	d02b      	beq.n	800999e <__lshift+0xbe>
 8009946:	468a      	mov	sl, r1
 8009948:	2200      	movs	r2, #0
 800994a:	f1c9 0e20 	rsb	lr, r9, #32
 800994e:	6818      	ldr	r0, [r3, #0]
 8009950:	fa00 f009 	lsl.w	r0, r0, r9
 8009954:	4302      	orrs	r2, r0
 8009956:	f84a 2b04 	str.w	r2, [sl], #4
 800995a:	f853 2b04 	ldr.w	r2, [r3], #4
 800995e:	459c      	cmp	ip, r3
 8009960:	fa22 f20e 	lsr.w	r2, r2, lr
 8009964:	d8f3      	bhi.n	800994e <__lshift+0x6e>
 8009966:	ebac 0304 	sub.w	r3, ip, r4
 800996a:	3b15      	subs	r3, #21
 800996c:	f023 0303 	bic.w	r3, r3, #3
 8009970:	3304      	adds	r3, #4
 8009972:	f104 0015 	add.w	r0, r4, #21
 8009976:	4584      	cmp	ip, r0
 8009978:	bf38      	it	cc
 800997a:	2304      	movcc	r3, #4
 800997c:	50ca      	str	r2, [r1, r3]
 800997e:	b10a      	cbz	r2, 8009984 <__lshift+0xa4>
 8009980:	f108 0602 	add.w	r6, r8, #2
 8009984:	3e01      	subs	r6, #1
 8009986:	4638      	mov	r0, r7
 8009988:	4621      	mov	r1, r4
 800998a:	612e      	str	r6, [r5, #16]
 800998c:	f7ff fdda 	bl	8009544 <_Bfree>
 8009990:	4628      	mov	r0, r5
 8009992:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009996:	f842 0f04 	str.w	r0, [r2, #4]!
 800999a:	3301      	adds	r3, #1
 800999c:	e7c5      	b.n	800992a <__lshift+0x4a>
 800999e:	3904      	subs	r1, #4
 80099a0:	f853 2b04 	ldr.w	r2, [r3], #4
 80099a4:	459c      	cmp	ip, r3
 80099a6:	f841 2f04 	str.w	r2, [r1, #4]!
 80099aa:	d8f9      	bhi.n	80099a0 <__lshift+0xc0>
 80099ac:	e7ea      	b.n	8009984 <__lshift+0xa4>
 80099ae:	bf00      	nop
 80099b0:	0800c2bb 	.word	0x0800c2bb
 80099b4:	0800c2cc 	.word	0x0800c2cc

080099b8 <__mcmp>:
 80099b8:	4603      	mov	r3, r0
 80099ba:	690a      	ldr	r2, [r1, #16]
 80099bc:	6900      	ldr	r0, [r0, #16]
 80099be:	b530      	push	{r4, r5, lr}
 80099c0:	1a80      	subs	r0, r0, r2
 80099c2:	d10d      	bne.n	80099e0 <__mcmp+0x28>
 80099c4:	3314      	adds	r3, #20
 80099c6:	3114      	adds	r1, #20
 80099c8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80099cc:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80099d0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80099d4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80099d8:	4295      	cmp	r5, r2
 80099da:	d002      	beq.n	80099e2 <__mcmp+0x2a>
 80099dc:	d304      	bcc.n	80099e8 <__mcmp+0x30>
 80099de:	2001      	movs	r0, #1
 80099e0:	bd30      	pop	{r4, r5, pc}
 80099e2:	42a3      	cmp	r3, r4
 80099e4:	d3f4      	bcc.n	80099d0 <__mcmp+0x18>
 80099e6:	e7fb      	b.n	80099e0 <__mcmp+0x28>
 80099e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80099ec:	e7f8      	b.n	80099e0 <__mcmp+0x28>
	...

080099f0 <__mdiff>:
 80099f0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099f4:	460c      	mov	r4, r1
 80099f6:	4606      	mov	r6, r0
 80099f8:	4611      	mov	r1, r2
 80099fa:	4620      	mov	r0, r4
 80099fc:	4692      	mov	sl, r2
 80099fe:	f7ff ffdb 	bl	80099b8 <__mcmp>
 8009a02:	1e05      	subs	r5, r0, #0
 8009a04:	d111      	bne.n	8009a2a <__mdiff+0x3a>
 8009a06:	4629      	mov	r1, r5
 8009a08:	4630      	mov	r0, r6
 8009a0a:	f7ff fd5b 	bl	80094c4 <_Balloc>
 8009a0e:	4602      	mov	r2, r0
 8009a10:	b928      	cbnz	r0, 8009a1e <__mdiff+0x2e>
 8009a12:	f240 2132 	movw	r1, #562	; 0x232
 8009a16:	4b3c      	ldr	r3, [pc, #240]	; (8009b08 <__mdiff+0x118>)
 8009a18:	483c      	ldr	r0, [pc, #240]	; (8009b0c <__mdiff+0x11c>)
 8009a1a:	f000 faf5 	bl	800a008 <__assert_func>
 8009a1e:	2301      	movs	r3, #1
 8009a20:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009a24:	4610      	mov	r0, r2
 8009a26:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a2a:	bfa4      	itt	ge
 8009a2c:	4653      	movge	r3, sl
 8009a2e:	46a2      	movge	sl, r4
 8009a30:	4630      	mov	r0, r6
 8009a32:	f8da 1004 	ldr.w	r1, [sl, #4]
 8009a36:	bfa6      	itte	ge
 8009a38:	461c      	movge	r4, r3
 8009a3a:	2500      	movge	r5, #0
 8009a3c:	2501      	movlt	r5, #1
 8009a3e:	f7ff fd41 	bl	80094c4 <_Balloc>
 8009a42:	4602      	mov	r2, r0
 8009a44:	b918      	cbnz	r0, 8009a4e <__mdiff+0x5e>
 8009a46:	f44f 7110 	mov.w	r1, #576	; 0x240
 8009a4a:	4b2f      	ldr	r3, [pc, #188]	; (8009b08 <__mdiff+0x118>)
 8009a4c:	e7e4      	b.n	8009a18 <__mdiff+0x28>
 8009a4e:	f100 0814 	add.w	r8, r0, #20
 8009a52:	f8da 7010 	ldr.w	r7, [sl, #16]
 8009a56:	60c5      	str	r5, [r0, #12]
 8009a58:	f04f 0c00 	mov.w	ip, #0
 8009a5c:	f10a 0514 	add.w	r5, sl, #20
 8009a60:	f10a 0010 	add.w	r0, sl, #16
 8009a64:	46c2      	mov	sl, r8
 8009a66:	6926      	ldr	r6, [r4, #16]
 8009a68:	f104 0914 	add.w	r9, r4, #20
 8009a6c:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 8009a70:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8009a74:	f850 bf04 	ldr.w	fp, [r0, #4]!
 8009a78:	f859 3b04 	ldr.w	r3, [r9], #4
 8009a7c:	fa1f f18b 	uxth.w	r1, fp
 8009a80:	4461      	add	r1, ip
 8009a82:	fa1f fc83 	uxth.w	ip, r3
 8009a86:	0c1b      	lsrs	r3, r3, #16
 8009a88:	eba1 010c 	sub.w	r1, r1, ip
 8009a8c:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009a90:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8009a94:	b289      	uxth	r1, r1
 8009a96:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8009a9a:	454e      	cmp	r6, r9
 8009a9c:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8009aa0:	f84a 3b04 	str.w	r3, [sl], #4
 8009aa4:	d8e6      	bhi.n	8009a74 <__mdiff+0x84>
 8009aa6:	1b33      	subs	r3, r6, r4
 8009aa8:	3b15      	subs	r3, #21
 8009aaa:	f023 0303 	bic.w	r3, r3, #3
 8009aae:	3415      	adds	r4, #21
 8009ab0:	3304      	adds	r3, #4
 8009ab2:	42a6      	cmp	r6, r4
 8009ab4:	bf38      	it	cc
 8009ab6:	2304      	movcc	r3, #4
 8009ab8:	441d      	add	r5, r3
 8009aba:	4443      	add	r3, r8
 8009abc:	461e      	mov	r6, r3
 8009abe:	462c      	mov	r4, r5
 8009ac0:	4574      	cmp	r4, lr
 8009ac2:	d30e      	bcc.n	8009ae2 <__mdiff+0xf2>
 8009ac4:	f10e 0103 	add.w	r1, lr, #3
 8009ac8:	1b49      	subs	r1, r1, r5
 8009aca:	f021 0103 	bic.w	r1, r1, #3
 8009ace:	3d03      	subs	r5, #3
 8009ad0:	45ae      	cmp	lr, r5
 8009ad2:	bf38      	it	cc
 8009ad4:	2100      	movcc	r1, #0
 8009ad6:	4419      	add	r1, r3
 8009ad8:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8009adc:	b18b      	cbz	r3, 8009b02 <__mdiff+0x112>
 8009ade:	6117      	str	r7, [r2, #16]
 8009ae0:	e7a0      	b.n	8009a24 <__mdiff+0x34>
 8009ae2:	f854 8b04 	ldr.w	r8, [r4], #4
 8009ae6:	fa1f f188 	uxth.w	r1, r8
 8009aea:	4461      	add	r1, ip
 8009aec:	1408      	asrs	r0, r1, #16
 8009aee:	eb00 4018 	add.w	r0, r0, r8, lsr #16
 8009af2:	b289      	uxth	r1, r1
 8009af4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8009af8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009afc:	f846 1b04 	str.w	r1, [r6], #4
 8009b00:	e7de      	b.n	8009ac0 <__mdiff+0xd0>
 8009b02:	3f01      	subs	r7, #1
 8009b04:	e7e8      	b.n	8009ad8 <__mdiff+0xe8>
 8009b06:	bf00      	nop
 8009b08:	0800c2bb 	.word	0x0800c2bb
 8009b0c:	0800c2cc 	.word	0x0800c2cc

08009b10 <__d2b>:
 8009b10:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8009b14:	2101      	movs	r1, #1
 8009b16:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8009b1a:	4690      	mov	r8, r2
 8009b1c:	461d      	mov	r5, r3
 8009b1e:	f7ff fcd1 	bl	80094c4 <_Balloc>
 8009b22:	4604      	mov	r4, r0
 8009b24:	b930      	cbnz	r0, 8009b34 <__d2b+0x24>
 8009b26:	4602      	mov	r2, r0
 8009b28:	f240 310a 	movw	r1, #778	; 0x30a
 8009b2c:	4b24      	ldr	r3, [pc, #144]	; (8009bc0 <__d2b+0xb0>)
 8009b2e:	4825      	ldr	r0, [pc, #148]	; (8009bc4 <__d2b+0xb4>)
 8009b30:	f000 fa6a 	bl	800a008 <__assert_func>
 8009b34:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8009b38:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8009b3c:	bb2d      	cbnz	r5, 8009b8a <__d2b+0x7a>
 8009b3e:	9301      	str	r3, [sp, #4]
 8009b40:	f1b8 0300 	subs.w	r3, r8, #0
 8009b44:	d026      	beq.n	8009b94 <__d2b+0x84>
 8009b46:	4668      	mov	r0, sp
 8009b48:	9300      	str	r3, [sp, #0]
 8009b4a:	f7ff fd87 	bl	800965c <__lo0bits>
 8009b4e:	9900      	ldr	r1, [sp, #0]
 8009b50:	b1f0      	cbz	r0, 8009b90 <__d2b+0x80>
 8009b52:	9a01      	ldr	r2, [sp, #4]
 8009b54:	f1c0 0320 	rsb	r3, r0, #32
 8009b58:	fa02 f303 	lsl.w	r3, r2, r3
 8009b5c:	430b      	orrs	r3, r1
 8009b5e:	40c2      	lsrs	r2, r0
 8009b60:	6163      	str	r3, [r4, #20]
 8009b62:	9201      	str	r2, [sp, #4]
 8009b64:	9b01      	ldr	r3, [sp, #4]
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	bf14      	ite	ne
 8009b6a:	2102      	movne	r1, #2
 8009b6c:	2101      	moveq	r1, #1
 8009b6e:	61a3      	str	r3, [r4, #24]
 8009b70:	6121      	str	r1, [r4, #16]
 8009b72:	b1c5      	cbz	r5, 8009ba6 <__d2b+0x96>
 8009b74:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009b78:	4405      	add	r5, r0
 8009b7a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009b7e:	603d      	str	r5, [r7, #0]
 8009b80:	6030      	str	r0, [r6, #0]
 8009b82:	4620      	mov	r0, r4
 8009b84:	b002      	add	sp, #8
 8009b86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009b8a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009b8e:	e7d6      	b.n	8009b3e <__d2b+0x2e>
 8009b90:	6161      	str	r1, [r4, #20]
 8009b92:	e7e7      	b.n	8009b64 <__d2b+0x54>
 8009b94:	a801      	add	r0, sp, #4
 8009b96:	f7ff fd61 	bl	800965c <__lo0bits>
 8009b9a:	2101      	movs	r1, #1
 8009b9c:	9b01      	ldr	r3, [sp, #4]
 8009b9e:	6121      	str	r1, [r4, #16]
 8009ba0:	6163      	str	r3, [r4, #20]
 8009ba2:	3020      	adds	r0, #32
 8009ba4:	e7e5      	b.n	8009b72 <__d2b+0x62>
 8009ba6:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8009baa:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009bae:	6038      	str	r0, [r7, #0]
 8009bb0:	6918      	ldr	r0, [r3, #16]
 8009bb2:	f7ff fd33 	bl	800961c <__hi0bits>
 8009bb6:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8009bba:	6031      	str	r1, [r6, #0]
 8009bbc:	e7e1      	b.n	8009b82 <__d2b+0x72>
 8009bbe:	bf00      	nop
 8009bc0:	0800c2bb 	.word	0x0800c2bb
 8009bc4:	0800c2cc 	.word	0x0800c2cc

08009bc8 <_calloc_r>:
 8009bc8:	b538      	push	{r3, r4, r5, lr}
 8009bca:	fb02 f501 	mul.w	r5, r2, r1
 8009bce:	4629      	mov	r1, r5
 8009bd0:	f000 f854 	bl	8009c7c <_malloc_r>
 8009bd4:	4604      	mov	r4, r0
 8009bd6:	b118      	cbz	r0, 8009be0 <_calloc_r+0x18>
 8009bd8:	462a      	mov	r2, r5
 8009bda:	2100      	movs	r1, #0
 8009bdc:	f7fe f946 	bl	8007e6c <memset>
 8009be0:	4620      	mov	r0, r4
 8009be2:	bd38      	pop	{r3, r4, r5, pc}

08009be4 <_free_r>:
 8009be4:	b538      	push	{r3, r4, r5, lr}
 8009be6:	4605      	mov	r5, r0
 8009be8:	2900      	cmp	r1, #0
 8009bea:	d043      	beq.n	8009c74 <_free_r+0x90>
 8009bec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009bf0:	1f0c      	subs	r4, r1, #4
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	bfb8      	it	lt
 8009bf6:	18e4      	addlt	r4, r4, r3
 8009bf8:	f000 fa62 	bl	800a0c0 <__malloc_lock>
 8009bfc:	4a1e      	ldr	r2, [pc, #120]	; (8009c78 <_free_r+0x94>)
 8009bfe:	6813      	ldr	r3, [r2, #0]
 8009c00:	4610      	mov	r0, r2
 8009c02:	b933      	cbnz	r3, 8009c12 <_free_r+0x2e>
 8009c04:	6063      	str	r3, [r4, #4]
 8009c06:	6014      	str	r4, [r2, #0]
 8009c08:	4628      	mov	r0, r5
 8009c0a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009c0e:	f000 ba5d 	b.w	800a0cc <__malloc_unlock>
 8009c12:	42a3      	cmp	r3, r4
 8009c14:	d90a      	bls.n	8009c2c <_free_r+0x48>
 8009c16:	6821      	ldr	r1, [r4, #0]
 8009c18:	1862      	adds	r2, r4, r1
 8009c1a:	4293      	cmp	r3, r2
 8009c1c:	bf01      	itttt	eq
 8009c1e:	681a      	ldreq	r2, [r3, #0]
 8009c20:	685b      	ldreq	r3, [r3, #4]
 8009c22:	1852      	addeq	r2, r2, r1
 8009c24:	6022      	streq	r2, [r4, #0]
 8009c26:	6063      	str	r3, [r4, #4]
 8009c28:	6004      	str	r4, [r0, #0]
 8009c2a:	e7ed      	b.n	8009c08 <_free_r+0x24>
 8009c2c:	461a      	mov	r2, r3
 8009c2e:	685b      	ldr	r3, [r3, #4]
 8009c30:	b10b      	cbz	r3, 8009c36 <_free_r+0x52>
 8009c32:	42a3      	cmp	r3, r4
 8009c34:	d9fa      	bls.n	8009c2c <_free_r+0x48>
 8009c36:	6811      	ldr	r1, [r2, #0]
 8009c38:	1850      	adds	r0, r2, r1
 8009c3a:	42a0      	cmp	r0, r4
 8009c3c:	d10b      	bne.n	8009c56 <_free_r+0x72>
 8009c3e:	6820      	ldr	r0, [r4, #0]
 8009c40:	4401      	add	r1, r0
 8009c42:	1850      	adds	r0, r2, r1
 8009c44:	4283      	cmp	r3, r0
 8009c46:	6011      	str	r1, [r2, #0]
 8009c48:	d1de      	bne.n	8009c08 <_free_r+0x24>
 8009c4a:	6818      	ldr	r0, [r3, #0]
 8009c4c:	685b      	ldr	r3, [r3, #4]
 8009c4e:	4401      	add	r1, r0
 8009c50:	6011      	str	r1, [r2, #0]
 8009c52:	6053      	str	r3, [r2, #4]
 8009c54:	e7d8      	b.n	8009c08 <_free_r+0x24>
 8009c56:	d902      	bls.n	8009c5e <_free_r+0x7a>
 8009c58:	230c      	movs	r3, #12
 8009c5a:	602b      	str	r3, [r5, #0]
 8009c5c:	e7d4      	b.n	8009c08 <_free_r+0x24>
 8009c5e:	6820      	ldr	r0, [r4, #0]
 8009c60:	1821      	adds	r1, r4, r0
 8009c62:	428b      	cmp	r3, r1
 8009c64:	bf01      	itttt	eq
 8009c66:	6819      	ldreq	r1, [r3, #0]
 8009c68:	685b      	ldreq	r3, [r3, #4]
 8009c6a:	1809      	addeq	r1, r1, r0
 8009c6c:	6021      	streq	r1, [r4, #0]
 8009c6e:	6063      	str	r3, [r4, #4]
 8009c70:	6054      	str	r4, [r2, #4]
 8009c72:	e7c9      	b.n	8009c08 <_free_r+0x24>
 8009c74:	bd38      	pop	{r3, r4, r5, pc}
 8009c76:	bf00      	nop
 8009c78:	200011c4 	.word	0x200011c4

08009c7c <_malloc_r>:
 8009c7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c7e:	1ccd      	adds	r5, r1, #3
 8009c80:	f025 0503 	bic.w	r5, r5, #3
 8009c84:	3508      	adds	r5, #8
 8009c86:	2d0c      	cmp	r5, #12
 8009c88:	bf38      	it	cc
 8009c8a:	250c      	movcc	r5, #12
 8009c8c:	2d00      	cmp	r5, #0
 8009c8e:	4606      	mov	r6, r0
 8009c90:	db01      	blt.n	8009c96 <_malloc_r+0x1a>
 8009c92:	42a9      	cmp	r1, r5
 8009c94:	d903      	bls.n	8009c9e <_malloc_r+0x22>
 8009c96:	230c      	movs	r3, #12
 8009c98:	6033      	str	r3, [r6, #0]
 8009c9a:	2000      	movs	r0, #0
 8009c9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009c9e:	f000 fa0f 	bl	800a0c0 <__malloc_lock>
 8009ca2:	4921      	ldr	r1, [pc, #132]	; (8009d28 <_malloc_r+0xac>)
 8009ca4:	680a      	ldr	r2, [r1, #0]
 8009ca6:	4614      	mov	r4, r2
 8009ca8:	b99c      	cbnz	r4, 8009cd2 <_malloc_r+0x56>
 8009caa:	4f20      	ldr	r7, [pc, #128]	; (8009d2c <_malloc_r+0xb0>)
 8009cac:	683b      	ldr	r3, [r7, #0]
 8009cae:	b923      	cbnz	r3, 8009cba <_malloc_r+0x3e>
 8009cb0:	4621      	mov	r1, r4
 8009cb2:	4630      	mov	r0, r6
 8009cb4:	f000 f998 	bl	8009fe8 <_sbrk_r>
 8009cb8:	6038      	str	r0, [r7, #0]
 8009cba:	4629      	mov	r1, r5
 8009cbc:	4630      	mov	r0, r6
 8009cbe:	f000 f993 	bl	8009fe8 <_sbrk_r>
 8009cc2:	1c43      	adds	r3, r0, #1
 8009cc4:	d123      	bne.n	8009d0e <_malloc_r+0x92>
 8009cc6:	230c      	movs	r3, #12
 8009cc8:	4630      	mov	r0, r6
 8009cca:	6033      	str	r3, [r6, #0]
 8009ccc:	f000 f9fe 	bl	800a0cc <__malloc_unlock>
 8009cd0:	e7e3      	b.n	8009c9a <_malloc_r+0x1e>
 8009cd2:	6823      	ldr	r3, [r4, #0]
 8009cd4:	1b5b      	subs	r3, r3, r5
 8009cd6:	d417      	bmi.n	8009d08 <_malloc_r+0x8c>
 8009cd8:	2b0b      	cmp	r3, #11
 8009cda:	d903      	bls.n	8009ce4 <_malloc_r+0x68>
 8009cdc:	6023      	str	r3, [r4, #0]
 8009cde:	441c      	add	r4, r3
 8009ce0:	6025      	str	r5, [r4, #0]
 8009ce2:	e004      	b.n	8009cee <_malloc_r+0x72>
 8009ce4:	6863      	ldr	r3, [r4, #4]
 8009ce6:	42a2      	cmp	r2, r4
 8009ce8:	bf0c      	ite	eq
 8009cea:	600b      	streq	r3, [r1, #0]
 8009cec:	6053      	strne	r3, [r2, #4]
 8009cee:	4630      	mov	r0, r6
 8009cf0:	f000 f9ec 	bl	800a0cc <__malloc_unlock>
 8009cf4:	f104 000b 	add.w	r0, r4, #11
 8009cf8:	1d23      	adds	r3, r4, #4
 8009cfa:	f020 0007 	bic.w	r0, r0, #7
 8009cfe:	1ac2      	subs	r2, r0, r3
 8009d00:	d0cc      	beq.n	8009c9c <_malloc_r+0x20>
 8009d02:	1a1b      	subs	r3, r3, r0
 8009d04:	50a3      	str	r3, [r4, r2]
 8009d06:	e7c9      	b.n	8009c9c <_malloc_r+0x20>
 8009d08:	4622      	mov	r2, r4
 8009d0a:	6864      	ldr	r4, [r4, #4]
 8009d0c:	e7cc      	b.n	8009ca8 <_malloc_r+0x2c>
 8009d0e:	1cc4      	adds	r4, r0, #3
 8009d10:	f024 0403 	bic.w	r4, r4, #3
 8009d14:	42a0      	cmp	r0, r4
 8009d16:	d0e3      	beq.n	8009ce0 <_malloc_r+0x64>
 8009d18:	1a21      	subs	r1, r4, r0
 8009d1a:	4630      	mov	r0, r6
 8009d1c:	f000 f964 	bl	8009fe8 <_sbrk_r>
 8009d20:	3001      	adds	r0, #1
 8009d22:	d1dd      	bne.n	8009ce0 <_malloc_r+0x64>
 8009d24:	e7cf      	b.n	8009cc6 <_malloc_r+0x4a>
 8009d26:	bf00      	nop
 8009d28:	200011c4 	.word	0x200011c4
 8009d2c:	200011c8 	.word	0x200011c8

08009d30 <__ssputs_r>:
 8009d30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009d34:	688e      	ldr	r6, [r1, #8]
 8009d36:	4682      	mov	sl, r0
 8009d38:	429e      	cmp	r6, r3
 8009d3a:	460c      	mov	r4, r1
 8009d3c:	4690      	mov	r8, r2
 8009d3e:	461f      	mov	r7, r3
 8009d40:	d838      	bhi.n	8009db4 <__ssputs_r+0x84>
 8009d42:	898a      	ldrh	r2, [r1, #12]
 8009d44:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009d48:	d032      	beq.n	8009db0 <__ssputs_r+0x80>
 8009d4a:	6825      	ldr	r5, [r4, #0]
 8009d4c:	6909      	ldr	r1, [r1, #16]
 8009d4e:	3301      	adds	r3, #1
 8009d50:	eba5 0901 	sub.w	r9, r5, r1
 8009d54:	6965      	ldr	r5, [r4, #20]
 8009d56:	444b      	add	r3, r9
 8009d58:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009d5c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009d60:	106d      	asrs	r5, r5, #1
 8009d62:	429d      	cmp	r5, r3
 8009d64:	bf38      	it	cc
 8009d66:	461d      	movcc	r5, r3
 8009d68:	0553      	lsls	r3, r2, #21
 8009d6a:	d531      	bpl.n	8009dd0 <__ssputs_r+0xa0>
 8009d6c:	4629      	mov	r1, r5
 8009d6e:	f7ff ff85 	bl	8009c7c <_malloc_r>
 8009d72:	4606      	mov	r6, r0
 8009d74:	b950      	cbnz	r0, 8009d8c <__ssputs_r+0x5c>
 8009d76:	230c      	movs	r3, #12
 8009d78:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009d7c:	f8ca 3000 	str.w	r3, [sl]
 8009d80:	89a3      	ldrh	r3, [r4, #12]
 8009d82:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009d86:	81a3      	strh	r3, [r4, #12]
 8009d88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009d8c:	464a      	mov	r2, r9
 8009d8e:	6921      	ldr	r1, [r4, #16]
 8009d90:	f7ff fb8a 	bl	80094a8 <memcpy>
 8009d94:	89a3      	ldrh	r3, [r4, #12]
 8009d96:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009d9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009d9e:	81a3      	strh	r3, [r4, #12]
 8009da0:	6126      	str	r6, [r4, #16]
 8009da2:	444e      	add	r6, r9
 8009da4:	6026      	str	r6, [r4, #0]
 8009da6:	463e      	mov	r6, r7
 8009da8:	6165      	str	r5, [r4, #20]
 8009daa:	eba5 0509 	sub.w	r5, r5, r9
 8009dae:	60a5      	str	r5, [r4, #8]
 8009db0:	42be      	cmp	r6, r7
 8009db2:	d900      	bls.n	8009db6 <__ssputs_r+0x86>
 8009db4:	463e      	mov	r6, r7
 8009db6:	4632      	mov	r2, r6
 8009db8:	4641      	mov	r1, r8
 8009dba:	6820      	ldr	r0, [r4, #0]
 8009dbc:	f000 f966 	bl	800a08c <memmove>
 8009dc0:	68a3      	ldr	r3, [r4, #8]
 8009dc2:	6822      	ldr	r2, [r4, #0]
 8009dc4:	1b9b      	subs	r3, r3, r6
 8009dc6:	4432      	add	r2, r6
 8009dc8:	2000      	movs	r0, #0
 8009dca:	60a3      	str	r3, [r4, #8]
 8009dcc:	6022      	str	r2, [r4, #0]
 8009dce:	e7db      	b.n	8009d88 <__ssputs_r+0x58>
 8009dd0:	462a      	mov	r2, r5
 8009dd2:	f000 f981 	bl	800a0d8 <_realloc_r>
 8009dd6:	4606      	mov	r6, r0
 8009dd8:	2800      	cmp	r0, #0
 8009dda:	d1e1      	bne.n	8009da0 <__ssputs_r+0x70>
 8009ddc:	4650      	mov	r0, sl
 8009dde:	6921      	ldr	r1, [r4, #16]
 8009de0:	f7ff ff00 	bl	8009be4 <_free_r>
 8009de4:	e7c7      	b.n	8009d76 <__ssputs_r+0x46>
	...

08009de8 <_svfiprintf_r>:
 8009de8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009dec:	4698      	mov	r8, r3
 8009dee:	898b      	ldrh	r3, [r1, #12]
 8009df0:	4607      	mov	r7, r0
 8009df2:	061b      	lsls	r3, r3, #24
 8009df4:	460d      	mov	r5, r1
 8009df6:	4614      	mov	r4, r2
 8009df8:	b09d      	sub	sp, #116	; 0x74
 8009dfa:	d50e      	bpl.n	8009e1a <_svfiprintf_r+0x32>
 8009dfc:	690b      	ldr	r3, [r1, #16]
 8009dfe:	b963      	cbnz	r3, 8009e1a <_svfiprintf_r+0x32>
 8009e00:	2140      	movs	r1, #64	; 0x40
 8009e02:	f7ff ff3b 	bl	8009c7c <_malloc_r>
 8009e06:	6028      	str	r0, [r5, #0]
 8009e08:	6128      	str	r0, [r5, #16]
 8009e0a:	b920      	cbnz	r0, 8009e16 <_svfiprintf_r+0x2e>
 8009e0c:	230c      	movs	r3, #12
 8009e0e:	603b      	str	r3, [r7, #0]
 8009e10:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009e14:	e0d1      	b.n	8009fba <_svfiprintf_r+0x1d2>
 8009e16:	2340      	movs	r3, #64	; 0x40
 8009e18:	616b      	str	r3, [r5, #20]
 8009e1a:	2300      	movs	r3, #0
 8009e1c:	9309      	str	r3, [sp, #36]	; 0x24
 8009e1e:	2320      	movs	r3, #32
 8009e20:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009e24:	2330      	movs	r3, #48	; 0x30
 8009e26:	f04f 0901 	mov.w	r9, #1
 8009e2a:	f8cd 800c 	str.w	r8, [sp, #12]
 8009e2e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8009fd4 <_svfiprintf_r+0x1ec>
 8009e32:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009e36:	4623      	mov	r3, r4
 8009e38:	469a      	mov	sl, r3
 8009e3a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009e3e:	b10a      	cbz	r2, 8009e44 <_svfiprintf_r+0x5c>
 8009e40:	2a25      	cmp	r2, #37	; 0x25
 8009e42:	d1f9      	bne.n	8009e38 <_svfiprintf_r+0x50>
 8009e44:	ebba 0b04 	subs.w	fp, sl, r4
 8009e48:	d00b      	beq.n	8009e62 <_svfiprintf_r+0x7a>
 8009e4a:	465b      	mov	r3, fp
 8009e4c:	4622      	mov	r2, r4
 8009e4e:	4629      	mov	r1, r5
 8009e50:	4638      	mov	r0, r7
 8009e52:	f7ff ff6d 	bl	8009d30 <__ssputs_r>
 8009e56:	3001      	adds	r0, #1
 8009e58:	f000 80aa 	beq.w	8009fb0 <_svfiprintf_r+0x1c8>
 8009e5c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009e5e:	445a      	add	r2, fp
 8009e60:	9209      	str	r2, [sp, #36]	; 0x24
 8009e62:	f89a 3000 	ldrb.w	r3, [sl]
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	f000 80a2 	beq.w	8009fb0 <_svfiprintf_r+0x1c8>
 8009e6c:	2300      	movs	r3, #0
 8009e6e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009e72:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009e76:	f10a 0a01 	add.w	sl, sl, #1
 8009e7a:	9304      	str	r3, [sp, #16]
 8009e7c:	9307      	str	r3, [sp, #28]
 8009e7e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009e82:	931a      	str	r3, [sp, #104]	; 0x68
 8009e84:	4654      	mov	r4, sl
 8009e86:	2205      	movs	r2, #5
 8009e88:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009e8c:	4851      	ldr	r0, [pc, #324]	; (8009fd4 <_svfiprintf_r+0x1ec>)
 8009e8e:	f7ff fafd 	bl	800948c <memchr>
 8009e92:	9a04      	ldr	r2, [sp, #16]
 8009e94:	b9d8      	cbnz	r0, 8009ece <_svfiprintf_r+0xe6>
 8009e96:	06d0      	lsls	r0, r2, #27
 8009e98:	bf44      	itt	mi
 8009e9a:	2320      	movmi	r3, #32
 8009e9c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009ea0:	0711      	lsls	r1, r2, #28
 8009ea2:	bf44      	itt	mi
 8009ea4:	232b      	movmi	r3, #43	; 0x2b
 8009ea6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009eaa:	f89a 3000 	ldrb.w	r3, [sl]
 8009eae:	2b2a      	cmp	r3, #42	; 0x2a
 8009eb0:	d015      	beq.n	8009ede <_svfiprintf_r+0xf6>
 8009eb2:	4654      	mov	r4, sl
 8009eb4:	2000      	movs	r0, #0
 8009eb6:	f04f 0c0a 	mov.w	ip, #10
 8009eba:	9a07      	ldr	r2, [sp, #28]
 8009ebc:	4621      	mov	r1, r4
 8009ebe:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009ec2:	3b30      	subs	r3, #48	; 0x30
 8009ec4:	2b09      	cmp	r3, #9
 8009ec6:	d94e      	bls.n	8009f66 <_svfiprintf_r+0x17e>
 8009ec8:	b1b0      	cbz	r0, 8009ef8 <_svfiprintf_r+0x110>
 8009eca:	9207      	str	r2, [sp, #28]
 8009ecc:	e014      	b.n	8009ef8 <_svfiprintf_r+0x110>
 8009ece:	eba0 0308 	sub.w	r3, r0, r8
 8009ed2:	fa09 f303 	lsl.w	r3, r9, r3
 8009ed6:	4313      	orrs	r3, r2
 8009ed8:	46a2      	mov	sl, r4
 8009eda:	9304      	str	r3, [sp, #16]
 8009edc:	e7d2      	b.n	8009e84 <_svfiprintf_r+0x9c>
 8009ede:	9b03      	ldr	r3, [sp, #12]
 8009ee0:	1d19      	adds	r1, r3, #4
 8009ee2:	681b      	ldr	r3, [r3, #0]
 8009ee4:	9103      	str	r1, [sp, #12]
 8009ee6:	2b00      	cmp	r3, #0
 8009ee8:	bfbb      	ittet	lt
 8009eea:	425b      	neglt	r3, r3
 8009eec:	f042 0202 	orrlt.w	r2, r2, #2
 8009ef0:	9307      	strge	r3, [sp, #28]
 8009ef2:	9307      	strlt	r3, [sp, #28]
 8009ef4:	bfb8      	it	lt
 8009ef6:	9204      	strlt	r2, [sp, #16]
 8009ef8:	7823      	ldrb	r3, [r4, #0]
 8009efa:	2b2e      	cmp	r3, #46	; 0x2e
 8009efc:	d10c      	bne.n	8009f18 <_svfiprintf_r+0x130>
 8009efe:	7863      	ldrb	r3, [r4, #1]
 8009f00:	2b2a      	cmp	r3, #42	; 0x2a
 8009f02:	d135      	bne.n	8009f70 <_svfiprintf_r+0x188>
 8009f04:	9b03      	ldr	r3, [sp, #12]
 8009f06:	3402      	adds	r4, #2
 8009f08:	1d1a      	adds	r2, r3, #4
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	9203      	str	r2, [sp, #12]
 8009f0e:	2b00      	cmp	r3, #0
 8009f10:	bfb8      	it	lt
 8009f12:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8009f16:	9305      	str	r3, [sp, #20]
 8009f18:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009fe4 <_svfiprintf_r+0x1fc>
 8009f1c:	2203      	movs	r2, #3
 8009f1e:	4650      	mov	r0, sl
 8009f20:	7821      	ldrb	r1, [r4, #0]
 8009f22:	f7ff fab3 	bl	800948c <memchr>
 8009f26:	b140      	cbz	r0, 8009f3a <_svfiprintf_r+0x152>
 8009f28:	2340      	movs	r3, #64	; 0x40
 8009f2a:	eba0 000a 	sub.w	r0, r0, sl
 8009f2e:	fa03 f000 	lsl.w	r0, r3, r0
 8009f32:	9b04      	ldr	r3, [sp, #16]
 8009f34:	3401      	adds	r4, #1
 8009f36:	4303      	orrs	r3, r0
 8009f38:	9304      	str	r3, [sp, #16]
 8009f3a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009f3e:	2206      	movs	r2, #6
 8009f40:	4825      	ldr	r0, [pc, #148]	; (8009fd8 <_svfiprintf_r+0x1f0>)
 8009f42:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009f46:	f7ff faa1 	bl	800948c <memchr>
 8009f4a:	2800      	cmp	r0, #0
 8009f4c:	d038      	beq.n	8009fc0 <_svfiprintf_r+0x1d8>
 8009f4e:	4b23      	ldr	r3, [pc, #140]	; (8009fdc <_svfiprintf_r+0x1f4>)
 8009f50:	bb1b      	cbnz	r3, 8009f9a <_svfiprintf_r+0x1b2>
 8009f52:	9b03      	ldr	r3, [sp, #12]
 8009f54:	3307      	adds	r3, #7
 8009f56:	f023 0307 	bic.w	r3, r3, #7
 8009f5a:	3308      	adds	r3, #8
 8009f5c:	9303      	str	r3, [sp, #12]
 8009f5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009f60:	4433      	add	r3, r6
 8009f62:	9309      	str	r3, [sp, #36]	; 0x24
 8009f64:	e767      	b.n	8009e36 <_svfiprintf_r+0x4e>
 8009f66:	460c      	mov	r4, r1
 8009f68:	2001      	movs	r0, #1
 8009f6a:	fb0c 3202 	mla	r2, ip, r2, r3
 8009f6e:	e7a5      	b.n	8009ebc <_svfiprintf_r+0xd4>
 8009f70:	2300      	movs	r3, #0
 8009f72:	f04f 0c0a 	mov.w	ip, #10
 8009f76:	4619      	mov	r1, r3
 8009f78:	3401      	adds	r4, #1
 8009f7a:	9305      	str	r3, [sp, #20]
 8009f7c:	4620      	mov	r0, r4
 8009f7e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009f82:	3a30      	subs	r2, #48	; 0x30
 8009f84:	2a09      	cmp	r2, #9
 8009f86:	d903      	bls.n	8009f90 <_svfiprintf_r+0x1a8>
 8009f88:	2b00      	cmp	r3, #0
 8009f8a:	d0c5      	beq.n	8009f18 <_svfiprintf_r+0x130>
 8009f8c:	9105      	str	r1, [sp, #20]
 8009f8e:	e7c3      	b.n	8009f18 <_svfiprintf_r+0x130>
 8009f90:	4604      	mov	r4, r0
 8009f92:	2301      	movs	r3, #1
 8009f94:	fb0c 2101 	mla	r1, ip, r1, r2
 8009f98:	e7f0      	b.n	8009f7c <_svfiprintf_r+0x194>
 8009f9a:	ab03      	add	r3, sp, #12
 8009f9c:	9300      	str	r3, [sp, #0]
 8009f9e:	462a      	mov	r2, r5
 8009fa0:	4638      	mov	r0, r7
 8009fa2:	4b0f      	ldr	r3, [pc, #60]	; (8009fe0 <_svfiprintf_r+0x1f8>)
 8009fa4:	a904      	add	r1, sp, #16
 8009fa6:	f7fe f807 	bl	8007fb8 <_printf_float>
 8009faa:	1c42      	adds	r2, r0, #1
 8009fac:	4606      	mov	r6, r0
 8009fae:	d1d6      	bne.n	8009f5e <_svfiprintf_r+0x176>
 8009fb0:	89ab      	ldrh	r3, [r5, #12]
 8009fb2:	065b      	lsls	r3, r3, #25
 8009fb4:	f53f af2c 	bmi.w	8009e10 <_svfiprintf_r+0x28>
 8009fb8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009fba:	b01d      	add	sp, #116	; 0x74
 8009fbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009fc0:	ab03      	add	r3, sp, #12
 8009fc2:	9300      	str	r3, [sp, #0]
 8009fc4:	462a      	mov	r2, r5
 8009fc6:	4638      	mov	r0, r7
 8009fc8:	4b05      	ldr	r3, [pc, #20]	; (8009fe0 <_svfiprintf_r+0x1f8>)
 8009fca:	a904      	add	r1, sp, #16
 8009fcc:	f7fe fa90 	bl	80084f0 <_printf_i>
 8009fd0:	e7eb      	b.n	8009faa <_svfiprintf_r+0x1c2>
 8009fd2:	bf00      	nop
 8009fd4:	0800c42c 	.word	0x0800c42c
 8009fd8:	0800c436 	.word	0x0800c436
 8009fdc:	08007fb9 	.word	0x08007fb9
 8009fe0:	08009d31 	.word	0x08009d31
 8009fe4:	0800c432 	.word	0x0800c432

08009fe8 <_sbrk_r>:
 8009fe8:	b538      	push	{r3, r4, r5, lr}
 8009fea:	2300      	movs	r3, #0
 8009fec:	4d05      	ldr	r5, [pc, #20]	; (800a004 <_sbrk_r+0x1c>)
 8009fee:	4604      	mov	r4, r0
 8009ff0:	4608      	mov	r0, r1
 8009ff2:	602b      	str	r3, [r5, #0]
 8009ff4:	f7f9 fc8e 	bl	8003914 <_sbrk>
 8009ff8:	1c43      	adds	r3, r0, #1
 8009ffa:	d102      	bne.n	800a002 <_sbrk_r+0x1a>
 8009ffc:	682b      	ldr	r3, [r5, #0]
 8009ffe:	b103      	cbz	r3, 800a002 <_sbrk_r+0x1a>
 800a000:	6023      	str	r3, [r4, #0]
 800a002:	bd38      	pop	{r3, r4, r5, pc}
 800a004:	20001d04 	.word	0x20001d04

0800a008 <__assert_func>:
 800a008:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a00a:	4614      	mov	r4, r2
 800a00c:	461a      	mov	r2, r3
 800a00e:	4b09      	ldr	r3, [pc, #36]	; (800a034 <__assert_func+0x2c>)
 800a010:	4605      	mov	r5, r0
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	68d8      	ldr	r0, [r3, #12]
 800a016:	b14c      	cbz	r4, 800a02c <__assert_func+0x24>
 800a018:	4b07      	ldr	r3, [pc, #28]	; (800a038 <__assert_func+0x30>)
 800a01a:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a01e:	9100      	str	r1, [sp, #0]
 800a020:	462b      	mov	r3, r5
 800a022:	4906      	ldr	r1, [pc, #24]	; (800a03c <__assert_func+0x34>)
 800a024:	f000 f80e 	bl	800a044 <fiprintf>
 800a028:	f000 faa2 	bl	800a570 <abort>
 800a02c:	4b04      	ldr	r3, [pc, #16]	; (800a040 <__assert_func+0x38>)
 800a02e:	461c      	mov	r4, r3
 800a030:	e7f3      	b.n	800a01a <__assert_func+0x12>
 800a032:	bf00      	nop
 800a034:	2000001c 	.word	0x2000001c
 800a038:	0800c43d 	.word	0x0800c43d
 800a03c:	0800c44a 	.word	0x0800c44a
 800a040:	0800c478 	.word	0x0800c478

0800a044 <fiprintf>:
 800a044:	b40e      	push	{r1, r2, r3}
 800a046:	b503      	push	{r0, r1, lr}
 800a048:	4601      	mov	r1, r0
 800a04a:	ab03      	add	r3, sp, #12
 800a04c:	4805      	ldr	r0, [pc, #20]	; (800a064 <fiprintf+0x20>)
 800a04e:	f853 2b04 	ldr.w	r2, [r3], #4
 800a052:	6800      	ldr	r0, [r0, #0]
 800a054:	9301      	str	r3, [sp, #4]
 800a056:	f000 f88d 	bl	800a174 <_vfiprintf_r>
 800a05a:	b002      	add	sp, #8
 800a05c:	f85d eb04 	ldr.w	lr, [sp], #4
 800a060:	b003      	add	sp, #12
 800a062:	4770      	bx	lr
 800a064:	2000001c 	.word	0x2000001c

0800a068 <__ascii_mbtowc>:
 800a068:	b082      	sub	sp, #8
 800a06a:	b901      	cbnz	r1, 800a06e <__ascii_mbtowc+0x6>
 800a06c:	a901      	add	r1, sp, #4
 800a06e:	b142      	cbz	r2, 800a082 <__ascii_mbtowc+0x1a>
 800a070:	b14b      	cbz	r3, 800a086 <__ascii_mbtowc+0x1e>
 800a072:	7813      	ldrb	r3, [r2, #0]
 800a074:	600b      	str	r3, [r1, #0]
 800a076:	7812      	ldrb	r2, [r2, #0]
 800a078:	1e10      	subs	r0, r2, #0
 800a07a:	bf18      	it	ne
 800a07c:	2001      	movne	r0, #1
 800a07e:	b002      	add	sp, #8
 800a080:	4770      	bx	lr
 800a082:	4610      	mov	r0, r2
 800a084:	e7fb      	b.n	800a07e <__ascii_mbtowc+0x16>
 800a086:	f06f 0001 	mvn.w	r0, #1
 800a08a:	e7f8      	b.n	800a07e <__ascii_mbtowc+0x16>

0800a08c <memmove>:
 800a08c:	4288      	cmp	r0, r1
 800a08e:	b510      	push	{r4, lr}
 800a090:	eb01 0402 	add.w	r4, r1, r2
 800a094:	d902      	bls.n	800a09c <memmove+0x10>
 800a096:	4284      	cmp	r4, r0
 800a098:	4623      	mov	r3, r4
 800a09a:	d807      	bhi.n	800a0ac <memmove+0x20>
 800a09c:	1e43      	subs	r3, r0, #1
 800a09e:	42a1      	cmp	r1, r4
 800a0a0:	d008      	beq.n	800a0b4 <memmove+0x28>
 800a0a2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a0a6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a0aa:	e7f8      	b.n	800a09e <memmove+0x12>
 800a0ac:	4601      	mov	r1, r0
 800a0ae:	4402      	add	r2, r0
 800a0b0:	428a      	cmp	r2, r1
 800a0b2:	d100      	bne.n	800a0b6 <memmove+0x2a>
 800a0b4:	bd10      	pop	{r4, pc}
 800a0b6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a0ba:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a0be:	e7f7      	b.n	800a0b0 <memmove+0x24>

0800a0c0 <__malloc_lock>:
 800a0c0:	4801      	ldr	r0, [pc, #4]	; (800a0c8 <__malloc_lock+0x8>)
 800a0c2:	f000 bc15 	b.w	800a8f0 <__retarget_lock_acquire_recursive>
 800a0c6:	bf00      	nop
 800a0c8:	20001d0c 	.word	0x20001d0c

0800a0cc <__malloc_unlock>:
 800a0cc:	4801      	ldr	r0, [pc, #4]	; (800a0d4 <__malloc_unlock+0x8>)
 800a0ce:	f000 bc10 	b.w	800a8f2 <__retarget_lock_release_recursive>
 800a0d2:	bf00      	nop
 800a0d4:	20001d0c 	.word	0x20001d0c

0800a0d8 <_realloc_r>:
 800a0d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a0da:	4607      	mov	r7, r0
 800a0dc:	4614      	mov	r4, r2
 800a0de:	460e      	mov	r6, r1
 800a0e0:	b921      	cbnz	r1, 800a0ec <_realloc_r+0x14>
 800a0e2:	4611      	mov	r1, r2
 800a0e4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800a0e8:	f7ff bdc8 	b.w	8009c7c <_malloc_r>
 800a0ec:	b922      	cbnz	r2, 800a0f8 <_realloc_r+0x20>
 800a0ee:	f7ff fd79 	bl	8009be4 <_free_r>
 800a0f2:	4625      	mov	r5, r4
 800a0f4:	4628      	mov	r0, r5
 800a0f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a0f8:	f000 fc60 	bl	800a9bc <_malloc_usable_size_r>
 800a0fc:	42a0      	cmp	r0, r4
 800a0fe:	d20f      	bcs.n	800a120 <_realloc_r+0x48>
 800a100:	4621      	mov	r1, r4
 800a102:	4638      	mov	r0, r7
 800a104:	f7ff fdba 	bl	8009c7c <_malloc_r>
 800a108:	4605      	mov	r5, r0
 800a10a:	2800      	cmp	r0, #0
 800a10c:	d0f2      	beq.n	800a0f4 <_realloc_r+0x1c>
 800a10e:	4631      	mov	r1, r6
 800a110:	4622      	mov	r2, r4
 800a112:	f7ff f9c9 	bl	80094a8 <memcpy>
 800a116:	4631      	mov	r1, r6
 800a118:	4638      	mov	r0, r7
 800a11a:	f7ff fd63 	bl	8009be4 <_free_r>
 800a11e:	e7e9      	b.n	800a0f4 <_realloc_r+0x1c>
 800a120:	4635      	mov	r5, r6
 800a122:	e7e7      	b.n	800a0f4 <_realloc_r+0x1c>

0800a124 <__sfputc_r>:
 800a124:	6893      	ldr	r3, [r2, #8]
 800a126:	b410      	push	{r4}
 800a128:	3b01      	subs	r3, #1
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	6093      	str	r3, [r2, #8]
 800a12e:	da07      	bge.n	800a140 <__sfputc_r+0x1c>
 800a130:	6994      	ldr	r4, [r2, #24]
 800a132:	42a3      	cmp	r3, r4
 800a134:	db01      	blt.n	800a13a <__sfputc_r+0x16>
 800a136:	290a      	cmp	r1, #10
 800a138:	d102      	bne.n	800a140 <__sfputc_r+0x1c>
 800a13a:	bc10      	pop	{r4}
 800a13c:	f000 b94a 	b.w	800a3d4 <__swbuf_r>
 800a140:	6813      	ldr	r3, [r2, #0]
 800a142:	1c58      	adds	r0, r3, #1
 800a144:	6010      	str	r0, [r2, #0]
 800a146:	7019      	strb	r1, [r3, #0]
 800a148:	4608      	mov	r0, r1
 800a14a:	bc10      	pop	{r4}
 800a14c:	4770      	bx	lr

0800a14e <__sfputs_r>:
 800a14e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a150:	4606      	mov	r6, r0
 800a152:	460f      	mov	r7, r1
 800a154:	4614      	mov	r4, r2
 800a156:	18d5      	adds	r5, r2, r3
 800a158:	42ac      	cmp	r4, r5
 800a15a:	d101      	bne.n	800a160 <__sfputs_r+0x12>
 800a15c:	2000      	movs	r0, #0
 800a15e:	e007      	b.n	800a170 <__sfputs_r+0x22>
 800a160:	463a      	mov	r2, r7
 800a162:	4630      	mov	r0, r6
 800a164:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a168:	f7ff ffdc 	bl	800a124 <__sfputc_r>
 800a16c:	1c43      	adds	r3, r0, #1
 800a16e:	d1f3      	bne.n	800a158 <__sfputs_r+0xa>
 800a170:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a174 <_vfiprintf_r>:
 800a174:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a178:	460d      	mov	r5, r1
 800a17a:	4614      	mov	r4, r2
 800a17c:	4698      	mov	r8, r3
 800a17e:	4606      	mov	r6, r0
 800a180:	b09d      	sub	sp, #116	; 0x74
 800a182:	b118      	cbz	r0, 800a18c <_vfiprintf_r+0x18>
 800a184:	6983      	ldr	r3, [r0, #24]
 800a186:	b90b      	cbnz	r3, 800a18c <_vfiprintf_r+0x18>
 800a188:	f000 fb14 	bl	800a7b4 <__sinit>
 800a18c:	4b89      	ldr	r3, [pc, #548]	; (800a3b4 <_vfiprintf_r+0x240>)
 800a18e:	429d      	cmp	r5, r3
 800a190:	d11b      	bne.n	800a1ca <_vfiprintf_r+0x56>
 800a192:	6875      	ldr	r5, [r6, #4]
 800a194:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a196:	07d9      	lsls	r1, r3, #31
 800a198:	d405      	bmi.n	800a1a6 <_vfiprintf_r+0x32>
 800a19a:	89ab      	ldrh	r3, [r5, #12]
 800a19c:	059a      	lsls	r2, r3, #22
 800a19e:	d402      	bmi.n	800a1a6 <_vfiprintf_r+0x32>
 800a1a0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a1a2:	f000 fba5 	bl	800a8f0 <__retarget_lock_acquire_recursive>
 800a1a6:	89ab      	ldrh	r3, [r5, #12]
 800a1a8:	071b      	lsls	r3, r3, #28
 800a1aa:	d501      	bpl.n	800a1b0 <_vfiprintf_r+0x3c>
 800a1ac:	692b      	ldr	r3, [r5, #16]
 800a1ae:	b9eb      	cbnz	r3, 800a1ec <_vfiprintf_r+0x78>
 800a1b0:	4629      	mov	r1, r5
 800a1b2:	4630      	mov	r0, r6
 800a1b4:	f000 f96e 	bl	800a494 <__swsetup_r>
 800a1b8:	b1c0      	cbz	r0, 800a1ec <_vfiprintf_r+0x78>
 800a1ba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a1bc:	07dc      	lsls	r4, r3, #31
 800a1be:	d50e      	bpl.n	800a1de <_vfiprintf_r+0x6a>
 800a1c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a1c4:	b01d      	add	sp, #116	; 0x74
 800a1c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a1ca:	4b7b      	ldr	r3, [pc, #492]	; (800a3b8 <_vfiprintf_r+0x244>)
 800a1cc:	429d      	cmp	r5, r3
 800a1ce:	d101      	bne.n	800a1d4 <_vfiprintf_r+0x60>
 800a1d0:	68b5      	ldr	r5, [r6, #8]
 800a1d2:	e7df      	b.n	800a194 <_vfiprintf_r+0x20>
 800a1d4:	4b79      	ldr	r3, [pc, #484]	; (800a3bc <_vfiprintf_r+0x248>)
 800a1d6:	429d      	cmp	r5, r3
 800a1d8:	bf08      	it	eq
 800a1da:	68f5      	ldreq	r5, [r6, #12]
 800a1dc:	e7da      	b.n	800a194 <_vfiprintf_r+0x20>
 800a1de:	89ab      	ldrh	r3, [r5, #12]
 800a1e0:	0598      	lsls	r0, r3, #22
 800a1e2:	d4ed      	bmi.n	800a1c0 <_vfiprintf_r+0x4c>
 800a1e4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a1e6:	f000 fb84 	bl	800a8f2 <__retarget_lock_release_recursive>
 800a1ea:	e7e9      	b.n	800a1c0 <_vfiprintf_r+0x4c>
 800a1ec:	2300      	movs	r3, #0
 800a1ee:	9309      	str	r3, [sp, #36]	; 0x24
 800a1f0:	2320      	movs	r3, #32
 800a1f2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a1f6:	2330      	movs	r3, #48	; 0x30
 800a1f8:	f04f 0901 	mov.w	r9, #1
 800a1fc:	f8cd 800c 	str.w	r8, [sp, #12]
 800a200:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800a3c0 <_vfiprintf_r+0x24c>
 800a204:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a208:	4623      	mov	r3, r4
 800a20a:	469a      	mov	sl, r3
 800a20c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a210:	b10a      	cbz	r2, 800a216 <_vfiprintf_r+0xa2>
 800a212:	2a25      	cmp	r2, #37	; 0x25
 800a214:	d1f9      	bne.n	800a20a <_vfiprintf_r+0x96>
 800a216:	ebba 0b04 	subs.w	fp, sl, r4
 800a21a:	d00b      	beq.n	800a234 <_vfiprintf_r+0xc0>
 800a21c:	465b      	mov	r3, fp
 800a21e:	4622      	mov	r2, r4
 800a220:	4629      	mov	r1, r5
 800a222:	4630      	mov	r0, r6
 800a224:	f7ff ff93 	bl	800a14e <__sfputs_r>
 800a228:	3001      	adds	r0, #1
 800a22a:	f000 80aa 	beq.w	800a382 <_vfiprintf_r+0x20e>
 800a22e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a230:	445a      	add	r2, fp
 800a232:	9209      	str	r2, [sp, #36]	; 0x24
 800a234:	f89a 3000 	ldrb.w	r3, [sl]
 800a238:	2b00      	cmp	r3, #0
 800a23a:	f000 80a2 	beq.w	800a382 <_vfiprintf_r+0x20e>
 800a23e:	2300      	movs	r3, #0
 800a240:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a244:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a248:	f10a 0a01 	add.w	sl, sl, #1
 800a24c:	9304      	str	r3, [sp, #16]
 800a24e:	9307      	str	r3, [sp, #28]
 800a250:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a254:	931a      	str	r3, [sp, #104]	; 0x68
 800a256:	4654      	mov	r4, sl
 800a258:	2205      	movs	r2, #5
 800a25a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a25e:	4858      	ldr	r0, [pc, #352]	; (800a3c0 <_vfiprintf_r+0x24c>)
 800a260:	f7ff f914 	bl	800948c <memchr>
 800a264:	9a04      	ldr	r2, [sp, #16]
 800a266:	b9d8      	cbnz	r0, 800a2a0 <_vfiprintf_r+0x12c>
 800a268:	06d1      	lsls	r1, r2, #27
 800a26a:	bf44      	itt	mi
 800a26c:	2320      	movmi	r3, #32
 800a26e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a272:	0713      	lsls	r3, r2, #28
 800a274:	bf44      	itt	mi
 800a276:	232b      	movmi	r3, #43	; 0x2b
 800a278:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a27c:	f89a 3000 	ldrb.w	r3, [sl]
 800a280:	2b2a      	cmp	r3, #42	; 0x2a
 800a282:	d015      	beq.n	800a2b0 <_vfiprintf_r+0x13c>
 800a284:	4654      	mov	r4, sl
 800a286:	2000      	movs	r0, #0
 800a288:	f04f 0c0a 	mov.w	ip, #10
 800a28c:	9a07      	ldr	r2, [sp, #28]
 800a28e:	4621      	mov	r1, r4
 800a290:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a294:	3b30      	subs	r3, #48	; 0x30
 800a296:	2b09      	cmp	r3, #9
 800a298:	d94e      	bls.n	800a338 <_vfiprintf_r+0x1c4>
 800a29a:	b1b0      	cbz	r0, 800a2ca <_vfiprintf_r+0x156>
 800a29c:	9207      	str	r2, [sp, #28]
 800a29e:	e014      	b.n	800a2ca <_vfiprintf_r+0x156>
 800a2a0:	eba0 0308 	sub.w	r3, r0, r8
 800a2a4:	fa09 f303 	lsl.w	r3, r9, r3
 800a2a8:	4313      	orrs	r3, r2
 800a2aa:	46a2      	mov	sl, r4
 800a2ac:	9304      	str	r3, [sp, #16]
 800a2ae:	e7d2      	b.n	800a256 <_vfiprintf_r+0xe2>
 800a2b0:	9b03      	ldr	r3, [sp, #12]
 800a2b2:	1d19      	adds	r1, r3, #4
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	9103      	str	r1, [sp, #12]
 800a2b8:	2b00      	cmp	r3, #0
 800a2ba:	bfbb      	ittet	lt
 800a2bc:	425b      	neglt	r3, r3
 800a2be:	f042 0202 	orrlt.w	r2, r2, #2
 800a2c2:	9307      	strge	r3, [sp, #28]
 800a2c4:	9307      	strlt	r3, [sp, #28]
 800a2c6:	bfb8      	it	lt
 800a2c8:	9204      	strlt	r2, [sp, #16]
 800a2ca:	7823      	ldrb	r3, [r4, #0]
 800a2cc:	2b2e      	cmp	r3, #46	; 0x2e
 800a2ce:	d10c      	bne.n	800a2ea <_vfiprintf_r+0x176>
 800a2d0:	7863      	ldrb	r3, [r4, #1]
 800a2d2:	2b2a      	cmp	r3, #42	; 0x2a
 800a2d4:	d135      	bne.n	800a342 <_vfiprintf_r+0x1ce>
 800a2d6:	9b03      	ldr	r3, [sp, #12]
 800a2d8:	3402      	adds	r4, #2
 800a2da:	1d1a      	adds	r2, r3, #4
 800a2dc:	681b      	ldr	r3, [r3, #0]
 800a2de:	9203      	str	r2, [sp, #12]
 800a2e0:	2b00      	cmp	r3, #0
 800a2e2:	bfb8      	it	lt
 800a2e4:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800a2e8:	9305      	str	r3, [sp, #20]
 800a2ea:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a3d0 <_vfiprintf_r+0x25c>
 800a2ee:	2203      	movs	r2, #3
 800a2f0:	4650      	mov	r0, sl
 800a2f2:	7821      	ldrb	r1, [r4, #0]
 800a2f4:	f7ff f8ca 	bl	800948c <memchr>
 800a2f8:	b140      	cbz	r0, 800a30c <_vfiprintf_r+0x198>
 800a2fa:	2340      	movs	r3, #64	; 0x40
 800a2fc:	eba0 000a 	sub.w	r0, r0, sl
 800a300:	fa03 f000 	lsl.w	r0, r3, r0
 800a304:	9b04      	ldr	r3, [sp, #16]
 800a306:	3401      	adds	r4, #1
 800a308:	4303      	orrs	r3, r0
 800a30a:	9304      	str	r3, [sp, #16]
 800a30c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a310:	2206      	movs	r2, #6
 800a312:	482c      	ldr	r0, [pc, #176]	; (800a3c4 <_vfiprintf_r+0x250>)
 800a314:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a318:	f7ff f8b8 	bl	800948c <memchr>
 800a31c:	2800      	cmp	r0, #0
 800a31e:	d03f      	beq.n	800a3a0 <_vfiprintf_r+0x22c>
 800a320:	4b29      	ldr	r3, [pc, #164]	; (800a3c8 <_vfiprintf_r+0x254>)
 800a322:	bb1b      	cbnz	r3, 800a36c <_vfiprintf_r+0x1f8>
 800a324:	9b03      	ldr	r3, [sp, #12]
 800a326:	3307      	adds	r3, #7
 800a328:	f023 0307 	bic.w	r3, r3, #7
 800a32c:	3308      	adds	r3, #8
 800a32e:	9303      	str	r3, [sp, #12]
 800a330:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a332:	443b      	add	r3, r7
 800a334:	9309      	str	r3, [sp, #36]	; 0x24
 800a336:	e767      	b.n	800a208 <_vfiprintf_r+0x94>
 800a338:	460c      	mov	r4, r1
 800a33a:	2001      	movs	r0, #1
 800a33c:	fb0c 3202 	mla	r2, ip, r2, r3
 800a340:	e7a5      	b.n	800a28e <_vfiprintf_r+0x11a>
 800a342:	2300      	movs	r3, #0
 800a344:	f04f 0c0a 	mov.w	ip, #10
 800a348:	4619      	mov	r1, r3
 800a34a:	3401      	adds	r4, #1
 800a34c:	9305      	str	r3, [sp, #20]
 800a34e:	4620      	mov	r0, r4
 800a350:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a354:	3a30      	subs	r2, #48	; 0x30
 800a356:	2a09      	cmp	r2, #9
 800a358:	d903      	bls.n	800a362 <_vfiprintf_r+0x1ee>
 800a35a:	2b00      	cmp	r3, #0
 800a35c:	d0c5      	beq.n	800a2ea <_vfiprintf_r+0x176>
 800a35e:	9105      	str	r1, [sp, #20]
 800a360:	e7c3      	b.n	800a2ea <_vfiprintf_r+0x176>
 800a362:	4604      	mov	r4, r0
 800a364:	2301      	movs	r3, #1
 800a366:	fb0c 2101 	mla	r1, ip, r1, r2
 800a36a:	e7f0      	b.n	800a34e <_vfiprintf_r+0x1da>
 800a36c:	ab03      	add	r3, sp, #12
 800a36e:	9300      	str	r3, [sp, #0]
 800a370:	462a      	mov	r2, r5
 800a372:	4630      	mov	r0, r6
 800a374:	4b15      	ldr	r3, [pc, #84]	; (800a3cc <_vfiprintf_r+0x258>)
 800a376:	a904      	add	r1, sp, #16
 800a378:	f7fd fe1e 	bl	8007fb8 <_printf_float>
 800a37c:	4607      	mov	r7, r0
 800a37e:	1c78      	adds	r0, r7, #1
 800a380:	d1d6      	bne.n	800a330 <_vfiprintf_r+0x1bc>
 800a382:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a384:	07d9      	lsls	r1, r3, #31
 800a386:	d405      	bmi.n	800a394 <_vfiprintf_r+0x220>
 800a388:	89ab      	ldrh	r3, [r5, #12]
 800a38a:	059a      	lsls	r2, r3, #22
 800a38c:	d402      	bmi.n	800a394 <_vfiprintf_r+0x220>
 800a38e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a390:	f000 faaf 	bl	800a8f2 <__retarget_lock_release_recursive>
 800a394:	89ab      	ldrh	r3, [r5, #12]
 800a396:	065b      	lsls	r3, r3, #25
 800a398:	f53f af12 	bmi.w	800a1c0 <_vfiprintf_r+0x4c>
 800a39c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a39e:	e711      	b.n	800a1c4 <_vfiprintf_r+0x50>
 800a3a0:	ab03      	add	r3, sp, #12
 800a3a2:	9300      	str	r3, [sp, #0]
 800a3a4:	462a      	mov	r2, r5
 800a3a6:	4630      	mov	r0, r6
 800a3a8:	4b08      	ldr	r3, [pc, #32]	; (800a3cc <_vfiprintf_r+0x258>)
 800a3aa:	a904      	add	r1, sp, #16
 800a3ac:	f7fe f8a0 	bl	80084f0 <_printf_i>
 800a3b0:	e7e4      	b.n	800a37c <_vfiprintf_r+0x208>
 800a3b2:	bf00      	nop
 800a3b4:	0800c5a4 	.word	0x0800c5a4
 800a3b8:	0800c5c4 	.word	0x0800c5c4
 800a3bc:	0800c584 	.word	0x0800c584
 800a3c0:	0800c42c 	.word	0x0800c42c
 800a3c4:	0800c436 	.word	0x0800c436
 800a3c8:	08007fb9 	.word	0x08007fb9
 800a3cc:	0800a14f 	.word	0x0800a14f
 800a3d0:	0800c432 	.word	0x0800c432

0800a3d4 <__swbuf_r>:
 800a3d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a3d6:	460e      	mov	r6, r1
 800a3d8:	4614      	mov	r4, r2
 800a3da:	4605      	mov	r5, r0
 800a3dc:	b118      	cbz	r0, 800a3e6 <__swbuf_r+0x12>
 800a3de:	6983      	ldr	r3, [r0, #24]
 800a3e0:	b90b      	cbnz	r3, 800a3e6 <__swbuf_r+0x12>
 800a3e2:	f000 f9e7 	bl	800a7b4 <__sinit>
 800a3e6:	4b21      	ldr	r3, [pc, #132]	; (800a46c <__swbuf_r+0x98>)
 800a3e8:	429c      	cmp	r4, r3
 800a3ea:	d12b      	bne.n	800a444 <__swbuf_r+0x70>
 800a3ec:	686c      	ldr	r4, [r5, #4]
 800a3ee:	69a3      	ldr	r3, [r4, #24]
 800a3f0:	60a3      	str	r3, [r4, #8]
 800a3f2:	89a3      	ldrh	r3, [r4, #12]
 800a3f4:	071a      	lsls	r2, r3, #28
 800a3f6:	d52f      	bpl.n	800a458 <__swbuf_r+0x84>
 800a3f8:	6923      	ldr	r3, [r4, #16]
 800a3fa:	b36b      	cbz	r3, 800a458 <__swbuf_r+0x84>
 800a3fc:	6923      	ldr	r3, [r4, #16]
 800a3fe:	6820      	ldr	r0, [r4, #0]
 800a400:	b2f6      	uxtb	r6, r6
 800a402:	1ac0      	subs	r0, r0, r3
 800a404:	6963      	ldr	r3, [r4, #20]
 800a406:	4637      	mov	r7, r6
 800a408:	4283      	cmp	r3, r0
 800a40a:	dc04      	bgt.n	800a416 <__swbuf_r+0x42>
 800a40c:	4621      	mov	r1, r4
 800a40e:	4628      	mov	r0, r5
 800a410:	f000 f93c 	bl	800a68c <_fflush_r>
 800a414:	bb30      	cbnz	r0, 800a464 <__swbuf_r+0x90>
 800a416:	68a3      	ldr	r3, [r4, #8]
 800a418:	3001      	adds	r0, #1
 800a41a:	3b01      	subs	r3, #1
 800a41c:	60a3      	str	r3, [r4, #8]
 800a41e:	6823      	ldr	r3, [r4, #0]
 800a420:	1c5a      	adds	r2, r3, #1
 800a422:	6022      	str	r2, [r4, #0]
 800a424:	701e      	strb	r6, [r3, #0]
 800a426:	6963      	ldr	r3, [r4, #20]
 800a428:	4283      	cmp	r3, r0
 800a42a:	d004      	beq.n	800a436 <__swbuf_r+0x62>
 800a42c:	89a3      	ldrh	r3, [r4, #12]
 800a42e:	07db      	lsls	r3, r3, #31
 800a430:	d506      	bpl.n	800a440 <__swbuf_r+0x6c>
 800a432:	2e0a      	cmp	r6, #10
 800a434:	d104      	bne.n	800a440 <__swbuf_r+0x6c>
 800a436:	4621      	mov	r1, r4
 800a438:	4628      	mov	r0, r5
 800a43a:	f000 f927 	bl	800a68c <_fflush_r>
 800a43e:	b988      	cbnz	r0, 800a464 <__swbuf_r+0x90>
 800a440:	4638      	mov	r0, r7
 800a442:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a444:	4b0a      	ldr	r3, [pc, #40]	; (800a470 <__swbuf_r+0x9c>)
 800a446:	429c      	cmp	r4, r3
 800a448:	d101      	bne.n	800a44e <__swbuf_r+0x7a>
 800a44a:	68ac      	ldr	r4, [r5, #8]
 800a44c:	e7cf      	b.n	800a3ee <__swbuf_r+0x1a>
 800a44e:	4b09      	ldr	r3, [pc, #36]	; (800a474 <__swbuf_r+0xa0>)
 800a450:	429c      	cmp	r4, r3
 800a452:	bf08      	it	eq
 800a454:	68ec      	ldreq	r4, [r5, #12]
 800a456:	e7ca      	b.n	800a3ee <__swbuf_r+0x1a>
 800a458:	4621      	mov	r1, r4
 800a45a:	4628      	mov	r0, r5
 800a45c:	f000 f81a 	bl	800a494 <__swsetup_r>
 800a460:	2800      	cmp	r0, #0
 800a462:	d0cb      	beq.n	800a3fc <__swbuf_r+0x28>
 800a464:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800a468:	e7ea      	b.n	800a440 <__swbuf_r+0x6c>
 800a46a:	bf00      	nop
 800a46c:	0800c5a4 	.word	0x0800c5a4
 800a470:	0800c5c4 	.word	0x0800c5c4
 800a474:	0800c584 	.word	0x0800c584

0800a478 <__ascii_wctomb>:
 800a478:	4603      	mov	r3, r0
 800a47a:	4608      	mov	r0, r1
 800a47c:	b141      	cbz	r1, 800a490 <__ascii_wctomb+0x18>
 800a47e:	2aff      	cmp	r2, #255	; 0xff
 800a480:	d904      	bls.n	800a48c <__ascii_wctomb+0x14>
 800a482:	228a      	movs	r2, #138	; 0x8a
 800a484:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a488:	601a      	str	r2, [r3, #0]
 800a48a:	4770      	bx	lr
 800a48c:	2001      	movs	r0, #1
 800a48e:	700a      	strb	r2, [r1, #0]
 800a490:	4770      	bx	lr
	...

0800a494 <__swsetup_r>:
 800a494:	4b32      	ldr	r3, [pc, #200]	; (800a560 <__swsetup_r+0xcc>)
 800a496:	b570      	push	{r4, r5, r6, lr}
 800a498:	681d      	ldr	r5, [r3, #0]
 800a49a:	4606      	mov	r6, r0
 800a49c:	460c      	mov	r4, r1
 800a49e:	b125      	cbz	r5, 800a4aa <__swsetup_r+0x16>
 800a4a0:	69ab      	ldr	r3, [r5, #24]
 800a4a2:	b913      	cbnz	r3, 800a4aa <__swsetup_r+0x16>
 800a4a4:	4628      	mov	r0, r5
 800a4a6:	f000 f985 	bl	800a7b4 <__sinit>
 800a4aa:	4b2e      	ldr	r3, [pc, #184]	; (800a564 <__swsetup_r+0xd0>)
 800a4ac:	429c      	cmp	r4, r3
 800a4ae:	d10f      	bne.n	800a4d0 <__swsetup_r+0x3c>
 800a4b0:	686c      	ldr	r4, [r5, #4]
 800a4b2:	89a3      	ldrh	r3, [r4, #12]
 800a4b4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a4b8:	0719      	lsls	r1, r3, #28
 800a4ba:	d42c      	bmi.n	800a516 <__swsetup_r+0x82>
 800a4bc:	06dd      	lsls	r5, r3, #27
 800a4be:	d411      	bmi.n	800a4e4 <__swsetup_r+0x50>
 800a4c0:	2309      	movs	r3, #9
 800a4c2:	6033      	str	r3, [r6, #0]
 800a4c4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a4c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a4cc:	81a3      	strh	r3, [r4, #12]
 800a4ce:	e03e      	b.n	800a54e <__swsetup_r+0xba>
 800a4d0:	4b25      	ldr	r3, [pc, #148]	; (800a568 <__swsetup_r+0xd4>)
 800a4d2:	429c      	cmp	r4, r3
 800a4d4:	d101      	bne.n	800a4da <__swsetup_r+0x46>
 800a4d6:	68ac      	ldr	r4, [r5, #8]
 800a4d8:	e7eb      	b.n	800a4b2 <__swsetup_r+0x1e>
 800a4da:	4b24      	ldr	r3, [pc, #144]	; (800a56c <__swsetup_r+0xd8>)
 800a4dc:	429c      	cmp	r4, r3
 800a4de:	bf08      	it	eq
 800a4e0:	68ec      	ldreq	r4, [r5, #12]
 800a4e2:	e7e6      	b.n	800a4b2 <__swsetup_r+0x1e>
 800a4e4:	0758      	lsls	r0, r3, #29
 800a4e6:	d512      	bpl.n	800a50e <__swsetup_r+0x7a>
 800a4e8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a4ea:	b141      	cbz	r1, 800a4fe <__swsetup_r+0x6a>
 800a4ec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a4f0:	4299      	cmp	r1, r3
 800a4f2:	d002      	beq.n	800a4fa <__swsetup_r+0x66>
 800a4f4:	4630      	mov	r0, r6
 800a4f6:	f7ff fb75 	bl	8009be4 <_free_r>
 800a4fa:	2300      	movs	r3, #0
 800a4fc:	6363      	str	r3, [r4, #52]	; 0x34
 800a4fe:	89a3      	ldrh	r3, [r4, #12]
 800a500:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a504:	81a3      	strh	r3, [r4, #12]
 800a506:	2300      	movs	r3, #0
 800a508:	6063      	str	r3, [r4, #4]
 800a50a:	6923      	ldr	r3, [r4, #16]
 800a50c:	6023      	str	r3, [r4, #0]
 800a50e:	89a3      	ldrh	r3, [r4, #12]
 800a510:	f043 0308 	orr.w	r3, r3, #8
 800a514:	81a3      	strh	r3, [r4, #12]
 800a516:	6923      	ldr	r3, [r4, #16]
 800a518:	b94b      	cbnz	r3, 800a52e <__swsetup_r+0x9a>
 800a51a:	89a3      	ldrh	r3, [r4, #12]
 800a51c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a520:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a524:	d003      	beq.n	800a52e <__swsetup_r+0x9a>
 800a526:	4621      	mov	r1, r4
 800a528:	4630      	mov	r0, r6
 800a52a:	f000 fa07 	bl	800a93c <__smakebuf_r>
 800a52e:	89a0      	ldrh	r0, [r4, #12]
 800a530:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a534:	f010 0301 	ands.w	r3, r0, #1
 800a538:	d00a      	beq.n	800a550 <__swsetup_r+0xbc>
 800a53a:	2300      	movs	r3, #0
 800a53c:	60a3      	str	r3, [r4, #8]
 800a53e:	6963      	ldr	r3, [r4, #20]
 800a540:	425b      	negs	r3, r3
 800a542:	61a3      	str	r3, [r4, #24]
 800a544:	6923      	ldr	r3, [r4, #16]
 800a546:	b943      	cbnz	r3, 800a55a <__swsetup_r+0xc6>
 800a548:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a54c:	d1ba      	bne.n	800a4c4 <__swsetup_r+0x30>
 800a54e:	bd70      	pop	{r4, r5, r6, pc}
 800a550:	0781      	lsls	r1, r0, #30
 800a552:	bf58      	it	pl
 800a554:	6963      	ldrpl	r3, [r4, #20]
 800a556:	60a3      	str	r3, [r4, #8]
 800a558:	e7f4      	b.n	800a544 <__swsetup_r+0xb0>
 800a55a:	2000      	movs	r0, #0
 800a55c:	e7f7      	b.n	800a54e <__swsetup_r+0xba>
 800a55e:	bf00      	nop
 800a560:	2000001c 	.word	0x2000001c
 800a564:	0800c5a4 	.word	0x0800c5a4
 800a568:	0800c5c4 	.word	0x0800c5c4
 800a56c:	0800c584 	.word	0x0800c584

0800a570 <abort>:
 800a570:	2006      	movs	r0, #6
 800a572:	b508      	push	{r3, lr}
 800a574:	f000 fa52 	bl	800aa1c <raise>
 800a578:	2001      	movs	r0, #1
 800a57a:	f7f9 f958 	bl	800382e <_exit>
	...

0800a580 <__sflush_r>:
 800a580:	898a      	ldrh	r2, [r1, #12]
 800a582:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a586:	4605      	mov	r5, r0
 800a588:	0710      	lsls	r0, r2, #28
 800a58a:	460c      	mov	r4, r1
 800a58c:	d458      	bmi.n	800a640 <__sflush_r+0xc0>
 800a58e:	684b      	ldr	r3, [r1, #4]
 800a590:	2b00      	cmp	r3, #0
 800a592:	dc05      	bgt.n	800a5a0 <__sflush_r+0x20>
 800a594:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a596:	2b00      	cmp	r3, #0
 800a598:	dc02      	bgt.n	800a5a0 <__sflush_r+0x20>
 800a59a:	2000      	movs	r0, #0
 800a59c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a5a0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a5a2:	2e00      	cmp	r6, #0
 800a5a4:	d0f9      	beq.n	800a59a <__sflush_r+0x1a>
 800a5a6:	2300      	movs	r3, #0
 800a5a8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a5ac:	682f      	ldr	r7, [r5, #0]
 800a5ae:	602b      	str	r3, [r5, #0]
 800a5b0:	d032      	beq.n	800a618 <__sflush_r+0x98>
 800a5b2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a5b4:	89a3      	ldrh	r3, [r4, #12]
 800a5b6:	075a      	lsls	r2, r3, #29
 800a5b8:	d505      	bpl.n	800a5c6 <__sflush_r+0x46>
 800a5ba:	6863      	ldr	r3, [r4, #4]
 800a5bc:	1ac0      	subs	r0, r0, r3
 800a5be:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a5c0:	b10b      	cbz	r3, 800a5c6 <__sflush_r+0x46>
 800a5c2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a5c4:	1ac0      	subs	r0, r0, r3
 800a5c6:	2300      	movs	r3, #0
 800a5c8:	4602      	mov	r2, r0
 800a5ca:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a5cc:	4628      	mov	r0, r5
 800a5ce:	6a21      	ldr	r1, [r4, #32]
 800a5d0:	47b0      	blx	r6
 800a5d2:	1c43      	adds	r3, r0, #1
 800a5d4:	89a3      	ldrh	r3, [r4, #12]
 800a5d6:	d106      	bne.n	800a5e6 <__sflush_r+0x66>
 800a5d8:	6829      	ldr	r1, [r5, #0]
 800a5da:	291d      	cmp	r1, #29
 800a5dc:	d82c      	bhi.n	800a638 <__sflush_r+0xb8>
 800a5de:	4a2a      	ldr	r2, [pc, #168]	; (800a688 <__sflush_r+0x108>)
 800a5e0:	40ca      	lsrs	r2, r1
 800a5e2:	07d6      	lsls	r6, r2, #31
 800a5e4:	d528      	bpl.n	800a638 <__sflush_r+0xb8>
 800a5e6:	2200      	movs	r2, #0
 800a5e8:	6062      	str	r2, [r4, #4]
 800a5ea:	6922      	ldr	r2, [r4, #16]
 800a5ec:	04d9      	lsls	r1, r3, #19
 800a5ee:	6022      	str	r2, [r4, #0]
 800a5f0:	d504      	bpl.n	800a5fc <__sflush_r+0x7c>
 800a5f2:	1c42      	adds	r2, r0, #1
 800a5f4:	d101      	bne.n	800a5fa <__sflush_r+0x7a>
 800a5f6:	682b      	ldr	r3, [r5, #0]
 800a5f8:	b903      	cbnz	r3, 800a5fc <__sflush_r+0x7c>
 800a5fa:	6560      	str	r0, [r4, #84]	; 0x54
 800a5fc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a5fe:	602f      	str	r7, [r5, #0]
 800a600:	2900      	cmp	r1, #0
 800a602:	d0ca      	beq.n	800a59a <__sflush_r+0x1a>
 800a604:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a608:	4299      	cmp	r1, r3
 800a60a:	d002      	beq.n	800a612 <__sflush_r+0x92>
 800a60c:	4628      	mov	r0, r5
 800a60e:	f7ff fae9 	bl	8009be4 <_free_r>
 800a612:	2000      	movs	r0, #0
 800a614:	6360      	str	r0, [r4, #52]	; 0x34
 800a616:	e7c1      	b.n	800a59c <__sflush_r+0x1c>
 800a618:	6a21      	ldr	r1, [r4, #32]
 800a61a:	2301      	movs	r3, #1
 800a61c:	4628      	mov	r0, r5
 800a61e:	47b0      	blx	r6
 800a620:	1c41      	adds	r1, r0, #1
 800a622:	d1c7      	bne.n	800a5b4 <__sflush_r+0x34>
 800a624:	682b      	ldr	r3, [r5, #0]
 800a626:	2b00      	cmp	r3, #0
 800a628:	d0c4      	beq.n	800a5b4 <__sflush_r+0x34>
 800a62a:	2b1d      	cmp	r3, #29
 800a62c:	d001      	beq.n	800a632 <__sflush_r+0xb2>
 800a62e:	2b16      	cmp	r3, #22
 800a630:	d101      	bne.n	800a636 <__sflush_r+0xb6>
 800a632:	602f      	str	r7, [r5, #0]
 800a634:	e7b1      	b.n	800a59a <__sflush_r+0x1a>
 800a636:	89a3      	ldrh	r3, [r4, #12]
 800a638:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a63c:	81a3      	strh	r3, [r4, #12]
 800a63e:	e7ad      	b.n	800a59c <__sflush_r+0x1c>
 800a640:	690f      	ldr	r7, [r1, #16]
 800a642:	2f00      	cmp	r7, #0
 800a644:	d0a9      	beq.n	800a59a <__sflush_r+0x1a>
 800a646:	0793      	lsls	r3, r2, #30
 800a648:	bf18      	it	ne
 800a64a:	2300      	movne	r3, #0
 800a64c:	680e      	ldr	r6, [r1, #0]
 800a64e:	bf08      	it	eq
 800a650:	694b      	ldreq	r3, [r1, #20]
 800a652:	eba6 0807 	sub.w	r8, r6, r7
 800a656:	600f      	str	r7, [r1, #0]
 800a658:	608b      	str	r3, [r1, #8]
 800a65a:	f1b8 0f00 	cmp.w	r8, #0
 800a65e:	dd9c      	ble.n	800a59a <__sflush_r+0x1a>
 800a660:	4643      	mov	r3, r8
 800a662:	463a      	mov	r2, r7
 800a664:	4628      	mov	r0, r5
 800a666:	6a21      	ldr	r1, [r4, #32]
 800a668:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a66a:	47b0      	blx	r6
 800a66c:	2800      	cmp	r0, #0
 800a66e:	dc06      	bgt.n	800a67e <__sflush_r+0xfe>
 800a670:	89a3      	ldrh	r3, [r4, #12]
 800a672:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a676:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a67a:	81a3      	strh	r3, [r4, #12]
 800a67c:	e78e      	b.n	800a59c <__sflush_r+0x1c>
 800a67e:	4407      	add	r7, r0
 800a680:	eba8 0800 	sub.w	r8, r8, r0
 800a684:	e7e9      	b.n	800a65a <__sflush_r+0xda>
 800a686:	bf00      	nop
 800a688:	20400001 	.word	0x20400001

0800a68c <_fflush_r>:
 800a68c:	b538      	push	{r3, r4, r5, lr}
 800a68e:	690b      	ldr	r3, [r1, #16]
 800a690:	4605      	mov	r5, r0
 800a692:	460c      	mov	r4, r1
 800a694:	b913      	cbnz	r3, 800a69c <_fflush_r+0x10>
 800a696:	2500      	movs	r5, #0
 800a698:	4628      	mov	r0, r5
 800a69a:	bd38      	pop	{r3, r4, r5, pc}
 800a69c:	b118      	cbz	r0, 800a6a6 <_fflush_r+0x1a>
 800a69e:	6983      	ldr	r3, [r0, #24]
 800a6a0:	b90b      	cbnz	r3, 800a6a6 <_fflush_r+0x1a>
 800a6a2:	f000 f887 	bl	800a7b4 <__sinit>
 800a6a6:	4b14      	ldr	r3, [pc, #80]	; (800a6f8 <_fflush_r+0x6c>)
 800a6a8:	429c      	cmp	r4, r3
 800a6aa:	d11b      	bne.n	800a6e4 <_fflush_r+0x58>
 800a6ac:	686c      	ldr	r4, [r5, #4]
 800a6ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a6b2:	2b00      	cmp	r3, #0
 800a6b4:	d0ef      	beq.n	800a696 <_fflush_r+0xa>
 800a6b6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a6b8:	07d0      	lsls	r0, r2, #31
 800a6ba:	d404      	bmi.n	800a6c6 <_fflush_r+0x3a>
 800a6bc:	0599      	lsls	r1, r3, #22
 800a6be:	d402      	bmi.n	800a6c6 <_fflush_r+0x3a>
 800a6c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a6c2:	f000 f915 	bl	800a8f0 <__retarget_lock_acquire_recursive>
 800a6c6:	4628      	mov	r0, r5
 800a6c8:	4621      	mov	r1, r4
 800a6ca:	f7ff ff59 	bl	800a580 <__sflush_r>
 800a6ce:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a6d0:	4605      	mov	r5, r0
 800a6d2:	07da      	lsls	r2, r3, #31
 800a6d4:	d4e0      	bmi.n	800a698 <_fflush_r+0xc>
 800a6d6:	89a3      	ldrh	r3, [r4, #12]
 800a6d8:	059b      	lsls	r3, r3, #22
 800a6da:	d4dd      	bmi.n	800a698 <_fflush_r+0xc>
 800a6dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a6de:	f000 f908 	bl	800a8f2 <__retarget_lock_release_recursive>
 800a6e2:	e7d9      	b.n	800a698 <_fflush_r+0xc>
 800a6e4:	4b05      	ldr	r3, [pc, #20]	; (800a6fc <_fflush_r+0x70>)
 800a6e6:	429c      	cmp	r4, r3
 800a6e8:	d101      	bne.n	800a6ee <_fflush_r+0x62>
 800a6ea:	68ac      	ldr	r4, [r5, #8]
 800a6ec:	e7df      	b.n	800a6ae <_fflush_r+0x22>
 800a6ee:	4b04      	ldr	r3, [pc, #16]	; (800a700 <_fflush_r+0x74>)
 800a6f0:	429c      	cmp	r4, r3
 800a6f2:	bf08      	it	eq
 800a6f4:	68ec      	ldreq	r4, [r5, #12]
 800a6f6:	e7da      	b.n	800a6ae <_fflush_r+0x22>
 800a6f8:	0800c5a4 	.word	0x0800c5a4
 800a6fc:	0800c5c4 	.word	0x0800c5c4
 800a700:	0800c584 	.word	0x0800c584

0800a704 <std>:
 800a704:	2300      	movs	r3, #0
 800a706:	b510      	push	{r4, lr}
 800a708:	4604      	mov	r4, r0
 800a70a:	e9c0 3300 	strd	r3, r3, [r0]
 800a70e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a712:	6083      	str	r3, [r0, #8]
 800a714:	8181      	strh	r1, [r0, #12]
 800a716:	6643      	str	r3, [r0, #100]	; 0x64
 800a718:	81c2      	strh	r2, [r0, #14]
 800a71a:	6183      	str	r3, [r0, #24]
 800a71c:	4619      	mov	r1, r3
 800a71e:	2208      	movs	r2, #8
 800a720:	305c      	adds	r0, #92	; 0x5c
 800a722:	f7fd fba3 	bl	8007e6c <memset>
 800a726:	4b05      	ldr	r3, [pc, #20]	; (800a73c <std+0x38>)
 800a728:	6224      	str	r4, [r4, #32]
 800a72a:	6263      	str	r3, [r4, #36]	; 0x24
 800a72c:	4b04      	ldr	r3, [pc, #16]	; (800a740 <std+0x3c>)
 800a72e:	62a3      	str	r3, [r4, #40]	; 0x28
 800a730:	4b04      	ldr	r3, [pc, #16]	; (800a744 <std+0x40>)
 800a732:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a734:	4b04      	ldr	r3, [pc, #16]	; (800a748 <std+0x44>)
 800a736:	6323      	str	r3, [r4, #48]	; 0x30
 800a738:	bd10      	pop	{r4, pc}
 800a73a:	bf00      	nop
 800a73c:	0800aa55 	.word	0x0800aa55
 800a740:	0800aa77 	.word	0x0800aa77
 800a744:	0800aaaf 	.word	0x0800aaaf
 800a748:	0800aad3 	.word	0x0800aad3

0800a74c <_cleanup_r>:
 800a74c:	4901      	ldr	r1, [pc, #4]	; (800a754 <_cleanup_r+0x8>)
 800a74e:	f000 b8af 	b.w	800a8b0 <_fwalk_reent>
 800a752:	bf00      	nop
 800a754:	0800a68d 	.word	0x0800a68d

0800a758 <__sfmoreglue>:
 800a758:	b570      	push	{r4, r5, r6, lr}
 800a75a:	2568      	movs	r5, #104	; 0x68
 800a75c:	1e4a      	subs	r2, r1, #1
 800a75e:	4355      	muls	r5, r2
 800a760:	460e      	mov	r6, r1
 800a762:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a766:	f7ff fa89 	bl	8009c7c <_malloc_r>
 800a76a:	4604      	mov	r4, r0
 800a76c:	b140      	cbz	r0, 800a780 <__sfmoreglue+0x28>
 800a76e:	2100      	movs	r1, #0
 800a770:	e9c0 1600 	strd	r1, r6, [r0]
 800a774:	300c      	adds	r0, #12
 800a776:	60a0      	str	r0, [r4, #8]
 800a778:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a77c:	f7fd fb76 	bl	8007e6c <memset>
 800a780:	4620      	mov	r0, r4
 800a782:	bd70      	pop	{r4, r5, r6, pc}

0800a784 <__sfp_lock_acquire>:
 800a784:	4801      	ldr	r0, [pc, #4]	; (800a78c <__sfp_lock_acquire+0x8>)
 800a786:	f000 b8b3 	b.w	800a8f0 <__retarget_lock_acquire_recursive>
 800a78a:	bf00      	nop
 800a78c:	20001d10 	.word	0x20001d10

0800a790 <__sfp_lock_release>:
 800a790:	4801      	ldr	r0, [pc, #4]	; (800a798 <__sfp_lock_release+0x8>)
 800a792:	f000 b8ae 	b.w	800a8f2 <__retarget_lock_release_recursive>
 800a796:	bf00      	nop
 800a798:	20001d10 	.word	0x20001d10

0800a79c <__sinit_lock_acquire>:
 800a79c:	4801      	ldr	r0, [pc, #4]	; (800a7a4 <__sinit_lock_acquire+0x8>)
 800a79e:	f000 b8a7 	b.w	800a8f0 <__retarget_lock_acquire_recursive>
 800a7a2:	bf00      	nop
 800a7a4:	20001d0b 	.word	0x20001d0b

0800a7a8 <__sinit_lock_release>:
 800a7a8:	4801      	ldr	r0, [pc, #4]	; (800a7b0 <__sinit_lock_release+0x8>)
 800a7aa:	f000 b8a2 	b.w	800a8f2 <__retarget_lock_release_recursive>
 800a7ae:	bf00      	nop
 800a7b0:	20001d0b 	.word	0x20001d0b

0800a7b4 <__sinit>:
 800a7b4:	b510      	push	{r4, lr}
 800a7b6:	4604      	mov	r4, r0
 800a7b8:	f7ff fff0 	bl	800a79c <__sinit_lock_acquire>
 800a7bc:	69a3      	ldr	r3, [r4, #24]
 800a7be:	b11b      	cbz	r3, 800a7c8 <__sinit+0x14>
 800a7c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a7c4:	f7ff bff0 	b.w	800a7a8 <__sinit_lock_release>
 800a7c8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a7cc:	6523      	str	r3, [r4, #80]	; 0x50
 800a7ce:	4b13      	ldr	r3, [pc, #76]	; (800a81c <__sinit+0x68>)
 800a7d0:	4a13      	ldr	r2, [pc, #76]	; (800a820 <__sinit+0x6c>)
 800a7d2:	681b      	ldr	r3, [r3, #0]
 800a7d4:	62a2      	str	r2, [r4, #40]	; 0x28
 800a7d6:	42a3      	cmp	r3, r4
 800a7d8:	bf08      	it	eq
 800a7da:	2301      	moveq	r3, #1
 800a7dc:	4620      	mov	r0, r4
 800a7de:	bf08      	it	eq
 800a7e0:	61a3      	streq	r3, [r4, #24]
 800a7e2:	f000 f81f 	bl	800a824 <__sfp>
 800a7e6:	6060      	str	r0, [r4, #4]
 800a7e8:	4620      	mov	r0, r4
 800a7ea:	f000 f81b 	bl	800a824 <__sfp>
 800a7ee:	60a0      	str	r0, [r4, #8]
 800a7f0:	4620      	mov	r0, r4
 800a7f2:	f000 f817 	bl	800a824 <__sfp>
 800a7f6:	2200      	movs	r2, #0
 800a7f8:	2104      	movs	r1, #4
 800a7fa:	60e0      	str	r0, [r4, #12]
 800a7fc:	6860      	ldr	r0, [r4, #4]
 800a7fe:	f7ff ff81 	bl	800a704 <std>
 800a802:	2201      	movs	r2, #1
 800a804:	2109      	movs	r1, #9
 800a806:	68a0      	ldr	r0, [r4, #8]
 800a808:	f7ff ff7c 	bl	800a704 <std>
 800a80c:	2202      	movs	r2, #2
 800a80e:	2112      	movs	r1, #18
 800a810:	68e0      	ldr	r0, [r4, #12]
 800a812:	f7ff ff77 	bl	800a704 <std>
 800a816:	2301      	movs	r3, #1
 800a818:	61a3      	str	r3, [r4, #24]
 800a81a:	e7d1      	b.n	800a7c0 <__sinit+0xc>
 800a81c:	0800c200 	.word	0x0800c200
 800a820:	0800a74d 	.word	0x0800a74d

0800a824 <__sfp>:
 800a824:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a826:	4607      	mov	r7, r0
 800a828:	f7ff ffac 	bl	800a784 <__sfp_lock_acquire>
 800a82c:	4b1e      	ldr	r3, [pc, #120]	; (800a8a8 <__sfp+0x84>)
 800a82e:	681e      	ldr	r6, [r3, #0]
 800a830:	69b3      	ldr	r3, [r6, #24]
 800a832:	b913      	cbnz	r3, 800a83a <__sfp+0x16>
 800a834:	4630      	mov	r0, r6
 800a836:	f7ff ffbd 	bl	800a7b4 <__sinit>
 800a83a:	3648      	adds	r6, #72	; 0x48
 800a83c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a840:	3b01      	subs	r3, #1
 800a842:	d503      	bpl.n	800a84c <__sfp+0x28>
 800a844:	6833      	ldr	r3, [r6, #0]
 800a846:	b30b      	cbz	r3, 800a88c <__sfp+0x68>
 800a848:	6836      	ldr	r6, [r6, #0]
 800a84a:	e7f7      	b.n	800a83c <__sfp+0x18>
 800a84c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a850:	b9d5      	cbnz	r5, 800a888 <__sfp+0x64>
 800a852:	4b16      	ldr	r3, [pc, #88]	; (800a8ac <__sfp+0x88>)
 800a854:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a858:	60e3      	str	r3, [r4, #12]
 800a85a:	6665      	str	r5, [r4, #100]	; 0x64
 800a85c:	f000 f847 	bl	800a8ee <__retarget_lock_init_recursive>
 800a860:	f7ff ff96 	bl	800a790 <__sfp_lock_release>
 800a864:	2208      	movs	r2, #8
 800a866:	4629      	mov	r1, r5
 800a868:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a86c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a870:	6025      	str	r5, [r4, #0]
 800a872:	61a5      	str	r5, [r4, #24]
 800a874:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a878:	f7fd faf8 	bl	8007e6c <memset>
 800a87c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a880:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a884:	4620      	mov	r0, r4
 800a886:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a888:	3468      	adds	r4, #104	; 0x68
 800a88a:	e7d9      	b.n	800a840 <__sfp+0x1c>
 800a88c:	2104      	movs	r1, #4
 800a88e:	4638      	mov	r0, r7
 800a890:	f7ff ff62 	bl	800a758 <__sfmoreglue>
 800a894:	4604      	mov	r4, r0
 800a896:	6030      	str	r0, [r6, #0]
 800a898:	2800      	cmp	r0, #0
 800a89a:	d1d5      	bne.n	800a848 <__sfp+0x24>
 800a89c:	f7ff ff78 	bl	800a790 <__sfp_lock_release>
 800a8a0:	230c      	movs	r3, #12
 800a8a2:	603b      	str	r3, [r7, #0]
 800a8a4:	e7ee      	b.n	800a884 <__sfp+0x60>
 800a8a6:	bf00      	nop
 800a8a8:	0800c200 	.word	0x0800c200
 800a8ac:	ffff0001 	.word	0xffff0001

0800a8b0 <_fwalk_reent>:
 800a8b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a8b4:	4606      	mov	r6, r0
 800a8b6:	4688      	mov	r8, r1
 800a8b8:	2700      	movs	r7, #0
 800a8ba:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a8be:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a8c2:	f1b9 0901 	subs.w	r9, r9, #1
 800a8c6:	d505      	bpl.n	800a8d4 <_fwalk_reent+0x24>
 800a8c8:	6824      	ldr	r4, [r4, #0]
 800a8ca:	2c00      	cmp	r4, #0
 800a8cc:	d1f7      	bne.n	800a8be <_fwalk_reent+0xe>
 800a8ce:	4638      	mov	r0, r7
 800a8d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a8d4:	89ab      	ldrh	r3, [r5, #12]
 800a8d6:	2b01      	cmp	r3, #1
 800a8d8:	d907      	bls.n	800a8ea <_fwalk_reent+0x3a>
 800a8da:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a8de:	3301      	adds	r3, #1
 800a8e0:	d003      	beq.n	800a8ea <_fwalk_reent+0x3a>
 800a8e2:	4629      	mov	r1, r5
 800a8e4:	4630      	mov	r0, r6
 800a8e6:	47c0      	blx	r8
 800a8e8:	4307      	orrs	r7, r0
 800a8ea:	3568      	adds	r5, #104	; 0x68
 800a8ec:	e7e9      	b.n	800a8c2 <_fwalk_reent+0x12>

0800a8ee <__retarget_lock_init_recursive>:
 800a8ee:	4770      	bx	lr

0800a8f0 <__retarget_lock_acquire_recursive>:
 800a8f0:	4770      	bx	lr

0800a8f2 <__retarget_lock_release_recursive>:
 800a8f2:	4770      	bx	lr

0800a8f4 <__swhatbuf_r>:
 800a8f4:	b570      	push	{r4, r5, r6, lr}
 800a8f6:	460e      	mov	r6, r1
 800a8f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a8fc:	4614      	mov	r4, r2
 800a8fe:	2900      	cmp	r1, #0
 800a900:	461d      	mov	r5, r3
 800a902:	b096      	sub	sp, #88	; 0x58
 800a904:	da07      	bge.n	800a916 <__swhatbuf_r+0x22>
 800a906:	2300      	movs	r3, #0
 800a908:	602b      	str	r3, [r5, #0]
 800a90a:	89b3      	ldrh	r3, [r6, #12]
 800a90c:	061a      	lsls	r2, r3, #24
 800a90e:	d410      	bmi.n	800a932 <__swhatbuf_r+0x3e>
 800a910:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a914:	e00e      	b.n	800a934 <__swhatbuf_r+0x40>
 800a916:	466a      	mov	r2, sp
 800a918:	f000 f902 	bl	800ab20 <_fstat_r>
 800a91c:	2800      	cmp	r0, #0
 800a91e:	dbf2      	blt.n	800a906 <__swhatbuf_r+0x12>
 800a920:	9a01      	ldr	r2, [sp, #4]
 800a922:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a926:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a92a:	425a      	negs	r2, r3
 800a92c:	415a      	adcs	r2, r3
 800a92e:	602a      	str	r2, [r5, #0]
 800a930:	e7ee      	b.n	800a910 <__swhatbuf_r+0x1c>
 800a932:	2340      	movs	r3, #64	; 0x40
 800a934:	2000      	movs	r0, #0
 800a936:	6023      	str	r3, [r4, #0]
 800a938:	b016      	add	sp, #88	; 0x58
 800a93a:	bd70      	pop	{r4, r5, r6, pc}

0800a93c <__smakebuf_r>:
 800a93c:	898b      	ldrh	r3, [r1, #12]
 800a93e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a940:	079d      	lsls	r5, r3, #30
 800a942:	4606      	mov	r6, r0
 800a944:	460c      	mov	r4, r1
 800a946:	d507      	bpl.n	800a958 <__smakebuf_r+0x1c>
 800a948:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a94c:	6023      	str	r3, [r4, #0]
 800a94e:	6123      	str	r3, [r4, #16]
 800a950:	2301      	movs	r3, #1
 800a952:	6163      	str	r3, [r4, #20]
 800a954:	b002      	add	sp, #8
 800a956:	bd70      	pop	{r4, r5, r6, pc}
 800a958:	466a      	mov	r2, sp
 800a95a:	ab01      	add	r3, sp, #4
 800a95c:	f7ff ffca 	bl	800a8f4 <__swhatbuf_r>
 800a960:	9900      	ldr	r1, [sp, #0]
 800a962:	4605      	mov	r5, r0
 800a964:	4630      	mov	r0, r6
 800a966:	f7ff f989 	bl	8009c7c <_malloc_r>
 800a96a:	b948      	cbnz	r0, 800a980 <__smakebuf_r+0x44>
 800a96c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a970:	059a      	lsls	r2, r3, #22
 800a972:	d4ef      	bmi.n	800a954 <__smakebuf_r+0x18>
 800a974:	f023 0303 	bic.w	r3, r3, #3
 800a978:	f043 0302 	orr.w	r3, r3, #2
 800a97c:	81a3      	strh	r3, [r4, #12]
 800a97e:	e7e3      	b.n	800a948 <__smakebuf_r+0xc>
 800a980:	4b0d      	ldr	r3, [pc, #52]	; (800a9b8 <__smakebuf_r+0x7c>)
 800a982:	62b3      	str	r3, [r6, #40]	; 0x28
 800a984:	89a3      	ldrh	r3, [r4, #12]
 800a986:	6020      	str	r0, [r4, #0]
 800a988:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a98c:	81a3      	strh	r3, [r4, #12]
 800a98e:	9b00      	ldr	r3, [sp, #0]
 800a990:	6120      	str	r0, [r4, #16]
 800a992:	6163      	str	r3, [r4, #20]
 800a994:	9b01      	ldr	r3, [sp, #4]
 800a996:	b15b      	cbz	r3, 800a9b0 <__smakebuf_r+0x74>
 800a998:	4630      	mov	r0, r6
 800a99a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a99e:	f000 f8d1 	bl	800ab44 <_isatty_r>
 800a9a2:	b128      	cbz	r0, 800a9b0 <__smakebuf_r+0x74>
 800a9a4:	89a3      	ldrh	r3, [r4, #12]
 800a9a6:	f023 0303 	bic.w	r3, r3, #3
 800a9aa:	f043 0301 	orr.w	r3, r3, #1
 800a9ae:	81a3      	strh	r3, [r4, #12]
 800a9b0:	89a0      	ldrh	r0, [r4, #12]
 800a9b2:	4305      	orrs	r5, r0
 800a9b4:	81a5      	strh	r5, [r4, #12]
 800a9b6:	e7cd      	b.n	800a954 <__smakebuf_r+0x18>
 800a9b8:	0800a74d 	.word	0x0800a74d

0800a9bc <_malloc_usable_size_r>:
 800a9bc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a9c0:	1f18      	subs	r0, r3, #4
 800a9c2:	2b00      	cmp	r3, #0
 800a9c4:	bfbc      	itt	lt
 800a9c6:	580b      	ldrlt	r3, [r1, r0]
 800a9c8:	18c0      	addlt	r0, r0, r3
 800a9ca:	4770      	bx	lr

0800a9cc <_raise_r>:
 800a9cc:	291f      	cmp	r1, #31
 800a9ce:	b538      	push	{r3, r4, r5, lr}
 800a9d0:	4604      	mov	r4, r0
 800a9d2:	460d      	mov	r5, r1
 800a9d4:	d904      	bls.n	800a9e0 <_raise_r+0x14>
 800a9d6:	2316      	movs	r3, #22
 800a9d8:	6003      	str	r3, [r0, #0]
 800a9da:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a9de:	bd38      	pop	{r3, r4, r5, pc}
 800a9e0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a9e2:	b112      	cbz	r2, 800a9ea <_raise_r+0x1e>
 800a9e4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a9e8:	b94b      	cbnz	r3, 800a9fe <_raise_r+0x32>
 800a9ea:	4620      	mov	r0, r4
 800a9ec:	f000 f830 	bl	800aa50 <_getpid_r>
 800a9f0:	462a      	mov	r2, r5
 800a9f2:	4601      	mov	r1, r0
 800a9f4:	4620      	mov	r0, r4
 800a9f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a9fa:	f000 b817 	b.w	800aa2c <_kill_r>
 800a9fe:	2b01      	cmp	r3, #1
 800aa00:	d00a      	beq.n	800aa18 <_raise_r+0x4c>
 800aa02:	1c59      	adds	r1, r3, #1
 800aa04:	d103      	bne.n	800aa0e <_raise_r+0x42>
 800aa06:	2316      	movs	r3, #22
 800aa08:	6003      	str	r3, [r0, #0]
 800aa0a:	2001      	movs	r0, #1
 800aa0c:	e7e7      	b.n	800a9de <_raise_r+0x12>
 800aa0e:	2400      	movs	r4, #0
 800aa10:	4628      	mov	r0, r5
 800aa12:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800aa16:	4798      	blx	r3
 800aa18:	2000      	movs	r0, #0
 800aa1a:	e7e0      	b.n	800a9de <_raise_r+0x12>

0800aa1c <raise>:
 800aa1c:	4b02      	ldr	r3, [pc, #8]	; (800aa28 <raise+0xc>)
 800aa1e:	4601      	mov	r1, r0
 800aa20:	6818      	ldr	r0, [r3, #0]
 800aa22:	f7ff bfd3 	b.w	800a9cc <_raise_r>
 800aa26:	bf00      	nop
 800aa28:	2000001c 	.word	0x2000001c

0800aa2c <_kill_r>:
 800aa2c:	b538      	push	{r3, r4, r5, lr}
 800aa2e:	2300      	movs	r3, #0
 800aa30:	4d06      	ldr	r5, [pc, #24]	; (800aa4c <_kill_r+0x20>)
 800aa32:	4604      	mov	r4, r0
 800aa34:	4608      	mov	r0, r1
 800aa36:	4611      	mov	r1, r2
 800aa38:	602b      	str	r3, [r5, #0]
 800aa3a:	f7f8 fee8 	bl	800380e <_kill>
 800aa3e:	1c43      	adds	r3, r0, #1
 800aa40:	d102      	bne.n	800aa48 <_kill_r+0x1c>
 800aa42:	682b      	ldr	r3, [r5, #0]
 800aa44:	b103      	cbz	r3, 800aa48 <_kill_r+0x1c>
 800aa46:	6023      	str	r3, [r4, #0]
 800aa48:	bd38      	pop	{r3, r4, r5, pc}
 800aa4a:	bf00      	nop
 800aa4c:	20001d04 	.word	0x20001d04

0800aa50 <_getpid_r>:
 800aa50:	f7f8 bed6 	b.w	8003800 <_getpid>

0800aa54 <__sread>:
 800aa54:	b510      	push	{r4, lr}
 800aa56:	460c      	mov	r4, r1
 800aa58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aa5c:	f000 f894 	bl	800ab88 <_read_r>
 800aa60:	2800      	cmp	r0, #0
 800aa62:	bfab      	itete	ge
 800aa64:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800aa66:	89a3      	ldrhlt	r3, [r4, #12]
 800aa68:	181b      	addge	r3, r3, r0
 800aa6a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800aa6e:	bfac      	ite	ge
 800aa70:	6563      	strge	r3, [r4, #84]	; 0x54
 800aa72:	81a3      	strhlt	r3, [r4, #12]
 800aa74:	bd10      	pop	{r4, pc}

0800aa76 <__swrite>:
 800aa76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aa7a:	461f      	mov	r7, r3
 800aa7c:	898b      	ldrh	r3, [r1, #12]
 800aa7e:	4605      	mov	r5, r0
 800aa80:	05db      	lsls	r3, r3, #23
 800aa82:	460c      	mov	r4, r1
 800aa84:	4616      	mov	r6, r2
 800aa86:	d505      	bpl.n	800aa94 <__swrite+0x1e>
 800aa88:	2302      	movs	r3, #2
 800aa8a:	2200      	movs	r2, #0
 800aa8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aa90:	f000 f868 	bl	800ab64 <_lseek_r>
 800aa94:	89a3      	ldrh	r3, [r4, #12]
 800aa96:	4632      	mov	r2, r6
 800aa98:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800aa9c:	81a3      	strh	r3, [r4, #12]
 800aa9e:	4628      	mov	r0, r5
 800aaa0:	463b      	mov	r3, r7
 800aaa2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800aaa6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800aaaa:	f000 b817 	b.w	800aadc <_write_r>

0800aaae <__sseek>:
 800aaae:	b510      	push	{r4, lr}
 800aab0:	460c      	mov	r4, r1
 800aab2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aab6:	f000 f855 	bl	800ab64 <_lseek_r>
 800aaba:	1c43      	adds	r3, r0, #1
 800aabc:	89a3      	ldrh	r3, [r4, #12]
 800aabe:	bf15      	itete	ne
 800aac0:	6560      	strne	r0, [r4, #84]	; 0x54
 800aac2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800aac6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800aaca:	81a3      	strheq	r3, [r4, #12]
 800aacc:	bf18      	it	ne
 800aace:	81a3      	strhne	r3, [r4, #12]
 800aad0:	bd10      	pop	{r4, pc}

0800aad2 <__sclose>:
 800aad2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aad6:	f000 b813 	b.w	800ab00 <_close_r>
	...

0800aadc <_write_r>:
 800aadc:	b538      	push	{r3, r4, r5, lr}
 800aade:	4604      	mov	r4, r0
 800aae0:	4608      	mov	r0, r1
 800aae2:	4611      	mov	r1, r2
 800aae4:	2200      	movs	r2, #0
 800aae6:	4d05      	ldr	r5, [pc, #20]	; (800aafc <_write_r+0x20>)
 800aae8:	602a      	str	r2, [r5, #0]
 800aaea:	461a      	mov	r2, r3
 800aaec:	f7f8 fec6 	bl	800387c <_write>
 800aaf0:	1c43      	adds	r3, r0, #1
 800aaf2:	d102      	bne.n	800aafa <_write_r+0x1e>
 800aaf4:	682b      	ldr	r3, [r5, #0]
 800aaf6:	b103      	cbz	r3, 800aafa <_write_r+0x1e>
 800aaf8:	6023      	str	r3, [r4, #0]
 800aafa:	bd38      	pop	{r3, r4, r5, pc}
 800aafc:	20001d04 	.word	0x20001d04

0800ab00 <_close_r>:
 800ab00:	b538      	push	{r3, r4, r5, lr}
 800ab02:	2300      	movs	r3, #0
 800ab04:	4d05      	ldr	r5, [pc, #20]	; (800ab1c <_close_r+0x1c>)
 800ab06:	4604      	mov	r4, r0
 800ab08:	4608      	mov	r0, r1
 800ab0a:	602b      	str	r3, [r5, #0]
 800ab0c:	f7f8 fed2 	bl	80038b4 <_close>
 800ab10:	1c43      	adds	r3, r0, #1
 800ab12:	d102      	bne.n	800ab1a <_close_r+0x1a>
 800ab14:	682b      	ldr	r3, [r5, #0]
 800ab16:	b103      	cbz	r3, 800ab1a <_close_r+0x1a>
 800ab18:	6023      	str	r3, [r4, #0]
 800ab1a:	bd38      	pop	{r3, r4, r5, pc}
 800ab1c:	20001d04 	.word	0x20001d04

0800ab20 <_fstat_r>:
 800ab20:	b538      	push	{r3, r4, r5, lr}
 800ab22:	2300      	movs	r3, #0
 800ab24:	4d06      	ldr	r5, [pc, #24]	; (800ab40 <_fstat_r+0x20>)
 800ab26:	4604      	mov	r4, r0
 800ab28:	4608      	mov	r0, r1
 800ab2a:	4611      	mov	r1, r2
 800ab2c:	602b      	str	r3, [r5, #0]
 800ab2e:	f7f8 fecc 	bl	80038ca <_fstat>
 800ab32:	1c43      	adds	r3, r0, #1
 800ab34:	d102      	bne.n	800ab3c <_fstat_r+0x1c>
 800ab36:	682b      	ldr	r3, [r5, #0]
 800ab38:	b103      	cbz	r3, 800ab3c <_fstat_r+0x1c>
 800ab3a:	6023      	str	r3, [r4, #0]
 800ab3c:	bd38      	pop	{r3, r4, r5, pc}
 800ab3e:	bf00      	nop
 800ab40:	20001d04 	.word	0x20001d04

0800ab44 <_isatty_r>:
 800ab44:	b538      	push	{r3, r4, r5, lr}
 800ab46:	2300      	movs	r3, #0
 800ab48:	4d05      	ldr	r5, [pc, #20]	; (800ab60 <_isatty_r+0x1c>)
 800ab4a:	4604      	mov	r4, r0
 800ab4c:	4608      	mov	r0, r1
 800ab4e:	602b      	str	r3, [r5, #0]
 800ab50:	f7f8 feca 	bl	80038e8 <_isatty>
 800ab54:	1c43      	adds	r3, r0, #1
 800ab56:	d102      	bne.n	800ab5e <_isatty_r+0x1a>
 800ab58:	682b      	ldr	r3, [r5, #0]
 800ab5a:	b103      	cbz	r3, 800ab5e <_isatty_r+0x1a>
 800ab5c:	6023      	str	r3, [r4, #0]
 800ab5e:	bd38      	pop	{r3, r4, r5, pc}
 800ab60:	20001d04 	.word	0x20001d04

0800ab64 <_lseek_r>:
 800ab64:	b538      	push	{r3, r4, r5, lr}
 800ab66:	4604      	mov	r4, r0
 800ab68:	4608      	mov	r0, r1
 800ab6a:	4611      	mov	r1, r2
 800ab6c:	2200      	movs	r2, #0
 800ab6e:	4d05      	ldr	r5, [pc, #20]	; (800ab84 <_lseek_r+0x20>)
 800ab70:	602a      	str	r2, [r5, #0]
 800ab72:	461a      	mov	r2, r3
 800ab74:	f7f8 fec2 	bl	80038fc <_lseek>
 800ab78:	1c43      	adds	r3, r0, #1
 800ab7a:	d102      	bne.n	800ab82 <_lseek_r+0x1e>
 800ab7c:	682b      	ldr	r3, [r5, #0]
 800ab7e:	b103      	cbz	r3, 800ab82 <_lseek_r+0x1e>
 800ab80:	6023      	str	r3, [r4, #0]
 800ab82:	bd38      	pop	{r3, r4, r5, pc}
 800ab84:	20001d04 	.word	0x20001d04

0800ab88 <_read_r>:
 800ab88:	b538      	push	{r3, r4, r5, lr}
 800ab8a:	4604      	mov	r4, r0
 800ab8c:	4608      	mov	r0, r1
 800ab8e:	4611      	mov	r1, r2
 800ab90:	2200      	movs	r2, #0
 800ab92:	4d05      	ldr	r5, [pc, #20]	; (800aba8 <_read_r+0x20>)
 800ab94:	602a      	str	r2, [r5, #0]
 800ab96:	461a      	mov	r2, r3
 800ab98:	f7f8 fe53 	bl	8003842 <_read>
 800ab9c:	1c43      	adds	r3, r0, #1
 800ab9e:	d102      	bne.n	800aba6 <_read_r+0x1e>
 800aba0:	682b      	ldr	r3, [r5, #0]
 800aba2:	b103      	cbz	r3, 800aba6 <_read_r+0x1e>
 800aba4:	6023      	str	r3, [r4, #0]
 800aba6:	bd38      	pop	{r3, r4, r5, pc}
 800aba8:	20001d04 	.word	0x20001d04

0800abac <_init>:
 800abac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800abae:	bf00      	nop
 800abb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800abb2:	bc08      	pop	{r3}
 800abb4:	469e      	mov	lr, r3
 800abb6:	4770      	bx	lr

0800abb8 <_fini>:
 800abb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800abba:	bf00      	nop
 800abbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800abbe:	bc08      	pop	{r3}
 800abc0:	469e      	mov	lr, r3
 800abc2:	4770      	bx	lr
